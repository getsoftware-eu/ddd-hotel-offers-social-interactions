/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});
//# sourceMappingURL=jquery.min.map
/*
 AngularJS v1.4.3
 (c) 2010-2015 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(O,U,t){'use strict';function J(b){return function(){var a=arguments[0],c;c="["+(b?b+":":"")+a+"] http://errors.angularjs.org/1.4.3/"+(b?b+"/":"")+a;for(a=1;a<arguments.length;a++){c=c+(1==a?"?":"&")+"p"+(a-1)+"=";var d=encodeURIComponent,e;e=arguments[a];e="function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof e?"undefined":"string"!=typeof e?JSON.stringify(e):e;c+=d(e)}return Error(c)}}function Ea(b){if(null==b||Wa(b))return!1;var a="length"in Object(b)&&b.length;
return b.nodeType===qa&&a?!0:L(b)||G(b)||0===a||"number"===typeof a&&0<a&&a-1 in b}function m(b,a,c){var d,e;if(b)if(z(b))for(d in b)"prototype"==d||"length"==d||"name"==d||b.hasOwnProperty&&!b.hasOwnProperty(d)||a.call(c,b[d],d,b);else if(G(b)||Ea(b)){var f="object"!==typeof b;d=0;for(e=b.length;d<e;d++)(f||d in b)&&a.call(c,b[d],d,b)}else if(b.forEach&&b.forEach!==m)b.forEach(a,c,b);else if(nc(b))for(d in b)a.call(c,b[d],d,b);else if("function"===typeof b.hasOwnProperty)for(d in b)b.hasOwnProperty(d)&&
a.call(c,b[d],d,b);else for(d in b)Xa.call(b,d)&&a.call(c,b[d],d,b);return b}function oc(b,a,c){for(var d=Object.keys(b).sort(),e=0;e<d.length;e++)a.call(c,b[d[e]],d[e]);return d}function pc(b){return function(a,c){b(c,a)}}function Ud(){return++nb}function qc(b,a){a?b.$$hashKey=a:delete b.$$hashKey}function Nb(b,a,c){for(var d=b.$$hashKey,e=0,f=a.length;e<f;++e){var g=a[e];if(H(g)||z(g))for(var h=Object.keys(g),l=0,k=h.length;l<k;l++){var n=h[l],r=g[n];c&&H(r)?aa(r)?b[n]=new Date(r.valueOf()):(H(b[n])||
(b[n]=G(r)?[]:{}),Nb(b[n],[r],!0)):b[n]=r}}qc(b,d);return b}function P(b){return Nb(b,za.call(arguments,1),!1)}function Vd(b){return Nb(b,za.call(arguments,1),!0)}function W(b){return parseInt(b,10)}function Ob(b,a){return P(Object.create(b),a)}function v(){}function Ya(b){return b}function ra(b){return function(){return b}}function rc(b){return z(b.toString)&&b.toString!==Object.prototype.toString}function A(b){return"undefined"===typeof b}function w(b){return"undefined"!==typeof b}function H(b){return null!==
b&&"object"===typeof b}function nc(b){return null!==b&&"object"===typeof b&&!sc(b)}function L(b){return"string"===typeof b}function V(b){return"number"===typeof b}function aa(b){return"[object Date]"===sa.call(b)}function z(b){return"function"===typeof b}function Za(b){return"[object RegExp]"===sa.call(b)}function Wa(b){return b&&b.window===b}function $a(b){return b&&b.$evalAsync&&b.$watch}function ab(b){return"boolean"===typeof b}function tc(b){return!(!b||!(b.nodeName||b.prop&&b.attr&&b.find))}
function Wd(b){var a={};b=b.split(",");var c;for(c=0;c<b.length;c++)a[b[c]]=!0;return a}function ta(b){return M(b.nodeName||b[0]&&b[0].nodeName)}function bb(b,a){var c=b.indexOf(a);0<=c&&b.splice(c,1);return c}function fa(b,a,c,d){if(Wa(b)||$a(b))throw Fa("cpws");if(uc.test(sa.call(a)))throw Fa("cpta");if(a){if(b===a)throw Fa("cpi");c=c||[];d=d||[];H(b)&&(c.push(b),d.push(a));var e;if(G(b))for(e=a.length=0;e<b.length;e++)a.push(fa(b[e],null,c,d));else{var f=a.$$hashKey;G(a)?a.length=0:m(a,function(b,
c){delete a[c]});if(nc(b))for(e in b)a[e]=fa(b[e],null,c,d);else if(b&&"function"===typeof b.hasOwnProperty)for(e in b)b.hasOwnProperty(e)&&(a[e]=fa(b[e],null,c,d));else for(e in b)Xa.call(b,e)&&(a[e]=fa(b[e],null,c,d));qc(a,f)}}else if(a=b,H(b)){if(c&&-1!==(f=c.indexOf(b)))return d[f];if(G(b))return fa(b,[],c,d);if(uc.test(sa.call(b)))a=new b.constructor(b);else if(aa(b))a=new Date(b.getTime());else if(Za(b))a=new RegExp(b.source,b.toString().match(/[^\/]*$/)[0]),a.lastIndex=b.lastIndex;else return e=
Object.create(sc(b)),fa(b,e,c,d);d&&(c.push(b),d.push(a))}return a}function ia(b,a){if(G(b)){a=a||[];for(var c=0,d=b.length;c<d;c++)a[c]=b[c]}else if(H(b))for(c in a=a||{},b)if("$"!==c.charAt(0)||"$"!==c.charAt(1))a[c]=b[c];return a||b}function ka(b,a){if(b===a)return!0;if(null===b||null===a)return!1;if(b!==b&&a!==a)return!0;var c=typeof b,d;if(c==typeof a&&"object"==c)if(G(b)){if(!G(a))return!1;if((c=b.length)==a.length){for(d=0;d<c;d++)if(!ka(b[d],a[d]))return!1;return!0}}else{if(aa(b))return aa(a)?
ka(b.getTime(),a.getTime()):!1;if(Za(b))return Za(a)?b.toString()==a.toString():!1;if($a(b)||$a(a)||Wa(b)||Wa(a)||G(a)||aa(a)||Za(a))return!1;c=ga();for(d in b)if("$"!==d.charAt(0)&&!z(b[d])){if(!ka(b[d],a[d]))return!1;c[d]=!0}for(d in a)if(!(d in c||"$"===d.charAt(0)||a[d]===t||z(a[d])))return!1;return!0}return!1}function cb(b,a,c){return b.concat(za.call(a,c))}function vc(b,a){var c=2<arguments.length?za.call(arguments,2):[];return!z(a)||a instanceof RegExp?a:c.length?function(){return arguments.length?
a.apply(b,cb(c,arguments,0)):a.apply(b,c)}:function(){return arguments.length?a.apply(b,arguments):a.call(b)}}function Xd(b,a){var c=a;"string"===typeof b&&"$"===b.charAt(0)&&"$"===b.charAt(1)?c=t:Wa(a)?c="$WINDOW":a&&U===a?c="$DOCUMENT":$a(a)&&(c="$SCOPE");return c}function db(b,a){if("undefined"===typeof b)return t;V(a)||(a=a?2:null);return JSON.stringify(b,Xd,a)}function wc(b){return L(b)?JSON.parse(b):b}function xc(b,a){var c=Date.parse("Jan 01, 1970 00:00:00 "+b)/6E4;return isNaN(c)?a:c}function Pb(b,
a,c){c=c?-1:1;var d=xc(a,b.getTimezoneOffset());a=b;b=c*(d-b.getTimezoneOffset());a=new Date(a.getTime());a.setMinutes(a.getMinutes()+b);return a}function ua(b){b=y(b).clone();try{b.empty()}catch(a){}var c=y("<div>").append(b).html();try{return b[0].nodeType===Na?M(c):c.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(a,b){return"<"+M(b)})}catch(d){return M(c)}}function yc(b){try{return decodeURIComponent(b)}catch(a){}}function zc(b){var a={},c,d;m((b||"").split("&"),function(b){b&&(c=b.replace(/\+/g,
"%20").split("="),d=yc(c[0]),w(d)&&(b=w(c[1])?yc(c[1]):!0,Xa.call(a,d)?G(a[d])?a[d].push(b):a[d]=[a[d],b]:a[d]=b))});return a}function Qb(b){var a=[];m(b,function(b,d){G(b)?m(b,function(b){a.push(ma(d,!0)+(!0===b?"":"="+ma(b,!0)))}):a.push(ma(d,!0)+(!0===b?"":"="+ma(b,!0)))});return a.length?a.join("&"):""}function ob(b){return ma(b,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function ma(b,a){return encodeURIComponent(b).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,
"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,a?"%20":"+")}function Yd(b,a){var c,d,e=Oa.length;for(d=0;d<e;++d)if(c=Oa[d]+a,L(c=b.getAttribute(c)))return c;return null}function Zd(b,a){var c,d,e={};m(Oa,function(a){a+="app";!c&&b.hasAttribute&&b.hasAttribute(a)&&(c=b,d=b.getAttribute(a))});m(Oa,function(a){a+="app";var e;!c&&(e=b.querySelector("["+a.replace(":","\\:")+"]"))&&(c=e,d=e.getAttribute(a))});c&&(e.strictDi=null!==Yd(c,"strict-di"),a(c,d?[d]:[],e))}function Ac(b,a,c){H(c)||
(c={});c=P({strictDi:!1},c);var d=function(){b=y(b);if(b.injector()){var d=b[0]===U?"document":ua(b);throw Fa("btstrpd",d.replace(/</,"&lt;").replace(/>/,"&gt;"));}a=a||[];a.unshift(["$provide",function(a){a.value("$rootElement",b)}]);c.debugInfoEnabled&&a.push(["$compileProvider",function(a){a.debugInfoEnabled(!0)}]);a.unshift("ng");d=eb(a,c.strictDi);d.invoke(["$rootScope","$rootElement","$compile","$injector",function(a,b,c,d){a.$apply(function(){b.data("$injector",d);c(b)(a)})}]);return d},e=
/^NG_ENABLE_DEBUG_INFO!/,f=/^NG_DEFER_BOOTSTRAP!/;O&&e.test(O.name)&&(c.debugInfoEnabled=!0,O.name=O.name.replace(e,""));if(O&&!f.test(O.name))return d();O.name=O.name.replace(f,"");ca.resumeBootstrap=function(b){m(b,function(b){a.push(b)});return d()};z(ca.resumeDeferredBootstrap)&&ca.resumeDeferredBootstrap()}function $d(){O.name="NG_ENABLE_DEBUG_INFO!"+O.name;O.location.reload()}function ae(b){b=ca.element(b).injector();if(!b)throw Fa("test");return b.get("$$testability")}function Bc(b,a){a=a||
"_";return b.replace(be,function(b,d){return(d?a:"")+b.toLowerCase()})}function ce(){var b;if(!Cc){var a=pb();la=O.jQuery;w(a)&&(la=null===a?t:O[a]);la&&la.fn.on?(y=la,P(la.fn,{scope:Pa.scope,isolateScope:Pa.isolateScope,controller:Pa.controller,injector:Pa.injector,inheritedData:Pa.inheritedData}),b=la.cleanData,la.cleanData=function(a){var d;if(Rb)Rb=!1;else for(var e=0,f;null!=(f=a[e]);e++)(d=la._data(f,"events"))&&d.$destroy&&la(f).triggerHandler("$destroy");b(a)}):y=Q;ca.element=y;Cc=!0}}function Sb(b,
a,c){if(!b)throw Fa("areq",a||"?",c||"required");return b}function Qa(b,a,c){c&&G(b)&&(b=b[b.length-1]);Sb(z(b),a,"not a function, got "+(b&&"object"===typeof b?b.constructor.name||"Object":typeof b));return b}function Ra(b,a){if("hasOwnProperty"===b)throw Fa("badname",a);}function Dc(b,a,c){if(!a)return b;a=a.split(".");for(var d,e=b,f=a.length,g=0;g<f;g++)d=a[g],b&&(b=(e=b)[d]);return!c&&z(b)?vc(e,b):b}function qb(b){var a=b[0];b=b[b.length-1];var c=[a];do{a=a.nextSibling;if(!a)break;c.push(a)}while(a!==
b);return y(c)}function ga(){return Object.create(null)}function de(b){function a(a,b,c){return a[b]||(a[b]=c())}var c=J("$injector"),d=J("ng");b=a(b,"angular",Object);b.$$minErr=b.$$minErr||J;return a(b,"module",function(){var b={};return function(f,g,h){if("hasOwnProperty"===f)throw d("badname","module");g&&b.hasOwnProperty(f)&&(b[f]=null);return a(b,f,function(){function a(b,c,e,f){f||(f=d);return function(){f[e||"push"]([b,c,arguments]);return C}}function b(a,c){return function(b,e){e&&z(e)&&
(e.$$moduleName=f);d.push([a,c,arguments]);return C}}if(!g)throw c("nomod",f);var d=[],e=[],s=[],x=a("$injector","invoke","push",e),C={_invokeQueue:d,_configBlocks:e,_runBlocks:s,requires:g,name:f,provider:b("$provide","provider"),factory:b("$provide","factory"),service:b("$provide","service"),value:a("$provide","value"),constant:a("$provide","constant","unshift"),decorator:b("$provide","decorator"),animation:b("$animateProvider","register"),filter:b("$filterProvider","register"),controller:b("$controllerProvider",
"register"),directive:b("$compileProvider","directive"),config:x,run:function(a){s.push(a);return this}};h&&x(h);return C})}})}function ee(b){P(b,{bootstrap:Ac,copy:fa,extend:P,merge:Vd,equals:ka,element:y,forEach:m,injector:eb,noop:v,bind:vc,toJson:db,fromJson:wc,identity:Ya,isUndefined:A,isDefined:w,isString:L,isFunction:z,isObject:H,isNumber:V,isElement:tc,isArray:G,version:fe,isDate:aa,lowercase:M,uppercase:rb,callbacks:{counter:0},getTestability:ae,$$minErr:J,$$csp:fb,reloadWithDebugInfo:$d});
gb=de(O);try{gb("ngLocale")}catch(a){gb("ngLocale",[]).provider("$locale",ge)}gb("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:he});a.provider("$compile",Ec).directive({a:ie,input:Fc,textarea:Fc,form:je,script:ke,select:le,style:me,option:ne,ngBind:oe,ngBindHtml:pe,ngBindTemplate:qe,ngClass:re,ngClassEven:se,ngClassOdd:te,ngCloak:ue,ngController:ve,ngForm:we,ngHide:xe,ngIf:ye,ngInclude:ze,ngInit:Ae,ngNonBindable:Be,ngPluralize:Ce,ngRepeat:De,ngShow:Ee,ngStyle:Fe,ngSwitch:Ge,
ngSwitchWhen:He,ngSwitchDefault:Ie,ngOptions:Je,ngTransclude:Ke,ngModel:Le,ngList:Me,ngChange:Ne,pattern:Gc,ngPattern:Gc,required:Hc,ngRequired:Hc,minlength:Ic,ngMinlength:Ic,maxlength:Jc,ngMaxlength:Jc,ngValue:Oe,ngModelOptions:Pe}).directive({ngInclude:Qe}).directive(sb).directive(Kc);a.provider({$anchorScroll:Re,$animate:Se,$$animateQueue:Te,$$AnimateRunner:Ue,$browser:Ve,$cacheFactory:We,$controller:Xe,$document:Ye,$exceptionHandler:Ze,$filter:Lc,$interpolate:$e,$interval:af,$http:bf,$httpParamSerializer:cf,
$httpParamSerializerJQLike:df,$httpBackend:ef,$location:ff,$log:gf,$parse:hf,$rootScope:jf,$q:kf,$$q:lf,$sce:mf,$sceDelegate:nf,$sniffer:of,$templateCache:pf,$templateRequest:qf,$$testability:rf,$timeout:sf,$window:tf,$$rAF:uf,$$jqLite:vf,$$HashMap:wf,$$cookieReader:xf})}])}function hb(b){return b.replace(yf,function(a,b,d,e){return e?d.toUpperCase():d}).replace(zf,"Moz$1")}function Mc(b){b=b.nodeType;return b===qa||!b||9===b}function Nc(b,a){var c,d,e=a.createDocumentFragment(),f=[];if(Tb.test(b)){c=
c||e.appendChild(a.createElement("div"));d=(Af.exec(b)||["",""])[1].toLowerCase();d=na[d]||na._default;c.innerHTML=d[1]+b.replace(Bf,"<$1></$2>")+d[2];for(d=d[0];d--;)c=c.lastChild;f=cb(f,c.childNodes);c=e.firstChild;c.textContent=""}else f.push(a.createTextNode(b));e.textContent="";e.innerHTML="";m(f,function(a){e.appendChild(a)});return e}function Q(b){if(b instanceof Q)return b;var a;L(b)&&(b=R(b),a=!0);if(!(this instanceof Q)){if(a&&"<"!=b.charAt(0))throw Ub("nosel");return new Q(b)}if(a){a=U;
var c;b=(c=Cf.exec(b))?[a.createElement(c[1])]:(c=Nc(b,a))?c.childNodes:[]}Oc(this,b)}function Vb(b){return b.cloneNode(!0)}function tb(b,a){a||ub(b);if(b.querySelectorAll)for(var c=b.querySelectorAll("*"),d=0,e=c.length;d<e;d++)ub(c[d])}function Pc(b,a,c,d){if(w(d))throw Ub("offargs");var e=(d=vb(b))&&d.events,f=d&&d.handle;if(f)if(a)m(a.split(" "),function(a){if(w(c)){var d=e[a];bb(d||[],c);if(d&&0<d.length)return}b.removeEventListener(a,f,!1);delete e[a]});else for(a in e)"$destroy"!==a&&b.removeEventListener(a,
f,!1),delete e[a]}function ub(b,a){var c=b.ng339,d=c&&ib[c];d&&(a?delete d.data[a]:(d.handle&&(d.events.$destroy&&d.handle({},"$destroy"),Pc(b)),delete ib[c],b.ng339=t))}function vb(b,a){var c=b.ng339,c=c&&ib[c];a&&!c&&(b.ng339=c=++Df,c=ib[c]={events:{},data:{},handle:t});return c}function Wb(b,a,c){if(Mc(b)){var d=w(c),e=!d&&a&&!H(a),f=!a;b=(b=vb(b,!e))&&b.data;if(d)b[a]=c;else{if(f)return b;if(e)return b&&b[a];P(b,a)}}}function wb(b,a){return b.getAttribute?-1<(" "+(b.getAttribute("class")||"")+
" ").replace(/[\n\t]/g," ").indexOf(" "+a+" "):!1}function xb(b,a){a&&b.setAttribute&&m(a.split(" "),function(a){b.setAttribute("class",R((" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+R(a)+" "," ")))})}function yb(b,a){if(a&&b.setAttribute){var c=(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");m(a.split(" "),function(a){a=R(a);-1===c.indexOf(" "+a+" ")&&(c+=a+" ")});b.setAttribute("class",R(c))}}function Oc(b,a){if(a)if(a.nodeType)b[b.length++]=a;else{var c=
a.length;if("number"===typeof c&&a.window!==a){if(c)for(var d=0;d<c;d++)b[b.length++]=a[d]}else b[b.length++]=a}}function Qc(b,a){return zb(b,"$"+(a||"ngController")+"Controller")}function zb(b,a,c){9==b.nodeType&&(b=b.documentElement);for(a=G(a)?a:[a];b;){for(var d=0,e=a.length;d<e;d++)if((c=y.data(b,a[d]))!==t)return c;b=b.parentNode||11===b.nodeType&&b.host}}function Rc(b){for(tb(b,!0);b.firstChild;)b.removeChild(b.firstChild)}function Xb(b,a){a||tb(b);var c=b.parentNode;c&&c.removeChild(b)}function Ef(b,
a){a=a||O;if("complete"===a.document.readyState)a.setTimeout(b);else y(a).on("load",b)}function Sc(b,a){var c=Ab[a.toLowerCase()];return c&&Tc[ta(b)]&&c}function Ff(b,a){var c=b.nodeName;return("INPUT"===c||"TEXTAREA"===c)&&Uc[a]}function Gf(b,a){var c=function(c,e){c.isDefaultPrevented=function(){return c.defaultPrevented};var f=a[e||c.type],g=f?f.length:0;if(g){if(A(c.immediatePropagationStopped)){var h=c.stopImmediatePropagation;c.stopImmediatePropagation=function(){c.immediatePropagationStopped=
!0;c.stopPropagation&&c.stopPropagation();h&&h.call(c)}}c.isImmediatePropagationStopped=function(){return!0===c.immediatePropagationStopped};1<g&&(f=ia(f));for(var l=0;l<g;l++)c.isImmediatePropagationStopped()||f[l].call(b,c)}};c.elem=b;return c}function vf(){this.$get=function(){return P(Q,{hasClass:function(b,a){b.attr&&(b=b[0]);return wb(b,a)},addClass:function(b,a){b.attr&&(b=b[0]);return yb(b,a)},removeClass:function(b,a){b.attr&&(b=b[0]);return xb(b,a)}})}}function Ga(b,a){var c=b&&b.$$hashKey;
if(c)return"function"===typeof c&&(c=b.$$hashKey()),c;c=typeof b;return c="function"==c||"object"==c&&null!==b?b.$$hashKey=c+":"+(a||Ud)():c+":"+b}function Sa(b,a){if(a){var c=0;this.nextUid=function(){return++c}}m(b,this.put,this)}function Hf(b){return(b=b.toString().replace(Vc,"").match(Wc))?"function("+(b[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function eb(b,a){function c(a){return function(b,c){if(H(b))m(b,pc(a));else return a(b,c)}}function d(a,b){Ra(a,"service");if(z(b)||G(b))b=s.instantiate(b);
if(!b.$get)throw Ha("pget",a);return r[a+"Provider"]=b}function e(a,b){return function(){var c=C.invoke(b,this);if(A(c))throw Ha("undef",a);return c}}function f(a,b,c){return d(a,{$get:!1!==c?e(a,b):b})}function g(a){var b=[],c;m(a,function(a){function d(a){var b,c;b=0;for(c=a.length;b<c;b++){var e=a[b],f=s.get(e[0]);f[e[1]].apply(f,e[2])}}if(!n.get(a)){n.put(a,!0);try{L(a)?(c=gb(a),b=b.concat(g(c.requires)).concat(c._runBlocks),d(c._invokeQueue),d(c._configBlocks)):z(a)?b.push(s.invoke(a)):G(a)?
b.push(s.invoke(a)):Qa(a,"module")}catch(e){throw G(a)&&(a=a[a.length-1]),e.message&&e.stack&&-1==e.stack.indexOf(e.message)&&(e=e.message+"\n"+e.stack),Ha("modulerr",a,e.stack||e.message||e);}}});return b}function h(b,c){function d(a,e){if(b.hasOwnProperty(a)){if(b[a]===l)throw Ha("cdep",a+" <- "+k.join(" <- "));return b[a]}try{return k.unshift(a),b[a]=l,b[a]=c(a,e)}catch(f){throw b[a]===l&&delete b[a],f;}finally{k.shift()}}function e(b,c,f,g){"string"===typeof f&&(g=f,f=null);var h=[],k=eb.$$annotate(b,
a,g),l,s,n;s=0;for(l=k.length;s<l;s++){n=k[s];if("string"!==typeof n)throw Ha("itkn",n);h.push(f&&f.hasOwnProperty(n)?f[n]:d(n,g))}G(b)&&(b=b[l]);return b.apply(c,h)}return{invoke:e,instantiate:function(a,b,c){var d=Object.create((G(a)?a[a.length-1]:a).prototype||null);a=e(a,d,b,c);return H(a)||z(a)?a:d},get:d,annotate:eb.$$annotate,has:function(a){return r.hasOwnProperty(a+"Provider")||b.hasOwnProperty(a)}}}a=!0===a;var l={},k=[],n=new Sa([],!0),r={$provide:{provider:c(d),factory:c(f),service:c(function(a,
b){return f(a,["$injector",function(a){return a.instantiate(b)}])}),value:c(function(a,b){return f(a,ra(b),!1)}),constant:c(function(a,b){Ra(a,"constant");r[a]=b;x[a]=b}),decorator:function(a,b){var c=s.get(a+"Provider"),d=c.$get;c.$get=function(){var a=C.invoke(d,c);return C.invoke(b,null,{$delegate:a})}}}},s=r.$injector=h(r,function(a,b){ca.isString(b)&&k.push(b);throw Ha("unpr",k.join(" <- "));}),x={},C=x.$injector=h(x,function(a,b){var c=s.get(a+"Provider",b);return C.invoke(c.$get,c,t,a)});m(g(b),
function(a){a&&C.invoke(a)});return C}function Re(){var b=!0;this.disableAutoScrolling=function(){b=!1};this.$get=["$window","$location","$rootScope",function(a,c,d){function e(a){var b=null;Array.prototype.some.call(a,function(a){if("a"===ta(a))return b=a,!0});return b}function f(b){if(b){b.scrollIntoView();var c;c=g.yOffset;z(c)?c=c():tc(c)?(c=c[0],c="fixed"!==a.getComputedStyle(c).position?0:c.getBoundingClientRect().bottom):V(c)||(c=0);c&&(b=b.getBoundingClientRect().top,a.scrollBy(0,b-c))}else a.scrollTo(0,
0)}function g(a){a=L(a)?a:c.hash();var b;a?(b=h.getElementById(a))?f(b):(b=e(h.getElementsByName(a)))?f(b):"top"===a&&f(null):f(null)}var h=a.document;b&&d.$watch(function(){return c.hash()},function(a,b){a===b&&""===a||Ef(function(){d.$evalAsync(g)})});return g}]}function jb(b,a){if(!b&&!a)return"";if(!b)return a;if(!a)return b;G(b)&&(b=b.join(" "));G(a)&&(a=a.join(" "));return b+" "+a}function If(b){L(b)&&(b=b.split(" "));var a=ga();m(b,function(b){b.length&&(a[b]=!0)});return a}function Ia(b){return H(b)?
b:{}}function Jf(b,a,c,d){function e(a){try{a.apply(null,za.call(arguments,1))}finally{if(C--,0===C)for(;F.length;)try{F.pop()()}catch(b){c.error(b)}}}function f(){g();h()}function g(){a:{try{u=n.state;break a}catch(a){}u=void 0}u=A(u)?null:u;ka(u,D)&&(u=D);D=u}function h(){if(K!==l.url()||p!==u)K=l.url(),p=u,m(B,function(a){a(l.url(),u)})}var l=this,k=b.location,n=b.history,r=b.setTimeout,s=b.clearTimeout,x={};l.isMock=!1;var C=0,F=[];l.$$completeOutstandingRequest=e;l.$$incOutstandingRequestCount=
function(){C++};l.notifyWhenNoOutstandingRequests=function(a){0===C?a():F.push(a)};var u,p,K=k.href,q=a.find("base"),I=null;g();p=u;l.url=function(a,c,e){A(e)&&(e=null);k!==b.location&&(k=b.location);n!==b.history&&(n=b.history);if(a){var f=p===e;if(K===a&&(!d.history||f))return l;var h=K&&Ja(K)===Ja(a);K=a;p=e;if(!d.history||h&&f){if(!h||I)I=a;c?k.replace(a):h?(c=k,e=a.indexOf("#"),a=-1===e?"":a.substr(e),c.hash=a):k.href=a}else n[c?"replaceState":"pushState"](e,"",a),g(),p=u;return l}return I||
k.href.replace(/%27/g,"'")};l.state=function(){return u};var B=[],N=!1,D=null;l.onUrlChange=function(a){if(!N){if(d.history)y(b).on("popstate",f);y(b).on("hashchange",f);N=!0}B.push(a);return a};l.$$applicationDestroyed=function(){y(b).off("hashchange popstate",f)};l.$$checkUrlChange=h;l.baseHref=function(){var a=q.attr("href");return a?a.replace(/^(https?\:)?\/\/[^\/]*/,""):""};l.defer=function(a,b){var c;C++;c=r(function(){delete x[c];e(a)},b||0);x[c]=!0;return c};l.defer.cancel=function(a){return x[a]?
(delete x[a],s(a),e(v),!0):!1}}function Ve(){this.$get=["$window","$log","$sniffer","$document",function(b,a,c,d){return new Jf(b,d,a,c)}]}function We(){this.$get=function(){function b(b,d){function e(a){a!=r&&(s?s==a&&(s=a.n):s=a,f(a.n,a.p),f(a,r),r=a,r.n=null)}function f(a,b){a!=b&&(a&&(a.p=b),b&&(b.n=a))}if(b in a)throw J("$cacheFactory")("iid",b);var g=0,h=P({},d,{id:b}),l={},k=d&&d.capacity||Number.MAX_VALUE,n={},r=null,s=null;return a[b]={put:function(a,b){if(!A(b)){if(k<Number.MAX_VALUE){var c=
n[a]||(n[a]={key:a});e(c)}a in l||g++;l[a]=b;g>k&&this.remove(s.key);return b}},get:function(a){if(k<Number.MAX_VALUE){var b=n[a];if(!b)return;e(b)}return l[a]},remove:function(a){if(k<Number.MAX_VALUE){var b=n[a];if(!b)return;b==r&&(r=b.p);b==s&&(s=b.n);f(b.n,b.p);delete n[a]}delete l[a];g--},removeAll:function(){l={};g=0;n={};r=s=null},destroy:function(){n=h=l=null;delete a[b]},info:function(){return P({},h,{size:g})}}}var a={};b.info=function(){var b={};m(a,function(a,e){b[e]=a.info()});return b};
b.get=function(b){return a[b]};return b}}function pf(){this.$get=["$cacheFactory",function(b){return b("templates")}]}function Ec(b,a){function c(a,b,c){var d=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,e={};m(a,function(a,f){var g=a.match(d);if(!g)throw ea("iscp",b,f,a,c?"controller bindings definition":"isolate scope definition");e[f]={mode:g[1][0],collection:"*"===g[2],optional:"?"===g[3],attrName:g[4]||f}});return e}function d(a){var b=a.charAt(0);if(!b||b!==M(b))throw ea("baddir",a);if(a!==a.trim())throw ea("baddir",
a);}var e={},f=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,g=/(([\w\-]+)(?:\:([^;]+))?;?)/,h=Wd("ngSrc,ngSrcset,src,srcset"),l=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,k=/^(on[a-z]+|formaction)$/;this.directive=function s(a,f){Ra(a,"directive");L(a)?(d(a),Sb(f,"directiveFactory"),e.hasOwnProperty(a)||(e[a]=[],b.factory(a+"Directive",["$injector","$exceptionHandler",function(b,d){var f=[];m(e[a],function(e,g){try{var h=b.invoke(e);z(h)?h={compile:ra(h)}:!h.compile&&h.link&&(h.compile=ra(h.link));h.priority=h.priority||
0;h.index=g;h.name=h.name||a;h.require=h.require||h.controller&&h.name;h.restrict=h.restrict||"EA";var k=h,l=h,s=h.name,n={isolateScope:null,bindToController:null};H(l.scope)&&(!0===l.bindToController?(n.bindToController=c(l.scope,s,!0),n.isolateScope={}):n.isolateScope=c(l.scope,s,!1));H(l.bindToController)&&(n.bindToController=c(l.bindToController,s,!0));if(H(n.bindToController)){var C=l.controller,$=l.controllerAs;if(!C)throw ea("noctrl",s);var ha;a:if($&&L($))ha=$;else{if(L(C)){var m=Xc.exec(C);
if(m){ha=m[3];break a}}ha=void 0}if(!ha)throw ea("noident",s);}var q=k.$$bindings=n;H(q.isolateScope)&&(h.$$isolateBindings=q.isolateScope);h.$$moduleName=e.$$moduleName;f.push(h)}catch(t){d(t)}});return f}])),e[a].push(f)):m(a,pc(s));return this};this.aHrefSanitizationWhitelist=function(b){return w(b)?(a.aHrefSanitizationWhitelist(b),this):a.aHrefSanitizationWhitelist()};this.imgSrcSanitizationWhitelist=function(b){return w(b)?(a.imgSrcSanitizationWhitelist(b),this):a.imgSrcSanitizationWhitelist()};
var n=!0;this.debugInfoEnabled=function(a){return w(a)?(n=a,this):n};this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(a,b,c,d,u,p,K,q,I,B,N){function D(a,b){try{a.addClass(b)}catch(c){}}function Z(a,b,c,d,e){a instanceof y||(a=y(a));m(a,function(b,c){b.nodeType==Na&&b.nodeValue.match(/\S+/)&&(a[c]=y(b).wrap("<span></span>").parent()[0])});var f=S(a,b,a,c,d,e);Z.$$addScopeClass(a);
var g=null;return function(b,c,d){Sb(b,"scope");d=d||{};var e=d.parentBoundTranscludeFn,h=d.transcludeControllers;d=d.futureParentElement;e&&e.$$boundTransclude&&(e=e.$$boundTransclude);g||(g=(d=d&&d[0])?"foreignobject"!==ta(d)&&d.toString().match(/SVG/)?"svg":"html":"html");d="html"!==g?y(Yb(g,y("<div>").append(a).html())):c?Pa.clone.call(a):a;if(h)for(var k in h)d.data("$"+k+"Controller",h[k].instance);Z.$$addScopeInfo(d,b);c&&c(d,b);f&&f(b,d,d,e);return d}}function S(a,b,c,d,e,f){function g(a,
c,d,e){var f,k,l,s,n,B,C;if(p)for(C=Array(c.length),s=0;s<h.length;s+=3)f=h[s],C[f]=c[f];else C=c;s=0;for(n=h.length;s<n;)if(k=C[h[s++]],c=h[s++],f=h[s++],c){if(c.scope){if(l=a.$new(),Z.$$addScopeInfo(y(k),l),B=c.$$destroyBindings)c.$$destroyBindings=null,l.$on("$destroyed",B)}else l=a;B=c.transcludeOnThisElement?$(a,c.transclude,e):!c.templateOnThisElement&&e?e:!e&&b?$(a,b):null;c(f,l,k,d,B,c)}else f&&f(a,k.childNodes,t,e)}for(var h=[],k,l,s,n,p,B=0;B<a.length;B++){k=new aa;l=ha(a[B],[],k,0===B?
d:t,e);(f=l.length?E(l,a[B],k,b,c,null,[],[],f):null)&&f.scope&&Z.$$addScopeClass(k.$$element);k=f&&f.terminal||!(s=a[B].childNodes)||!s.length?null:S(s,f?(f.transcludeOnThisElement||!f.templateOnThisElement)&&f.transclude:b);if(f||k)h.push(B,f,k),n=!0,p=p||f;f=null}return n?g:null}function $(a,b,c){return function(d,e,f,g,h){d||(d=a.$new(!1,h),d.$$transcluded=!0);return b(d,e,{parentBoundTranscludeFn:c,transcludeControllers:f,futureParentElement:g})}}function ha(a,b,c,d,e){var h=c.$attr,k;switch(a.nodeType){case qa:w(b,
wa(ta(a)),"E",d,e);for(var l,s,n,p=a.attributes,B=0,C=p&&p.length;B<C;B++){var x=!1,S=!1;l=p[B];k=l.name;s=R(l.value);l=wa(k);if(n=ia.test(l))k=k.replace(Zc,"").substr(8).replace(/_(.)/g,function(a,b){return b.toUpperCase()});var F=l.replace(/(Start|End)$/,"");A(F)&&l===F+"Start"&&(x=k,S=k.substr(0,k.length-5)+"end",k=k.substr(0,k.length-6));l=wa(k.toLowerCase());h[l]=k;if(n||!c.hasOwnProperty(l))c[l]=s,Sc(a,l)&&(c[l]=!0);V(a,b,s,l,n);w(b,l,"A",d,e,x,S)}a=a.className;H(a)&&(a=a.animVal);if(L(a)&&
""!==a)for(;k=g.exec(a);)l=wa(k[2]),w(b,l,"C",d,e)&&(c[l]=R(k[3])),a=a.substr(k.index+k[0].length);break;case Na:if(11===Ua)for(;a.parentNode&&a.nextSibling&&a.nextSibling.nodeType===Na;)a.nodeValue+=a.nextSibling.nodeValue,a.parentNode.removeChild(a.nextSibling);xa(b,a.nodeValue);break;case 8:try{if(k=f.exec(a.nodeValue))l=wa(k[1]),w(b,l,"M",d,e)&&(c[l]=R(k[2]))}catch($){}}b.sort(Aa);return b}function va(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw ea("uterdir",b,c);
a.nodeType==qa&&(a.hasAttribute(b)&&e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return y(d)}function Yc(a,b,c){return function(d,e,f,g,h){e=va(e[0],b,c);return a(d,e,f,g,h)}}function E(a,b,d,e,f,g,h,k,s){function n(a,b,c,d){if(a){c&&(a=Yc(a,c,d));a.require=E.require;a.directiveName=w;if(u===E||E.$$isolateScope)a=X(a,{isolateScope:!0});h.push(a)}if(b){c&&(b=Yc(b,c,d));b.require=E.require;b.directiveName=w;if(u===E||E.$$isolateScope)b=X(b,{isolateScope:!0});k.push(b)}}
function B(a,b,c,d){var e;if(L(b)){var f=b.match(l);b=b.substring(f[0].length);var g=f[1]||f[3],f="?"===f[2];"^^"===g?c=c.parent():e=(e=d&&d[b])&&e.instance;e||(d="$"+b+"Controller",e=g?c.inheritedData(d):c.data(d));if(!e&&!f)throw ea("ctreq",b,a);}else if(G(b))for(e=[],g=0,f=b.length;g<f;g++)e[g]=B(a,b[g],c,d);return e||null}function x(a,b,c,d,e,f){var g=ga(),h;for(h in d){var k=d[h],l={$scope:k===u||k.$$isolateScope?e:f,$element:a,$attrs:b,$transclude:c},s=k.controller;"@"==s&&(s=b[k.name]);l=p(s,
l,!0,k.controllerAs);g[k.name]=l;q||a.data("$"+k.name+"Controller",l.instance)}return g}function S(a,c,e,f,g,l){function s(a,b,c){var d;$a(a)||(c=b,b=a,a=t);q&&(d=m);c||(c=q?ja.parent():ja);return g(a,b,d,c,va)}var n,p,C,F,m,ha,ja;b===e?(f=d,ja=d.$$element):(ja=y(e),f=new aa(ja,d));u&&(F=c.$new(!0));g&&(ha=s,ha.$$boundTransclude=g);N&&(m=x(ja,f,ha,N,F,c));u&&(Z.$$addScopeInfo(ja,F,!0,!(D&&(D===u||D===u.$$originalDirective))),Z.$$addScopeClass(ja,!0),F.$$isolateBindings=u.$$isolateBindings,W(c,f,F,
F.$$isolateBindings,u,F));if(m){var K=u||$,I;K&&m[K.name]&&(p=K.$$bindings.bindToController,(C=m[K.name])&&C.identifier&&p&&(I=C,l.$$destroyBindings=W(c,f,C.instance,p,K)));for(n in m){C=m[n];var E=C();E!==C.instance&&(C.instance=E,ja.data("$"+n+"Controller",E),C===I&&(l.$$destroyBindings(),l.$$destroyBindings=W(c,f,E,p,K)))}}n=0;for(l=h.length;n<l;n++)p=h[n],Y(p,p.isolateScope?F:c,ja,f,p.require&&B(p.directiveName,p.require,ja,m),ha);var va=c;u&&(u.template||null===u.templateUrl)&&(va=F);a&&a(va,
e.childNodes,t,g);for(n=k.length-1;0<=n;n--)p=k[n],Y(p,p.isolateScope?F:c,ja,f,p.require&&B(p.directiveName,p.require,ja,m),ha)}s=s||{};for(var F=-Number.MAX_VALUE,$=s.newScopeDirective,N=s.controllerDirectives,u=s.newIsolateScopeDirective,D=s.templateDirective,m=s.nonTlbTranscludeDirective,K=!1,I=!1,q=s.hasElementTranscludeDirective,ba=d.$$element=y(b),E,w,v,A=e,Aa,xa=0,Ta=a.length;xa<Ta;xa++){E=a[xa];var M=E.$$start,P=E.$$end;M&&(ba=va(b,M,P));v=t;if(F>E.priority)break;if(v=E.scope)E.templateUrl||
(H(v)?(O("new/isolated scope",u||$,E,ba),u=E):O("new/isolated scope",u,E,ba)),$=$||E;w=E.name;!E.templateUrl&&E.controller&&(v=E.controller,N=N||ga(),O("'"+w+"' controller",N[w],E,ba),N[w]=E);if(v=E.transclude)K=!0,E.$$tlb||(O("transclusion",m,E,ba),m=E),"element"==v?(q=!0,F=E.priority,v=ba,ba=d.$$element=y(U.createComment(" "+w+": "+d[w]+" ")),b=ba[0],T(f,za.call(v,0),b),A=Z(v,e,F,g&&g.name,{nonTlbTranscludeDirective:m})):(v=y(Vb(b)).contents(),ba.empty(),A=Z(v,e));if(E.template)if(I=!0,O("template",
D,E,ba),D=E,v=z(E.template)?E.template(ba,d):E.template,v=fa(v),E.replace){g=E;v=Tb.test(v)?$c(Yb(E.templateNamespace,R(v))):[];b=v[0];if(1!=v.length||b.nodeType!==qa)throw ea("tplrt",w,"");T(f,ba,b);Ta={$attr:{}};v=ha(b,[],Ta);var Q=a.splice(xa+1,a.length-(xa+1));u&&ad(v);a=a.concat(v).concat(Q);J(d,Ta);Ta=a.length}else ba.html(v);if(E.templateUrl)I=!0,O("template",D,E,ba),D=E,E.replace&&(g=E),S=Lf(a.splice(xa,a.length-xa),ba,d,f,K&&A,h,k,{controllerDirectives:N,newScopeDirective:$!==E&&$,newIsolateScopeDirective:u,
templateDirective:D,nonTlbTranscludeDirective:m}),Ta=a.length;else if(E.compile)try{Aa=E.compile(ba,d,A),z(Aa)?n(null,Aa,M,P):Aa&&n(Aa.pre,Aa.post,M,P)}catch(Kf){c(Kf,ua(ba))}E.terminal&&(S.terminal=!0,F=Math.max(F,E.priority))}S.scope=$&&!0===$.scope;S.transcludeOnThisElement=K;S.templateOnThisElement=I;S.transclude=A;s.hasElementTranscludeDirective=q;return S}function ad(a){for(var b=0,c=a.length;b<c;b++)a[b]=Ob(a[b],{$$isolateScope:!0})}function w(b,d,f,g,h,k,l){if(d===h)return null;h=null;if(e.hasOwnProperty(d)){var n;
d=a.get(d+"Directive");for(var p=0,B=d.length;p<B;p++)try{n=d[p],(g===t||g>n.priority)&&-1!=n.restrict.indexOf(f)&&(k&&(n=Ob(n,{$$start:k,$$end:l})),b.push(n),h=n)}catch(x){c(x)}}return h}function A(b){if(e.hasOwnProperty(b))for(var c=a.get(b+"Directive"),d=0,f=c.length;d<f;d++)if(b=c[d],b.multiElement)return!0;return!1}function J(a,b){var c=b.$attr,d=a.$attr,e=a.$$element;m(a,function(d,e){"$"!=e.charAt(0)&&(b[e]&&b[e]!==d&&(d+=("style"===e?";":" ")+b[e]),a.$set(e,d,!0,c[e]))});m(b,function(b,f){"class"==
f?(D(e,b),a["class"]=(a["class"]?a["class"]+" ":"")+b):"style"==f?(e.attr("style",e.attr("style")+";"+b),a.style=(a.style?a.style+";":"")+b):"$"==f.charAt(0)||a.hasOwnProperty(f)||(a[f]=b,d[f]=c[f])})}function Lf(a,b,c,e,f,g,h,k){var l=[],s,n,p=b[0],B=a.shift(),C=Ob(B,{templateUrl:null,transclude:null,replace:null,$$originalDirective:B}),x=z(B.templateUrl)?B.templateUrl(b,c):B.templateUrl,N=B.templateNamespace;b.empty();d(x).then(function(d){var F,u;d=fa(d);if(B.replace){d=Tb.test(d)?$c(Yb(N,R(d))):
[];F=d[0];if(1!=d.length||F.nodeType!==qa)throw ea("tplrt",B.name,x);d={$attr:{}};T(e,b,F);var K=ha(F,[],d);H(B.scope)&&ad(K);a=K.concat(a);J(c,d)}else F=p,b.html(d);a.unshift(C);s=E(a,F,c,f,b,B,g,h,k);m(e,function(a,c){a==F&&(e[c]=b[0])});for(n=S(b[0].childNodes,f);l.length;){d=l.shift();u=l.shift();var I=l.shift(),va=l.shift(),K=b[0];if(!d.$$destroyed){if(u!==p){var Z=u.className;k.hasElementTranscludeDirective&&B.replace||(K=Vb(F));T(I,y(u),K);D(y(K),Z)}u=s.transcludeOnThisElement?$(d,s.transclude,
va):va;s(n,d,K,e,u,s)}}l=null});return function(a,b,c,d,e){a=e;b.$$destroyed||(l?l.push(b,c,d,a):(s.transcludeOnThisElement&&(a=$(b,s.transclude,e)),s(n,b,c,d,a,s)))}}function Aa(a,b){var c=b.priority-a.priority;return 0!==c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function O(a,b,c,d){function e(a){return a?" (module: "+a+")":""}if(b)throw ea("multidir",b.name,e(b.$$moduleName),c.name,e(c.$$moduleName),a,ua(d));}function xa(a,c){var d=b(c,!0);d&&a.push({priority:0,compile:function(a){a=
a.parent();var b=!!a.length;b&&Z.$$addBindingClass(a);return function(a,c){var e=c.parent();b||Z.$$addBindingClass(e);Z.$$addBindingInfo(e,d.expressions);a.$watch(d,function(a){c[0].nodeValue=a})}}})}function Yb(a,b){a=M(a||"html");switch(a){case "svg":case "math":var c=U.createElement("div");c.innerHTML="<"+a+">"+b+"</"+a+">";return c.childNodes[0].childNodes;default:return b}}function Q(a,b){if("srcdoc"==b)return I.HTML;var c=ta(a);if("xlinkHref"==b||"form"==c&&"action"==b||"img"!=c&&("src"==b||
"ngSrc"==b))return I.RESOURCE_URL}function V(a,c,d,e,f){var g=Q(a,e);f=h[e]||f;var l=b(d,!0,g,f);if(l){if("multiple"===e&&"select"===ta(a))throw ea("selmulti",ua(a));c.push({priority:100,compile:function(){return{pre:function(a,c,h){c=h.$$observers||(h.$$observers={});if(k.test(e))throw ea("nodomevents");var s=h[e];s!==d&&(l=s&&b(s,!0,g,f),d=s);l&&(h[e]=l(a),(c[e]||(c[e]=[])).$$inter=!0,(h.$$observers&&h.$$observers[e].$$scope||a).$watch(l,function(a,b){"class"===e&&a!=b?h.$updateClass(a,b):h.$set(e,
a)}))}}}})}}function T(a,b,c){var d=b[0],e=b.length,f=d.parentNode,g,h;if(a)for(g=0,h=a.length;g<h;g++)if(a[g]==d){a[g++]=c;h=g+e-1;for(var k=a.length;g<k;g++,h++)h<k?a[g]=a[h]:delete a[g];a.length-=e-1;a.context===d&&(a.context=c);break}f&&f.replaceChild(c,d);a=U.createDocumentFragment();a.appendChild(d);y.hasData(d)&&(y(c).data(y(d).data()),la?(Rb=!0,la.cleanData([d])):delete y.cache[d[y.expando]]);d=1;for(e=b.length;d<e;d++)f=b[d],y(f).remove(),a.appendChild(f),delete b[d];b[0]=c;b.length=1}function X(a,
b){return P(function(){return a.apply(null,arguments)},a,b)}function Y(a,b,d,e,f,g){try{a(b,d,e,f,g)}catch(h){c(h,ua(d))}}function W(a,c,d,e,f,g){var h;m(e,function(e,g){var k=e.attrName,l=e.optional,s=e.mode,n,p,B,C;Xa.call(c,k)||(c[k]=t);switch(s){case "@":c[k]||l||(d[g]=t);c.$observe(k,function(a){d[g]=a});c.$$observers[k].$$scope=a;c[k]&&(d[g]=b(c[k])(a));break;case "=":if(l&&!c[k])break;p=u(c[k]);C=p.literal?ka:function(a,b){return a===b||a!==a&&b!==b};B=p.assign||function(){n=d[g]=p(a);throw ea("nonassign",
c[k],f.name);};n=d[g]=p(a);l=function(b){C(b,d[g])||(C(b,n)?B(a,b=d[g]):d[g]=b);return n=b};l.$stateful=!0;l=e.collection?a.$watchCollection(c[k],l):a.$watch(u(c[k],l),null,p.literal);h=h||[];h.push(l);break;case "&":p=u(c[k]);if(p===v&&l)break;d[g]=function(b){return p(a,b)}}});e=h?function(){for(var a=0,b=h.length;a<b;++a)h[a]()}:v;return g&&e!==v?(g.$on("$destroy",e),v):e}var aa=function(a,b){if(b){var c=Object.keys(b),d,e,f;d=0;for(e=c.length;d<e;d++)f=c[d],this[f]=b[f]}else this.$attr={};this.$$element=
a};aa.prototype={$normalize:wa,$addClass:function(a){a&&0<a.length&&B.addClass(this.$$element,a)},$removeClass:function(a){a&&0<a.length&&B.removeClass(this.$$element,a)},$updateClass:function(a,b){var c=bd(a,b);c&&c.length&&B.addClass(this.$$element,c);(c=bd(b,a))&&c.length&&B.removeClass(this.$$element,c)},$set:function(a,b,d,e){var f=this.$$element[0],g=Sc(f,a),h=Ff(f,a),f=a;g?(this.$$element.prop(a,b),e=g):h&&(this[h]=b,f=h);this[a]=b;e?this.$attr[a]=e:(e=this.$attr[a])||(this.$attr[a]=e=Bc(a,
"-"));g=ta(this.$$element);if("a"===g&&"href"===a||"img"===g&&"src"===a)this[a]=b=N(b,"src"===a);else if("img"===g&&"srcset"===a){for(var g="",h=R(b),k=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,k=/\s/.test(h)?k:/(,)/,h=h.split(k),k=Math.floor(h.length/2),l=0;l<k;l++)var s=2*l,g=g+N(R(h[s]),!0),g=g+(" "+R(h[s+1]));h=R(h[2*l]).split(/\s/);g+=N(R(h[0]),!0);2===h.length&&(g+=" "+R(h[1]));this[a]=b=g}!1!==d&&(null===b||b===t?this.$$element.removeAttr(e):this.$$element.attr(e,b));(a=this.$$observers)&&m(a[f],
function(a){try{a(b)}catch(d){c(d)}})},$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers=ga()),e=d[a]||(d[a]=[]);e.push(b);K.$evalAsync(function(){!e.$$inter&&c.hasOwnProperty(a)&&b(c[a])});return function(){bb(e,b)}}};var ca=b.startSymbol(),da=b.endSymbol(),fa="{{"==ca||"}}"==da?Ya:function(a){return a.replace(/\{\{/g,ca).replace(/}}/g,da)},ia=/^ngAttr[A-Z]/;Z.$$addBindingInfo=n?function(a,b){var c=a.data("$binding")||[];G(b)?c=c.concat(b):c.push(b);a.data("$binding",c)}:v;Z.$$addBindingClass=
n?function(a){D(a,"ng-binding")}:v;Z.$$addScopeInfo=n?function(a,b,c,d){a.data(c?d?"$isolateScopeNoTemplate":"$isolateScope":"$scope",b)}:v;Z.$$addScopeClass=n?function(a,b){D(a,b?"ng-isolate-scope":"ng-scope")}:v;return Z}]}function wa(b){return hb(b.replace(Zc,""))}function bd(b,a){var c="",d=b.split(/\s+/),e=a.split(/\s+/),f=0;a:for(;f<d.length;f++){for(var g=d[f],h=0;h<e.length;h++)if(g==e[h])continue a;c+=(0<c.length?" ":"")+g}return c}function $c(b){b=y(b);var a=b.length;if(1>=a)return b;for(;a--;)8===
b[a].nodeType&&Mf.call(b,a,1);return b}function Xe(){var b={},a=!1;this.register=function(a,d){Ra(a,"controller");H(a)?P(b,a):b[a]=d};this.allowGlobals=function(){a=!0};this.$get=["$injector","$window",function(c,d){function e(a,b,c,d){if(!a||!H(a.$scope))throw J("$controller")("noscp",d,b);a.$scope[b]=c}return function(f,g,h,l){var k,n,r;h=!0===h;l&&L(l)&&(r=l);if(L(f)){l=f.match(Xc);if(!l)throw Nf("ctrlfmt",f);n=l[1];r=r||l[3];f=b.hasOwnProperty(n)?b[n]:Dc(g.$scope,n,!0)||(a?Dc(d,n,!0):t);Qa(f,
n,!0)}if(h)return h=(G(f)?f[f.length-1]:f).prototype,k=Object.create(h||null),r&&e(g,r,k,n||f.name),P(function(){var a=c.invoke(f,k,g,n);a!==k&&(H(a)||z(a))&&(k=a,r&&e(g,r,k,n||f.name));return k},{instance:k,identifier:r});k=c.instantiate(f,g,n);r&&e(g,r,k,n||f.name);return k}}]}function Ye(){this.$get=["$window",function(b){return y(b.document)}]}function Ze(){this.$get=["$log",function(b){return function(a,c){b.error.apply(b,arguments)}}]}function Zb(b){return H(b)?aa(b)?b.toISOString():db(b):b}
function cf(){this.$get=function(){return function(b){if(!b)return"";var a=[];oc(b,function(b,d){null===b||A(b)||(G(b)?m(b,function(b,c){a.push(ma(d)+"="+ma(Zb(b)))}):a.push(ma(d)+"="+ma(Zb(b))))});return a.join("&")}}}function df(){this.$get=function(){return function(b){function a(b,e,f){null===b||A(b)||(G(b)?m(b,function(b){a(b,e+"[]")}):H(b)&&!aa(b)?oc(b,function(b,c){a(b,e+(f?"":"[")+c+(f?"":"]"))}):c.push(ma(e)+"="+ma(Zb(b))))}if(!b)return"";var c=[];a(b,"",!0);return c.join("&")}}}function $b(b,
a){if(L(b)){var c=b.replace(Of,"").trim();if(c){var d=a("Content-Type");(d=d&&0===d.indexOf(cd))||(d=(d=c.match(Pf))&&Qf[d[0]].test(c));d&&(b=wc(c))}}return b}function dd(b){var a=ga(),c;L(b)?m(b.split("\n"),function(b){c=b.indexOf(":");var e=M(R(b.substr(0,c)));b=R(b.substr(c+1));e&&(a[e]=a[e]?a[e]+", "+b:b)}):H(b)&&m(b,function(b,c){var f=M(c),g=R(b);f&&(a[f]=a[f]?a[f]+", "+g:g)});return a}function ed(b){var a;return function(c){a||(a=dd(b));return c?(c=a[M(c)],void 0===c&&(c=null),c):a}}function fd(b,
a,c,d){if(z(d))return d(b,a,c);m(d,function(d){b=d(b,a,c)});return b}function bf(){var b=this.defaults={transformResponse:[$b],transformRequest:[function(a){return H(a)&&"[object File]"!==sa.call(a)&&"[object Blob]"!==sa.call(a)&&"[object FormData]"!==sa.call(a)?db(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ia(ac),put:ia(ac),patch:ia(ac)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},a=!1;this.useApplyAsync=function(b){return w(b)?
(a=!!b,this):a};var c=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(d,e,f,g,h,l){function k(a){function c(a){var b=P({},a);b.data=a.data?fd(a.data,a.headers,a.status,e.transformResponse):a.data;a=a.status;return 200<=a&&300>a?b:h.reject(b)}function d(a,b){var c,e={};m(a,function(a,d){z(a)?(c=a(b),null!=c&&(e[d]=c)):e[d]=a});return e}if(!ca.isObject(a))throw J("$http")("badreq",a);var e=P({method:"get",transformRequest:b.transformRequest,
transformResponse:b.transformResponse,paramSerializer:b.paramSerializer},a);e.headers=function(a){var c=b.headers,e=P({},a.headers),f,g,h,c=P({},c.common,c[M(a.method)]);a:for(f in c){g=M(f);for(h in e)if(M(h)===g)continue a;e[f]=c[f]}return d(e,ia(a))}(a);e.method=rb(e.method);e.paramSerializer=L(e.paramSerializer)?l.get(e.paramSerializer):e.paramSerializer;var f=[function(a){var d=a.headers,e=fd(a.data,ed(d),t,a.transformRequest);A(e)&&m(d,function(a,b){"content-type"===M(b)&&delete d[b]});A(a.withCredentials)&&
!A(b.withCredentials)&&(a.withCredentials=b.withCredentials);return n(a,e).then(c,c)},t],g=h.when(e);for(m(x,function(a){(a.request||a.requestError)&&f.unshift(a.request,a.requestError);(a.response||a.responseError)&&f.push(a.response,a.responseError)});f.length;){a=f.shift();var k=f.shift(),g=g.then(a,k)}g.success=function(a){Qa(a,"fn");g.then(function(b){a(b.data,b.status,b.headers,e)});return g};g.error=function(a){Qa(a,"fn");g.then(null,function(b){a(b.data,b.status,b.headers,e)});return g};return g}
function n(c,f){function l(b,c,d,e){function f(){n(c,b,d,e)}N&&(200<=b&&300>b?N.put(S,[b,c,dd(d),e]):N.remove(S));a?g.$applyAsync(f):(f(),g.$$phase||g.$apply())}function n(a,b,d,e){b=Math.max(b,0);(200<=b&&300>b?I.resolve:I.reject)({data:a,status:b,headers:ed(d),config:c,statusText:e})}function x(a){n(a.data,a.status,ia(a.headers()),a.statusText)}function m(){var a=k.pendingRequests.indexOf(c);-1!==a&&k.pendingRequests.splice(a,1)}var I=h.defer(),B=I.promise,N,D,q=c.headers,S=r(c.url,c.paramSerializer(c.params));
k.pendingRequests.push(c);B.then(m,m);!c.cache&&!b.cache||!1===c.cache||"GET"!==c.method&&"JSONP"!==c.method||(N=H(c.cache)?c.cache:H(b.cache)?b.cache:s);N&&(D=N.get(S),w(D)?D&&z(D.then)?D.then(x,x):G(D)?n(D[1],D[0],ia(D[2]),D[3]):n(D,200,{},"OK"):N.put(S,B));A(D)&&((D=gd(c.url)?e()[c.xsrfCookieName||b.xsrfCookieName]:t)&&(q[c.xsrfHeaderName||b.xsrfHeaderName]=D),d(c.method,S,f,l,q,c.timeout,c.withCredentials,c.responseType));return B}function r(a,b){0<b.length&&(a+=(-1==a.indexOf("?")?"?":"&")+b);
return a}var s=f("$http");b.paramSerializer=L(b.paramSerializer)?l.get(b.paramSerializer):b.paramSerializer;var x=[];m(c,function(a){x.unshift(L(a)?l.get(a):l.invoke(a))});k.pendingRequests=[];(function(a){m(arguments,function(a){k[a]=function(b,c){return k(P({},c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){m(arguments,function(a){k[a]=function(b,c,d){return k(P({},d||{},{method:a,url:b,data:c}))}})})("post","put","patch");k.defaults=b;return k}]}function Rf(){return new O.XMLHttpRequest}
function ef(){this.$get=["$browser","$window","$document",function(b,a,c){return Sf(b,Rf,b.defer,a.angular.callbacks,c[0])}]}function Sf(b,a,c,d,e){function f(a,b,c){var f=e.createElement("script"),n=null;f.type="text/javascript";f.src=a;f.async=!0;n=function(a){f.removeEventListener("load",n,!1);f.removeEventListener("error",n,!1);e.body.removeChild(f);f=null;var g=-1,x="unknown";a&&("load"!==a.type||d[b].called||(a={type:"error"}),x=a.type,g="error"===a.type?404:200);c&&c(g,x)};f.addEventListener("load",
n,!1);f.addEventListener("error",n,!1);e.body.appendChild(f);return n}return function(e,h,l,k,n,r,s,x){function C(){p&&p();K&&K.abort()}function F(a,d,e,f,g){I!==t&&c.cancel(I);p=K=null;a(d,e,f,g);b.$$completeOutstandingRequest(v)}b.$$incOutstandingRequestCount();h=h||b.url();if("jsonp"==M(e)){var u="_"+(d.counter++).toString(36);d[u]=function(a){d[u].data=a;d[u].called=!0};var p=f(h.replace("JSON_CALLBACK","angular.callbacks."+u),u,function(a,b){F(k,a,d[u].data,"",b);d[u]=v})}else{var K=a();K.open(e,
h,!0);m(n,function(a,b){w(a)&&K.setRequestHeader(b,a)});K.onload=function(){var a=K.statusText||"",b="response"in K?K.response:K.responseText,c=1223===K.status?204:K.status;0===c&&(c=b?200:"file"==Ba(h).protocol?404:0);F(k,c,b,K.getAllResponseHeaders(),a)};e=function(){F(k,-1,null,null,"")};K.onerror=e;K.onabort=e;s&&(K.withCredentials=!0);if(x)try{K.responseType=x}catch(q){if("json"!==x)throw q;}K.send(l)}if(0<r)var I=c(C,r);else r&&z(r.then)&&r.then(C)}}function $e(){var b="{{",a="}}";this.startSymbol=
function(a){return a?(b=a,this):b};this.endSymbol=function(b){return b?(a=b,this):a};this.$get=["$parse","$exceptionHandler","$sce",function(c,d,e){function f(a){return"\\\\\\"+a}function g(c){return c.replace(n,b).replace(r,a)}function h(f,h,n,r){function u(a){try{var b=a;a=n?e.getTrusted(n,b):e.valueOf(b);var c;if(r&&!w(a))c=a;else if(null==a)c="";else{switch(typeof a){case "string":break;case "number":a=""+a;break;default:a=db(a)}c=a}return c}catch(g){d(Ka.interr(f,g))}}r=!!r;for(var p,m,q=0,I=
[],B=[],N=f.length,D=[],t=[];q<N;)if(-1!=(p=f.indexOf(b,q))&&-1!=(m=f.indexOf(a,p+l)))q!==p&&D.push(g(f.substring(q,p))),q=f.substring(p+l,m),I.push(q),B.push(c(q,u)),q=m+k,t.push(D.length),D.push("");else{q!==N&&D.push(g(f.substring(q)));break}n&&1<D.length&&Ka.throwNoconcat(f);if(!h||I.length){var S=function(a){for(var b=0,c=I.length;b<c;b++){if(r&&A(a[b]))return;D[t[b]]=a[b]}return D.join("")};return P(function(a){var b=0,c=I.length,e=Array(c);try{for(;b<c;b++)e[b]=B[b](a);return S(e)}catch(g){d(Ka.interr(f,
g))}},{exp:f,expressions:I,$$watchDelegate:function(a,b){var c;return a.$watchGroup(B,function(d,e){var f=S(d);z(b)&&b.call(this,f,d!==e?c:f,a);c=f})}})}}var l=b.length,k=a.length,n=new RegExp(b.replace(/./g,f),"g"),r=new RegExp(a.replace(/./g,f),"g");h.startSymbol=function(){return b};h.endSymbol=function(){return a};return h}]}function af(){this.$get=["$rootScope","$window","$q","$$q",function(b,a,c,d){function e(e,h,l,k){var n=4<arguments.length,r=n?za.call(arguments,4):[],s=a.setInterval,x=a.clearInterval,
C=0,F=w(k)&&!k,u=(F?d:c).defer(),p=u.promise;l=w(l)?l:0;p.then(null,null,n?function(){e.apply(null,r)}:e);p.$$intervalId=s(function(){u.notify(C++);0<l&&C>=l&&(u.resolve(C),x(p.$$intervalId),delete f[p.$$intervalId]);F||b.$apply()},h);f[p.$$intervalId]=u;return p}var f={};e.cancel=function(b){return b&&b.$$intervalId in f?(f[b.$$intervalId].reject("canceled"),a.clearInterval(b.$$intervalId),delete f[b.$$intervalId],!0):!1};return e}]}function ge(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",
GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"\u00a4",posSuf:"",negPre:"(\u00a4",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January February March April May June July August September October November December".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a",ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"]},pluralCat:function(b){return 1===b?"one":"other"}}}}function bc(b){b=b.split("/");for(var a=b.length;a--;)b[a]=ob(b[a]);return b.join("/")}function hd(b,a){var c=Ba(b);a.$$protocol=c.protocol;
a.$$host=c.hostname;a.$$port=W(c.port)||Tf[c.protocol]||null}function id(b,a){var c="/"!==b.charAt(0);c&&(b="/"+b);var d=Ba(b);a.$$path=decodeURIComponent(c&&"/"===d.pathname.charAt(0)?d.pathname.substring(1):d.pathname);a.$$search=zc(d.search);a.$$hash=decodeURIComponent(d.hash);a.$$path&&"/"!=a.$$path.charAt(0)&&(a.$$path="/"+a.$$path)}function ya(b,a){if(0===a.indexOf(b))return a.substr(b.length)}function Ja(b){var a=b.indexOf("#");return-1==a?b:b.substr(0,a)}function Bb(b){return b.replace(/(#.+)|#$/,
"$1")}function cc(b){return b.substr(0,Ja(b).lastIndexOf("/")+1)}function dc(b,a){this.$$html5=!0;a=a||"";var c=cc(b);hd(b,this);this.$$parse=function(a){var b=ya(c,a);if(!L(b))throw Cb("ipthprfx",a,c);id(b,this);this.$$path||(this.$$path="/");this.$$compose()};this.$$compose=function(){var a=Qb(this.$$search),b=this.$$hash?"#"+ob(this.$$hash):"";this.$$url=bc(this.$$path)+(a?"?"+a:"")+b;this.$$absUrl=c+this.$$url.substr(1)};this.$$parseLinkUrl=function(d,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),
!0;var f,g;(f=ya(b,d))!==t?(g=f,g=(f=ya(a,f))!==t?c+(ya("/",f)||f):b+g):(f=ya(c,d))!==t?g=c+f:c==d+"/"&&(g=c);g&&this.$$parse(g);return!!g}}function ec(b,a){var c=cc(b);hd(b,this);this.$$parse=function(d){var e=ya(b,d)||ya(c,d),f;A(e)||"#"!==e.charAt(0)?this.$$html5?f=e:(f="",A(e)&&(b=d,this.replace())):(f=ya(a,e),A(f)&&(f=e));id(f,this);d=this.$$path;var e=b,g=/^\/[A-Z]:(\/.*)/;0===f.indexOf(e)&&(f=f.replace(e,""));g.exec(f)||(d=(f=g.exec(d))?f[1]:d);this.$$path=d;this.$$compose()};this.$$compose=
function(){var c=Qb(this.$$search),e=this.$$hash?"#"+ob(this.$$hash):"";this.$$url=bc(this.$$path)+(c?"?"+c:"")+e;this.$$absUrl=b+(this.$$url?a+this.$$url:"")};this.$$parseLinkUrl=function(a,c){return Ja(b)==Ja(a)?(this.$$parse(a),!0):!1}}function jd(b,a){this.$$html5=!0;ec.apply(this,arguments);var c=cc(b);this.$$parseLinkUrl=function(d,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),!0;var f,g;b==Ja(d)?f=d:(g=ya(c,d))?f=b+a+g:c===d+"/"&&(f=c);f&&this.$$parse(f);return!!f};this.$$compose=function(){var c=
Qb(this.$$search),e=this.$$hash?"#"+ob(this.$$hash):"";this.$$url=bc(this.$$path)+(c?"?"+c:"")+e;this.$$absUrl=b+a+this.$$url}}function Db(b){return function(){return this[b]}}function kd(b,a){return function(c){if(A(c))return this[b];this[b]=a(c);this.$$compose();return this}}function ff(){var b="",a={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(a){return w(a)?(b=a,this):b};this.html5Mode=function(b){return ab(b)?(a.enabled=b,this):H(b)?(ab(b.enabled)&&(a.enabled=b.enabled),
ab(b.requireBase)&&(a.requireBase=b.requireBase),ab(b.rewriteLinks)&&(a.rewriteLinks=b.rewriteLinks),this):a};this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(c,d,e,f,g){function h(a,b,c){var e=k.url(),f=k.$$state;try{d.url(a,b,c),k.$$state=d.state()}catch(g){throw k.url(e),k.$$state=f,g;}}function l(a,b){c.$broadcast("$locationChangeSuccess",k.absUrl(),a,k.$$state,b)}var k,n;n=d.baseHref();var r=d.url(),s;if(a.enabled){if(!n&&a.requireBase)throw Cb("nobase");s=r.substring(0,
r.indexOf("/",r.indexOf("//")+2))+(n||"/");n=e.history?dc:jd}else s=Ja(r),n=ec;k=new n(s,"#"+b);k.$$parseLinkUrl(r,r);k.$$state=d.state();var x=/^\s*(javascript|mailto):/i;f.on("click",function(b){if(a.rewriteLinks&&!b.ctrlKey&&!b.metaKey&&!b.shiftKey&&2!=b.which&&2!=b.button){for(var e=y(b.target);"a"!==ta(e[0]);)if(e[0]===f[0]||!(e=e.parent())[0])return;var h=e.prop("href"),l=e.attr("href")||e.attr("xlink:href");H(h)&&"[object SVGAnimatedString]"===h.toString()&&(h=Ba(h.animVal).href);x.test(h)||
!h||e.attr("target")||b.isDefaultPrevented()||!k.$$parseLinkUrl(h,l)||(b.preventDefault(),k.absUrl()!=d.url()&&(c.$apply(),g.angular["ff-684208-preventDefault"]=!0))}});Bb(k.absUrl())!=Bb(r)&&d.url(k.absUrl(),!0);var C=!0;d.onUrlChange(function(a,b){c.$evalAsync(function(){var d=k.absUrl(),e=k.$$state,f;k.$$parse(a);k.$$state=b;f=c.$broadcast("$locationChangeStart",a,d,b,e).defaultPrevented;k.absUrl()===a&&(f?(k.$$parse(d),k.$$state=e,h(d,!1,e)):(C=!1,l(d,e)))});c.$$phase||c.$digest()});c.$watch(function(){var a=
Bb(d.url()),b=Bb(k.absUrl()),f=d.state(),g=k.$$replace,n=a!==b||k.$$html5&&e.history&&f!==k.$$state;if(C||n)C=!1,c.$evalAsync(function(){var b=k.absUrl(),d=c.$broadcast("$locationChangeStart",b,a,k.$$state,f).defaultPrevented;k.absUrl()===b&&(d?(k.$$parse(a),k.$$state=f):(n&&h(b,g,f===k.$$state?null:k.$$state),l(a,f)))});k.$$replace=!1});return k}]}function gf(){var b=!0,a=this;this.debugEnabled=function(a){return w(a)?(b=a,this):b};this.$get=["$window",function(c){function d(a){a instanceof Error&&
(a.stack?a=a.message&&-1===a.stack.indexOf(a.message)?"Error: "+a.message+"\n"+a.stack:a.stack:a.sourceURL&&(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function e(a){var b=c.console||{},e=b[a]||b.log||v;a=!1;try{a=!!e.apply}catch(l){}return a?function(){var a=[];m(arguments,function(b){a.push(d(b))});return e.apply(b,a)}:function(a,b){e(a,null==b?"":b)}}return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:function(){var c=e("debug");return function(){b&&c.apply(a,arguments)}}()}}]}
function Ca(b,a){if("__defineGetter__"===b||"__defineSetter__"===b||"__lookupGetter__"===b||"__lookupSetter__"===b||"__proto__"===b)throw da("isecfld",a);return b}function oa(b,a){if(b){if(b.constructor===b)throw da("isecfn",a);if(b.window===b)throw da("isecwindow",a);if(b.children&&(b.nodeName||b.prop&&b.attr&&b.find))throw da("isecdom",a);if(b===Object)throw da("isecobj",a);}return b}function ld(b,a){if(b){if(b.constructor===b)throw da("isecfn",a);if(b===Uf||b===Vf||b===Wf)throw da("isecff",a);
}}function Xf(b,a){return"undefined"!==typeof b?b:a}function md(b,a){return"undefined"===typeof b?a:"undefined"===typeof a?b:b+a}function T(b,a){var c,d;switch(b.type){case q.Program:c=!0;m(b.body,function(b){T(b.expression,a);c=c&&b.expression.constant});b.constant=c;break;case q.Literal:b.constant=!0;b.toWatch=[];break;case q.UnaryExpression:T(b.argument,a);b.constant=b.argument.constant;b.toWatch=b.argument.toWatch;break;case q.BinaryExpression:T(b.left,a);T(b.right,a);b.constant=b.left.constant&&
b.right.constant;b.toWatch=b.left.toWatch.concat(b.right.toWatch);break;case q.LogicalExpression:T(b.left,a);T(b.right,a);b.constant=b.left.constant&&b.right.constant;b.toWatch=b.constant?[]:[b];break;case q.ConditionalExpression:T(b.test,a);T(b.alternate,a);T(b.consequent,a);b.constant=b.test.constant&&b.alternate.constant&&b.consequent.constant;b.toWatch=b.constant?[]:[b];break;case q.Identifier:b.constant=!1;b.toWatch=[b];break;case q.MemberExpression:T(b.object,a);b.computed&&T(b.property,a);
b.constant=b.object.constant&&(!b.computed||b.property.constant);b.toWatch=[b];break;case q.CallExpression:c=b.filter?!a(b.callee.name).$stateful:!1;d=[];m(b.arguments,function(b){T(b,a);c=c&&b.constant;b.constant||d.push.apply(d,b.toWatch)});b.constant=c;b.toWatch=b.filter&&!a(b.callee.name).$stateful?d:[b];break;case q.AssignmentExpression:T(b.left,a);T(b.right,a);b.constant=b.left.constant&&b.right.constant;b.toWatch=[b];break;case q.ArrayExpression:c=!0;d=[];m(b.elements,function(b){T(b,a);c=
c&&b.constant;b.constant||d.push.apply(d,b.toWatch)});b.constant=c;b.toWatch=d;break;case q.ObjectExpression:c=!0;d=[];m(b.properties,function(b){T(b.value,a);c=c&&b.value.constant;b.value.constant||d.push.apply(d,b.value.toWatch)});b.constant=c;b.toWatch=d;break;case q.ThisExpression:b.constant=!1,b.toWatch=[]}}function nd(b){if(1==b.length){b=b[0].expression;var a=b.toWatch;return 1!==a.length?a:a[0]!==b?a:t}}function od(b){return b.type===q.Identifier||b.type===q.MemberExpression}function pd(b){if(1===
b.body.length&&od(b.body[0].expression))return{type:q.AssignmentExpression,left:b.body[0].expression,right:{type:q.NGValueParameter},operator:"="}}function qd(b){return 0===b.body.length||1===b.body.length&&(b.body[0].expression.type===q.Literal||b.body[0].expression.type===q.ArrayExpression||b.body[0].expression.type===q.ObjectExpression)}function rd(b,a){this.astBuilder=b;this.$filter=a}function sd(b,a){this.astBuilder=b;this.$filter=a}function Eb(b,a,c,d){oa(b,d);a=a.split(".");for(var e,f=0;1<
a.length;f++){e=Ca(a.shift(),d);var g=oa(b[e],d);g||(g={},b[e]=g);b=g}e=Ca(a.shift(),d);oa(b[e],d);return b[e]=c}function Fb(b){return"constructor"==b}function fc(b){return z(b.valueOf)?b.valueOf():Yf.call(b)}function hf(){var b=ga(),a=ga();this.$get=["$filter","$sniffer",function(c,d){function e(a,b){return null==a||null==b?a===b:"object"===typeof a&&(a=fc(a),"object"===typeof a)?!1:a===b||a!==a&&b!==b}function f(a,b,c,d,f){var g=d.inputs,h;if(1===g.length){var k=e,g=g[0];return a.$watch(function(a){var b=
g(a);e(b,k)||(h=d(a,t,t,[b]),k=b&&fc(b));return h},b,c,f)}for(var l=[],n=[],r=0,m=g.length;r<m;r++)l[r]=e,n[r]=null;return a.$watch(function(a){for(var b=!1,c=0,f=g.length;c<f;c++){var k=g[c](a);if(b||(b=!e(k,l[c])))n[c]=k,l[c]=k&&fc(k)}b&&(h=d(a,t,t,n));return h},b,c,f)}function g(a,b,c,d){var e,f;return e=a.$watch(function(a){return d(a)},function(a,c,d){f=a;z(b)&&b.apply(this,arguments);w(a)&&d.$$postDigest(function(){w(f)&&e()})},c)}function h(a,b,c,d){function e(a){var b=!0;m(a,function(a){w(a)||
(b=!1)});return b}var f,g;return f=a.$watch(function(a){return d(a)},function(a,c,d){g=a;z(b)&&b.call(this,a,c,d);e(a)&&d.$$postDigest(function(){e(g)&&f()})},c)}function l(a,b,c,d){var e;return e=a.$watch(function(a){return d(a)},function(a,c,d){z(b)&&b.apply(this,arguments);e()},c)}function k(a,b){if(!b)return a;var c=a.$$watchDelegate,c=c!==h&&c!==g?function(c,d,e,f){e=a(c,d,e,f);return b(e,c,d)}:function(c,d,e,f){e=a(c,d,e,f);c=b(e,c,d);return w(e)?c:e};a.$$watchDelegate&&a.$$watchDelegate!==
f?c.$$watchDelegate=a.$$watchDelegate:b.$stateful||(c.$$watchDelegate=f,c.inputs=a.inputs?a.inputs:[a]);return c}var n={csp:d.csp,expensiveChecks:!1},r={csp:d.csp,expensiveChecks:!0};return function(d,e,C){var m,u,p;switch(typeof d){case "string":p=d=d.trim();var q=C?a:b;m=q[p];m||(":"===d.charAt(0)&&":"===d.charAt(1)&&(u=!0,d=d.substring(2)),C=C?r:n,m=new gc(C),m=(new hc(m,c,C)).parse(d),m.constant?m.$$watchDelegate=l:u?m.$$watchDelegate=m.literal?h:g:m.inputs&&(m.$$watchDelegate=f),q[p]=m);return k(m,
e);case "function":return k(d,e);default:return v}}}]}function kf(){this.$get=["$rootScope","$exceptionHandler",function(b,a){return td(function(a){b.$evalAsync(a)},a)}]}function lf(){this.$get=["$browser","$exceptionHandler",function(b,a){return td(function(a){b.defer(a)},a)}]}function td(b,a){function c(a,b,c){function d(b){return function(c){e||(e=!0,b.call(a,c))}}var e=!1;return[d(b),d(c)]}function d(){this.$$state={status:0}}function e(a,b){return function(c){b.call(a,c)}}function f(c){!c.processScheduled&&
c.pending&&(c.processScheduled=!0,b(function(){var b,d,e;e=c.pending;c.processScheduled=!1;c.pending=t;for(var f=0,g=e.length;f<g;++f){d=e[f][0];b=e[f][c.status];try{z(b)?d.resolve(b(c.value)):1===c.status?d.resolve(c.value):d.reject(c.value)}catch(h){d.reject(h),a(h)}}}))}function g(){this.promise=new d;this.resolve=e(this,this.resolve);this.reject=e(this,this.reject);this.notify=e(this,this.notify)}var h=J("$q",TypeError);d.prototype={then:function(a,b,c){var d=new g;this.$$state.pending=this.$$state.pending||
[];this.$$state.pending.push([d,a,b,c]);0<this.$$state.status&&f(this.$$state);return d.promise},"catch":function(a){return this.then(null,a)},"finally":function(a,b){return this.then(function(b){return k(b,!0,a)},function(b){return k(b,!1,a)},b)}};g.prototype={resolve:function(a){this.promise.$$state.status||(a===this.promise?this.$$reject(h("qcycle",a)):this.$$resolve(a))},$$resolve:function(b){var d,e;e=c(this,this.$$resolve,this.$$reject);try{if(H(b)||z(b))d=b&&b.then;z(d)?(this.promise.$$state.status=
-1,d.call(b,e[0],e[1],this.notify)):(this.promise.$$state.value=b,this.promise.$$state.status=1,f(this.promise.$$state))}catch(g){e[1](g),a(g)}},reject:function(a){this.promise.$$state.status||this.$$reject(a)},$$reject:function(a){this.promise.$$state.value=a;this.promise.$$state.status=2;f(this.promise.$$state)},notify:function(c){var d=this.promise.$$state.pending;0>=this.promise.$$state.status&&d&&d.length&&b(function(){for(var b,e,f=0,g=d.length;f<g;f++){e=d[f][0];b=d[f][3];try{e.notify(z(b)?
b(c):c)}catch(h){a(h)}}})}};var l=function(a,b){var c=new g;b?c.resolve(a):c.reject(a);return c.promise},k=function(a,b,c){var d=null;try{z(c)&&(d=c())}catch(e){return l(e,!1)}return d&&z(d.then)?d.then(function(){return l(a,b)},function(a){return l(a,!1)}):l(a,b)},n=function(a,b,c,d){var e=new g;e.resolve(a);return e.promise.then(b,c,d)},r=function x(a){if(!z(a))throw h("norslvr",a);if(!(this instanceof x))return new x(a);var b=new g;a(function(a){b.resolve(a)},function(a){b.reject(a)});return b.promise};
r.defer=function(){return new g};r.reject=function(a){var b=new g;b.reject(a);return b.promise};r.when=n;r.resolve=n;r.all=function(a){var b=new g,c=0,d=G(a)?[]:{};m(a,function(a,e){c++;n(a).then(function(a){d.hasOwnProperty(e)||(d[e]=a,--c||b.resolve(d))},function(a){d.hasOwnProperty(e)||b.reject(a)})});0===c&&b.resolve(d);return b.promise};return r}function uf(){this.$get=["$window","$timeout",function(b,a){function c(){for(var a=0;a<n.length;a++){var b=n[a];b&&(n[a]=null,b())}k=n.length=0}function d(a){var b=
n.length;k++;n.push(a);0===b&&(l=h(c));return function(){0<=b&&(b=n[b]=null,0===--k&&l&&(l(),l=null,n.length=0))}}var e=b.requestAnimationFrame||b.webkitRequestAnimationFrame,f=b.cancelAnimationFrame||b.webkitCancelAnimationFrame||b.webkitCancelRequestAnimationFrame,g=!!e,h=g?function(a){var b=e(a);return function(){f(b)}}:function(b){var c=a(b,16.66,!1);return function(){a.cancel(c)}};d.supported=g;var l,k=0,n=[];return d}]}function jf(){function b(a){function b(){this.$$watchers=this.$$nextSibling=
this.$$childHead=this.$$childTail=null;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$id=++nb;this.$$ChildScope=null}b.prototype=a;return b}var a=10,c=J("$rootScope"),d=null,e=null;this.digestTtl=function(b){arguments.length&&(a=b);return a};this.$get=["$injector","$exceptionHandler","$parse","$browser",function(f,g,h,l){function k(a){a.currentScope.$$destroyed=!0}function n(){this.$id=++nb;this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=
this.$$childTail=null;this.$root=this;this.$$destroyed=!1;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$$isolateBindings=null}function r(a){if(p.$$phase)throw c("inprog",p.$$phase);p.$$phase=a}function s(a,b){do a.$$watchersCount+=b;while(a=a.$parent)}function x(a,b,c){do a.$$listenerCount[c]-=b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function q(){}function F(){for(;I.length;)try{I.shift()()}catch(a){g(a)}e=null}function u(){null===e&&(e=
l.defer(function(){p.$apply(F)}))}n.prototype={constructor:n,$new:function(a,c){var d;c=c||this;a?(d=new n,d.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=b(this)),d=new this.$$ChildScope);d.$parent=c;d.$$prevSibling=c.$$childTail;c.$$childHead?(c.$$childTail.$$nextSibling=d,c.$$childTail=d):c.$$childHead=c.$$childTail=d;(a||c!=this)&&d.$on("$destroy",k);return d},$watch:function(a,b,c,e){var f=h(a);if(f.$$watchDelegate)return f.$$watchDelegate(this,b,c,f,a);var g=this,k=g.$$watchers,l=
{fn:b,last:q,get:f,exp:e||a,eq:!!c};d=null;z(b)||(l.fn=v);k||(k=g.$$watchers=[]);k.unshift(l);s(this,1);return function(){0<=bb(k,l)&&s(g,-1);d=null}},$watchGroup:function(a,b){function c(){h=!1;k?(k=!1,b(e,e,g)):b(e,d,g)}var d=Array(a.length),e=Array(a.length),f=[],g=this,h=!1,k=!0;if(!a.length){var l=!0;g.$evalAsync(function(){l&&b(e,e,g)});return function(){l=!1}}if(1===a.length)return this.$watch(a[0],function(a,c,f){e[0]=a;d[0]=c;b(e,a===c?e:d,f)});m(a,function(a,b){var k=g.$watch(a,function(a,
f){e[b]=a;d[b]=f;h||(h=!0,g.$evalAsync(c))});f.push(k)});return function(){for(;f.length;)f.shift()()}},$watchCollection:function(a,b){function c(a){e=a;var b,d,g,h;if(!A(e)){if(H(e))if(Ea(e))for(f!==r&&(f=r,m=f.length=0,l++),a=e.length,m!==a&&(l++,f.length=m=a),b=0;b<a;b++)h=f[b],g=e[b],d=h!==h&&g!==g,d||h===g||(l++,f[b]=g);else{f!==s&&(f=s={},m=0,l++);a=0;for(b in e)e.hasOwnProperty(b)&&(a++,g=e[b],h=f[b],b in f?(d=h!==h&&g!==g,d||h===g||(l++,f[b]=g)):(m++,f[b]=g,l++));if(m>a)for(b in l++,f)e.hasOwnProperty(b)||
(m--,delete f[b])}else f!==e&&(f=e,l++);return l}}c.$stateful=!0;var d=this,e,f,g,k=1<b.length,l=0,n=h(a,c),r=[],s={},p=!0,m=0;return this.$watch(n,function(){p?(p=!1,b(e,e,d)):b(e,g,d);if(k)if(H(e))if(Ea(e)){g=Array(e.length);for(var a=0;a<e.length;a++)g[a]=e[a]}else for(a in g={},e)Xa.call(e,a)&&(g[a]=e[a]);else g=e})},$digest:function(){var b,f,h,k,n,s,m=a,x,u=[],E,I;r("$digest");l.$$checkUrlChange();this===p&&null!==e&&(l.defer.cancel(e),F());d=null;do{s=!1;for(x=this;t.length;){try{I=t.shift(),
I.scope.$eval(I.expression,I.locals)}catch(v){g(v)}d=null}a:do{if(k=x.$$watchers)for(n=k.length;n--;)try{if(b=k[n])if((f=b.get(x))!==(h=b.last)&&!(b.eq?ka(f,h):"number"===typeof f&&"number"===typeof h&&isNaN(f)&&isNaN(h)))s=!0,d=b,b.last=b.eq?fa(f,null):f,b.fn(f,h===q?f:h,x),5>m&&(E=4-m,u[E]||(u[E]=[]),u[E].push({msg:z(b.exp)?"fn: "+(b.exp.name||b.exp.toString()):b.exp,newVal:f,oldVal:h}));else if(b===d){s=!1;break a}}catch(A){g(A)}if(!(k=x.$$watchersCount&&x.$$childHead||x!==this&&x.$$nextSibling))for(;x!==
this&&!(k=x.$$nextSibling);)x=x.$parent}while(x=k);if((s||t.length)&&!m--)throw p.$$phase=null,c("infdig",a,u);}while(s||t.length);for(p.$$phase=null;w.length;)try{w.shift()()}catch(y){g(y)}},$destroy:function(){if(!this.$$destroyed){var a=this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;this===p&&l.$$applicationDestroyed();s(this,-this.$$watchersCount);for(var b in this.$$listenerCount)x(this,this.$$listenerCount[b],b);a&&a.$$childHead==this&&(a.$$childHead=this.$$nextSibling);a&&a.$$childTail==
this&&(a.$$childTail=this.$$prevSibling);this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling);this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling);this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=v;this.$on=this.$watch=this.$watchGroup=function(){return v};this.$$listeners={};this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=this.$$watchers=null}},$eval:function(a,b){return h(a)(this,b)},
$evalAsync:function(a,b){p.$$phase||t.length||l.defer(function(){t.length&&p.$digest()});t.push({scope:this,expression:a,locals:b})},$$postDigest:function(a){w.push(a)},$apply:function(a){try{return r("$apply"),this.$eval(a)}catch(b){g(b)}finally{p.$$phase=null;try{p.$digest()}catch(c){throw g(c),c;}}},$applyAsync:function(a){function b(){c.$eval(a)}var c=this;a&&I.push(b);u()},$on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||
(d.$$listenerCount[a]=0),d.$$listenerCount[a]++;while(d=d.$parent);var e=this;return function(){var d=c.indexOf(b);-1!==d&&(c[d]=null,x(e,1,a))}},$emit:function(a,b){var c=[],d,e=this,f=!1,h={name:a,targetScope:e,stopPropagation:function(){f=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},k=cb([h],arguments,1),l,n;do{d=e.$$listeners[a]||c;h.currentScope=e;l=0;for(n=d.length;l<n;l++)if(d[l])try{d[l].apply(null,k)}catch(r){g(r)}else d.splice(l,1),l--,n--;if(f)return h.currentScope=
null,h;e=e.$parent}while(e);h.currentScope=null;return h},$broadcast:function(a,b){var c=this,d=this,e={name:a,targetScope:this,preventDefault:function(){e.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[a])return e;for(var f=cb([e],arguments,1),h,k;c=d;){e.currentScope=c;d=c.$$listeners[a]||[];h=0;for(k=d.length;h<k;h++)if(d[h])try{d[h].apply(null,f)}catch(l){g(l)}else d.splice(h,1),h--,k--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&c.$$nextSibling))for(;c!==this&&!(d=
c.$$nextSibling);)c=c.$parent}e.currentScope=null;return e}};var p=new n,t=p.$$asyncQueue=[],w=p.$$postDigestQueue=[],I=p.$$applyAsyncQueue=[];return p}]}function he(){var b=/^\s*(https?|ftp|mailto|tel|file):/,a=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(a){return w(a)?(b=a,this):b};this.imgSrcSanitizationWhitelist=function(b){return w(b)?(a=b,this):a};this.$get=function(){return function(c,d){var e=d?a:b,f;f=Ba(c).href;return""===f||f.match(e)?c:"unsafe:"+
f}}}function Zf(b){if("self"===b)return b;if(L(b)){if(-1<b.indexOf("***"))throw Da("iwcard",b);b=ud(b).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*");return new RegExp("^"+b+"$")}if(Za(b))return new RegExp("^"+b.source+"$");throw Da("imatcher");}function vd(b){var a=[];w(b)&&m(b,function(b){a.push(Zf(b))});return a}function nf(){this.SCE_CONTEXTS=pa;var b=["self"],a=[];this.resourceUrlWhitelist=function(a){arguments.length&&(b=vd(a));return b};this.resourceUrlBlacklist=function(b){arguments.length&&
(a=vd(b));return a};this.$get=["$injector",function(c){function d(a,b){return"self"===a?gd(b):!!a.exec(b.href)}function e(a){var b=function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=function(){return this.$$unwrapTrustedValue()};b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};return b}var f=function(a){throw Da("unsafe");};c.has("$sanitize")&&(f=c.get("$sanitize"));var g=e(),h={};h[pa.HTML]=e(g);h[pa.CSS]=e(g);h[pa.URL]=
e(g);h[pa.JS]=e(g);h[pa.RESOURCE_URL]=e(h[pa.URL]);return{trustAs:function(a,b){var c=h.hasOwnProperty(a)?h[a]:null;if(!c)throw Da("icontext",a,b);if(null===b||b===t||""===b)return b;if("string"!==typeof b)throw Da("itype",a);return new c(b)},getTrusted:function(c,e){if(null===e||e===t||""===e)return e;var g=h.hasOwnProperty(c)?h[c]:null;if(g&&e instanceof g)return e.$$unwrapTrustedValue();if(c===pa.RESOURCE_URL){var g=Ba(e.toString()),r,s,m=!1;r=0;for(s=b.length;r<s;r++)if(d(b[r],g)){m=!0;break}if(m)for(r=
0,s=a.length;r<s;r++)if(d(a[r],g)){m=!1;break}if(m)return e;throw Da("insecurl",e.toString());}if(c===pa.HTML)return f(e);throw Da("unsafe");},valueOf:function(a){return a instanceof g?a.$$unwrapTrustedValue():a}}}]}function mf(){var b=!0;this.enabled=function(a){arguments.length&&(b=!!a);return b};this.$get=["$parse","$sceDelegate",function(a,c){if(b&&8>Ua)throw Da("iequirks");var d=ia(pa);d.isEnabled=function(){return b};d.trustAs=c.trustAs;d.getTrusted=c.getTrusted;d.valueOf=c.valueOf;b||(d.trustAs=
d.getTrusted=function(a,b){return b},d.valueOf=Ya);d.parseAs=function(b,c){var e=a(c);return e.literal&&e.constant?e:a(c,function(a){return d.getTrusted(b,a)})};var e=d.parseAs,f=d.getTrusted,g=d.trustAs;m(pa,function(a,b){var c=M(b);d[hb("parse_as_"+c)]=function(b){return e(a,b)};d[hb("get_trusted_"+c)]=function(b){return f(a,b)};d[hb("trust_as_"+c)]=function(b){return g(a,b)}});return d}]}function of(){this.$get=["$window","$document",function(b,a){var c={},d=W((/android (\d+)/.exec(M((b.navigator||
{}).userAgent))||[])[1]),e=/Boxee/i.test((b.navigator||{}).userAgent),f=a[0]||{},g,h=/^(Moz|webkit|ms)(?=[A-Z])/,l=f.body&&f.body.style,k=!1,n=!1;if(l){for(var r in l)if(k=h.exec(r)){g=k[0];g=g.substr(0,1).toUpperCase()+g.substr(1);break}g||(g="WebkitOpacity"in l&&"webkit");k=!!("transition"in l||g+"Transition"in l);n=!!("animation"in l||g+"Animation"in l);!d||k&&n||(k=L(l.webkitTransition),n=L(l.webkitAnimation))}return{history:!(!b.history||!b.history.pushState||4>d||e),hasEvent:function(a){if("input"===
a&&11>=Ua)return!1;if(A(c[a])){var b=f.createElement("div");c[a]="on"+a in b}return c[a]},csp:fb(),vendorPrefix:g,transitions:k,animations:n,android:d}}]}function qf(){this.$get=["$templateCache","$http","$q","$sce",function(b,a,c,d){function e(f,g){e.totalPendingRequests++;L(f)&&b.get(f)||(f=d.getTrustedResourceUrl(f));var h=a.defaults&&a.defaults.transformResponse;G(h)?h=h.filter(function(a){return a!==$b}):h===$b&&(h=null);return a.get(f,{cache:b,transformResponse:h})["finally"](function(){e.totalPendingRequests--}).then(function(a){b.put(f,
a.data);return a.data},function(a){if(!g)throw ea("tpload",f,a.status,a.statusText);return c.reject(a)})}e.totalPendingRequests=0;return e}]}function rf(){this.$get=["$rootScope","$browser","$location",function(b,a,c){return{findBindings:function(a,b,c){a=a.getElementsByClassName("ng-binding");var g=[];m(a,function(a){var d=ca.element(a).data("$binding");d&&m(d,function(d){c?(new RegExp("(^|\\s)"+ud(b)+"(\\s|\\||$)")).test(d)&&g.push(a):-1!=d.indexOf(b)&&g.push(a)})});return g},findModels:function(a,
b,c){for(var g=["ng-","data-ng-","ng\\:"],h=0;h<g.length;++h){var l=a.querySelectorAll("["+g[h]+"model"+(c?"=":"*=")+'"'+b+'"]');if(l.length)return l}},getLocation:function(){return c.url()},setLocation:function(a){a!==c.url()&&(c.url(a),b.$digest())},whenStable:function(b){a.notifyWhenNoOutstandingRequests(b)}}}]}function sf(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(b,a,c,d,e){function f(f,l,k){z(f)||(k=l,l=f,f=v);var n=za.call(arguments,3),r=w(k)&&!k,s=(r?d:c).defer(),
m=s.promise,q;q=a.defer(function(){try{s.resolve(f.apply(null,n))}catch(a){s.reject(a),e(a)}finally{delete g[m.$$timeoutId]}r||b.$apply()},l);m.$$timeoutId=q;g[q]=s;return m}var g={};f.cancel=function(b){return b&&b.$$timeoutId in g?(g[b.$$timeoutId].reject("canceled"),delete g[b.$$timeoutId],a.defer.cancel(b.$$timeoutId)):!1};return f}]}function Ba(b){Ua&&(X.setAttribute("href",b),b=X.href);X.setAttribute("href",b);return{href:X.href,protocol:X.protocol?X.protocol.replace(/:$/,""):"",host:X.host,
search:X.search?X.search.replace(/^\?/,""):"",hash:X.hash?X.hash.replace(/^#/,""):"",hostname:X.hostname,port:X.port,pathname:"/"===X.pathname.charAt(0)?X.pathname:"/"+X.pathname}}function gd(b){b=L(b)?Ba(b):b;return b.protocol===wd.protocol&&b.host===wd.host}function tf(){this.$get=ra(O)}function xd(b){function a(a){try{return decodeURIComponent(a)}catch(b){return a}}var c=b[0]||{},d={},e="";return function(){var b,g,h,l,k;b=c.cookie||"";if(b!==e)for(e=b,b=e.split("; "),d={},h=0;h<b.length;h++)g=
b[h],l=g.indexOf("="),0<l&&(k=a(g.substring(0,l)),d[k]===t&&(d[k]=a(g.substring(l+1))));return d}}function xf(){this.$get=xd}function Lc(b){function a(c,d){if(H(c)){var e={};m(c,function(b,c){e[c]=a(c,b)});return e}return b.factory(c+"Filter",d)}this.register=a;this.$get=["$injector",function(a){return function(b){return a.get(b+"Filter")}}];a("currency",yd);a("date",zd);a("filter",$f);a("json",ag);a("limitTo",bg);a("lowercase",cg);a("number",Ad);a("orderBy",Bd);a("uppercase",dg)}function $f(){return function(b,
a,c){if(!Ea(b)){if(null==b)return b;throw J("filter")("notarray",b);}var d;switch(ic(a)){case "function":break;case "boolean":case "null":case "number":case "string":d=!0;case "object":a=eg(a,c,d);break;default:return b}return Array.prototype.filter.call(b,a)}}function eg(b,a,c){var d=H(b)&&"$"in b;!0===a?a=ka:z(a)||(a=function(a,b){if(A(a))return!1;if(null===a||null===b)return a===b;if(H(b)||H(a)&&!rc(a))return!1;a=M(""+a);b=M(""+b);return-1!==a.indexOf(b)});return function(e){return d&&!H(e)?La(e,
b.$,a,!1):La(e,b,a,c)}}function La(b,a,c,d,e){var f=ic(b),g=ic(a);if("string"===g&&"!"===a.charAt(0))return!La(b,a.substring(1),c,d);if(G(b))return b.some(function(b){return La(b,a,c,d)});switch(f){case "object":var h;if(d){for(h in b)if("$"!==h.charAt(0)&&La(b[h],a,c,!0))return!0;return e?!1:La(b,a,c,!1)}if("object"===g){for(h in a)if(e=a[h],!z(e)&&!A(e)&&(f="$"===h,!La(f?b:b[h],e,c,f,f)))return!1;return!0}return c(b,a);case "function":return!1;default:return c(b,a)}}function ic(b){return null===
b?"null":typeof b}function yd(b){var a=b.NUMBER_FORMATS;return function(b,d,e){A(d)&&(d=a.CURRENCY_SYM);A(e)&&(e=a.PATTERNS[1].maxFrac);return null==b?b:Cd(b,a.PATTERNS[1],a.GROUP_SEP,a.DECIMAL_SEP,e).replace(/\u00A4/g,d)}}function Ad(b){var a=b.NUMBER_FORMATS;return function(b,d){return null==b?b:Cd(b,a.PATTERNS[0],a.GROUP_SEP,a.DECIMAL_SEP,d)}}function Cd(b,a,c,d,e){if(H(b))return"";var f=0>b;b=Math.abs(b);var g=Infinity===b;if(!g&&!isFinite(b))return"";var h=b+"",l="",k=!1,n=[];g&&(l="\u221e");
if(!g&&-1!==h.indexOf("e")){var r=h.match(/([\d\.]+)e(-?)(\d+)/);r&&"-"==r[2]&&r[3]>e+1?b=0:(l=h,k=!0)}if(g||k)0<e&&1>b&&(l=b.toFixed(e),b=parseFloat(l));else{g=(h.split(Dd)[1]||"").length;A(e)&&(e=Math.min(Math.max(a.minFrac,g),a.maxFrac));b=+(Math.round(+(b.toString()+"e"+e)).toString()+"e"+-e);var g=(""+b).split(Dd),h=g[0],g=g[1]||"",r=0,s=a.lgSize,m=a.gSize;if(h.length>=s+m)for(r=h.length-s,k=0;k<r;k++)0===(r-k)%m&&0!==k&&(l+=c),l+=h.charAt(k);for(k=r;k<h.length;k++)0===(h.length-k)%s&&0!==k&&
(l+=c),l+=h.charAt(k);for(;g.length<e;)g+="0";e&&"0"!==e&&(l+=d+g.substr(0,e))}0===b&&(f=!1);n.push(f?a.negPre:a.posPre,l,f?a.negSuf:a.posSuf);return n.join("")}function Gb(b,a,c){var d="";0>b&&(d="-",b=-b);for(b=""+b;b.length<a;)b="0"+b;c&&(b=b.substr(b.length-a));return d+b}function Y(b,a,c,d){c=c||0;return function(e){e=e["get"+b]();if(0<c||e>-c)e+=c;0===e&&-12==c&&(e=12);return Gb(e,a,d)}}function Hb(b,a){return function(c,d){var e=c["get"+b](),f=rb(a?"SHORT"+b:b);return d[f][e]}}function Ed(b){var a=
(new Date(b,0,1)).getDay();return new Date(b,0,(4>=a?5:12)-a)}function Fd(b){return function(a){var c=Ed(a.getFullYear());a=+new Date(a.getFullYear(),a.getMonth(),a.getDate()+(4-a.getDay()))-+c;a=1+Math.round(a/6048E5);return Gb(a,b)}}function jc(b,a){return 0>=b.getFullYear()?a.ERAS[0]:a.ERAS[1]}function zd(b){function a(a){var b;if(b=a.match(c)){a=new Date(0);var f=0,g=0,h=b[8]?a.setUTCFullYear:a.setFullYear,l=b[8]?a.setUTCHours:a.setHours;b[9]&&(f=W(b[9]+b[10]),g=W(b[9]+b[11]));h.call(a,W(b[1]),
W(b[2])-1,W(b[3]));f=W(b[4]||0)-f;g=W(b[5]||0)-g;h=W(b[6]||0);b=Math.round(1E3*parseFloat("0."+(b[7]||0)));l.call(a,f,g,h,b)}return a}var c=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(c,e,f){var g="",h=[],l,k;e=e||"mediumDate";e=b.DATETIME_FORMATS[e]||e;L(c)&&(c=fg.test(c)?W(c):a(c));V(c)&&(c=new Date(c));if(!aa(c)||!isFinite(c.getTime()))return c;for(;e;)(k=gg.exec(e))?(h=cb(h,k,1),e=h.pop()):(h.push(e),e=null);var n=c.getTimezoneOffset();
f&&(n=xc(f,c.getTimezoneOffset()),c=Pb(c,f,!0));m(h,function(a){l=hg[a];g+=l?l(c,b.DATETIME_FORMATS,n):a.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return g}}function ag(){return function(b,a){A(a)&&(a=2);return db(b,a)}}function bg(){return function(b,a,c){a=Infinity===Math.abs(Number(a))?Number(a):W(a);if(isNaN(a))return b;V(b)&&(b=b.toString());if(!G(b)&&!L(b))return b;c=!c||isNaN(c)?0:W(c);c=0>c&&c>=-b.length?b.length+c:c;return 0<=a?b.slice(c,c+a):0===c?b.slice(a,b.length):b.slice(Math.max(0,
c+a),c)}}function Bd(b){function a(a,c){c=c?-1:1;return a.map(function(a){var d=1,h=Ya;if(z(a))h=a;else if(L(a)){if("+"==a.charAt(0)||"-"==a.charAt(0))d="-"==a.charAt(0)?-1:1,a=a.substring(1);if(""!==a&&(h=b(a),h.constant))var l=h(),h=function(a){return a[l]}}return{get:h,descending:d*c}})}function c(a){switch(typeof a){case "number":case "boolean":case "string":return!0;default:return!1}}return function(b,e,f){if(!Ea(b))return b;G(e)||(e=[e]);0===e.length&&(e=["+"]);var g=a(e,f);b=Array.prototype.map.call(b,
function(a,b){return{value:a,predicateValues:g.map(function(d){var e=d.get(a);d=typeof e;if(null===e)d="string",e="null";else if("string"===d)e=e.toLowerCase();else if("object"===d)a:{if("function"===typeof e.valueOf&&(e=e.valueOf(),c(e)))break a;if(rc(e)&&(e=e.toString(),c(e)))break a;e=b}return{value:e,type:d}})}});b.sort(function(a,b){for(var c=0,d=0,e=g.length;d<e;++d){var c=a.predicateValues[d],f=b.predicateValues[d],m=0;c.type===f.type?c.value!==f.value&&(m=c.value<f.value?-1:1):m=c.type<f.type?
-1:1;if(c=m*g[d].descending)break}return c});return b=b.map(function(a){return a.value})}}function Ma(b){z(b)&&(b={link:b});b.restrict=b.restrict||"AC";return ra(b)}function Gd(b,a,c,d,e){var f=this,g=[],h=f.$$parentForm=b.parent().controller("form")||Ib;f.$error={};f.$$success={};f.$pending=t;f.$name=e(a.name||a.ngForm||"")(c);f.$dirty=!1;f.$pristine=!0;f.$valid=!0;f.$invalid=!1;f.$submitted=!1;h.$addControl(f);f.$rollbackViewValue=function(){m(g,function(a){a.$rollbackViewValue()})};f.$commitViewValue=
function(){m(g,function(a){a.$commitViewValue()})};f.$addControl=function(a){Ra(a.$name,"input");g.push(a);a.$name&&(f[a.$name]=a)};f.$$renameControl=function(a,b){var c=a.$name;f[c]===a&&delete f[c];f[b]=a;a.$name=b};f.$removeControl=function(a){a.$name&&f[a.$name]===a&&delete f[a.$name];m(f.$pending,function(b,c){f.$setValidity(c,null,a)});m(f.$error,function(b,c){f.$setValidity(c,null,a)});m(f.$$success,function(b,c){f.$setValidity(c,null,a)});bb(g,a)};Hd({ctrl:this,$element:b,set:function(a,b,
c){var d=a[b];d?-1===d.indexOf(c)&&d.push(c):a[b]=[c]},unset:function(a,b,c){var d=a[b];d&&(bb(d,c),0===d.length&&delete a[b])},parentForm:h,$animate:d});f.$setDirty=function(){d.removeClass(b,Va);d.addClass(b,Jb);f.$dirty=!0;f.$pristine=!1;h.$setDirty()};f.$setPristine=function(){d.setClass(b,Va,Jb+" ng-submitted");f.$dirty=!1;f.$pristine=!0;f.$submitted=!1;m(g,function(a){a.$setPristine()})};f.$setUntouched=function(){m(g,function(a){a.$setUntouched()})};f.$setSubmitted=function(){d.addClass(b,
"ng-submitted");f.$submitted=!0;h.$setSubmitted()}}function kc(b){b.$formatters.push(function(a){return b.$isEmpty(a)?a:a.toString()})}function kb(b,a,c,d,e,f){var g=M(a[0].type);if(!e.android){var h=!1;a.on("compositionstart",function(a){h=!0});a.on("compositionend",function(){h=!1;l()})}var l=function(b){k&&(f.defer.cancel(k),k=null);if(!h){var e=a.val();b=b&&b.type;"password"===g||c.ngTrim&&"false"===c.ngTrim||(e=R(e));(d.$viewValue!==e||""===e&&d.$$hasNativeValidators)&&d.$setViewValue(e,b)}};
if(e.hasEvent("input"))a.on("input",l);else{var k,n=function(a,b,c){k||(k=f.defer(function(){k=null;b&&b.value===c||l(a)}))};a.on("keydown",function(a){var b=a.keyCode;91===b||15<b&&19>b||37<=b&&40>=b||n(a,this,this.value)});if(e.hasEvent("paste"))a.on("paste cut",n)}a.on("change",l);d.$render=function(){a.val(d.$isEmpty(d.$viewValue)?"":d.$viewValue)}}function Kb(b,a){return function(c,d){var e,f;if(aa(c))return c;if(L(c)){'"'==c.charAt(0)&&'"'==c.charAt(c.length-1)&&(c=c.substring(1,c.length-1));
if(ig.test(c))return new Date(c);b.lastIndex=0;if(e=b.exec(c))return e.shift(),f=d?{yyyy:d.getFullYear(),MM:d.getMonth()+1,dd:d.getDate(),HH:d.getHours(),mm:d.getMinutes(),ss:d.getSeconds(),sss:d.getMilliseconds()/1E3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},m(e,function(b,c){c<a.length&&(f[a[c]]=+b)}),new Date(f.yyyy,f.MM-1,f.dd,f.HH,f.mm,f.ss||0,1E3*f.sss||0)}return NaN}}function lb(b,a,c,d){return function(e,f,g,h,l,k,n){function r(a){return a&&!(a.getTime&&a.getTime()!==a.getTime())}function s(a){return w(a)?
aa(a)?a:c(a):t}Id(e,f,g,h);kb(e,f,g,h,l,k);var m=h&&h.$options&&h.$options.timezone,q;h.$$parserName=b;h.$parsers.push(function(b){return h.$isEmpty(b)?null:a.test(b)?(b=c(b,q),m&&(b=Pb(b,m)),b):t});h.$formatters.push(function(a){if(a&&!aa(a))throw Lb("datefmt",a);if(r(a))return(q=a)&&m&&(q=Pb(q,m,!0)),n("date")(a,d,m);q=null;return""});if(w(g.min)||g.ngMin){var F;h.$validators.min=function(a){return!r(a)||A(F)||c(a)>=F};g.$observe("min",function(a){F=s(a);h.$validate()})}if(w(g.max)||g.ngMax){var u;
h.$validators.max=function(a){return!r(a)||A(u)||c(a)<=u};g.$observe("max",function(a){u=s(a);h.$validate()})}}}function Id(b,a,c,d){(d.$$hasNativeValidators=H(a[0].validity))&&d.$parsers.push(function(b){var c=a.prop("validity")||{};return c.badInput&&!c.typeMismatch?t:b})}function Jd(b,a,c,d,e){if(w(d)){b=b(d);if(!b.constant)throw J("ngModel")("constexpr",c,d);return b(a)}return e}function lc(b,a){b="ngClass"+b;return["$animate",function(c){function d(a,b){var c=[],d=0;a:for(;d<a.length;d++){for(var e=
a[d],n=0;n<b.length;n++)if(e==b[n])continue a;c.push(e)}return c}function e(a){var b=[];return G(a)?(m(a,function(a){b=b.concat(e(a))}),b):L(a)?a.split(" "):H(a)?(m(a,function(a,c){a&&(b=b.concat(c.split(" ")))}),b):a}return{restrict:"AC",link:function(f,g,h){function l(a,b){var c=g.data("$classCounts")||ga(),d=[];m(a,function(a){if(0<b||c[a])c[a]=(c[a]||0)+b,c[a]===+(0<b)&&d.push(a)});g.data("$classCounts",c);return d.join(" ")}function k(b){if(!0===a||f.$index%2===a){var k=e(b||[]);if(!n){var m=
l(k,1);h.$addClass(m)}else if(!ka(b,n)){var q=e(n),m=d(k,q),k=d(q,k),m=l(m,1),k=l(k,-1);m&&m.length&&c.addClass(g,m);k&&k.length&&c.removeClass(g,k)}}n=ia(b)}var n;f.$watch(h[b],k,!0);h.$observe("class",function(a){k(f.$eval(h[b]))});"ngClass"!==b&&f.$watch("$index",function(c,d){var g=c&1;if(g!==(d&1)){var k=e(f.$eval(h[b]));g===a?(g=l(k,1),h.$addClass(g)):(g=l(k,-1),h.$removeClass(g))}})}}}]}function Hd(b){function a(a,b){b&&!f[a]?(k.addClass(e,a),f[a]=!0):!b&&f[a]&&(k.removeClass(e,a),f[a]=!1)}
function c(b,c){b=b?"-"+Bc(b,"-"):"";a(mb+b,!0===c);a(Kd+b,!1===c)}var d=b.ctrl,e=b.$element,f={},g=b.set,h=b.unset,l=b.parentForm,k=b.$animate;f[Kd]=!(f[mb]=e.hasClass(mb));d.$setValidity=function(b,e,f){e===t?(d.$pending||(d.$pending={}),g(d.$pending,b,f)):(d.$pending&&h(d.$pending,b,f),Ld(d.$pending)&&(d.$pending=t));ab(e)?e?(h(d.$error,b,f),g(d.$$success,b,f)):(g(d.$error,b,f),h(d.$$success,b,f)):(h(d.$error,b,f),h(d.$$success,b,f));d.$pending?(a(Md,!0),d.$valid=d.$invalid=t,c("",null)):(a(Md,
!1),d.$valid=Ld(d.$error),d.$invalid=!d.$valid,c("",d.$valid));e=d.$pending&&d.$pending[b]?t:d.$error[b]?!1:d.$$success[b]?!0:null;c(b,e);l.$setValidity(b,e,d)}}function Ld(b){if(b)for(var a in b)if(b.hasOwnProperty(a))return!1;return!0}var jg=/^\/(.+)\/([a-z]*)$/,M=function(b){return L(b)?b.toLowerCase():b},Xa=Object.prototype.hasOwnProperty,rb=function(b){return L(b)?b.toUpperCase():b},Ua,y,la,za=[].slice,Mf=[].splice,kg=[].push,sa=Object.prototype.toString,sc=Object.getPrototypeOf,Fa=J("ng"),ca=
O.angular||(O.angular={}),gb,nb=0;Ua=U.documentMode;v.$inject=[];Ya.$inject=[];var G=Array.isArray,uc=/^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/,R=function(b){return L(b)?b.trim():b},ud=function(b){return b.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},fb=function(){if(w(fb.isActive_))return fb.isActive_;var b=!(!U.querySelector("[ng-csp]")&&!U.querySelector("[data-ng-csp]"));if(!b)try{new Function("")}catch(a){b=!0}return fb.isActive_=
b},pb=function(){if(w(pb.name_))return pb.name_;var b,a,c=Oa.length,d,e;for(a=0;a<c;++a)if(d=Oa[a],b=U.querySelector("["+d.replace(":","\\:")+"jq]")){e=b.getAttribute(d+"jq");break}return pb.name_=e},Oa=["ng-","data-ng-","ng:","x-ng-"],be=/[A-Z]/g,Cc=!1,Rb,qa=1,Na=3,fe={full:"1.4.3",major:1,minor:4,dot:3,codeName:"foam-acceleration"};Q.expando="ng339";var ib=Q.cache={},Df=1;Q._data=function(b){return this.cache[b[this.expando]]||{}};var yf=/([\:\-\_]+(.))/g,zf=/^moz([A-Z])/,lg={mouseleave:"mouseout",
mouseenter:"mouseover"},Ub=J("jqLite"),Cf=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,Tb=/<|&#?\w+;/,Af=/<([\w:]+)/,Bf=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,na={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};na.optgroup=na.option;na.tbody=na.tfoot=na.colgroup=na.caption=na.thead;
na.th=na.td;var Pa=Q.prototype={ready:function(b){function a(){c||(c=!0,b())}var c=!1;"complete"===U.readyState?setTimeout(a):(this.on("DOMContentLoaded",a),Q(O).on("load",a))},toString:function(){var b=[];m(this,function(a){b.push(""+a)});return"["+b.join(", ")+"]"},eq:function(b){return 0<=b?y(this[b]):y(this[this.length+b])},length:0,push:kg,sort:[].sort,splice:[].splice},Ab={};m("multiple selected checked disabled readOnly required open".split(" "),function(b){Ab[M(b)]=b});var Tc={};m("input select option textarea button form details".split(" "),
function(b){Tc[b]=!0});var Uc={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};m({data:Wb,removeData:ub,hasData:function(b){for(var a in ib[b.ng339])return!0;return!1}},function(b,a){Q[a]=b});m({data:Wb,inheritedData:zb,scope:function(b){return y.data(b,"$scope")||zb(b.parentNode||b,["$isolateScope","$scope"])},isolateScope:function(b){return y.data(b,"$isolateScope")||y.data(b,"$isolateScopeNoTemplate")},controller:Qc,injector:function(b){return zb(b,
"$injector")},removeAttr:function(b,a){b.removeAttribute(a)},hasClass:wb,css:function(b,a,c){a=hb(a);if(w(c))b.style[a]=c;else return b.style[a]},attr:function(b,a,c){var d=b.nodeType;if(d!==Na&&2!==d&&8!==d)if(d=M(a),Ab[d])if(w(c))c?(b[a]=!0,b.setAttribute(a,d)):(b[a]=!1,b.removeAttribute(d));else return b[a]||(b.attributes.getNamedItem(a)||v).specified?d:t;else if(w(c))b.setAttribute(a,c);else if(b.getAttribute)return b=b.getAttribute(a,2),null===b?t:b},prop:function(b,a,c){if(w(c))b[a]=c;else return b[a]},
text:function(){function b(a,b){if(A(b)){var d=a.nodeType;return d===qa||d===Na?a.textContent:""}a.textContent=b}b.$dv="";return b}(),val:function(b,a){if(A(a)){if(b.multiple&&"select"===ta(b)){var c=[];m(b.options,function(a){a.selected&&c.push(a.value||a.text)});return 0===c.length?null:c}return b.value}b.value=a},html:function(b,a){if(A(a))return b.innerHTML;tb(b,!0);b.innerHTML=a},empty:Rc},function(b,a){Q.prototype[a]=function(a,d){var e,f,g=this.length;if(b!==Rc&&(2==b.length&&b!==wb&&b!==Qc?
a:d)===t){if(H(a)){for(e=0;e<g;e++)if(b===Wb)b(this[e],a);else for(f in a)b(this[e],f,a[f]);return this}e=b.$dv;g=e===t?Math.min(g,1):g;for(f=0;f<g;f++){var h=b(this[f],a,d);e=e?e+h:h}return e}for(e=0;e<g;e++)b(this[e],a,d);return this}});m({removeData:ub,on:function a(c,d,e,f){if(w(f))throw Ub("onargs");if(Mc(c)){var g=vb(c,!0);f=g.events;var h=g.handle;h||(h=g.handle=Gf(c,f));for(var g=0<=d.indexOf(" ")?d.split(" "):[d],l=g.length;l--;){d=g[l];var k=f[d];k||(f[d]=[],"mouseenter"===d||"mouseleave"===
d?a(c,lg[d],function(a){var c=a.relatedTarget;c&&(c===this||this.contains(c))||h(a,d)}):"$destroy"!==d&&c.addEventListener(d,h,!1),k=f[d]);k.push(e)}}},off:Pc,one:function(a,c,d){a=y(a);a.on(c,function f(){a.off(c,d);a.off(c,f)});a.on(c,d)},replaceWith:function(a,c){var d,e=a.parentNode;tb(a);m(new Q(c),function(c){d?e.insertBefore(c,d.nextSibling):e.replaceChild(c,a);d=c})},children:function(a){var c=[];m(a.childNodes,function(a){a.nodeType===qa&&c.push(a)});return c},contents:function(a){return a.contentDocument||
a.childNodes||[]},append:function(a,c){var d=a.nodeType;if(d===qa||11===d){c=new Q(c);for(var d=0,e=c.length;d<e;d++)a.appendChild(c[d])}},prepend:function(a,c){if(a.nodeType===qa){var d=a.firstChild;m(new Q(c),function(c){a.insertBefore(c,d)})}},wrap:function(a,c){c=y(c).eq(0).clone()[0];var d=a.parentNode;d&&d.replaceChild(c,a);c.appendChild(a)},remove:Xb,detach:function(a){Xb(a,!0)},after:function(a,c){var d=a,e=a.parentNode;c=new Q(c);for(var f=0,g=c.length;f<g;f++){var h=c[f];e.insertBefore(h,
d.nextSibling);d=h}},addClass:yb,removeClass:xb,toggleClass:function(a,c,d){c&&m(c.split(" "),function(c){var f=d;A(f)&&(f=!wb(a,c));(f?yb:xb)(a,c)})},parent:function(a){return(a=a.parentNode)&&11!==a.nodeType?a:null},next:function(a){return a.nextElementSibling},find:function(a,c){return a.getElementsByTagName?a.getElementsByTagName(c):[]},clone:Vb,triggerHandler:function(a,c,d){var e,f,g=c.type||c,h=vb(a);if(h=(h=h&&h.events)&&h[g])e={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===
this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:v,type:g,target:a},c.type&&(e=P(e,c)),c=ia(h),f=d?[e].concat(d):[e],m(c,function(c){e.isImmediatePropagationStopped()||c.apply(a,f)})}},function(a,c){Q.prototype[c]=function(c,e,f){for(var g,h=0,l=this.length;h<l;h++)A(g)?(g=a(this[h],c,e,f),w(g)&&(g=y(g))):Oc(g,a(this[h],c,e,f));return w(g)?g:this};Q.prototype.bind=
Q.prototype.on;Q.prototype.unbind=Q.prototype.off});Sa.prototype={put:function(a,c){this[Ga(a,this.nextUid)]=c},get:function(a){return this[Ga(a,this.nextUid)]},remove:function(a){var c=this[a=Ga(a,this.nextUid)];delete this[a];return c}};var wf=[function(){this.$get=[function(){return Sa}]}],Wc=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,mg=/,/,ng=/^\s*(_?)(\S+?)\1\s*$/,Vc=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,Ha=J("$injector");eb.$$annotate=function(a,c,d){var e;if("function"===typeof a){if(!(e=a.$inject)){e=
[];if(a.length){if(c)throw L(d)&&d||(d=a.name||Hf(a)),Ha("strictdi",d);c=a.toString().replace(Vc,"");c=c.match(Wc);m(c[1].split(mg),function(a){a.replace(ng,function(a,c,d){e.push(d)})})}a.$inject=e}}else G(a)?(c=a.length-1,Qa(a[c],"fn"),e=a.slice(0,c)):Qa(a,"fn",!0);return e};var Nd=J("$animate"),Ue=function(){this.$get=["$q","$$rAF",function(a,c){function d(){}d.all=v;d.chain=v;d.prototype={end:v,cancel:v,resume:v,pause:v,complete:v,then:function(d,f){return a(function(a){c(function(){a()})}).then(d,
f)}};return d}]},Te=function(){var a=new Sa,c=[];this.$get=["$$AnimateRunner","$rootScope",function(d,e){function f(d,f,l){var k=a.get(d);k||(a.put(d,k={}),c.push(d));f&&m(f.split(" "),function(a){a&&(k[a]=!0)});l&&m(l.split(" "),function(a){a&&(k[a]=!1)});1<c.length||e.$$postDigest(function(){m(c,function(c){var d=a.get(c);if(d){var e=If(c.attr("class")),f="",g="";m(d,function(a,c){a!==!!e[c]&&(a?f+=(f.length?" ":"")+c:g+=(g.length?" ":"")+c)});m(c,function(a){f&&yb(a,f);g&&xb(a,g)});a.remove(c)}});
c.length=0})}return{enabled:v,on:v,off:v,pin:v,push:function(a,c,e,k){k&&k();e=e||{};e.from&&a.css(e.from);e.to&&a.css(e.to);(e.addClass||e.removeClass)&&f(a,e.addClass,e.removeClass);return new d}}}]},Se=["$provide",function(a){var c=this;this.$$registeredAnimations=Object.create(null);this.register=function(d,e){if(d&&"."!==d.charAt(0))throw Nd("notcsel",d);var f=d+"-animation";c.$$registeredAnimations[d.substr(1)]=f;a.factory(f,e)};this.classNameFilter=function(a){if(1===arguments.length&&(this.$$classNameFilter=
a instanceof RegExp?a:null)&&/(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString()))throw Nd("nongcls","ng-animate");return this.$$classNameFilter};this.$get=["$$animateQueue",function(a){function c(a,d,e){if(e){var l;a:{for(l=0;l<e.length;l++){var k=e[l];if(1===k.nodeType){l=k;break a}}l=void 0}!l||l.parentNode||l.previousElementSibling||(e=null)}e?e.after(a):d.prepend(a)}return{on:a.on,off:a.off,pin:a.pin,enabled:a.enabled,cancel:function(a){a.end&&a.end()},enter:function(f,g,h,l){g=
g&&y(g);h=h&&y(h);g=g||h.parent();c(f,g,h);return a.push(f,"enter",Ia(l))},move:function(f,g,h,l){g=g&&y(g);h=h&&y(h);g=g||h.parent();c(f,g,h);return a.push(f,"move",Ia(l))},leave:function(c,e){return a.push(c,"leave",Ia(e),function(){c.remove()})},addClass:function(c,e,h){h=Ia(h);h.addClass=jb(h.addclass,e);return a.push(c,"addClass",h)},removeClass:function(c,e,h){h=Ia(h);h.removeClass=jb(h.removeClass,e);return a.push(c,"removeClass",h)},setClass:function(c,e,h,l){l=Ia(l);l.addClass=jb(l.addClass,
e);l.removeClass=jb(l.removeClass,h);return a.push(c,"setClass",l)},animate:function(c,e,h,l,k){k=Ia(k);k.from=k.from?P(k.from,e):e;k.to=k.to?P(k.to,h):h;k.tempClasses=jb(k.tempClasses,l||"ng-inline-animate");return a.push(c,"animate",k)}}}]}],ea=J("$compile");Ec.$inject=["$provide","$$sanitizeUriProvider"];var Zc=/^((?:x|data)[\:\-_])/i,Nf=J("$controller"),Xc=/^(\S+)(\s+as\s+(\w+))?$/,cd="application/json",ac={"Content-Type":cd+";charset=utf-8"},Pf=/^\[|^\{(?!\{)/,Qf={"[":/]$/,"{":/}$/},Of=/^\)\]\}',?\n/,
Ka=ca.$interpolateMinErr=J("$interpolate");Ka.throwNoconcat=function(a){throw Ka("noconcat",a);};Ka.interr=function(a,c){return Ka("interr",a,c.toString())};var og=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,Tf={http:80,https:443,ftp:21},Cb=J("$location"),pg={$$html5:!1,$$replace:!1,absUrl:Db("$$absUrl"),url:function(a){if(A(a))return this.$$url;var c=og.exec(a);(c[1]||""===a)&&this.path(decodeURIComponent(c[1]));(c[2]||c[1]||""===a)&&this.search(c[3]||"");this.hash(c[5]||"");return this},protocol:Db("$$protocol"),
host:Db("$$host"),port:Db("$$port"),path:kd("$$path",function(a){a=null!==a?a.toString():"";return"/"==a.charAt(0)?a:"/"+a}),search:function(a,c){switch(arguments.length){case 0:return this.$$search;case 1:if(L(a)||V(a))a=a.toString(),this.$$search=zc(a);else if(H(a))a=fa(a,{}),m(a,function(c,e){null==c&&delete a[e]}),this.$$search=a;else throw Cb("isrcharg");break;default:A(c)||null===c?delete this.$$search[a]:this.$$search[a]=c}this.$$compose();return this},hash:kd("$$hash",function(a){return null!==
a?a.toString():""}),replace:function(){this.$$replace=!0;return this}};m([jd,ec,dc],function(a){a.prototype=Object.create(pg);a.prototype.state=function(c){if(!arguments.length)return this.$$state;if(a!==dc||!this.$$html5)throw Cb("nostate");this.$$state=A(c)?null:c;return this}});var da=J("$parse"),Uf=Function.prototype.call,Vf=Function.prototype.apply,Wf=Function.prototype.bind,Mb=ga();m("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(a){Mb[a]=!0});var qg={n:"\n",f:"\f",r:"\r",
t:"\t",v:"\v","'":"'",'"':'"'},gc=function(a){this.options=a};gc.prototype={constructor:gc,lex:function(a){this.text=a;this.index=0;for(this.tokens=[];this.index<this.text.length;)if(a=this.text.charAt(this.index),'"'===a||"'"===a)this.readString(a);else if(this.isNumber(a)||"."===a&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(a))this.readIdent();else if(this.is(a,"(){}[].,;:?"))this.tokens.push({index:this.index,text:a}),this.index++;else if(this.isWhitespace(a))this.index++;
else{var c=a+this.peek(),d=c+this.peek(2),e=Mb[c],f=Mb[d];Mb[a]||e||f?(a=f?d:e?c:a,this.tokens.push({index:this.index,text:a,operator:!0}),this.index+=a.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(a,c){return-1!==c.indexOf(a)},peek:function(a){a=a||1;return this.index+a<this.text.length?this.text.charAt(this.index+a):!1},isNumber:function(a){return"0"<=a&&"9">=a&&"string"===typeof a},isWhitespace:function(a){return" "===a||"\r"===a||
"\t"===a||"\n"===a||"\v"===a||"\u00a0"===a},isIdent:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},throwError:function(a,c,d){d=d||this.index;c=w(c)?"s "+c+"-"+this.index+" ["+this.text.substring(c,d)+"]":" "+d;throw da("lexerr",a,c,this.text);},readNumber:function(){for(var a="",c=this.index;this.index<this.text.length;){var d=M(this.text.charAt(this.index));if("."==d||this.isNumber(d))a+=d;else{var e=this.peek();
if("e"==d&&this.isExpOperator(e))a+=d;else if(this.isExpOperator(d)&&e&&this.isNumber(e)&&"e"==a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||e&&this.isNumber(e)||"e"!=a.charAt(a.length-1))break;else this.throwError("Invalid exponent")}this.index++}this.tokens.push({index:c,text:a,constant:!0,value:Number(a)})},readIdent:function(){for(var a=this.index;this.index<this.text.length;){var c=this.text.charAt(this.index);if(!this.isIdent(c)&&!this.isNumber(c))break;this.index++}this.tokens.push({index:a,
text:this.text.slice(a,this.index),identifier:!0})},readString:function(a){var c=this.index;this.index++;for(var d="",e=a,f=!1;this.index<this.text.length;){var g=this.text.charAt(this.index),e=e+g;if(f)"u"===g?(f=this.text.substring(this.index+1,this.index+5),f.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+f+"]"),this.index+=4,d+=String.fromCharCode(parseInt(f,16))):d+=qg[g]||g,f=!1;else if("\\"===g)f=!0;else{if(g===a){this.index++;this.tokens.push({index:c,text:e,constant:!0,
value:d});return}d+=g}this.index++}this.throwError("Unterminated quote",c)}};var q=function(a,c){this.lexer=a;this.options=c};q.Program="Program";q.ExpressionStatement="ExpressionStatement";q.AssignmentExpression="AssignmentExpression";q.ConditionalExpression="ConditionalExpression";q.LogicalExpression="LogicalExpression";q.BinaryExpression="BinaryExpression";q.UnaryExpression="UnaryExpression";q.CallExpression="CallExpression";q.MemberExpression="MemberExpression";q.Identifier="Identifier";q.Literal=
"Literal";q.ArrayExpression="ArrayExpression";q.Property="Property";q.ObjectExpression="ObjectExpression";q.ThisExpression="ThisExpression";q.NGValueParameter="NGValueParameter";q.prototype={ast:function(a){this.text=a;this.tokens=this.lexer.lex(a);a=this.program();0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]);return a},program:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.expressionStatement()),!this.expect(";"))return{type:q.Program,
body:a}},expressionStatement:function(){return{type:q.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var a=this.expression();this.expect("|");)a=this.filter(a);return a},expression:function(){return this.assignment()},assignment:function(){var a=this.ternary();this.expect("=")&&(a={type:q.AssignmentExpression,left:a,right:this.assignment(),operator:"="});return a},ternary:function(){var a=this.logicalOR(),c,d;return this.expect("?")&&(c=this.expression(),this.consume(":"))?
(d=this.expression(),{type:q.ConditionalExpression,test:a,alternate:c,consequent:d}):a},logicalOR:function(){for(var a=this.logicalAND();this.expect("||");)a={type:q.LogicalExpression,operator:"||",left:a,right:this.logicalAND()};return a},logicalAND:function(){for(var a=this.equality();this.expect("&&");)a={type:q.LogicalExpression,operator:"&&",left:a,right:this.equality()};return a},equality:function(){for(var a=this.relational(),c;c=this.expect("==","!=","===","!==");)a={type:q.BinaryExpression,
operator:c.text,left:a,right:this.relational()};return a},relational:function(){for(var a=this.additive(),c;c=this.expect("<",">","<=",">=");)a={type:q.BinaryExpression,operator:c.text,left:a,right:this.additive()};return a},additive:function(){for(var a=this.multiplicative(),c;c=this.expect("+","-");)a={type:q.BinaryExpression,operator:c.text,left:a,right:this.multiplicative()};return a},multiplicative:function(){for(var a=this.unary(),c;c=this.expect("*","/","%");)a={type:q.BinaryExpression,operator:c.text,
left:a,right:this.unary()};return a},unary:function(){var a;return(a=this.expect("+","-","!"))?{type:q.UnaryExpression,operator:a.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var a;this.expect("(")?(a=this.filterChain(),this.consume(")")):this.expect("[")?a=this.arrayDeclaration():this.expect("{")?a=this.object():this.constants.hasOwnProperty(this.peek().text)?a=fa(this.constants[this.consume().text]):this.peek().identifier?a=this.identifier():this.peek().constant?a=this.constant():
this.throwError("not a primary expression",this.peek());for(var c;c=this.expect("(","[",".");)"("===c.text?(a={type:q.CallExpression,callee:a,arguments:this.parseArguments()},this.consume(")")):"["===c.text?(a={type:q.MemberExpression,object:a,property:this.expression(),computed:!0},this.consume("]")):"."===c.text?a={type:q.MemberExpression,object:a,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return a},filter:function(a){a=[a];for(var c={type:q.CallExpression,callee:this.identifier(),
arguments:a,filter:!0};this.expect(":");)a.push(this.expression());return c},parseArguments:function(){var a=[];if(")"!==this.peekToken().text){do a.push(this.expression());while(this.expect(","))}return a},identifier:function(){var a=this.consume();a.identifier||this.throwError("is not a valid identifier",a);return{type:q.Identifier,name:a.text}},constant:function(){return{type:q.Literal,value:this.consume().value}},arrayDeclaration:function(){var a=[];if("]"!==this.peekToken().text){do{if(this.peek("]"))break;
a.push(this.expression())}while(this.expect(","))}this.consume("]");return{type:q.ArrayExpression,elements:a}},object:function(){var a=[],c;if("}"!==this.peekToken().text){do{if(this.peek("}"))break;c={type:q.Property,kind:"init"};this.peek().constant?c.key=this.constant():this.peek().identifier?c.key=this.identifier():this.throwError("invalid key",this.peek());this.consume(":");c.value=this.expression();a.push(c)}while(this.expect(","))}this.consume("}");return{type:q.ObjectExpression,properties:a}},
throwError:function(a,c){throw da("syntax",c.text,a,c.index+1,this.text,this.text.substring(c.index));},consume:function(a){if(0===this.tokens.length)throw da("ueoe",this.text);var c=this.expect(a);c||this.throwError("is unexpected, expecting ["+a+"]",this.peek());return c},peekToken:function(){if(0===this.tokens.length)throw da("ueoe",this.text);return this.tokens[0]},peek:function(a,c,d,e){return this.peekAhead(0,a,c,d,e)},peekAhead:function(a,c,d,e,f){if(this.tokens.length>a){a=this.tokens[a];
var g=a.text;if(g===c||g===d||g===e||g===f||!(c||d||e||f))return a}return!1},expect:function(a,c,d,e){return(a=this.peek(a,c,d,e))?(this.tokens.shift(),a):!1},constants:{"true":{type:q.Literal,value:!0},"false":{type:q.Literal,value:!1},"null":{type:q.Literal,value:null},undefined:{type:q.Literal,value:t},"this":{type:q.ThisExpression}}};rd.prototype={compile:function(a,c){var d=this,e=this.astBuilder.ast(a);this.state={nextId:0,filters:{},expensiveChecks:c,fn:{vars:[],body:[],own:{}},assign:{vars:[],
body:[],own:{}},inputs:[]};T(e,d.$filter);var f="",g;this.stage="assign";if(g=pd(e))this.state.computing="assign",f=this.nextId(),this.recurse(g,f),f="fn.assign="+this.generateFunction("assign","s,v,l");g=nd(e.body);d.stage="inputs";m(g,function(a,c){var e="fn"+c;d.state[e]={vars:[],body:[],own:{}};d.state.computing=e;var f=d.nextId();d.recurse(a,f);d.return_(f);d.state.inputs.push(e);a.watchId=c});this.state.computing="fn";this.stage="main";this.recurse(e);f='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+
"var fn="+this.generateFunction("fn","s,l,a,i")+f+this.watchFns()+"return fn;";f=(new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","ifDefined","plus","text",f))(this.$filter,Ca,oa,ld,Xf,md,a);this.state=this.stage=t;f.literal=qd(e);f.constant=e.constant;return f},USE:"use",STRICT:"strict",watchFns:function(){var a=[],c=this.state.inputs,d=this;m(c,function(c){a.push("var "+c+"="+d.generateFunction(c,"s"))});c.length&&a.push("fn.inputs=["+c.join(",")+"];");return a.join("")},
generateFunction:function(a,c){return"function("+c+"){"+this.varsPrefix(a)+this.body(a)+"};"},filterPrefix:function(){var a=[],c=this;m(this.state.filters,function(d,e){a.push(d+"=$filter("+c.escape(e)+")")});return a.length?"var "+a.join(",")+";":""},varsPrefix:function(a){return this.state[a].vars.length?"var "+this.state[a].vars.join(",")+";":""},body:function(a){return this.state[a].body.join("")},recurse:function(a,c,d,e,f,g){var h,l,k=this,n,r;e=e||v;if(!g&&w(a.watchId))c=c||this.nextId(),this.if_("i",
this.lazyAssign(c,this.computedMember("i",a.watchId)),this.lazyRecurse(a,c,d,e,f,!0));else switch(a.type){case q.Program:m(a.body,function(c,d){k.recurse(c.expression,t,t,function(a){l=a});d!==a.body.length-1?k.current().body.push(l,";"):k.return_(l)});break;case q.Literal:r=this.escape(a.value);this.assign(c,r);e(r);break;case q.UnaryExpression:this.recurse(a.argument,t,t,function(a){l=a});r=a.operator+"("+this.ifDefined(l,0)+")";this.assign(c,r);e(r);break;case q.BinaryExpression:this.recurse(a.left,
t,t,function(a){h=a});this.recurse(a.right,t,t,function(a){l=a});r="+"===a.operator?this.plus(h,l):"-"===a.operator?this.ifDefined(h,0)+a.operator+this.ifDefined(l,0):"("+h+")"+a.operator+"("+l+")";this.assign(c,r);e(r);break;case q.LogicalExpression:c=c||this.nextId();k.recurse(a.left,c);k.if_("&&"===a.operator?c:k.not(c),k.lazyRecurse(a.right,c));e(c);break;case q.ConditionalExpression:c=c||this.nextId();k.recurse(a.test,c);k.if_(c,k.lazyRecurse(a.alternate,c),k.lazyRecurse(a.consequent,c));e(c);
break;case q.Identifier:c=c||this.nextId();d&&(d.context="inputs"===k.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",a.name)+"?l:s"),d.computed=!1,d.name=a.name);Ca(a.name);k.if_("inputs"===k.stage||k.not(k.getHasOwnProperty("l",a.name)),function(){k.if_("inputs"===k.stage||"s",function(){f&&1!==f&&k.if_(k.not(k.nonComputedMember("s",a.name)),k.lazyAssign(k.nonComputedMember("s",a.name),"{}"));k.assign(c,k.nonComputedMember("s",a.name))})},c&&k.lazyAssign(c,k.nonComputedMember("l",
a.name)));(k.state.expensiveChecks||Fb(a.name))&&k.addEnsureSafeObject(c);e(c);break;case q.MemberExpression:h=d&&(d.context=this.nextId())||this.nextId();c=c||this.nextId();k.recurse(a.object,h,t,function(){k.if_(k.notNull(h),function(){if(a.computed)l=k.nextId(),k.recurse(a.property,l),k.addEnsureSafeMemberName(l),f&&1!==f&&k.if_(k.not(k.computedMember(h,l)),k.lazyAssign(k.computedMember(h,l),"{}")),r=k.ensureSafeObject(k.computedMember(h,l)),k.assign(c,r),d&&(d.computed=!0,d.name=l);else{Ca(a.property.name);
f&&1!==f&&k.if_(k.not(k.nonComputedMember(h,a.property.name)),k.lazyAssign(k.nonComputedMember(h,a.property.name),"{}"));r=k.nonComputedMember(h,a.property.name);if(k.state.expensiveChecks||Fb(a.property.name))r=k.ensureSafeObject(r);k.assign(c,r);d&&(d.computed=!1,d.name=a.property.name)}},function(){k.assign(c,"undefined")});e(c)},!!f);break;case q.CallExpression:c=c||this.nextId();a.filter?(l=k.filter(a.callee.name),n=[],m(a.arguments,function(a){var c=k.nextId();k.recurse(a,c);n.push(c)}),r=l+
"("+n.join(",")+")",k.assign(c,r),e(c)):(l=k.nextId(),h={},n=[],k.recurse(a.callee,l,h,function(){k.if_(k.notNull(l),function(){k.addEnsureSafeFunction(l);m(a.arguments,function(a){k.recurse(a,k.nextId(),t,function(a){n.push(k.ensureSafeObject(a))})});h.name?(k.state.expensiveChecks||k.addEnsureSafeObject(h.context),r=k.member(h.context,h.name,h.computed)+"("+n.join(",")+")"):r=l+"("+n.join(",")+")";r=k.ensureSafeObject(r);k.assign(c,r)},function(){k.assign(c,"undefined")});e(c)}));break;case q.AssignmentExpression:l=
this.nextId();h={};if(!od(a.left))throw da("lval");this.recurse(a.left,t,h,function(){k.if_(k.notNull(h.context),function(){k.recurse(a.right,l);k.addEnsureSafeObject(k.member(h.context,h.name,h.computed));r=k.member(h.context,h.name,h.computed)+a.operator+l;k.assign(c,r);e(c||r)})},1);break;case q.ArrayExpression:n=[];m(a.elements,function(a){k.recurse(a,k.nextId(),t,function(a){n.push(a)})});r="["+n.join(",")+"]";this.assign(c,r);e(r);break;case q.ObjectExpression:n=[];m(a.properties,function(a){k.recurse(a.value,
k.nextId(),t,function(c){n.push(k.escape(a.key.type===q.Identifier?a.key.name:""+a.key.value)+":"+c)})});r="{"+n.join(",")+"}";this.assign(c,r);e(r);break;case q.ThisExpression:this.assign(c,"s");e("s");break;case q.NGValueParameter:this.assign(c,"v"),e("v")}},getHasOwnProperty:function(a,c){var d=a+"."+c,e=this.current().own;e.hasOwnProperty(d)||(e[d]=this.nextId(!1,a+"&&("+this.escape(c)+" in "+a+")"));return e[d]},assign:function(a,c){if(a)return this.current().body.push(a,"=",c,";"),a},filter:function(a){this.state.filters.hasOwnProperty(a)||
(this.state.filters[a]=this.nextId(!0));return this.state.filters[a]},ifDefined:function(a,c){return"ifDefined("+a+","+this.escape(c)+")"},plus:function(a,c){return"plus("+a+","+c+")"},return_:function(a){this.current().body.push("return ",a,";")},if_:function(a,c,d){if(!0===a)c();else{var e=this.current().body;e.push("if(",a,"){");c();e.push("}");d&&(e.push("else{"),d(),e.push("}"))}},not:function(a){return"!("+a+")"},notNull:function(a){return a+"!=null"},nonComputedMember:function(a,c){return a+
"."+c},computedMember:function(a,c){return a+"["+c+"]"},member:function(a,c,d){return d?this.computedMember(a,c):this.nonComputedMember(a,c)},addEnsureSafeObject:function(a){this.current().body.push(this.ensureSafeObject(a),";")},addEnsureSafeMemberName:function(a){this.current().body.push(this.ensureSafeMemberName(a),";")},addEnsureSafeFunction:function(a){this.current().body.push(this.ensureSafeFunction(a),";")},ensureSafeObject:function(a){return"ensureSafeObject("+a+",text)"},ensureSafeMemberName:function(a){return"ensureSafeMemberName("+
a+",text)"},ensureSafeFunction:function(a){return"ensureSafeFunction("+a+",text)"},lazyRecurse:function(a,c,d,e,f,g){var h=this;return function(){h.recurse(a,c,d,e,f,g)}},lazyAssign:function(a,c){var d=this;return function(){d.assign(a,c)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)},escape:function(a){if(L(a))return"'"+a.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(V(a))return a.toString();if(!0===a)return"true";
if(!1===a)return"false";if(null===a)return"null";if("undefined"===typeof a)return"undefined";throw da("esc");},nextId:function(a,c){var d="v"+this.state.nextId++;a||this.current().vars.push(d+(c?"="+c:""));return d},current:function(){return this.state[this.state.computing]}};sd.prototype={compile:function(a,c){var d=this,e=this.astBuilder.ast(a);this.expression=a;this.expensiveChecks=c;T(e,d.$filter);var f,g;if(f=pd(e))g=this.recurse(f);f=nd(e.body);var h;f&&(h=[],m(f,function(a,c){var e=d.recurse(a);
a.input=e;h.push(e);a.watchId=c}));var l=[];m(e.body,function(a){l.push(d.recurse(a.expression))});f=0===e.body.length?function(){}:1===e.body.length?l[0]:function(a,c){var d;m(l,function(e){d=e(a,c)});return d};g&&(f.assign=function(a,c,d){return g(a,d,c)});h&&(f.inputs=h);f.literal=qd(e);f.constant=e.constant;return f},recurse:function(a,c,d){var e,f,g=this,h;if(a.input)return this.inputs(a.input,a.watchId);switch(a.type){case q.Literal:return this.value(a.value,c);case q.UnaryExpression:return f=
this.recurse(a.argument),this["unary"+a.operator](f,c);case q.BinaryExpression:return e=this.recurse(a.left),f=this.recurse(a.right),this["binary"+a.operator](e,f,c);case q.LogicalExpression:return e=this.recurse(a.left),f=this.recurse(a.right),this["binary"+a.operator](e,f,c);case q.ConditionalExpression:return this["ternary?:"](this.recurse(a.test),this.recurse(a.alternate),this.recurse(a.consequent),c);case q.Identifier:return Ca(a.name,g.expression),g.identifier(a.name,g.expensiveChecks||Fb(a.name),
c,d,g.expression);case q.MemberExpression:return e=this.recurse(a.object,!1,!!d),a.computed||(Ca(a.property.name,g.expression),f=a.property.name),a.computed&&(f=this.recurse(a.property)),a.computed?this.computedMember(e,f,c,d,g.expression):this.nonComputedMember(e,f,g.expensiveChecks,c,d,g.expression);case q.CallExpression:return h=[],m(a.arguments,function(a){h.push(g.recurse(a))}),a.filter&&(f=this.$filter(a.callee.name)),a.filter||(f=this.recurse(a.callee,!0)),a.filter?function(a,d,e,g){for(var m=
[],q=0;q<h.length;++q)m.push(h[q](a,d,e,g));a=f.apply(t,m,g);return c?{context:t,name:t,value:a}:a}:function(a,d,e,r){var m=f(a,d,e,r),q;if(null!=m.value){oa(m.context,g.expression);ld(m.value,g.expression);q=[];for(var t=0;t<h.length;++t)q.push(oa(h[t](a,d,e,r),g.expression));q=oa(m.value.apply(m.context,q),g.expression)}return c?{value:q}:q};case q.AssignmentExpression:return e=this.recurse(a.left,!0,1),f=this.recurse(a.right),function(a,d,h,r){var m=e(a,d,h,r);a=f(a,d,h,r);oa(m.value,g.expression);
m.context[m.name]=a;return c?{value:a}:a};case q.ArrayExpression:return h=[],m(a.elements,function(a){h.push(g.recurse(a))}),function(a,d,e,f){for(var g=[],m=0;m<h.length;++m)g.push(h[m](a,d,e,f));return c?{value:g}:g};case q.ObjectExpression:return h=[],m(a.properties,function(a){h.push({key:a.key.type===q.Identifier?a.key.name:""+a.key.value,value:g.recurse(a.value)})}),function(a,d,e,f){for(var g={},m=0;m<h.length;++m)g[h[m].key]=h[m].value(a,d,e,f);return c?{value:g}:g};case q.ThisExpression:return function(a){return c?
{value:a}:a};case q.NGValueParameter:return function(a,d,e,f){return c?{value:e}:e}}},"unary+":function(a,c){return function(d,e,f,g){d=a(d,e,f,g);d=w(d)?+d:0;return c?{value:d}:d}},"unary-":function(a,c){return function(d,e,f,g){d=a(d,e,f,g);d=w(d)?-d:0;return c?{value:d}:d}},"unary!":function(a,c){return function(d,e,f,g){d=!a(d,e,f,g);return c?{value:d}:d}},"binary+":function(a,c,d){return function(e,f,g,h){var l=a(e,f,g,h);e=c(e,f,g,h);l=md(l,e);return d?{value:l}:l}},"binary-":function(a,c,d){return function(e,
f,g,h){var l=a(e,f,g,h);e=c(e,f,g,h);l=(w(l)?l:0)-(w(e)?e:0);return d?{value:l}:l}},"binary*":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)*c(e,f,g,h);return d?{value:e}:e}},"binary/":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)/c(e,f,g,h);return d?{value:e}:e}},"binary%":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)%c(e,f,g,h);return d?{value:e}:e}},"binary===":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)===c(e,f,g,h);return d?{value:e}:e}},"binary!==":function(a,
c,d){return function(e,f,g,h){e=a(e,f,g,h)!==c(e,f,g,h);return d?{value:e}:e}},"binary==":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)==c(e,f,g,h);return d?{value:e}:e}},"binary!=":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)!=c(e,f,g,h);return d?{value:e}:e}},"binary<":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)<c(e,f,g,h);return d?{value:e}:e}},"binary>":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)>c(e,f,g,h);return d?{value:e}:e}},"binary<=":function(a,c,d){return function(e,
f,g,h){e=a(e,f,g,h)<=c(e,f,g,h);return d?{value:e}:e}},"binary>=":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)>=c(e,f,g,h);return d?{value:e}:e}},"binary&&":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)&&c(e,f,g,h);return d?{value:e}:e}},"binary||":function(a,c,d){return function(e,f,g,h){e=a(e,f,g,h)||c(e,f,g,h);return d?{value:e}:e}},"ternary?:":function(a,c,d,e){return function(f,g,h,l){f=a(f,g,h,l)?c(f,g,h,l):d(f,g,h,l);return e?{value:f}:f}},value:function(a,c){return function(){return c?
{context:t,name:t,value:a}:a}},identifier:function(a,c,d,e,f){return function(g,h,l,k){g=h&&a in h?h:g;e&&1!==e&&g&&!g[a]&&(g[a]={});h=g?g[a]:t;c&&oa(h,f);return d?{context:g,name:a,value:h}:h}},computedMember:function(a,c,d,e,f){return function(g,h,l,k){var n=a(g,h,l,k),m,s;null!=n&&(m=c(g,h,l,k),Ca(m,f),e&&1!==e&&n&&!n[m]&&(n[m]={}),s=n[m],oa(s,f));return d?{context:n,name:m,value:s}:s}},nonComputedMember:function(a,c,d,e,f,g){return function(h,l,k,n){h=a(h,l,k,n);f&&1!==f&&h&&!h[c]&&(h[c]={});
l=null!=h?h[c]:t;(d||Fb(c))&&oa(l,g);return e?{context:h,name:c,value:l}:l}},inputs:function(a,c){return function(d,e,f,g){return g?g[c]:a(d,e,f)}}};var hc=function(a,c,d){this.lexer=a;this.$filter=c;this.options=d;this.ast=new q(this.lexer);this.astCompiler=d.csp?new sd(this.ast,c):new rd(this.ast,c)};hc.prototype={constructor:hc,parse:function(a){return this.astCompiler.compile(a,this.options.expensiveChecks)}};ga();ga();var Yf=Object.prototype.valueOf,Da=J("$sce"),pa={HTML:"html",CSS:"css",URL:"url",
RESOURCE_URL:"resourceUrl",JS:"js"},ea=J("$compile"),X=U.createElement("a"),wd=Ba(O.location.href);xd.$inject=["$document"];Lc.$inject=["$provide"];yd.$inject=["$locale"];Ad.$inject=["$locale"];var Dd=".",hg={yyyy:Y("FullYear",4),yy:Y("FullYear",2,0,!0),y:Y("FullYear",1),MMMM:Hb("Month"),MMM:Hb("Month",!0),MM:Y("Month",2,1),M:Y("Month",1,1),dd:Y("Date",2),d:Y("Date",1),HH:Y("Hours",2),H:Y("Hours",1),hh:Y("Hours",2,-12),h:Y("Hours",1,-12),mm:Y("Minutes",2),m:Y("Minutes",1),ss:Y("Seconds",2),s:Y("Seconds",
1),sss:Y("Milliseconds",3),EEEE:Hb("Day"),EEE:Hb("Day",!0),a:function(a,c){return 12>a.getHours()?c.AMPMS[0]:c.AMPMS[1]},Z:function(a,c,d){a=-1*d;return a=(0<=a?"+":"")+(Gb(Math[0<a?"floor":"ceil"](a/60),2)+Gb(Math.abs(a%60),2))},ww:Fd(2),w:Fd(1),G:jc,GG:jc,GGG:jc,GGGG:function(a,c){return 0>=a.getFullYear()?c.ERANAMES[0]:c.ERANAMES[1]}},gg=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,fg=/^\-?\d+$/;zd.$inject=["$locale"];var cg=ra(M),dg=ra(rb);Bd.$inject=
["$parse"];var ie=ra({restrict:"E",compile:function(a,c){if(!c.href&&!c.xlinkHref)return function(a,c){if("a"===c[0].nodeName.toLowerCase()){var f="[object SVGAnimatedString]"===sa.call(c.prop("href"))?"xlink:href":"href";c.on("click",function(a){c.attr(f)||a.preventDefault()})}}}}),sb={};m(Ab,function(a,c){function d(a,d,f){a.$watch(f[e],function(a){f.$set(c,!!a)})}if("multiple"!=a){var e=wa("ng-"+c),f=d;"checked"===a&&(f=function(a,c,f){f.ngModel!==f[e]&&d(a,c,f)});sb[e]=function(){return{restrict:"A",
priority:100,link:f}}}});m(Uc,function(a,c){sb[c]=function(){return{priority:100,link:function(a,e,f){if("ngPattern"===c&&"/"==f.ngPattern.charAt(0)&&(e=f.ngPattern.match(jg))){f.$set("ngPattern",new RegExp(e[1],e[2]));return}a.$watch(f[c],function(a){f.$set(c,a)})}}}});m(["src","srcset","href"],function(a){var c=wa("ng-"+a);sb[c]=function(){return{priority:99,link:function(d,e,f){var g=a,h=a;"href"===a&&"[object SVGAnimatedString]"===sa.call(e.prop("href"))&&(h="xlinkHref",f.$attr[h]="xlink:href",
g=null);f.$observe(c,function(c){c?(f.$set(h,c),Ua&&g&&e.prop(g,f[h])):"href"===a&&f.$set(h,null)})}}}});var Ib={$addControl:v,$$renameControl:function(a,c){a.$name=c},$removeControl:v,$setValidity:v,$setDirty:v,$setPristine:v,$setSubmitted:v};Gd.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Od=function(a){return["$timeout",function(c){return{name:"form",restrict:a?"EAC":"E",controller:Gd,compile:function(d,e){d.addClass(Va).addClass(mb);var f=e.name?"name":a&&e.ngForm?"ngForm":
!1;return{pre:function(a,d,e,k){if(!("action"in e)){var n=function(c){a.$apply(function(){k.$commitViewValue();k.$setSubmitted()});c.preventDefault()};d[0].addEventListener("submit",n,!1);d.on("$destroy",function(){c(function(){d[0].removeEventListener("submit",n,!1)},0,!1)})}var m=k.$$parentForm;f&&(Eb(a,k.$name,k,k.$name),e.$observe(f,function(c){k.$name!==c&&(Eb(a,k.$name,t,k.$name),m.$$renameControl(k,c),Eb(a,k.$name,k,k.$name))}));d.on("$destroy",function(){m.$removeControl(k);f&&Eb(a,e[f],t,
k.$name);P(k,Ib)})}}}}}]},je=Od(),we=Od(!0),ig=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,rg=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,sg=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,tg=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Pd=/^(\d{4})-(\d{2})-(\d{2})$/,Qd=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,mc=/^(\d{4})-W(\d\d)$/,Rd=/^(\d{4})-(\d\d)$/,
Sd=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Td={text:function(a,c,d,e,f,g){kb(a,c,d,e,f,g);kc(e)},date:lb("date",Pd,Kb(Pd,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":lb("datetimelocal",Qd,Kb(Qd,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:lb("time",Sd,Kb(Sd,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:lb("week",mc,function(a,c){if(aa(a))return a;if(L(a)){mc.lastIndex=0;var d=mc.exec(a);if(d){var e=+d[1],f=+d[2],g=d=0,h=0,l=0,k=Ed(e),f=7*(f-1);c&&(d=c.getHours(),g=
c.getMinutes(),h=c.getSeconds(),l=c.getMilliseconds());return new Date(e,0,k.getDate()+f,d,g,h,l)}}return NaN},"yyyy-Www"),month:lb("month",Rd,Kb(Rd,["yyyy","MM"]),"yyyy-MM"),number:function(a,c,d,e,f,g){Id(a,c,d,e);kb(a,c,d,e,f,g);e.$$parserName="number";e.$parsers.push(function(a){return e.$isEmpty(a)?null:tg.test(a)?parseFloat(a):t});e.$formatters.push(function(a){if(!e.$isEmpty(a)){if(!V(a))throw Lb("numfmt",a);a=a.toString()}return a});if(w(d.min)||d.ngMin){var h;e.$validators.min=function(a){return e.$isEmpty(a)||
A(h)||a>=h};d.$observe("min",function(a){w(a)&&!V(a)&&(a=parseFloat(a,10));h=V(a)&&!isNaN(a)?a:t;e.$validate()})}if(w(d.max)||d.ngMax){var l;e.$validators.max=function(a){return e.$isEmpty(a)||A(l)||a<=l};d.$observe("max",function(a){w(a)&&!V(a)&&(a=parseFloat(a,10));l=V(a)&&!isNaN(a)?a:t;e.$validate()})}},url:function(a,c,d,e,f,g){kb(a,c,d,e,f,g);kc(e);e.$$parserName="url";e.$validators.url=function(a,c){var d=a||c;return e.$isEmpty(d)||rg.test(d)}},email:function(a,c,d,e,f,g){kb(a,c,d,e,f,g);kc(e);
e.$$parserName="email";e.$validators.email=function(a,c){var d=a||c;return e.$isEmpty(d)||sg.test(d)}},radio:function(a,c,d,e){A(d.name)&&c.attr("name",++nb);c.on("click",function(a){c[0].checked&&e.$setViewValue(d.value,a&&a.type)});e.$render=function(){c[0].checked=d.value==e.$viewValue};d.$observe("value",e.$render)},checkbox:function(a,c,d,e,f,g,h,l){var k=Jd(l,a,"ngTrueValue",d.ngTrueValue,!0),n=Jd(l,a,"ngFalseValue",d.ngFalseValue,!1);c.on("click",function(a){e.$setViewValue(c[0].checked,a&&
a.type)});e.$render=function(){c[0].checked=e.$viewValue};e.$isEmpty=function(a){return!1===a};e.$formatters.push(function(a){return ka(a,k)});e.$parsers.push(function(a){return a?k:n})},hidden:v,button:v,submit:v,reset:v,file:v},Fc=["$browser","$sniffer","$filter","$parse",function(a,c,d,e){return{restrict:"E",require:["?ngModel"],link:{pre:function(f,g,h,l){l[0]&&(Td[M(h.type)]||Td.text)(f,g,h,l[0],c,a,d,e)}}}}],ug=/^(true|false|\d+)$/,Oe=function(){return{restrict:"A",priority:100,compile:function(a,
c){return ug.test(c.ngValue)?function(a,c,f){f.$set("value",a.$eval(f.ngValue))}:function(a,c,f){a.$watch(f.ngValue,function(a){f.$set("value",a)})}}}},oe=["$compile",function(a){return{restrict:"AC",compile:function(c){a.$$addBindingClass(c);return function(c,e,f){a.$$addBindingInfo(e,f.ngBind);e=e[0];c.$watch(f.ngBind,function(a){e.textContent=a===t?"":a})}}}}],qe=["$interpolate","$compile",function(a,c){return{compile:function(d){c.$$addBindingClass(d);return function(d,f,g){d=a(f.attr(g.$attr.ngBindTemplate));
c.$$addBindingInfo(f,d.expressions);f=f[0];g.$observe("ngBindTemplate",function(a){f.textContent=a===t?"":a})}}}}],pe=["$sce","$parse","$compile",function(a,c,d){return{restrict:"A",compile:function(e,f){var g=c(f.ngBindHtml),h=c(f.ngBindHtml,function(a){return(a||"").toString()});d.$$addBindingClass(e);return function(c,e,f){d.$$addBindingInfo(e,f.ngBindHtml);c.$watch(h,function(){e.html(a.getTrustedHtml(g(c))||"")})}}}}],Ne=ra({restrict:"A",require:"ngModel",link:function(a,c,d,e){e.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),
re=lc("",!0),te=lc("Odd",0),se=lc("Even",1),ue=Ma({compile:function(a,c){c.$set("ngCloak",t);a.removeClass("ng-cloak")}}),ve=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Kc={},vg={blur:!0,focus:!0};m("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(a){var c=wa("ng-"+a);Kc[c]=["$parse","$rootScope",function(d,e){return{restrict:"A",compile:function(f,g){var h=
d(g[c],null,!0);return function(c,d){d.on(a,function(d){var f=function(){h(c,{$event:d})};vg[a]&&e.$$phase?c.$evalAsync(f):c.$apply(f)})}}}}]});var ye=["$animate",function(a){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(c,d,e,f,g){var h,l,k;c.$watch(e.ngIf,function(c){c?l||g(function(c,f){l=f;c[c.length++]=U.createComment(" end ngIf: "+e.ngIf+" ");h={clone:c};a.enter(c,d.parent(),d)}):(k&&(k.remove(),k=null),l&&(l.$destroy(),l=null),h&&(k=
qb(h.clone),a.leave(k).then(function(){k=null}),h=null))})}}}],ze=["$templateRequest","$anchorScroll","$animate",function(a,c,d){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:ca.noop,compile:function(e,f){var g=f.ngInclude||f.src,h=f.onload||"",l=f.autoscroll;return function(e,f,m,s,q){var t=0,F,u,p,v=function(){u&&(u.remove(),u=null);F&&(F.$destroy(),F=null);p&&(d.leave(p).then(function(){u=null}),u=p,p=null)};e.$watch(g,function(g){var m=function(){!w(l)||l&&!e.$eval(l)||
c()},r=++t;g?(a(g,!0).then(function(a){if(r===t){var c=e.$new();s.template=a;a=q(c,function(a){v();d.enter(a,null,f).then(m)});F=c;p=a;F.$emit("$includeContentLoaded",g);e.$eval(h)}},function(){r===t&&(v(),e.$emit("$includeContentError",g))}),e.$emit("$includeContentRequested",g)):(v(),s.template=null)})}}}}],Qe=["$compile",function(a){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(c,d,e,f){/SVG/.test(d[0].toString())?(d.empty(),a(Nc(f.template,U).childNodes)(c,function(a){d.append(a)},
{futureParentElement:d})):(d.html(f.template),a(d.contents())(c))}}}],Ae=Ma({priority:450,compile:function(){return{pre:function(a,c,d){a.$eval(d.ngInit)}}}}),Me=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(a,c,d,e){var f=c.attr(d.$attr.ngList)||", ",g="false"!==d.ngTrim,h=g?R(f):f;e.$parsers.push(function(a){if(!A(a)){var c=[];a&&m(a.split(h),function(a){a&&c.push(g?R(a):a)});return c}});e.$formatters.push(function(a){return G(a)?a.join(f):t});e.$isEmpty=function(a){return!a||
!a.length}}}},mb="ng-valid",Kd="ng-invalid",Va="ng-pristine",Jb="ng-dirty",Md="ng-pending",Lb=new J("ngModel"),wg=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(a,c,d,e,f,g,h,l,k,n){this.$modelValue=this.$viewValue=Number.NaN;this.$$rawModelValue=t;this.$validators={};this.$asyncValidators={};this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$untouched=!0;this.$touched=!1;this.$pristine=!0;this.$dirty=
!1;this.$valid=!0;this.$invalid=!1;this.$error={};this.$$success={};this.$pending=t;this.$name=n(d.name||"",!1)(a);var r=f(d.ngModel),s=r.assign,q=r,C=s,F=null,u,p=this;this.$$setOptions=function(a){if((p.$options=a)&&a.getterSetter){var c=f(d.ngModel+"()"),g=f(d.ngModel+"($$$p)");q=function(a){var d=r(a);z(d)&&(d=c(a));return d};C=function(a,c){z(r(a))?g(a,{$$$p:p.$modelValue}):s(a,p.$modelValue)}}else if(!r.assign)throw Lb("nonassign",d.ngModel,ua(e));};this.$render=v;this.$isEmpty=function(a){return A(a)||
""===a||null===a||a!==a};var K=e.inheritedData("$formController")||Ib,y=0;Hd({ctrl:this,$element:e,set:function(a,c){a[c]=!0},unset:function(a,c){delete a[c]},parentForm:K,$animate:g});this.$setPristine=function(){p.$dirty=!1;p.$pristine=!0;g.removeClass(e,Jb);g.addClass(e,Va)};this.$setDirty=function(){p.$dirty=!0;p.$pristine=!1;g.removeClass(e,Va);g.addClass(e,Jb);K.$setDirty()};this.$setUntouched=function(){p.$touched=!1;p.$untouched=!0;g.setClass(e,"ng-untouched","ng-touched")};this.$setTouched=
function(){p.$touched=!0;p.$untouched=!1;g.setClass(e,"ng-touched","ng-untouched")};this.$rollbackViewValue=function(){h.cancel(F);p.$viewValue=p.$$lastCommittedViewValue;p.$render()};this.$validate=function(){if(!V(p.$modelValue)||!isNaN(p.$modelValue)){var a=p.$$rawModelValue,c=p.$valid,d=p.$modelValue,e=p.$options&&p.$options.allowInvalid;p.$$runValidators(a,p.$$lastCommittedViewValue,function(f){e||c===f||(p.$modelValue=f?a:t,p.$modelValue!==d&&p.$$writeModelToScope())})}};this.$$runValidators=
function(a,c,d){function e(){var d=!0;m(p.$validators,function(e,f){var h=e(a,c);d=d&&h;g(f,h)});return d?!0:(m(p.$asyncValidators,function(a,c){g(c,null)}),!1)}function f(){var d=[],e=!0;m(p.$asyncValidators,function(f,h){var k=f(a,c);if(!k||!z(k.then))throw Lb("$asyncValidators",k);g(h,t);d.push(k.then(function(){g(h,!0)},function(a){e=!1;g(h,!1)}))});d.length?k.all(d).then(function(){h(e)},v):h(!0)}function g(a,c){l===y&&p.$setValidity(a,c)}function h(a){l===y&&d(a)}y++;var l=y;(function(){var a=
p.$$parserName||"parse";if(u===t)g(a,null);else return u||(m(p.$validators,function(a,c){g(c,null)}),m(p.$asyncValidators,function(a,c){g(c,null)})),g(a,u),u;return!0})()?e()?f():h(!1):h(!1)};this.$commitViewValue=function(){var a=p.$viewValue;h.cancel(F);if(p.$$lastCommittedViewValue!==a||""===a&&p.$$hasNativeValidators)p.$$lastCommittedViewValue=a,p.$pristine&&this.$setDirty(),this.$$parseAndValidate()};this.$$parseAndValidate=function(){var c=p.$$lastCommittedViewValue;if(u=A(c)?t:!0)for(var d=
0;d<p.$parsers.length;d++)if(c=p.$parsers[d](c),A(c)){u=!1;break}V(p.$modelValue)&&isNaN(p.$modelValue)&&(p.$modelValue=q(a));var e=p.$modelValue,f=p.$options&&p.$options.allowInvalid;p.$$rawModelValue=c;f&&(p.$modelValue=c,p.$modelValue!==e&&p.$$writeModelToScope());p.$$runValidators(c,p.$$lastCommittedViewValue,function(a){f||(p.$modelValue=a?c:t,p.$modelValue!==e&&p.$$writeModelToScope())})};this.$$writeModelToScope=function(){C(a,p.$modelValue);m(p.$viewChangeListeners,function(a){try{a()}catch(d){c(d)}})};
this.$setViewValue=function(a,c){p.$viewValue=a;p.$options&&!p.$options.updateOnDefault||p.$$debounceViewValueCommit(c)};this.$$debounceViewValueCommit=function(c){var d=0,e=p.$options;e&&w(e.debounce)&&(e=e.debounce,V(e)?d=e:V(e[c])?d=e[c]:V(e["default"])&&(d=e["default"]));h.cancel(F);d?F=h(function(){p.$commitViewValue()},d):l.$$phase?p.$commitViewValue():a.$apply(function(){p.$commitViewValue()})};a.$watch(function(){var c=q(a);if(c!==p.$modelValue&&(p.$modelValue===p.$modelValue||c===c)){p.$modelValue=
p.$$rawModelValue=c;u=t;for(var d=p.$formatters,e=d.length,f=c;e--;)f=d[e](f);p.$viewValue!==f&&(p.$viewValue=p.$$lastCommittedViewValue=f,p.$render(),p.$$runValidators(c,f,v))}return c})}],Le=["$rootScope",function(a){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:wg,priority:1,compile:function(c){c.addClass(Va).addClass("ng-untouched").addClass(mb);return{pre:function(a,c,f,g){var h=g[0],l=g[1]||Ib;h.$$setOptions(g[2]&&g[2].$options);l.$addControl(h);f.$observe("name",
function(a){h.$name!==a&&l.$$renameControl(h,a)});a.$on("$destroy",function(){l.$removeControl(h)})},post:function(c,e,f,g){var h=g[0];if(h.$options&&h.$options.updateOn)e.on(h.$options.updateOn,function(a){h.$$debounceViewValueCommit(a&&a.type)});e.on("blur",function(e){h.$touched||(a.$$phase?c.$evalAsync(h.$setTouched):c.$apply(h.$setTouched))})}}}}}],xg=/(\s+|^)default(\s+|$)/,Pe=function(){return{restrict:"A",controller:["$scope","$attrs",function(a,c){var d=this;this.$options=fa(a.$eval(c.ngModelOptions));
this.$options.updateOn!==t?(this.$options.updateOnDefault=!1,this.$options.updateOn=R(this.$options.updateOn.replace(xg,function(){d.$options.updateOnDefault=!0;return" "}))):this.$options.updateOnDefault=!0}]}},Be=Ma({terminal:!0,priority:1E3}),yg=J("ngOptions"),zg=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
Je=["$compile","$parse",function(a,c){function d(a,d,e){function f(a,c,d,e,g){this.selectValue=a;this.viewValue=c;this.label=d;this.group=e;this.disabled=g}function n(a){var c;if(!q&&Ea(a))c=a;else{c=[];for(var d in a)a.hasOwnProperty(d)&&"$"!==d.charAt(0)&&c.push(d)}return c}var m=a.match(zg);if(!m)throw yg("iexp",a,ua(d));var s=m[5]||m[7],q=m[6];a=/ as /.test(m[0])&&m[1];var t=m[9];d=c(m[2]?m[1]:s);var v=a&&c(a)||d,u=t&&c(t),p=t?function(a,c){return u(e,c)}:function(a){return Ga(a)},w=function(a,
c){return p(a,z(a,c))},y=c(m[2]||m[1]),A=c(m[3]||""),B=c(m[4]||""),N=c(m[8]),D={},z=q?function(a,c){D[q]=c;D[s]=a;return D}:function(a){D[s]=a;return D};return{trackBy:t,getTrackByValue:w,getWatchables:c(N,function(a){var c=[];a=a||[];for(var d=n(a),f=d.length,g=0;g<f;g++){var h=a===d?g:d[g],k=z(a[h],h),h=p(a[h],k);c.push(h);if(m[2]||m[1])h=y(e,k),c.push(h);m[4]&&(k=B(e,k),c.push(k))}return c}),getOptions:function(){for(var a=[],c={},d=N(e)||[],g=n(d),h=g.length,m=0;m<h;m++){var r=d===g?m:g[m],s=
z(d[r],r),q=v(e,s),r=p(q,s),u=y(e,s),x=A(e,s),s=B(e,s),q=new f(r,q,u,x,s);a.push(q);c[r]=q}return{items:a,selectValueMap:c,getOptionFromViewValue:function(a){return c[w(a)]},getViewValueFromOption:function(a){return t?ca.copy(a.viewValue):a.viewValue}}}}}var e=U.createElement("option"),f=U.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","?ngModel"],link:function(c,h,l,k){function n(a,c){a.element=c;c.disabled=a.disabled;a.value!==c.value&&(c.value=a.selectValue);a.label!==
c.label&&(c.label=a.label,c.textContent=a.label)}function r(a,c,d,e){c&&M(c.nodeName)===d?d=c:(d=e.cloneNode(!1),c?a.insertBefore(d,c):a.appendChild(d));return d}function s(a){for(var c;a;)c=a.nextSibling,Xb(a),a=c}function q(a){var c=p&&p[0],d=N&&N[0];if(c||d)for(;a&&(a===c||a===d);)a=a.nextSibling;return a}function t(){var a=D&&u.readValue();D=z.getOptions();var c={},d=h[0].firstChild;B&&h.prepend(p);d=q(d);D.items.forEach(function(a){var g,k;a.group?(g=c[a.group],g||(g=r(h[0],d,"optgroup",f),d=
g.nextSibling,g.label=a.group,g=c[a.group]={groupElement:g,currentOptionElement:g.firstChild}),k=r(g.groupElement,g.currentOptionElement,"option",e),n(a,k),g.currentOptionElement=k.nextSibling):(k=r(h[0],d,"option",e),n(a,k),d=k.nextSibling)});Object.keys(c).forEach(function(a){s(c[a].currentOptionElement)});s(d);v.$render();if(!v.$isEmpty(a)){var g=u.readValue();(z.trackBy?ka(a,g):a===g)||(v.$setViewValue(g),v.$render())}}var v=k[1];if(v){var u=k[0];k=l.multiple;for(var p,w=0,A=h.children(),I=A.length;w<
I;w++)if(""===A[w].value){p=A.eq(w);break}var B=!!p,N=y(e.cloneNode(!1));N.val("?");var D,z=d(l.ngOptions,h,c);k?(v.$isEmpty=function(a){return!a||0===a.length},u.writeValue=function(a){D.items.forEach(function(a){a.element.selected=!1});a&&a.forEach(function(a){(a=D.getOptionFromViewValue(a))&&!a.disabled&&(a.element.selected=!0)})},u.readValue=function(){var a=h.val()||[],c=[];m(a,function(a){a=D.selectValueMap[a];a.disabled||c.push(D.getViewValueFromOption(a))});return c},z.trackBy&&c.$watchCollection(function(){if(G(v.$viewValue))return v.$viewValue.map(function(a){return z.getTrackByValue(a)})},
function(){v.$render()})):(u.writeValue=function(a){var c=D.getOptionFromViewValue(a);c&&!c.disabled?h[0].value!==c.selectValue&&(N.remove(),B||p.remove(),h[0].value=c.selectValue,c.element.selected=!0,c.element.setAttribute("selected","selected")):null===a||B?(N.remove(),B||h.prepend(p),h.val(""),p.prop("selected",!0),p.attr("selected",!0)):(B||p.remove(),h.prepend(N),h.val("?"),N.prop("selected",!0),N.attr("selected",!0))},u.readValue=function(){var a=D.selectValueMap[h.val()];return a&&!a.disabled?
(B||p.remove(),N.remove(),D.getViewValueFromOption(a)):null},z.trackBy&&c.$watch(function(){return z.getTrackByValue(v.$viewValue)},function(){v.$render()}));B?(p.remove(),a(p)(c),p.removeClass("ng-scope")):p=y(e.cloneNode(!1));t();c.$watchCollection(z.getWatchables,t)}}}}],Ce=["$locale","$interpolate","$log",function(a,c,d){var e=/{}/g,f=/^when(Minus)?(.+)$/;return{link:function(g,h,l){function k(a){h.text(a||"")}var n=l.count,r=l.$attr.when&&h.attr(l.$attr.when),s=l.offset||0,q=g.$eval(r)||{},t=
{},w=c.startSymbol(),u=c.endSymbol(),p=w+n+"-"+s+u,y=ca.noop,z;m(l,function(a,c){var d=f.exec(c);d&&(d=(d[1]?"-":"")+M(d[2]),q[d]=h.attr(l.$attr[c]))});m(q,function(a,d){t[d]=c(a.replace(e,p))});g.$watch(n,function(c){var e=parseFloat(c),f=isNaN(e);f||e in q||(e=a.pluralCat(e-s));e===z||f&&V(z)&&isNaN(z)||(y(),f=t[e],A(f)?(null!=c&&d.debug("ngPluralize: no rule defined for '"+e+"' in "+r),y=v,k()):y=g.$watch(f,k),z=e)})}}}],De=["$parse","$animate",function(a,c){var d=J("ngRepeat"),e=function(a,c,
d,e,k,m,r){a[d]=e;k&&(a[k]=m);a.$index=c;a.$first=0===c;a.$last=c===r-1;a.$middle=!(a.$first||a.$last);a.$odd=!(a.$even=0===(c&1))};return{restrict:"A",multiElement:!0,transclude:"element",priority:1E3,terminal:!0,$$tlb:!0,compile:function(f,g){var h=g.ngRepeat,l=U.createComment(" end ngRepeat: "+h+" "),k=h.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!k)throw d("iexp",h);var n=k[1],r=k[2],s=k[3],q=k[4],k=n.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);
if(!k)throw d("iidexp",n);var v=k[3]||k[1],w=k[2];if(s&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(s)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(s)))throw d("badident",s);var u,p,z,A,I={$id:Ga};q?u=a(q):(z=function(a,c){return Ga(c)},A=function(a){return a});return function(a,f,g,k,n){u&&(p=function(c,d,e){w&&(I[w]=c);I[v]=d;I.$index=e;return u(a,I)});var q=ga();a.$watchCollection(r,function(g){var k,r,u=f[0],x,D=ga(),I,H,L,G,M,J,O;s&&(a[s]=g);if(Ea(g))M=
g,r=p||z;else for(O in r=p||A,M=[],g)g.hasOwnProperty(O)&&"$"!==O.charAt(0)&&M.push(O);I=M.length;O=Array(I);for(k=0;k<I;k++)if(H=g===M?k:M[k],L=g[H],G=r(H,L,k),q[G])J=q[G],delete q[G],D[G]=J,O[k]=J;else{if(D[G])throw m(O,function(a){a&&a.scope&&(q[a.id]=a)}),d("dupes",h,G,L);O[k]={id:G,scope:t,clone:t};D[G]=!0}for(x in q){J=q[x];G=qb(J.clone);c.leave(G);if(G[0].parentNode)for(k=0,r=G.length;k<r;k++)G[k].$$NG_REMOVED=!0;J.scope.$destroy()}for(k=0;k<I;k++)if(H=g===M?k:M[k],L=g[H],J=O[k],J.scope){x=
u;do x=x.nextSibling;while(x&&x.$$NG_REMOVED);J.clone[0]!=x&&c.move(qb(J.clone),null,y(u));u=J.clone[J.clone.length-1];e(J.scope,k,v,L,w,H,I)}else n(function(a,d){J.scope=d;var f=l.cloneNode(!1);a[a.length++]=f;c.enter(a,null,y(u));u=f;J.clone=a;D[J.id]=J;e(J.scope,k,v,L,w,H,I)});q=D})}}}}],Ee=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(c,d,e){c.$watch(e.ngShow,function(c){a[c?"removeClass":"addClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],xe=["$animate",
function(a){return{restrict:"A",multiElement:!0,link:function(c,d,e){c.$watch(e.ngHide,function(c){a[c?"addClass":"removeClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Fe=Ma(function(a,c,d){a.$watch(d.ngStyle,function(a,d){d&&a!==d&&m(d,function(a,d){c.css(d,"")});a&&c.css(a)},!0)}),Ge=["$animate",function(a){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(c,d,e,f){var g=[],h=[],l=[],k=[],n=function(a,c){return function(){a.splice(c,1)}};c.$watch(e.ngSwitch||
e.on,function(c){var d,e;d=0;for(e=l.length;d<e;++d)a.cancel(l[d]);d=l.length=0;for(e=k.length;d<e;++d){var q=qb(h[d].clone);k[d].$destroy();(l[d]=a.leave(q)).then(n(l,d))}h.length=0;k.length=0;(g=f.cases["!"+c]||f.cases["?"])&&m(g,function(c){c.transclude(function(d,e){k.push(e);var f=c.element;d[d.length++]=U.createComment(" end ngSwitchWhen: ");h.push({clone:d});a.enter(d,f.parent(),f)})})})}}}],He=Ma({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,c,d,e,
f){e.cases["!"+d.ngSwitchWhen]=e.cases["!"+d.ngSwitchWhen]||[];e.cases["!"+d.ngSwitchWhen].push({transclude:f,element:c})}}),Ie=Ma({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,c,d,e,f){e.cases["?"]=e.cases["?"]||[];e.cases["?"].push({transclude:f,element:c})}}),Ke=Ma({restrict:"EAC",link:function(a,c,d,e,f){if(!f)throw J("ngTransclude")("orphan",ua(c));f(function(a){c.empty();c.append(a)})}}),ke=["$templateCache",function(a){return{restrict:"E",terminal:!0,
compile:function(c,d){"text/ng-template"==d.type&&a.put(d.id,c[0].text)}}}],Ag={$setViewValue:v,$render:v},Bg=["$element","$scope","$attrs",function(a,c,d){var e=this,f=new Sa;e.ngModelCtrl=Ag;e.unknownOption=y(U.createElement("option"));e.renderUnknownOption=function(c){c="? "+Ga(c)+" ?";e.unknownOption.val(c);a.prepend(e.unknownOption);a.val(c)};c.$on("$destroy",function(){e.renderUnknownOption=v});e.removeUnknownOption=function(){e.unknownOption.parent()&&e.unknownOption.remove()};e.readValue=
function(){e.removeUnknownOption();return a.val()};e.writeValue=function(c){e.hasOption(c)?(e.removeUnknownOption(),a.val(c),""===c&&e.emptyOption.prop("selected",!0)):null==c&&e.emptyOption?(e.removeUnknownOption(),a.val("")):e.renderUnknownOption(c)};e.addOption=function(a,c){Ra(a,'"option value"');""===a&&(e.emptyOption=c);var d=f.get(a)||0;f.put(a,d+1)};e.removeOption=function(a){var c=f.get(a);c&&(1===c?(f.remove(a),""===a&&(e.emptyOption=t)):f.put(a,c-1))};e.hasOption=function(a){return!!f.get(a)}}],
le=function(){return{restrict:"E",require:["select","?ngModel"],controller:Bg,link:function(a,c,d,e){var f=e[1];if(f){var g=e[0];g.ngModelCtrl=f;f.$render=function(){g.writeValue(f.$viewValue)};c.on("change",function(){a.$apply(function(){f.$setViewValue(g.readValue())})});if(d.multiple){g.readValue=function(){var a=[];m(c.find("option"),function(c){c.selected&&a.push(c.value)});return a};g.writeValue=function(a){var d=new Sa(a);m(c.find("option"),function(a){a.selected=w(d.get(a.value))})};var h,
l=NaN;a.$watch(function(){l!==f.$viewValue||ka(h,f.$viewValue)||(h=ia(f.$viewValue),f.$render());l=f.$viewValue});f.$isEmpty=function(a){return!a||0===a.length}}}}}},ne=["$interpolate",function(a){function c(a){a[0].hasAttribute("selected")&&(a[0].selected=!0)}return{restrict:"E",priority:100,compile:function(d,e){if(A(e.value)){var f=a(d.text(),!0);f||e.$set("value",d.text())}return function(a,d,e){var k=d.parent(),m=k.data("$selectController")||k.parent().data("$selectController");m&&m.ngModelCtrl&&
(f?a.$watch(f,function(a,f){e.$set("value",a);f!==a&&m.removeOption(f);m.addOption(a,d);m.ngModelCtrl.$render();c(d)}):(m.addOption(e.value,d),m.ngModelCtrl.$render(),c(d)),d.on("$destroy",function(){m.removeOption(e.value);m.ngModelCtrl.$render()}))}}}}],me=ra({restrict:"E",terminal:!1}),Hc=function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){e&&(d.required=!0,e.$validators.required=function(a,c){return!d.required||!e.$isEmpty(c)},d.$observe("required",function(){e.$validate()}))}}},
Gc=function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){if(e){var f,g=d.ngPattern||d.pattern;d.$observe("pattern",function(a){L(a)&&0<a.length&&(a=new RegExp("^"+a+"$"));if(a&&!a.test)throw J("ngPattern")("noregexp",g,a,ua(c));f=a||t;e.$validate()});e.$validators.pattern=function(a){return e.$isEmpty(a)||A(f)||f.test(a)}}}}},Jc=function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){if(e){var f=-1;d.$observe("maxlength",function(a){a=W(a);f=isNaN(a)?-1:a;e.$validate()});
e.$validators.maxlength=function(a,c){return 0>f||e.$isEmpty(c)||c.length<=f}}}}},Ic=function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){if(e){var f=0;d.$observe("minlength",function(a){f=W(a)||0;e.$validate()});e.$validators.minlength=function(a,c){return e.$isEmpty(c)||c.length>=f}}}}};O.angular.bootstrap?console.log("WARNING: Tried to load angular more than once."):(ce(),ee(ca),y(U).ready(function(){Zd(U,Ac)}))})(window,document);!window.angular.$$csp()&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
//# sourceMappingURL=angular.min.js.map

/**
 * @license
 * lodash 3.10.1 (Custom Build) lodash.com/license | Underscore.js 1.8.3 underscorejs.org/LICENSE
 * Build: `lodash modern -o ./lodash.js`
 */
;(function(){function n(n,t){if(n!==t){var r=null===n,e=n===w,u=n===n,o=null===t,i=t===w,f=t===t;if(n>t&&!o||!u||r&&!i&&f||e&&f)return 1;if(n<t&&!r||!f||o&&!e&&u||i&&u)return-1}return 0}function t(n,t,r){for(var e=n.length,u=r?e:-1;r?u--:++u<e;)if(t(n[u],u,n))return u;return-1}function r(n,t,r){if(t!==t)return p(n,r);r-=1;for(var e=n.length;++r<e;)if(n[r]===t)return r;return-1}function e(n){return typeof n=="function"||false}function u(n){return null==n?"":n+""}function o(n,t){for(var r=-1,e=n.length;++r<e&&-1<t.indexOf(n.charAt(r)););
return r}function i(n,t){for(var r=n.length;r--&&-1<t.indexOf(n.charAt(r)););return r}function f(t,r){return n(t.a,r.a)||t.b-r.b}function a(n){return Nn[n]}function c(n){return Tn[n]}function l(n,t,r){return t?n=Bn[n]:r&&(n=Dn[n]),"\\"+n}function s(n){return"\\"+Dn[n]}function p(n,t,r){var e=n.length;for(t+=r?0:-1;r?t--:++t<e;){var u=n[t];if(u!==u)return t}return-1}function h(n){return!!n&&typeof n=="object"}function _(n){return 160>=n&&9<=n&&13>=n||32==n||160==n||5760==n||6158==n||8192<=n&&(8202>=n||8232==n||8233==n||8239==n||8287==n||12288==n||65279==n);
}function v(n,t){for(var r=-1,e=n.length,u=-1,o=[];++r<e;)n[r]===t&&(n[r]=z,o[++u]=r);return o}function g(n){for(var t=-1,r=n.length;++t<r&&_(n.charCodeAt(t)););return t}function y(n){for(var t=n.length;t--&&_(n.charCodeAt(t)););return t}function d(n){return Ln[n]}function m(_){function Nn(n){if(h(n)&&!(Oo(n)||n instanceof zn)){if(n instanceof Ln)return n;if(nu.call(n,"__chain__")&&nu.call(n,"__wrapped__"))return Mr(n)}return new Ln(n)}function Tn(){}function Ln(n,t,r){this.__wrapped__=n,this.__actions__=r||[],
this.__chain__=!!t}function zn(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=false,this.__iteratees__=[],this.__takeCount__=Ru,this.__views__=[]}function Bn(){this.__data__={}}function Dn(n){var t=n?n.length:0;for(this.data={hash:gu(null),set:new lu};t--;)this.push(n[t])}function Mn(n,t){var r=n.data;return(typeof t=="string"||ge(t)?r.set.has(t):r.hash[t])?0:-1}function qn(n,t){var r=-1,e=n.length;for(t||(t=Be(e));++r<e;)t[r]=n[r];return t}function Pn(n,t){for(var r=-1,e=n.length;++r<e&&false!==t(n[r],r,n););
return n}function Kn(n,t){for(var r=-1,e=n.length;++r<e;)if(!t(n[r],r,n))return false;return true}function Vn(n,t){for(var r=-1,e=n.length,u=-1,o=[];++r<e;){var i=n[r];t(i,r,n)&&(o[++u]=i)}return o}function Gn(n,t){for(var r=-1,e=n.length,u=Be(e);++r<e;)u[r]=t(n[r],r,n);return u}function Jn(n,t){for(var r=-1,e=t.length,u=n.length;++r<e;)n[u+r]=t[r];return n}function Xn(n,t,r,e){var u=-1,o=n.length;for(e&&o&&(r=n[++u]);++u<o;)r=t(r,n[u],u,n);return r}function Hn(n,t){for(var r=-1,e=n.length;++r<e;)if(t(n[r],r,n))return true;
return false}function Qn(n,t,r,e){return n!==w&&nu.call(e,r)?n:t}function nt(n,t,r){for(var e=-1,u=zo(t),o=u.length;++e<o;){var i=u[e],f=n[i],a=r(f,t[i],i,n,t);(a===a?a===f:f!==f)&&(f!==w||i in n)||(n[i]=a)}return n}function tt(n,t){return null==t?n:et(t,zo(t),n)}function rt(n,t){for(var r=-1,e=null==n,u=!e&&Er(n),o=u?n.length:0,i=t.length,f=Be(i);++r<i;){var a=t[r];f[r]=u?Cr(a,o)?n[a]:w:e?w:n[a]}return f}function et(n,t,r){r||(r={});for(var e=-1,u=t.length;++e<u;){var o=t[e];r[o]=n[o]}return r}function ut(n,t,r){
var e=typeof n;return"function"==e?t===w?n:Bt(n,t,r):null==n?Fe:"object"==e?bt(n):t===w?ze(n):xt(n,t)}function ot(n,t,r,e,u,o,i){var f;if(r&&(f=u?r(n,e,u):r(n)),f!==w)return f;if(!ge(n))return n;if(e=Oo(n)){if(f=kr(n),!t)return qn(n,f)}else{var a=ru.call(n),c=a==K;if(a!=Z&&a!=B&&(!c||u))return Fn[a]?Rr(n,a,t):u?n:{};if(f=Ir(c?{}:n),!t)return tt(f,n)}for(o||(o=[]),i||(i=[]),u=o.length;u--;)if(o[u]==n)return i[u];return o.push(n),i.push(f),(e?Pn:_t)(n,function(e,u){f[u]=ot(e,t,r,u,n,o,i)}),f}function it(n,t,r){
if(typeof n!="function")throw new Ge(L);return su(function(){n.apply(w,r)},t)}function ft(n,t){var e=n?n.length:0,u=[];if(!e)return u;var o=-1,i=xr(),f=i===r,a=f&&t.length>=F&&gu&&lu?new Dn(t):null,c=t.length;a&&(i=Mn,f=false,t=a);n:for(;++o<e;)if(a=n[o],f&&a===a){for(var l=c;l--;)if(t[l]===a)continue n;u.push(a)}else 0>i(t,a,0)&&u.push(a);return u}function at(n,t){var r=true;return Su(n,function(n,e,u){return r=!!t(n,e,u)}),r}function ct(n,t,r,e){var u=e,o=u;return Su(n,function(n,i,f){i=+t(n,i,f),(r(i,u)||i===e&&i===o)&&(u=i,
o=n)}),o}function lt(n,t){var r=[];return Su(n,function(n,e,u){t(n,e,u)&&r.push(n)}),r}function st(n,t,r,e){var u;return r(n,function(n,r,o){return t(n,r,o)?(u=e?r:n,false):void 0}),u}function pt(n,t,r,e){e||(e=[]);for(var u=-1,o=n.length;++u<o;){var i=n[u];h(i)&&Er(i)&&(r||Oo(i)||pe(i))?t?pt(i,t,r,e):Jn(e,i):r||(e[e.length]=i)}return e}function ht(n,t){Nu(n,t,Re)}function _t(n,t){return Nu(n,t,zo)}function vt(n,t){return Tu(n,t,zo)}function gt(n,t){for(var r=-1,e=t.length,u=-1,o=[];++r<e;){var i=t[r];
ve(n[i])&&(o[++u]=i)}return o}function yt(n,t,r){if(null!=n){r!==w&&r in Br(n)&&(t=[r]),r=0;for(var e=t.length;null!=n&&r<e;)n=n[t[r++]];return r&&r==e?n:w}}function dt(n,t,r,e,u,o){if(n===t)n=true;else if(null==n||null==t||!ge(n)&&!h(t))n=n!==n&&t!==t;else n:{var i=dt,f=Oo(n),a=Oo(t),c=D,l=D;f||(c=ru.call(n),c==B?c=Z:c!=Z&&(f=xe(n))),a||(l=ru.call(t),l==B?l=Z:l!=Z&&xe(t));var s=c==Z,a=l==Z,l=c==l;if(!l||f||s){if(!e&&(c=s&&nu.call(n,"__wrapped__"),a=a&&nu.call(t,"__wrapped__"),c||a)){n=i(c?n.value():n,a?t.value():t,r,e,u,o);
break n}if(l){for(u||(u=[]),o||(o=[]),c=u.length;c--;)if(u[c]==n){n=o[c]==t;break n}u.push(n),o.push(t),n=(f?yr:mr)(n,t,i,r,e,u,o),u.pop(),o.pop()}else n=false}else n=dr(n,t,c)}return n}function mt(n,t,r){var e=t.length,u=e,o=!r;if(null==n)return!u;for(n=Br(n);e--;){var i=t[e];if(o&&i[2]?i[1]!==n[i[0]]:!(i[0]in n))return false}for(;++e<u;){var i=t[e],f=i[0],a=n[f],c=i[1];if(o&&i[2]){if(a===w&&!(f in n))return false}else if(i=r?r(a,c,f):w,i===w?!dt(c,a,r,true):!i)return false}return true}function wt(n,t){var r=-1,e=Er(n)?Be(n.length):[];
return Su(n,function(n,u,o){e[++r]=t(n,u,o)}),e}function bt(n){var t=Ar(n);if(1==t.length&&t[0][2]){var r=t[0][0],e=t[0][1];return function(n){return null==n?false:n[r]===e&&(e!==w||r in Br(n))}}return function(n){return mt(n,t)}}function xt(n,t){var r=Oo(n),e=Wr(n)&&t===t&&!ge(t),u=n+"";return n=Dr(n),function(o){if(null==o)return false;var i=u;if(o=Br(o),!(!r&&e||i in o)){if(o=1==n.length?o:yt(o,Et(n,0,-1)),null==o)return false;i=Zr(n),o=Br(o)}return o[i]===t?t!==w||i in o:dt(t,o[i],w,true)}}function At(n,t,r,e,u){
if(!ge(n))return n;var o=Er(t)&&(Oo(t)||xe(t)),i=o?w:zo(t);return Pn(i||t,function(f,a){if(i&&(a=f,f=t[a]),h(f)){e||(e=[]),u||(u=[]);n:{for(var c=a,l=e,s=u,p=l.length,_=t[c];p--;)if(l[p]==_){n[c]=s[p];break n}var p=n[c],v=r?r(p,_,c,n,t):w,g=v===w;g&&(v=_,Er(_)&&(Oo(_)||xe(_))?v=Oo(p)?p:Er(p)?qn(p):[]:me(_)||pe(_)?v=pe(p)?ke(p):me(p)?p:{}:g=false),l.push(_),s.push(v),g?n[c]=At(v,_,r,l,s):(v===v?v!==p:p===p)&&(n[c]=v)}}else c=n[a],l=r?r(c,f,a,n,t):w,(s=l===w)&&(l=f),l===w&&(!o||a in n)||!s&&(l===l?l===c:c!==c)||(n[a]=l);
}),n}function jt(n){return function(t){return null==t?w:t[n]}}function kt(n){var t=n+"";return n=Dr(n),function(r){return yt(r,n,t)}}function It(n,t){for(var r=n?t.length:0;r--;){var e=t[r];if(e!=u&&Cr(e)){var u=e;pu.call(n,e,1)}}}function Rt(n,t){return n+yu(ku()*(t-n+1))}function Ot(n,t,r,e,u){return u(n,function(n,u,o){r=e?(e=false,n):t(r,n,u,o)}),r}function Et(n,t,r){var e=-1,u=n.length;for(t=null==t?0:+t||0,0>t&&(t=-t>u?0:u+t),r=r===w||r>u?u:+r||0,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0,r=Be(u);++e<u;)r[e]=n[e+t];
return r}function Ct(n,t){var r;return Su(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}function Ut(n,t){var r=n.length;for(n.sort(t);r--;)n[r]=n[r].c;return n}function Wt(t,r,e){var u=wr(),o=-1;return r=Gn(r,function(n){return u(n)}),t=wt(t,function(n){return{a:Gn(r,function(t){return t(n)}),b:++o,c:n}}),Ut(t,function(t,r){var u;n:{for(var o=-1,i=t.a,f=r.a,a=i.length,c=e.length;++o<a;)if(u=n(i[o],f[o])){if(o>=c)break n;o=e[o],u*="asc"===o||true===o?1:-1;break n}u=t.b-r.b}return u})}function $t(n,t){
var r=0;return Su(n,function(n,e,u){r+=+t(n,e,u)||0}),r}function St(n,t){var e=-1,u=xr(),o=n.length,i=u===r,f=i&&o>=F,a=f&&gu&&lu?new Dn(void 0):null,c=[];a?(u=Mn,i=false):(f=false,a=t?[]:c);n:for(;++e<o;){var l=n[e],s=t?t(l,e,n):l;if(i&&l===l){for(var p=a.length;p--;)if(a[p]===s)continue n;t&&a.push(s),c.push(l)}else 0>u(a,s,0)&&((t||f)&&a.push(s),c.push(l))}return c}function Ft(n,t){for(var r=-1,e=t.length,u=Be(e);++r<e;)u[r]=n[t[r]];return u}function Nt(n,t,r,e){for(var u=n.length,o=e?u:-1;(e?o--:++o<u)&&t(n[o],o,n););
return r?Et(n,e?0:o,e?o+1:u):Et(n,e?o+1:0,e?u:o)}function Tt(n,t){var r=n;r instanceof zn&&(r=r.value());for(var e=-1,u=t.length;++e<u;)var o=t[e],r=o.func.apply(o.thisArg,Jn([r],o.args));return r}function Lt(n,t,r){var e=0,u=n?n.length:e;if(typeof t=="number"&&t===t&&u<=Eu){for(;e<u;){var o=e+u>>>1,i=n[o];(r?i<=t:i<t)&&null!==i?e=o+1:u=o}return u}return zt(n,t,Fe,r)}function zt(n,t,r,e){t=r(t);for(var u=0,o=n?n.length:0,i=t!==t,f=null===t,a=t===w;u<o;){var c=yu((u+o)/2),l=r(n[c]),s=l!==w,p=l===l;
(i?p||e:f?p&&s&&(e||null!=l):a?p&&(e||s):null==l?0:e?l<=t:l<t)?u=c+1:o=c}return xu(o,Ou)}function Bt(n,t,r){if(typeof n!="function")return Fe;if(t===w)return n;switch(r){case 1:return function(r){return n.call(t,r)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,o){return n.call(t,r,e,u,o)};case 5:return function(r,e,u,o,i){return n.call(t,r,e,u,o,i)}}return function(){return n.apply(t,arguments)}}function Dt(n){var t=new ou(n.byteLength);return new hu(t).set(new hu(n)),
t}function Mt(n,t,r){for(var e=r.length,u=-1,o=bu(n.length-e,0),i=-1,f=t.length,a=Be(f+o);++i<f;)a[i]=t[i];for(;++u<e;)a[r[u]]=n[u];for(;o--;)a[i++]=n[u++];return a}function qt(n,t,r){for(var e=-1,u=r.length,o=-1,i=bu(n.length-u,0),f=-1,a=t.length,c=Be(i+a);++o<i;)c[o]=n[o];for(i=o;++f<a;)c[i+f]=t[f];for(;++e<u;)c[i+r[e]]=n[o++];return c}function Pt(n,t){return function(r,e,u){var o=t?t():{};if(e=wr(e,u,3),Oo(r)){u=-1;for(var i=r.length;++u<i;){var f=r[u];n(o,f,e(f,u,r),r)}}else Su(r,function(t,r,u){
n(o,t,e(t,r,u),u)});return o}}function Kt(n){return le(function(t,r){var e=-1,u=null==t?0:r.length,o=2<u?r[u-2]:w,i=2<u?r[2]:w,f=1<u?r[u-1]:w;for(typeof o=="function"?(o=Bt(o,f,5),u-=2):(o=typeof f=="function"?f:w,u-=o?1:0),i&&Ur(r[0],r[1],i)&&(o=3>u?w:o,u=1);++e<u;)(i=r[e])&&n(t,i,o);return t})}function Vt(n,t){return function(r,e){var u=r?Bu(r):0;if(!Sr(u))return n(r,e);for(var o=t?u:-1,i=Br(r);(t?o--:++o<u)&&false!==e(i[o],o,i););return r}}function Zt(n){return function(t,r,e){var u=Br(t);e=e(t);for(var o=e.length,i=n?o:-1;n?i--:++i<o;){
var f=e[i];if(false===r(u[f],f,u))break}return t}}function Yt(n,t){function r(){return(this&&this!==Zn&&this instanceof r?e:n).apply(t,arguments)}var e=Jt(n);return r}function Gt(n){return function(t){var r=-1;t=$e(Ce(t));for(var e=t.length,u="";++r<e;)u=n(u,t[r],r);return u}}function Jt(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:
return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var r=$u(n.prototype),t=n.apply(r,t);return ge(t)?t:r}}function Xt(n){function t(r,e,u){return u&&Ur(r,e,u)&&(e=w),r=gr(r,n,w,w,w,w,w,e),r.placeholder=t.placeholder,r}return t}function Ht(n,t){return le(function(r){var e=r[0];return null==e?e:(r.push(t),n.apply(w,r))})}function Qt(n,t){return function(r,e,u){if(u&&Ur(r,e,u)&&(e=w),e=wr(e,u,3),1==e.length){
u=r=Oo(r)?r:zr(r);for(var o=e,i=-1,f=u.length,a=t,c=a;++i<f;){var l=u[i],s=+o(l);n(s,a)&&(a=s,c=l)}if(u=c,!r.length||u!==t)return u}return ct(r,e,n,t)}}function nr(n,r){return function(e,u,o){return u=wr(u,o,3),Oo(e)?(u=t(e,u,r),-1<u?e[u]:w):st(e,u,n)}}function tr(n){return function(r,e,u){return r&&r.length?(e=wr(e,u,3),t(r,e,n)):-1}}function rr(n){return function(t,r,e){return r=wr(r,e,3),st(t,r,n,true)}}function er(n){return function(){for(var t,r=arguments.length,e=n?r:-1,u=0,o=Be(r);n?e--:++e<r;){
var i=o[u++]=arguments[e];if(typeof i!="function")throw new Ge(L);!t&&Ln.prototype.thru&&"wrapper"==br(i)&&(t=new Ln([],true))}for(e=t?-1:r;++e<r;){var i=o[e],u=br(i),f="wrapper"==u?zu(i):w;t=f&&$r(f[0])&&f[1]==(E|k|R|C)&&!f[4].length&&1==f[9]?t[br(f[0])].apply(t,f[3]):1==i.length&&$r(i)?t[u]():t.thru(i)}return function(){var n=arguments,e=n[0];if(t&&1==n.length&&Oo(e)&&e.length>=F)return t.plant(e).value();for(var u=0,n=r?o[u].apply(this,n):e;++u<r;)n=o[u].call(this,n);return n}}}function ur(n,t){
return function(r,e,u){return typeof e=="function"&&u===w&&Oo(r)?n(r,e):t(r,Bt(e,u,3))}}function or(n){return function(t,r,e){return(typeof r!="function"||e!==w)&&(r=Bt(r,e,3)),n(t,r,Re)}}function ir(n){return function(t,r,e){return(typeof r!="function"||e!==w)&&(r=Bt(r,e,3)),n(t,r)}}function fr(n){return function(t,r,e){var u={};return r=wr(r,e,3),_t(t,function(t,e,o){o=r(t,e,o),e=n?o:e,t=n?t:o,u[e]=t}),u}}function ar(n){return function(t,r,e){return t=u(t),(n?t:"")+pr(t,r,e)+(n?"":t)}}function cr(n){
var t=le(function(r,e){var u=v(e,t.placeholder);return gr(r,n,w,e,u)});return t}function lr(n,t){return function(r,e,u,o){var i=3>arguments.length;return typeof e=="function"&&o===w&&Oo(r)?n(r,e,u,i):Ot(r,wr(e,o,4),u,i,t)}}function sr(n,t,r,e,u,o,i,f,a,c){function l(){for(var m=arguments.length,b=m,j=Be(m);b--;)j[b]=arguments[b];if(e&&(j=Mt(j,e,u)),o&&(j=qt(j,o,i)),_||y){var b=l.placeholder,k=v(j,b),m=m-k.length;if(m<c){var I=f?qn(f):w,m=bu(c-m,0),E=_?k:w,k=_?w:k,C=_?j:w,j=_?w:j;return t|=_?R:O,t&=~(_?O:R),
g||(t&=~(x|A)),j=[n,t,r,C,E,j,k,I,a,m],I=sr.apply(w,j),$r(n)&&Du(I,j),I.placeholder=b,I}}if(b=p?r:this,I=h?b[n]:n,f)for(m=j.length,E=xu(f.length,m),k=qn(j);E--;)C=f[E],j[E]=Cr(C,m)?k[C]:w;return s&&a<j.length&&(j.length=a),this&&this!==Zn&&this instanceof l&&(I=d||Jt(n)),I.apply(b,j)}var s=t&E,p=t&x,h=t&A,_=t&k,g=t&j,y=t&I,d=h?w:Jt(n);return l}function pr(n,t,r){return n=n.length,t=+t,n<t&&mu(t)?(t-=n,r=null==r?" ":r+"",Ue(r,vu(t/r.length)).slice(0,t)):""}function hr(n,t,r,e){function u(){for(var t=-1,f=arguments.length,a=-1,c=e.length,l=Be(c+f);++a<c;)l[a]=e[a];
for(;f--;)l[a++]=arguments[++t];return(this&&this!==Zn&&this instanceof u?i:n).apply(o?r:this,l)}var o=t&x,i=Jt(n);return u}function _r(n){var t=Pe[n];return function(n,r){return(r=r===w?0:+r||0)?(r=au(10,r),t(n*r)/r):t(n)}}function vr(n){return function(t,r,e,u){var o=wr(e);return null==e&&o===ut?Lt(t,r,n):zt(t,r,o(e,u,1),n)}}function gr(n,t,r,e,u,o,i,f){var a=t&A;if(!a&&typeof n!="function")throw new Ge(L);var c=e?e.length:0;if(c||(t&=~(R|O),e=u=w),c-=u?u.length:0,t&O){var l=e,s=u;e=u=w}var p=a?w:zu(n);
return r=[n,t,r,e,u,l,s,o,i,f],p&&(e=r[1],t=p[1],f=e|t,u=t==E&&e==k||t==E&&e==C&&r[7].length<=p[8]||t==(E|C)&&e==k,(f<E||u)&&(t&x&&(r[2]=p[2],f|=e&x?0:j),(e=p[3])&&(u=r[3],r[3]=u?Mt(u,e,p[4]):qn(e),r[4]=u?v(r[3],z):qn(p[4])),(e=p[5])&&(u=r[5],r[5]=u?qt(u,e,p[6]):qn(e),r[6]=u?v(r[5],z):qn(p[6])),(e=p[7])&&(r[7]=qn(e)),t&E&&(r[8]=null==r[8]?p[8]:xu(r[8],p[8])),null==r[9]&&(r[9]=p[9]),r[0]=p[0],r[1]=f),t=r[1],f=r[9]),r[9]=null==f?a?0:n.length:bu(f-c,0)||0,(p?Lu:Du)(t==x?Yt(r[0],r[2]):t!=R&&t!=(x|R)||r[4].length?sr.apply(w,r):hr.apply(w,r),r);
}function yr(n,t,r,e,u,o,i){var f=-1,a=n.length,c=t.length;if(a!=c&&(!u||c<=a))return false;for(;++f<a;){var l=n[f],c=t[f],s=e?e(u?c:l,u?l:c,f):w;if(s!==w){if(s)continue;return false}if(u){if(!Hn(t,function(n){return l===n||r(l,n,e,u,o,i)}))return false}else if(l!==c&&!r(l,c,e,u,o,i))return false}return true}function dr(n,t,r){switch(r){case M:case q:return+n==+t;case P:return n.name==t.name&&n.message==t.message;case V:return n!=+n?t!=+t:n==+t;case Y:case G:return n==t+""}return false}function mr(n,t,r,e,u,o,i){var f=zo(n),a=f.length,c=zo(t).length;
if(a!=c&&!u)return false;for(c=a;c--;){var l=f[c];if(!(u?l in t:nu.call(t,l)))return false}for(var s=u;++c<a;){var l=f[c],p=n[l],h=t[l],_=e?e(u?h:p,u?p:h,l):w;if(_===w?!r(p,h,e,u,o,i):!_)return false;s||(s="constructor"==l)}return s||(r=n.constructor,e=t.constructor,!(r!=e&&"constructor"in n&&"constructor"in t)||typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)?true:false}function wr(n,t,r){var e=Nn.callback||Se,e=e===Se?ut:e;return r?e(n,t,r):e}function br(n){for(var t=n.name+"",r=Wu[t],e=r?r.length:0;e--;){
var u=r[e],o=u.func;if(null==o||o==n)return u.name}return t}function xr(n,t,e){var u=Nn.indexOf||Vr,u=u===Vr?r:u;return n?u(n,t,e):u}function Ar(n){n=Oe(n);for(var t=n.length;t--;){var r=n[t][1];n[t][2]=r===r&&!ge(r)}return n}function jr(n,t){var r=null==n?w:n[t];return ye(r)?r:w}function kr(n){var t=n.length,r=new n.constructor(t);return t&&"string"==typeof n[0]&&nu.call(n,"index")&&(r.index=n.index,r.input=n.input),r}function Ir(n){return n=n.constructor,typeof n=="function"&&n instanceof n||(n=Ve),
new n}function Rr(n,t,r){var e=n.constructor;switch(t){case J:return Dt(n);case M:case q:return new e(+n);case X:case H:case Q:case nn:case tn:case rn:case en:case un:case on:return t=n.buffer,new e(r?Dt(t):t,n.byteOffset,n.length);case V:case G:return new e(n);case Y:var u=new e(n.source,kn.exec(n));u.lastIndex=n.lastIndex}return u}function Or(n,t,r){return null==n||Wr(t,n)||(t=Dr(t),n=1==t.length?n:yt(n,Et(t,0,-1)),t=Zr(t)),t=null==n?n:n[t],null==t?w:t.apply(n,r)}function Er(n){return null!=n&&Sr(Bu(n));
}function Cr(n,t){return n=typeof n=="number"||On.test(n)?+n:-1,t=null==t?Cu:t,-1<n&&0==n%1&&n<t}function Ur(n,t,r){if(!ge(r))return false;var e=typeof t;return("number"==e?Er(r)&&Cr(t,r.length):"string"==e&&t in r)?(t=r[t],n===n?n===t:t!==t):false}function Wr(n,t){var r=typeof n;return"string"==r&&dn.test(n)||"number"==r?true:Oo(n)?false:!yn.test(n)||null!=t&&n in Br(t)}function $r(n){var t=br(n),r=Nn[t];return typeof r=="function"&&t in zn.prototype?n===r?true:(t=zu(r),!!t&&n===t[0]):false}function Sr(n){return typeof n=="number"&&-1<n&&0==n%1&&n<=Cu;
}function Fr(n,t){return n===w?t:Eo(n,t,Fr)}function Nr(n,t){n=Br(n);for(var r=-1,e=t.length,u={};++r<e;){var o=t[r];o in n&&(u[o]=n[o])}return u}function Tr(n,t){var r={};return ht(n,function(n,e,u){t(n,e,u)&&(r[e]=n)}),r}function Lr(n){for(var t=Re(n),r=t.length,e=r&&n.length,u=!!e&&Sr(e)&&(Oo(n)||pe(n)),o=-1,i=[];++o<r;){var f=t[o];(u&&Cr(f,e)||nu.call(n,f))&&i.push(f)}return i}function zr(n){return null==n?[]:Er(n)?ge(n)?n:Ve(n):Ee(n)}function Br(n){return ge(n)?n:Ve(n)}function Dr(n){if(Oo(n))return n;
var t=[];return u(n).replace(mn,function(n,r,e,u){t.push(e?u.replace(An,"$1"):r||n)}),t}function Mr(n){return n instanceof zn?n.clone():new Ln(n.__wrapped__,n.__chain__,qn(n.__actions__))}function qr(n,t,r){return n&&n.length?((r?Ur(n,t,r):null==t)&&(t=1),Et(n,0>t?0:t)):[]}function Pr(n,t,r){var e=n?n.length:0;return e?((r?Ur(n,t,r):null==t)&&(t=1),t=e-(+t||0),Et(n,0,0>t?0:t)):[]}function Kr(n){return n?n[0]:w}function Vr(n,t,e){var u=n?n.length:0;if(!u)return-1;if(typeof e=="number")e=0>e?bu(u+e,0):e;else if(e)return e=Lt(n,t),
e<u&&(t===t?t===n[e]:n[e]!==n[e])?e:-1;return r(n,t,e||0)}function Zr(n){var t=n?n.length:0;return t?n[t-1]:w}function Yr(n){return qr(n,1)}function Gr(n,t,e,u){if(!n||!n.length)return[];null!=t&&typeof t!="boolean"&&(u=e,e=Ur(n,t,u)?w:t,t=false);var o=wr();if((null!=e||o!==ut)&&(e=o(e,u,3)),t&&xr()===r){t=e;var i;e=-1,u=n.length;for(var o=-1,f=[];++e<u;){var a=n[e],c=t?t(a,e,n):a;e&&i===c||(i=c,f[++o]=a)}n=f}else n=St(n,e);return n}function Jr(n){if(!n||!n.length)return[];var t=-1,r=0;n=Vn(n,function(n){
return Er(n)?(r=bu(n.length,r),true):void 0});for(var e=Be(r);++t<r;)e[t]=Gn(n,jt(t));return e}function Xr(n,t,r){return n&&n.length?(n=Jr(n),null==t?n:(t=Bt(t,r,4),Gn(n,function(n){return Xn(n,t,w,true)}))):[]}function Hr(n,t){var r=-1,e=n?n.length:0,u={};for(!e||t||Oo(n[0])||(t=[]);++r<e;){var o=n[r];t?u[o]=t[r]:o&&(u[o[0]]=o[1])}return u}function Qr(n){return n=Nn(n),n.__chain__=true,n}function ne(n,t,r){return t.call(r,n)}function te(n,t,r){var e=Oo(n)?Kn:at;return r&&Ur(n,t,r)&&(t=w),(typeof t!="function"||r!==w)&&(t=wr(t,r,3)),
e(n,t)}function re(n,t,r){var e=Oo(n)?Vn:lt;return t=wr(t,r,3),e(n,t)}function ee(n,t,r,e){var u=n?Bu(n):0;return Sr(u)||(n=Ee(n),u=n.length),r=typeof r!="number"||e&&Ur(t,r,e)?0:0>r?bu(u+r,0):r||0,typeof n=="string"||!Oo(n)&&be(n)?r<=u&&-1<n.indexOf(t,r):!!u&&-1<xr(n,t,r)}function ue(n,t,r){var e=Oo(n)?Gn:wt;return t=wr(t,r,3),e(n,t)}function oe(n,t,r){if(r?Ur(n,t,r):null==t){n=zr(n);var e=n.length;return 0<e?n[Rt(0,e-1)]:w}r=-1,n=je(n);var e=n.length,u=e-1;for(t=xu(0>t?0:+t||0,e);++r<t;){var e=Rt(r,u),o=n[e];
n[e]=n[r],n[r]=o}return n.length=t,n}function ie(n,t,r){var e=Oo(n)?Hn:Ct;return r&&Ur(n,t,r)&&(t=w),(typeof t!="function"||r!==w)&&(t=wr(t,r,3)),e(n,t)}function fe(n,t){var r;if(typeof t!="function"){if(typeof n!="function")throw new Ge(L);var e=n;n=t,t=e}return function(){return 0<--n&&(r=t.apply(this,arguments)),1>=n&&(t=w),r}}function ae(n,t,r){function e(t,r){r&&iu(r),a=p=h=w,t&&(_=ho(),c=n.apply(s,f),p||a||(f=s=w))}function u(){var n=t-(ho()-l);0>=n||n>t?e(h,a):p=su(u,n)}function o(){e(g,p);
}function i(){if(f=arguments,l=ho(),s=this,h=g&&(p||!y),false===v)var r=y&&!p;else{a||y||(_=l);var e=v-(l-_),i=0>=e||e>v;i?(a&&(a=iu(a)),_=l,c=n.apply(s,f)):a||(a=su(o,e))}return i&&p?p=iu(p):p||t===v||(p=su(u,t)),r&&(i=true,c=n.apply(s,f)),!i||p||a||(f=s=w),c}var f,a,c,l,s,p,h,_=0,v=false,g=true;if(typeof n!="function")throw new Ge(L);if(t=0>t?0:+t||0,true===r)var y=true,g=false;else ge(r)&&(y=!!r.leading,v="maxWait"in r&&bu(+r.maxWait||0,t),g="trailing"in r?!!r.trailing:g);return i.cancel=function(){p&&iu(p),a&&iu(a),
_=0,a=p=h=w},i}function ce(n,t){function r(){var e=arguments,u=t?t.apply(this,e):e[0],o=r.cache;return o.has(u)?o.get(u):(e=n.apply(this,e),r.cache=o.set(u,e),e)}if(typeof n!="function"||t&&typeof t!="function")throw new Ge(L);return r.cache=new ce.Cache,r}function le(n,t){if(typeof n!="function")throw new Ge(L);return t=bu(t===w?n.length-1:+t||0,0),function(){for(var r=arguments,e=-1,u=bu(r.length-t,0),o=Be(u);++e<u;)o[e]=r[t+e];switch(t){case 0:return n.call(this,o);case 1:return n.call(this,r[0],o);
case 2:return n.call(this,r[0],r[1],o)}for(u=Be(t+1),e=-1;++e<t;)u[e]=r[e];return u[t]=o,n.apply(this,u)}}function se(n,t){return n>t}function pe(n){return h(n)&&Er(n)&&nu.call(n,"callee")&&!cu.call(n,"callee")}function he(n,t,r,e){return e=(r=typeof r=="function"?Bt(r,e,3):w)?r(n,t):w,e===w?dt(n,t,r):!!e}function _e(n){return h(n)&&typeof n.message=="string"&&ru.call(n)==P}function ve(n){return ge(n)&&ru.call(n)==K}function ge(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}function ye(n){
return null==n?false:ve(n)?uu.test(Qe.call(n)):h(n)&&Rn.test(n)}function de(n){return typeof n=="number"||h(n)&&ru.call(n)==V}function me(n){var t;if(!h(n)||ru.call(n)!=Z||pe(n)||!(nu.call(n,"constructor")||(t=n.constructor,typeof t!="function"||t instanceof t)))return false;var r;return ht(n,function(n,t){r=t}),r===w||nu.call(n,r)}function we(n){return ge(n)&&ru.call(n)==Y}function be(n){return typeof n=="string"||h(n)&&ru.call(n)==G}function xe(n){return h(n)&&Sr(n.length)&&!!Sn[ru.call(n)]}function Ae(n,t){
return n<t}function je(n){var t=n?Bu(n):0;return Sr(t)?t?qn(n):[]:Ee(n)}function ke(n){return et(n,Re(n))}function Ie(n){return gt(n,Re(n))}function Re(n){if(null==n)return[];ge(n)||(n=Ve(n));for(var t=n.length,t=t&&Sr(t)&&(Oo(n)||pe(n))&&t||0,r=n.constructor,e=-1,r=typeof r=="function"&&r.prototype===n,u=Be(t),o=0<t;++e<t;)u[e]=e+"";for(var i in n)o&&Cr(i,t)||"constructor"==i&&(r||!nu.call(n,i))||u.push(i);return u}function Oe(n){n=Br(n);for(var t=-1,r=zo(n),e=r.length,u=Be(e);++t<e;){var o=r[t];
u[t]=[o,n[o]]}return u}function Ee(n){return Ft(n,zo(n))}function Ce(n){return(n=u(n))&&n.replace(En,a).replace(xn,"")}function Ue(n,t){var r="";if(n=u(n),t=+t,1>t||!n||!mu(t))return r;do t%2&&(r+=n),t=yu(t/2),n+=n;while(t);return r}function We(n,t,r){var e=n;return(n=u(n))?(r?Ur(e,t,r):null==t)?n.slice(g(n),y(n)+1):(t+="",n.slice(o(n,t),i(n,t)+1)):n}function $e(n,t,r){return r&&Ur(n,t,r)&&(t=w),n=u(n),n.match(t||Wn)||[]}function Se(n,t,r){return r&&Ur(n,t,r)&&(t=w),h(n)?Ne(n):ut(n,t)}function Fe(n){
return n}function Ne(n){return bt(ot(n,true))}function Te(n,t,r){if(null==r){var e=ge(t),u=e?zo(t):w;((u=u&&u.length?gt(t,u):w)?u.length:e)||(u=false,r=t,t=n,n=this)}u||(u=gt(t,zo(t)));var o=true,e=-1,i=ve(n),f=u.length;false===r?o=false:ge(r)&&"chain"in r&&(o=r.chain);for(;++e<f;){r=u[e];var a=t[r];n[r]=a,i&&(n.prototype[r]=function(t){return function(){var r=this.__chain__;if(o||r){var e=n(this.__wrapped__);return(e.__actions__=qn(this.__actions__)).push({func:t,args:arguments,thisArg:n}),e.__chain__=r,e}return t.apply(n,Jn([this.value()],arguments));
}}(a))}return n}function Le(){}function ze(n){return Wr(n)?jt(n):kt(n)}_=_?Yn.defaults(Zn.Object(),_,Yn.pick(Zn,$n)):Zn;var Be=_.Array,De=_.Date,Me=_.Error,qe=_.Function,Pe=_.Math,Ke=_.Number,Ve=_.Object,Ze=_.RegExp,Ye=_.String,Ge=_.TypeError,Je=Be.prototype,Xe=Ve.prototype,He=Ye.prototype,Qe=qe.prototype.toString,nu=Xe.hasOwnProperty,tu=0,ru=Xe.toString,eu=Zn._,uu=Ze("^"+Qe.call(nu).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ou=_.ArrayBuffer,iu=_.clearTimeout,fu=_.parseFloat,au=Pe.pow,cu=Xe.propertyIsEnumerable,lu=jr(_,"Set"),su=_.setTimeout,pu=Je.splice,hu=_.Uint8Array,_u=jr(_,"WeakMap"),vu=Pe.ceil,gu=jr(Ve,"create"),yu=Pe.floor,du=jr(Be,"isArray"),mu=_.isFinite,wu=jr(Ve,"keys"),bu=Pe.max,xu=Pe.min,Au=jr(De,"now"),ju=_.parseInt,ku=Pe.random,Iu=Ke.NEGATIVE_INFINITY,Ru=Ke.POSITIVE_INFINITY,Ou=4294967294,Eu=2147483647,Cu=9007199254740991,Uu=_u&&new _u,Wu={};
Nn.support={},Nn.templateSettings={escape:_n,evaluate:vn,interpolate:gn,variable:"",imports:{_:Nn}};var $u=function(){function n(){}return function(t){if(ge(t)){n.prototype=t;var r=new n;n.prototype=w}return r||{}}}(),Su=Vt(_t),Fu=Vt(vt,true),Nu=Zt(),Tu=Zt(true),Lu=Uu?function(n,t){return Uu.set(n,t),n}:Fe,zu=Uu?function(n){return Uu.get(n)}:Le,Bu=jt("length"),Du=function(){var n=0,t=0;return function(r,e){var u=ho(),o=S-(u-t);if(t=u,0<o){if(++n>=$)return r}else n=0;return Lu(r,e)}}(),Mu=le(function(n,t){
return h(n)&&Er(n)?ft(n,pt(t,false,true)):[]}),qu=tr(),Pu=tr(true),Ku=le(function(n){for(var t=n.length,e=t,u=Be(l),o=xr(),i=o===r,f=[];e--;){var a=n[e]=Er(a=n[e])?a:[];u[e]=i&&120<=a.length&&gu&&lu?new Dn(e&&a):null}var i=n[0],c=-1,l=i?i.length:0,s=u[0];n:for(;++c<l;)if(a=i[c],0>(s?Mn(s,a):o(f,a,0))){for(e=t;--e;){var p=u[e];if(0>(p?Mn(p,a):o(n[e],a,0)))continue n}s&&s.push(a),f.push(a)}return f}),Vu=le(function(t,r){r=pt(r);var e=rt(t,r);return It(t,r.sort(n)),e}),Zu=vr(),Yu=vr(true),Gu=le(function(n){return St(pt(n,false,true));
}),Ju=le(function(n,t){return Er(n)?ft(n,t):[]}),Xu=le(Jr),Hu=le(function(n){var t=n.length,r=2<t?n[t-2]:w,e=1<t?n[t-1]:w;return 2<t&&typeof r=="function"?t-=2:(r=1<t&&typeof e=="function"?(--t,e):w,e=w),n.length=t,Xr(n,r,e)}),Qu=le(function(n){return n=pt(n),this.thru(function(t){t=Oo(t)?t:[Br(t)];for(var r=n,e=-1,u=t.length,o=-1,i=r.length,f=Be(u+i);++e<u;)f[e]=t[e];for(;++o<i;)f[e++]=r[o];return f})}),no=le(function(n,t){return rt(n,pt(t))}),to=Pt(function(n,t,r){nu.call(n,r)?++n[r]:n[r]=1}),ro=nr(Su),eo=nr(Fu,true),uo=ur(Pn,Su),oo=ur(function(n,t){
for(var r=n.length;r--&&false!==t(n[r],r,n););return n},Fu),io=Pt(function(n,t,r){nu.call(n,r)?n[r].push(t):n[r]=[t]}),fo=Pt(function(n,t,r){n[r]=t}),ao=le(function(n,t,r){var e=-1,u=typeof t=="function",o=Wr(t),i=Er(n)?Be(n.length):[];return Su(n,function(n){var f=u?t:o&&null!=n?n[t]:w;i[++e]=f?f.apply(n,r):Or(n,t,r)}),i}),co=Pt(function(n,t,r){n[r?0:1].push(t)},function(){return[[],[]]}),lo=lr(Xn,Su),so=lr(function(n,t,r,e){var u=n.length;for(e&&u&&(r=n[--u]);u--;)r=t(r,n[u],u,n);return r},Fu),po=le(function(n,t){
if(null==n)return[];var r=t[2];return r&&Ur(t[0],t[1],r)&&(t.length=1),Wt(n,pt(t),[])}),ho=Au||function(){return(new De).getTime()},_o=le(function(n,t,r){var e=x;if(r.length)var u=v(r,_o.placeholder),e=e|R;return gr(n,e,t,r,u)}),vo=le(function(n,t){t=t.length?pt(t):Ie(n);for(var r=-1,e=t.length;++r<e;){var u=t[r];n[u]=gr(n[u],x,n)}return n}),go=le(function(n,t,r){var e=x|A;if(r.length)var u=v(r,go.placeholder),e=e|R;return gr(t,e,n,r,u)}),yo=Xt(k),mo=Xt(I),wo=le(function(n,t){return it(n,1,t)}),bo=le(function(n,t,r){
return it(n,t,r)}),xo=er(),Ao=er(true),jo=le(function(n,t){if(t=pt(t),typeof n!="function"||!Kn(t,e))throw new Ge(L);var r=t.length;return le(function(e){for(var u=xu(e.length,r);u--;)e[u]=t[u](e[u]);return n.apply(this,e)})}),ko=cr(R),Io=cr(O),Ro=le(function(n,t){return gr(n,C,w,w,w,pt(t))}),Oo=du||function(n){return h(n)&&Sr(n.length)&&ru.call(n)==D},Eo=Kt(At),Co=Kt(function(n,t,r){return r?nt(n,t,r):tt(n,t)}),Uo=Ht(Co,function(n,t){return n===w?t:n}),Wo=Ht(Eo,Fr),$o=rr(_t),So=rr(vt),Fo=or(Nu),No=or(Tu),To=ir(_t),Lo=ir(vt),zo=wu?function(n){
var t=null==n?w:n.constructor;return typeof t=="function"&&t.prototype===n||typeof n!="function"&&Er(n)?Lr(n):ge(n)?wu(n):[]}:Lr,Bo=fr(true),Do=fr(),Mo=le(function(n,t){if(null==n)return{};if("function"!=typeof t[0])return t=Gn(pt(t),Ye),Nr(n,ft(Re(n),t));var r=Bt(t[0],t[1],3);return Tr(n,function(n,t,e){return!r(n,t,e)})}),qo=le(function(n,t){return null==n?{}:"function"==typeof t[0]?Tr(n,Bt(t[0],t[1],3)):Nr(n,pt(t))}),Po=Gt(function(n,t,r){return t=t.toLowerCase(),n+(r?t.charAt(0).toUpperCase()+t.slice(1):t);
}),Ko=Gt(function(n,t,r){return n+(r?"-":"")+t.toLowerCase()}),Vo=ar(),Zo=ar(true),Yo=Gt(function(n,t,r){return n+(r?"_":"")+t.toLowerCase()}),Go=Gt(function(n,t,r){return n+(r?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))}),Jo=le(function(n,t){try{return n.apply(w,t)}catch(r){return _e(r)?r:new Me(r)}}),Xo=le(function(n,t){return function(r){return Or(r,n,t)}}),Ho=le(function(n,t){return function(r){return Or(n,r,t)}}),Qo=_r("ceil"),ni=_r("floor"),ti=Qt(se,Iu),ri=Qt(Ae,Ru),ei=_r("round");return Nn.prototype=Tn.prototype,
Ln.prototype=$u(Tn.prototype),Ln.prototype.constructor=Ln,zn.prototype=$u(Tn.prototype),zn.prototype.constructor=zn,Bn.prototype["delete"]=function(n){return this.has(n)&&delete this.__data__[n]},Bn.prototype.get=function(n){return"__proto__"==n?w:this.__data__[n]},Bn.prototype.has=function(n){return"__proto__"!=n&&nu.call(this.__data__,n)},Bn.prototype.set=function(n,t){return"__proto__"!=n&&(this.__data__[n]=t),this},Dn.prototype.push=function(n){var t=this.data;typeof n=="string"||ge(n)?t.set.add(n):t.hash[n]=true;
},ce.Cache=Bn,Nn.after=function(n,t){if(typeof t!="function"){if(typeof n!="function")throw new Ge(L);var r=n;n=t,t=r}return n=mu(n=+n)?n:0,function(){return 1>--n?t.apply(this,arguments):void 0}},Nn.ary=function(n,t,r){return r&&Ur(n,t,r)&&(t=w),t=n&&null==t?n.length:bu(+t||0,0),gr(n,E,w,w,w,w,t)},Nn.assign=Co,Nn.at=no,Nn.before=fe,Nn.bind=_o,Nn.bindAll=vo,Nn.bindKey=go,Nn.callback=Se,Nn.chain=Qr,Nn.chunk=function(n,t,r){t=(r?Ur(n,t,r):null==t)?1:bu(yu(t)||1,1),r=0;for(var e=n?n.length:0,u=-1,o=Be(vu(e/t));r<e;)o[++u]=Et(n,r,r+=t);
return o},Nn.compact=function(n){for(var t=-1,r=n?n.length:0,e=-1,u=[];++t<r;){var o=n[t];o&&(u[++e]=o)}return u},Nn.constant=function(n){return function(){return n}},Nn.countBy=to,Nn.create=function(n,t,r){var e=$u(n);return r&&Ur(n,t,r)&&(t=w),t?tt(e,t):e},Nn.curry=yo,Nn.curryRight=mo,Nn.debounce=ae,Nn.defaults=Uo,Nn.defaultsDeep=Wo,Nn.defer=wo,Nn.delay=bo,Nn.difference=Mu,Nn.drop=qr,Nn.dropRight=Pr,Nn.dropRightWhile=function(n,t,r){return n&&n.length?Nt(n,wr(t,r,3),true,true):[]},Nn.dropWhile=function(n,t,r){
return n&&n.length?Nt(n,wr(t,r,3),true):[]},Nn.fill=function(n,t,r,e){var u=n?n.length:0;if(!u)return[];for(r&&typeof r!="number"&&Ur(n,t,r)&&(r=0,e=u),u=n.length,r=null==r?0:+r||0,0>r&&(r=-r>u?0:u+r),e=e===w||e>u?u:+e||0,0>e&&(e+=u),u=r>e?0:e>>>0,r>>>=0;r<u;)n[r++]=t;return n},Nn.filter=re,Nn.flatten=function(n,t,r){var e=n?n.length:0;return r&&Ur(n,t,r)&&(t=false),e?pt(n,t):[]},Nn.flattenDeep=function(n){return n&&n.length?pt(n,true):[]},Nn.flow=xo,Nn.flowRight=Ao,Nn.forEach=uo,Nn.forEachRight=oo,Nn.forIn=Fo,
Nn.forInRight=No,Nn.forOwn=To,Nn.forOwnRight=Lo,Nn.functions=Ie,Nn.groupBy=io,Nn.indexBy=fo,Nn.initial=function(n){return Pr(n,1)},Nn.intersection=Ku,Nn.invert=function(n,t,r){r&&Ur(n,t,r)&&(t=w),r=-1;for(var e=zo(n),u=e.length,o={};++r<u;){var i=e[r],f=n[i];t?nu.call(o,f)?o[f].push(i):o[f]=[i]:o[f]=i}return o},Nn.invoke=ao,Nn.keys=zo,Nn.keysIn=Re,Nn.map=ue,Nn.mapKeys=Bo,Nn.mapValues=Do,Nn.matches=Ne,Nn.matchesProperty=function(n,t){return xt(n,ot(t,true))},Nn.memoize=ce,Nn.merge=Eo,Nn.method=Xo,Nn.methodOf=Ho,
Nn.mixin=Te,Nn.modArgs=jo,Nn.negate=function(n){if(typeof n!="function")throw new Ge(L);return function(){return!n.apply(this,arguments)}},Nn.omit=Mo,Nn.once=function(n){return fe(2,n)},Nn.pairs=Oe,Nn.partial=ko,Nn.partialRight=Io,Nn.partition=co,Nn.pick=qo,Nn.pluck=function(n,t){return ue(n,ze(t))},Nn.property=ze,Nn.propertyOf=function(n){return function(t){return yt(n,Dr(t),t+"")}},Nn.pull=function(){var n=arguments,t=n[0];if(!t||!t.length)return t;for(var r=0,e=xr(),u=n.length;++r<u;)for(var o=0,i=n[r];-1<(o=e(t,i,o));)pu.call(t,o,1);
return t},Nn.pullAt=Vu,Nn.range=function(n,t,r){r&&Ur(n,t,r)&&(t=r=w),n=+n||0,r=null==r?1:+r||0,null==t?(t=n,n=0):t=+t||0;var e=-1;t=bu(vu((t-n)/(r||1)),0);for(var u=Be(t);++e<t;)u[e]=n,n+=r;return u},Nn.rearg=Ro,Nn.reject=function(n,t,r){var e=Oo(n)?Vn:lt;return t=wr(t,r,3),e(n,function(n,r,e){return!t(n,r,e)})},Nn.remove=function(n,t,r){var e=[];if(!n||!n.length)return e;var u=-1,o=[],i=n.length;for(t=wr(t,r,3);++u<i;)r=n[u],t(r,u,n)&&(e.push(r),o.push(u));return It(n,o),e},Nn.rest=Yr,Nn.restParam=le,
Nn.set=function(n,t,r){if(null==n)return n;var e=t+"";t=null!=n[e]||Wr(t,n)?[e]:Dr(t);for(var e=-1,u=t.length,o=u-1,i=n;null!=i&&++e<u;){var f=t[e];ge(i)&&(e==o?i[f]=r:null==i[f]&&(i[f]=Cr(t[e+1])?[]:{})),i=i[f]}return n},Nn.shuffle=function(n){return oe(n,Ru)},Nn.slice=function(n,t,r){var e=n?n.length:0;return e?(r&&typeof r!="number"&&Ur(n,t,r)&&(t=0,r=e),Et(n,t,r)):[]},Nn.sortBy=function(n,t,r){if(null==n)return[];r&&Ur(n,t,r)&&(t=w);var e=-1;return t=wr(t,r,3),n=wt(n,function(n,r,u){return{a:t(n,r,u),
b:++e,c:n}}),Ut(n,f)},Nn.sortByAll=po,Nn.sortByOrder=function(n,t,r,e){return null==n?[]:(e&&Ur(t,r,e)&&(r=w),Oo(t)||(t=null==t?[]:[t]),Oo(r)||(r=null==r?[]:[r]),Wt(n,t,r))},Nn.spread=function(n){if(typeof n!="function")throw new Ge(L);return function(t){return n.apply(this,t)}},Nn.take=function(n,t,r){return n&&n.length?((r?Ur(n,t,r):null==t)&&(t=1),Et(n,0,0>t?0:t)):[]},Nn.takeRight=function(n,t,r){var e=n?n.length:0;return e?((r?Ur(n,t,r):null==t)&&(t=1),t=e-(+t||0),Et(n,0>t?0:t)):[]},Nn.takeRightWhile=function(n,t,r){
return n&&n.length?Nt(n,wr(t,r,3),false,true):[]},Nn.takeWhile=function(n,t,r){return n&&n.length?Nt(n,wr(t,r,3)):[]},Nn.tap=function(n,t,r){return t.call(r,n),n},Nn.throttle=function(n,t,r){var e=true,u=true;if(typeof n!="function")throw new Ge(L);return false===r?e=false:ge(r)&&(e="leading"in r?!!r.leading:e,u="trailing"in r?!!r.trailing:u),ae(n,t,{leading:e,maxWait:+t,trailing:u})},Nn.thru=ne,Nn.times=function(n,t,r){if(n=yu(n),1>n||!mu(n))return[];var e=-1,u=Be(xu(n,4294967295));for(t=Bt(t,r,1);++e<n;)4294967295>e?u[e]=t(e):t(e);
return u},Nn.toArray=je,Nn.toPlainObject=ke,Nn.transform=function(n,t,r,e){var u=Oo(n)||xe(n);return t=wr(t,e,4),null==r&&(u||ge(n)?(e=n.constructor,r=u?Oo(n)?new e:[]:$u(ve(e)?e.prototype:w)):r={}),(u?Pn:_t)(n,function(n,e,u){return t(r,n,e,u)}),r},Nn.union=Gu,Nn.uniq=Gr,Nn.unzip=Jr,Nn.unzipWith=Xr,Nn.values=Ee,Nn.valuesIn=function(n){return Ft(n,Re(n))},Nn.where=function(n,t){return re(n,bt(t))},Nn.without=Ju,Nn.wrap=function(n,t){return t=null==t?Fe:t,gr(t,R,w,[n],[])},Nn.xor=function(){for(var n=-1,t=arguments.length;++n<t;){
var r=arguments[n];if(Er(r))var e=e?Jn(ft(e,r),ft(r,e)):r}return e?St(e):[]},Nn.zip=Xu,Nn.zipObject=Hr,Nn.zipWith=Hu,Nn.backflow=Ao,Nn.collect=ue,Nn.compose=Ao,Nn.each=uo,Nn.eachRight=oo,Nn.extend=Co,Nn.iteratee=Se,Nn.methods=Ie,Nn.object=Hr,Nn.select=re,Nn.tail=Yr,Nn.unique=Gr,Te(Nn,Nn),Nn.add=function(n,t){return(+n||0)+(+t||0)},Nn.attempt=Jo,Nn.camelCase=Po,Nn.capitalize=function(n){return(n=u(n))&&n.charAt(0).toUpperCase()+n.slice(1)},Nn.ceil=Qo,Nn.clone=function(n,t,r,e){return t&&typeof t!="boolean"&&Ur(n,t,r)?t=false:typeof t=="function"&&(e=r,
r=t,t=false),typeof r=="function"?ot(n,t,Bt(r,e,3)):ot(n,t)},Nn.cloneDeep=function(n,t,r){return typeof t=="function"?ot(n,true,Bt(t,r,3)):ot(n,true)},Nn.deburr=Ce,Nn.endsWith=function(n,t,r){n=u(n),t+="";var e=n.length;return r=r===w?e:xu(0>r?0:+r||0,e),r-=t.length,0<=r&&n.indexOf(t,r)==r},Nn.escape=function(n){return(n=u(n))&&hn.test(n)?n.replace(sn,c):n},Nn.escapeRegExp=function(n){return(n=u(n))&&bn.test(n)?n.replace(wn,l):n||"(?:)"},Nn.every=te,Nn.find=ro,Nn.findIndex=qu,Nn.findKey=$o,Nn.findLast=eo,
Nn.findLastIndex=Pu,Nn.findLastKey=So,Nn.findWhere=function(n,t){return ro(n,bt(t))},Nn.first=Kr,Nn.floor=ni,Nn.get=function(n,t,r){return n=null==n?w:yt(n,Dr(t),t+""),n===w?r:n},Nn.gt=se,Nn.gte=function(n,t){return n>=t},Nn.has=function(n,t){if(null==n)return false;var r=nu.call(n,t);if(!r&&!Wr(t)){if(t=Dr(t),n=1==t.length?n:yt(n,Et(t,0,-1)),null==n)return false;t=Zr(t),r=nu.call(n,t)}return r||Sr(n.length)&&Cr(t,n.length)&&(Oo(n)||pe(n))},Nn.identity=Fe,Nn.includes=ee,Nn.indexOf=Vr,Nn.inRange=function(n,t,r){
return t=+t||0,r===w?(r=t,t=0):r=+r||0,n>=xu(t,r)&&n<bu(t,r)},Nn.isArguments=pe,Nn.isArray=Oo,Nn.isBoolean=function(n){return true===n||false===n||h(n)&&ru.call(n)==M},Nn.isDate=function(n){return h(n)&&ru.call(n)==q},Nn.isElement=function(n){return!!n&&1===n.nodeType&&h(n)&&!me(n)},Nn.isEmpty=function(n){return null==n?true:Er(n)&&(Oo(n)||be(n)||pe(n)||h(n)&&ve(n.splice))?!n.length:!zo(n).length},Nn.isEqual=he,Nn.isError=_e,Nn.isFinite=function(n){return typeof n=="number"&&mu(n)},Nn.isFunction=ve,Nn.isMatch=function(n,t,r,e){
return r=typeof r=="function"?Bt(r,e,3):w,mt(n,Ar(t),r)},Nn.isNaN=function(n){return de(n)&&n!=+n},Nn.isNative=ye,Nn.isNull=function(n){return null===n},Nn.isNumber=de,Nn.isObject=ge,Nn.isPlainObject=me,Nn.isRegExp=we,Nn.isString=be,Nn.isTypedArray=xe,Nn.isUndefined=function(n){return n===w},Nn.kebabCase=Ko,Nn.last=Zr,Nn.lastIndexOf=function(n,t,r){var e=n?n.length:0;if(!e)return-1;var u=e;if(typeof r=="number")u=(0>r?bu(e+r,0):xu(r||0,e-1))+1;else if(r)return u=Lt(n,t,true)-1,n=n[u],(t===t?t===n:n!==n)?u:-1;
if(t!==t)return p(n,u,true);for(;u--;)if(n[u]===t)return u;return-1},Nn.lt=Ae,Nn.lte=function(n,t){return n<=t},Nn.max=ti,Nn.min=ri,Nn.noConflict=function(){return Zn._=eu,this},Nn.noop=Le,Nn.now=ho,Nn.pad=function(n,t,r){n=u(n),t=+t;var e=n.length;return e<t&&mu(t)?(e=(t-e)/2,t=yu(e),e=vu(e),r=pr("",e,r),r.slice(0,t)+n+r):n},Nn.padLeft=Vo,Nn.padRight=Zo,Nn.parseInt=function(n,t,r){return(r?Ur(n,t,r):null==t)?t=0:t&&(t=+t),n=We(n),ju(n,t||(In.test(n)?16:10))},Nn.random=function(n,t,r){r&&Ur(n,t,r)&&(t=r=w);
var e=null==n,u=null==t;return null==r&&(u&&typeof n=="boolean"?(r=n,n=1):typeof t=="boolean"&&(r=t,u=true)),e&&u&&(t=1,u=false),n=+n||0,u?(t=n,n=0):t=+t||0,r||n%1||t%1?(r=ku(),xu(n+r*(t-n+fu("1e-"+((r+"").length-1))),t)):Rt(n,t)},Nn.reduce=lo,Nn.reduceRight=so,Nn.repeat=Ue,Nn.result=function(n,t,r){var e=null==n?w:n[t];return e===w&&(null==n||Wr(t,n)||(t=Dr(t),n=1==t.length?n:yt(n,Et(t,0,-1)),e=null==n?w:n[Zr(t)]),e=e===w?r:e),ve(e)?e.call(n):e},Nn.round=ei,Nn.runInContext=m,Nn.size=function(n){var t=n?Bu(n):0;
return Sr(t)?t:zo(n).length},Nn.snakeCase=Yo,Nn.some=ie,Nn.sortedIndex=Zu,Nn.sortedLastIndex=Yu,Nn.startCase=Go,Nn.startsWith=function(n,t,r){return n=u(n),r=null==r?0:xu(0>r?0:+r||0,n.length),n.lastIndexOf(t,r)==r},Nn.sum=function(n,t,r){if(r&&Ur(n,t,r)&&(t=w),t=wr(t,r,3),1==t.length){n=Oo(n)?n:zr(n),r=n.length;for(var e=0;r--;)e+=+t(n[r])||0;n=e}else n=$t(n,t);return n},Nn.template=function(n,t,r){var e=Nn.templateSettings;r&&Ur(n,t,r)&&(t=r=w),n=u(n),t=nt(tt({},r||t),e,Qn),r=nt(tt({},t.imports),e.imports,Qn);
var o,i,f=zo(r),a=Ft(r,f),c=0;r=t.interpolate||Cn;var l="__p+='";r=Ze((t.escape||Cn).source+"|"+r.source+"|"+(r===gn?jn:Cn).source+"|"+(t.evaluate||Cn).source+"|$","g");var p="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";if(n.replace(r,function(t,r,e,u,f,a){return e||(e=u),l+=n.slice(c,a).replace(Un,s),r&&(o=true,l+="'+__e("+r+")+'"),f&&(i=true,l+="';"+f+";\n__p+='"),e&&(l+="'+((__t=("+e+"))==null?'':__t)+'"),c=a+t.length,t}),l+="';",(t=t.variable)||(l="with(obj){"+l+"}"),l=(i?l.replace(fn,""):l).replace(an,"$1").replace(cn,"$1;"),
l="function("+(t||"obj")+"){"+(t?"":"obj||(obj={});")+"var __t,__p=''"+(o?",__e=_.escape":"")+(i?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+l+"return __p}",t=Jo(function(){return qe(f,p+"return "+l).apply(w,a)}),t.source=l,_e(t))throw t;return t},Nn.trim=We,Nn.trimLeft=function(n,t,r){var e=n;return(n=u(n))?n.slice((r?Ur(e,t,r):null==t)?g(n):o(n,t+"")):n},Nn.trimRight=function(n,t,r){var e=n;return(n=u(n))?(r?Ur(e,t,r):null==t)?n.slice(0,y(n)+1):n.slice(0,i(n,t+"")+1):n;
},Nn.trunc=function(n,t,r){r&&Ur(n,t,r)&&(t=w);var e=U;if(r=W,null!=t)if(ge(t)){var o="separator"in t?t.separator:o,e="length"in t?+t.length||0:e;r="omission"in t?u(t.omission):r}else e=+t||0;if(n=u(n),e>=n.length)return n;if(e-=r.length,1>e)return r;if(t=n.slice(0,e),null==o)return t+r;if(we(o)){if(n.slice(e).search(o)){var i,f=n.slice(0,e);for(o.global||(o=Ze(o.source,(kn.exec(o)||"")+"g")),o.lastIndex=0;n=o.exec(f);)i=n.index;t=t.slice(0,null==i?e:i)}}else n.indexOf(o,e)!=e&&(o=t.lastIndexOf(o),
-1<o&&(t=t.slice(0,o)));return t+r},Nn.unescape=function(n){return(n=u(n))&&pn.test(n)?n.replace(ln,d):n},Nn.uniqueId=function(n){var t=++tu;return u(n)+t},Nn.words=$e,Nn.all=te,Nn.any=ie,Nn.contains=ee,Nn.eq=he,Nn.detect=ro,Nn.foldl=lo,Nn.foldr=so,Nn.head=Kr,Nn.include=ee,Nn.inject=lo,Te(Nn,function(){var n={};return _t(Nn,function(t,r){Nn.prototype[r]||(n[r]=t)}),n}(),false),Nn.sample=oe,Nn.prototype.sample=function(n){return this.__chain__||null!=n?this.thru(function(t){return oe(t,n)}):oe(this.value());
},Nn.VERSION=b,Pn("bind bindKey curry curryRight partial partialRight".split(" "),function(n){Nn[n].placeholder=Nn}),Pn(["drop","take"],function(n,t){zn.prototype[n]=function(r){var e=this.__filtered__;if(e&&!t)return new zn(this);r=null==r?1:bu(yu(r)||0,0);var u=this.clone();return e?u.__takeCount__=xu(u.__takeCount__,r):u.__views__.push({size:r,type:n+(0>u.__dir__?"Right":"")}),u},zn.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}}),Pn(["filter","map","takeWhile"],function(n,t){
var r=t+1,e=r!=T;zn.prototype[n]=function(n,t){var u=this.clone();return u.__iteratees__.push({iteratee:wr(n,t,1),type:r}),u.__filtered__=u.__filtered__||e,u}}),Pn(["first","last"],function(n,t){var r="take"+(t?"Right":"");zn.prototype[n]=function(){return this[r](1).value()[0]}}),Pn(["initial","rest"],function(n,t){var r="drop"+(t?"":"Right");zn.prototype[n]=function(){return this.__filtered__?new zn(this):this[r](1)}}),Pn(["pluck","where"],function(n,t){var r=t?"filter":"map",e=t?bt:ze;zn.prototype[n]=function(n){
return this[r](e(n))}}),zn.prototype.compact=function(){return this.filter(Fe)},zn.prototype.reject=function(n,t){return n=wr(n,t,1),this.filter(function(t){return!n(t)})},zn.prototype.slice=function(n,t){n=null==n?0:+n||0;var r=this;return r.__filtered__&&(0<n||0>t)?new zn(r):(0>n?r=r.takeRight(-n):n&&(r=r.drop(n)),t!==w&&(t=+t||0,r=0>t?r.dropRight(-t):r.take(t-n)),r)},zn.prototype.takeRightWhile=function(n,t){return this.reverse().takeWhile(n,t).reverse()},zn.prototype.toArray=function(){return this.take(Ru);
},_t(zn.prototype,function(n,t){var r=/^(?:filter|map|reject)|While$/.test(t),e=/^(?:first|last)$/.test(t),u=Nn[e?"take"+("last"==t?"Right":""):t];u&&(Nn.prototype[t]=function(){function t(n){return e&&i?u(n,1)[0]:u.apply(w,Jn([n],o))}var o=e?[1]:arguments,i=this.__chain__,f=this.__wrapped__,a=!!this.__actions__.length,c=f instanceof zn,l=o[0],s=c||Oo(f);return s&&r&&typeof l=="function"&&1!=l.length&&(c=s=false),l={func:ne,args:[t],thisArg:w},a=c&&!a,e&&!i?a?(f=f.clone(),f.__actions__.push(l),n.call(f)):u.call(w,this.value())[0]:!e&&s?(f=a?f:new zn(this),
f=n.apply(f,o),f.__actions__.push(l),new Ln(f,i)):this.thru(t)})}),Pn("join pop push replace shift sort splice split unshift".split(" "),function(n){var t=(/^(?:replace|split)$/.test(n)?He:Je)[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:join|pop|replace|shift)$/.test(n);Nn.prototype[n]=function(){var n=arguments;return e&&!this.__chain__?t.apply(this.value(),n):this[r](function(r){return t.apply(r,n)})}}),_t(zn.prototype,function(n,t){var r=Nn[t];if(r){var e=r.name+"";(Wu[e]||(Wu[e]=[])).push({
name:t,func:r})}}),Wu[sr(w,A).name]=[{name:"wrapper",func:w}],zn.prototype.clone=function(){var n=new zn(this.__wrapped__);return n.__actions__=qn(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=qn(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=qn(this.__views__),n},zn.prototype.reverse=function(){if(this.__filtered__){var n=new zn(this);n.__dir__=-1,n.__filtered__=true}else n=this.clone(),n.__dir__*=-1;return n},zn.prototype.value=function(){
var n,t=this.__wrapped__.value(),r=this.__dir__,e=Oo(t),u=0>r,o=e?t.length:0;n=o;for(var i=this.__views__,f=0,a=-1,c=i.length;++a<c;){var l=i[a],s=l.size;switch(l.type){case"drop":f+=s;break;case"dropRight":n-=s;break;case"take":n=xu(n,f+s);break;case"takeRight":f=bu(f,n-s)}}if(n={start:f,end:n},i=n.start,f=n.end,n=f-i,u=u?f:i-1,i=this.__iteratees__,f=i.length,a=0,c=xu(n,this.__takeCount__),!e||o<F||o==n&&c==n)return Tt(t,this.__actions__);e=[];n:for(;n--&&a<c;){for(u+=r,o=-1,l=t[u];++o<f;){var p=i[o],s=p.type,p=p.iteratee(l);
if(s==T)l=p;else if(!p){if(s==N)continue n;break n}}e[a++]=l}return e},Nn.prototype.chain=function(){return Qr(this)},Nn.prototype.commit=function(){return new Ln(this.value(),this.__chain__)},Nn.prototype.concat=Qu,Nn.prototype.plant=function(n){for(var t,r=this;r instanceof Tn;){var e=Mr(r);t?u.__wrapped__=e:t=e;var u=e,r=r.__wrapped__}return u.__wrapped__=n,t},Nn.prototype.reverse=function(){function n(n){return n.reverse()}var t=this.__wrapped__;return t instanceof zn?(this.__actions__.length&&(t=new zn(this)),
t=t.reverse(),t.__actions__.push({func:ne,args:[n],thisArg:w}),new Ln(t,this.__chain__)):this.thru(n)},Nn.prototype.toString=function(){return this.value()+""},Nn.prototype.run=Nn.prototype.toJSON=Nn.prototype.valueOf=Nn.prototype.value=function(){return Tt(this.__wrapped__,this.__actions__)},Nn.prototype.collect=Nn.prototype.map,Nn.prototype.head=Nn.prototype.first,Nn.prototype.select=Nn.prototype.filter,Nn.prototype.tail=Nn.prototype.rest,Nn}var w,b="3.10.1",x=1,A=2,j=4,k=8,I=16,R=32,O=64,E=128,C=256,U=30,W="...",$=150,S=16,F=200,N=1,T=2,L="Expected a function",z="__lodash_placeholder__",B="[object Arguments]",D="[object Array]",M="[object Boolean]",q="[object Date]",P="[object Error]",K="[object Function]",V="[object Number]",Z="[object Object]",Y="[object RegExp]",G="[object String]",J="[object ArrayBuffer]",X="[object Float32Array]",H="[object Float64Array]",Q="[object Int8Array]",nn="[object Int16Array]",tn="[object Int32Array]",rn="[object Uint8Array]",en="[object Uint8ClampedArray]",un="[object Uint16Array]",on="[object Uint32Array]",fn=/\b__p\+='';/g,an=/\b(__p\+=)''\+/g,cn=/(__e\(.*?\)|\b__t\))\+'';/g,ln=/&(?:amp|lt|gt|quot|#39|#96);/g,sn=/[&<>"'`]/g,pn=RegExp(ln.source),hn=RegExp(sn.source),_n=/<%-([\s\S]+?)%>/g,vn=/<%([\s\S]+?)%>/g,gn=/<%=([\s\S]+?)%>/g,yn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,dn=/^\w*$/,mn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g,wn=/^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,bn=RegExp(wn.source),xn=/[\u0300-\u036f\ufe20-\ufe23]/g,An=/\\(\\)?/g,jn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,kn=/\w*$/,In=/^0[xX]/,Rn=/^\[object .+?Constructor\]$/,On=/^\d+$/,En=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,Cn=/($^)/,Un=/['\n\r\u2028\u2029\\]/g,Wn=RegExp("[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?=[A-Z\\xc0-\\xd6\\xd8-\\xde][a-z\\xdf-\\xf6\\xf8-\\xff]+)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+|[A-Z\\xc0-\\xd6\\xd8-\\xde]+|[0-9]+","g"),$n="Array ArrayBuffer Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Math Number Object RegExp Set String _ clearTimeout isFinite parseFloat parseInt setTimeout TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap".split(" "),Sn={};
Sn[X]=Sn[H]=Sn[Q]=Sn[nn]=Sn[tn]=Sn[rn]=Sn[en]=Sn[un]=Sn[on]=true,Sn[B]=Sn[D]=Sn[J]=Sn[M]=Sn[q]=Sn[P]=Sn[K]=Sn["[object Map]"]=Sn[V]=Sn[Z]=Sn[Y]=Sn["[object Set]"]=Sn[G]=Sn["[object WeakMap]"]=false;var Fn={};Fn[B]=Fn[D]=Fn[J]=Fn[M]=Fn[q]=Fn[X]=Fn[H]=Fn[Q]=Fn[nn]=Fn[tn]=Fn[V]=Fn[Z]=Fn[Y]=Fn[G]=Fn[rn]=Fn[en]=Fn[un]=Fn[on]=true,Fn[P]=Fn[K]=Fn["[object Map]"]=Fn["[object Set]"]=Fn["[object WeakMap]"]=false;var Nn={"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xe0":"a","\xe1":"a","\xe2":"a",
"\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xdd":"Y",
"\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss"},Tn={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},Ln={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},zn={"function":true,object:true},Bn={0:"x30",1:"x31",2:"x32",3:"x33",4:"x34",5:"x35",6:"x36",7:"x37",8:"x38",9:"x39",A:"x41",B:"x42",C:"x43",D:"x44",E:"x45",F:"x46",a:"x61",b:"x62",c:"x63",d:"x64",e:"x65",f:"x66",n:"x6e",r:"x72",t:"x74",u:"x75",v:"x76",x:"x78"},Dn={"\\":"\\",
"'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Mn=zn[typeof exports]&&exports&&!exports.nodeType&&exports,qn=zn[typeof module]&&module&&!module.nodeType&&module,Pn=zn[typeof self]&&self&&self.Object&&self,Kn=zn[typeof window]&&window&&window.Object&&window,Vn=qn&&qn.exports===Mn&&Mn,Zn=Mn&&qn&&typeof global=="object"&&global&&global.Object&&global||Kn!==(this&&this.window)&&Kn||Pn||this,Yn=m();typeof define=="function"&&typeof define.amd=="object"&&define.amd?(Zn._=Yn, define(function(){
return Yn})):Mn&&qn?Vn?(qn.exports=Yn)._=Yn:Mn._=Yn:Zn._=Yn}).call(this);
/**
 * @license AngularJS v1.4.7
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc module
 * @name ngRoute
 * @description
 *
 * # ngRoute
 *
 * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.
 *
 * ## Example
 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
 *
 *
 * <div doc-module-components="ngRoute"></div>
 */
 /* global -ngRouteModule */
var ngRouteModule = angular.module('ngRoute', ['ng']).
                        provider('$route', $RouteProvider),
    $routeMinErr = angular.$$minErr('ngRoute');

/**
 * @ngdoc provider
 * @name $routeProvider
 *
 * @description
 *
 * Used for configuring routes.
 *
 * ## Example
 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
 *
 * ## Dependencies
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 */
function $RouteProvider() {
  function inherit(parent, extra) {
    return angular.extend(Object.create(parent), extra);
  }

  var routes = {};

  /**
   * @ngdoc method
   * @name $routeProvider#when
   *
   * @param {string} path Route path (matched against `$location.path`). If `$location.path`
   *    contains redundant trailing slash or is missing one, the route will still match and the
   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the
   *    route definition.
   *
   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up
   *        to the next slash are matched and stored in `$routeParams` under the given `name`
   *        when the route matches.
   *    * `path` can contain named groups starting with a colon and ending with a star:
   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`
   *        when the route matches.
   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.
   *
   *    For example, routes like `/color/:color/largecode/:largecode*\/edit` will match
   *    `/color/brown/largecode/code/with/slashes/edit` and extract:
   *
   *    * `color: brown`
   *    * `largecode: code/with/slashes`.
   *
   *
   * @param {Object} route Mapping information to be assigned to `$route.current` on route
   *    match.
   *
   *    Object properties:
   *
   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with
   *      newly created scope or the name of a {@link angular.Module#controller registered
   *      controller} if passed as a string.
   *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.
   *      If present, the controller will be published to scope under the `controllerAs` name.
   *    - `template` – `{string=|function()=}` – html template as a string or a function that
   *      returns an html template as a string which should be used by {@link
   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.
   *      This property takes precedence over `templateUrl`.
   *
   *      If `template` is a function, it will be called with the following parameters:
   *
   *      - `{Array.<Object>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route
   *
   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
   *      template that should be used by {@link ngRoute.directive:ngView ngView}.
   *
   *      If `templateUrl` is a function, it will be called with the following parameters:
   *
   *      - `{Array.<Object>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route
   *
   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should
   *      be injected into the controller. If any of these dependencies are promises, the router
   *      will wait for them all to be resolved or one to be rejected before the controller is
   *      instantiated.
   *      If all the promises are resolved successfully, the values of the resolved promises are
   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is
   *      fired. If any of the promises are rejected the
   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired. The map object
   *      is:
   *
   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.
   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.
   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}
   *        and the return value is treated as the dependency. If the result is a promise, it is
   *        resolved before its value is injected into the controller. Be aware that
   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve
   *        functions.  Use `$route.current.params` to access the new route parameters, instead.
   *
   *    - `redirectTo` – {(string|function())=} – value to update
   *      {@link ng.$location $location} path with and trigger route redirection.
   *
   *      If `redirectTo` is a function, it will be called with the following parameters:
   *
   *      - `{Object.<string>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route templateUrl.
   *      - `{string}` - current `$location.path()`
   *      - `{Object}` - current `$location.search()`
   *
   *      The custom `redirectTo` function is expected to return a string which will be used
   *      to update `$location.path()` and `$location.search()`.
   *
   *    - `[reloadOnSearch=true]` - {boolean=} - reload route when only `$location.search()`
   *      or `$location.hash()` changes.
   *
   *      If the option is set to `false` and url in the browser changes, then
   *      `$routeUpdate` event is broadcasted on the root scope.
   *
   *    - `[caseInsensitiveMatch=false]` - {boolean=} - match routes without being case sensitive
   *
   *      If the option is set to `true`, then the particular route can be matched without being
   *      case sensitive
   *
   * @returns {Object} self
   *
   * @description
   * Adds a new route definition to the `$route` service.
   */
  this.when = function(path, route) {
    //copy original route object to preserve params inherited from proto chain
    var routeCopy = angular.copy(route);
    if (angular.isUndefined(routeCopy.reloadOnSearch)) {
      routeCopy.reloadOnSearch = true;
    }
    if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {
      routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;
    }
    routes[path] = angular.extend(
      routeCopy,
      path && pathRegExp(path, routeCopy)
    );

    // create redirection for trailing slashes
    if (path) {
      var redirectPath = (path[path.length - 1] == '/')
            ? path.substr(0, path.length - 1)
            : path + '/';

      routes[redirectPath] = angular.extend(
        {redirectTo: path},
        pathRegExp(redirectPath, routeCopy)
      );
    }

    return this;
  };

  /**
   * @ngdoc property
   * @name $routeProvider#caseInsensitiveMatch
   * @description
   *
   * A boolean property indicating if routes defined
   * using this provider should be matched using a case insensitive
   * algorithm. Defaults to `false`.
   */
  this.caseInsensitiveMatch = false;

   /**
    * @param path {string} path
    * @param opts {Object} options
    * @return {?Object}
    *
    * @description
    * Normalizes the given path, returning a regular expression
    * and the original path.
    *
    * Inspired by pathRexp in visionmedia/express/lib/utils.js.
    */
  function pathRegExp(path, opts) {
    var insensitive = opts.caseInsensitiveMatch,
        ret = {
          originalPath: path,
          regexp: path
        },
        keys = ret.keys = [];

    path = path
      .replace(/([().])/g, '\\$1')
      .replace(/(\/)?:(\w+)([\?\*])?/g, function(_, slash, key, option) {
        var optional = option === '?' ? option : null;
        var star = option === '*' ? option : null;
        keys.push({ name: key, optional: !!optional });
        slash = slash || '';
        return ''
          + (optional ? '' : slash)
          + '(?:'
          + (optional ? slash : '')
          + (star && '(.+?)' || '([^/]+)')
          + (optional || '')
          + ')'
          + (optional || '');
      })
      .replace(/([\/$\*])/g, '\\$1');

    ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');
    return ret;
  }

  /**
   * @ngdoc method
   * @name $routeProvider#otherwise
   *
   * @description
   * Sets route definition that will be used on route change when no other route definition
   * is matched.
   *
   * @param {Object|string} params Mapping information to be assigned to `$route.current`.
   * If called with a string, the value maps to `redirectTo`.
   * @returns {Object} self
   */
  this.otherwise = function(params) {
    if (typeof params === 'string') {
      params = {redirectTo: params};
    }
    this.when(null, params);
    return this;
  };


  this.$get = ['$rootScope',
               '$location',
               '$routeParams',
               '$q',
               '$injector',
               '$templateRequest',
               '$sce',
      function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce) {

    /**
     * @ngdoc service
     * @name $route
     * @requires $location
     * @requires $routeParams
     *
     * @property {Object} current Reference to the current route definition.
     * The route definition contains:
     *
     *   - `controller`: The controller constructor as define in route definition.
     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for
     *     controller instantiation. The `locals` contain
     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:
     *
     *     - `$scope` - The current route scope.
     *     - `$template` - The current route template HTML.
     *
     * @property {Object} routes Object with all route configuration Objects as its properties.
     *
     * @description
     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).
     * It watches `$location.url()` and tries to map the path to an existing route definition.
     *
     * Requires the {@link ngRoute `ngRoute`} module to be installed.
     *
     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.
     *
     * The `$route` service is typically used in conjunction with the
     * {@link ngRoute.directive:ngView `ngView`} directive and the
     * {@link ngRoute.$routeParams `$routeParams`} service.
     *
     * @example
     * This example shows how changing the URL hash causes the `$route` to match a route against the
     * URL, and the `ngView` pulls in the partial.
     *
     * <example name="$route-service" module="ngRouteExample"
     *          deps="angular-route.js" fixBase="true">
     *   <file name="index.html">
     *     <div ng-controller="MainController">
     *       Choose:
     *       <a href="Book/Moby">Moby</a> |
     *       <a href="Book/Moby/ch/1">Moby: Ch1</a> |
     *       <a href="Book/Gatsby">Gatsby</a> |
     *       <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
     *       <a href="Book/Scarlet">Scarlet Letter</a><br/>
     *
     *       <div ng-view></div>
     *
     *       <hr />
     *
     *       <pre>$location.path() = {{$location.path()}}</pre>
     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>
     *       <pre>$route.current.params = {{$route.current.params}}</pre>
     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>
     *       <pre>$routeParams = {{$routeParams}}</pre>
     *     </div>
     *   </file>
     *
     *   <file name="book.html">
     *     controller: {{name}}<br />
     *     Book Id: {{params.bookId}}<br />
     *   </file>
     *
     *   <file name="chapter.html">
     *     controller: {{name}}<br />
     *     Book Id: {{params.bookId}}<br />
     *     Chapter Id: {{params.chapterId}}
     *   </file>
     *
     *   <file name="script.js">
     *     angular.module('ngRouteExample', ['ngRoute'])
     *
     *      .controller('MainController', function($scope, $route, $routeParams, $location) {
     *          $scope.$route = $route;
     *          $scope.$location = $location;
     *          $scope.$routeParams = $routeParams;
     *      })
     *
     *      .controller('BookController', function($scope, $routeParams) {
     *          $scope.name = "BookController";
     *          $scope.params = $routeParams;
     *      })
     *
     *      .controller('ChapterController', function($scope, $routeParams) {
     *          $scope.name = "ChapterController";
     *          $scope.params = $routeParams;
     *      })
     *
     *     .config(function($routeProvider, $locationProvider) {
     *       $routeProvider
     *        .when('/Book/:bookId', {
     *         templateUrl: 'book.html',
     *         controller: 'BookController',
     *         resolve: {
     *           // I will cause a 1 second delay
     *           delay: function($q, $timeout) {
     *             var delay = $q.defer();
     *             $timeout(delay.resolve, 1000);
     *             return delay.promise;
     *           }
     *         }
     *       })
     *       .when('/Book/:bookId/ch/:chapterId', {
     *         templateUrl: 'chapter.html',
     *         controller: 'ChapterController'
     *       });
     *
     *       // configure html5 to get links working on jsfiddle
     *       $locationProvider.html5Mode(true);
     *     });
     *
     *   </file>
     *
     *   <file name="protractor.js" type="protractor">
     *     it('should load and compile correct template', function() {
     *       element(by.linkText('Moby: Ch1')).click();
     *       var content = element(by.css('[ng-view]')).getText();
     *       expect(content).toMatch(/controller\: ChapterController/);
     *       expect(content).toMatch(/Book Id\: Moby/);
     *       expect(content).toMatch(/Chapter Id\: 1/);
     *
     *       element(by.partialLinkText('Scarlet')).click();
     *
     *       content = element(by.css('[ng-view]')).getText();
     *       expect(content).toMatch(/controller\: BookController/);
     *       expect(content).toMatch(/Book Id\: Scarlet/);
     *     });
     *   </file>
     * </example>
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeStart
     * @eventType broadcast on root scope
     * @description
     * Broadcasted before a route change. At this  point the route services starts
     * resolving all of the dependencies needed for the route change to occur.
     * Typically this involves fetching the view template as well as any dependencies
     * defined in `resolve` route property. Once  all of the dependencies are resolved
     * `$routeChangeSuccess` is fired.
     *
     * The route change (and the `$location` change that triggered it) can be prevented
     * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}
     * for more details about event object.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {Route} next Future route information.
     * @param {Route} current Current route information.
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeSuccess
     * @eventType broadcast on root scope
     * @description
     * Broadcasted after a route change has happened successfully.
     * The `resolve` dependencies are now available in the `current.locals` property.
     *
     * {@link ngRoute.directive:ngView ngView} listens for the directive
     * to instantiate the controller and render the view.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {Route} current Current route information.
     * @param {Route|Undefined} previous Previous route information, or undefined if current is
     * first route entered.
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeError
     * @eventType broadcast on root scope
     * @description
     * Broadcasted if any of the resolve promises are rejected.
     *
     * @param {Object} angularEvent Synthetic event object
     * @param {Route} current Current route information.
     * @param {Route} previous Previous route information.
     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.
     */

    /**
     * @ngdoc event
     * @name $route#$routeUpdate
     * @eventType broadcast on root scope
     * @description
     * The `reloadOnSearch` property has been set to false, and we are reusing the same
     * instance of the Controller.
     *
     * @param {Object} angularEvent Synthetic event object
     * @param {Route} current Current/previous route information.
     */

    var forceReload = false,
        preparedRoute,
        preparedRouteIsUpdateOnly,
        $route = {
          routes: routes,

          /**
           * @ngdoc method
           * @name $route#reload
           *
           * @description
           * Causes `$route` service to reload the current route even if
           * {@link ng.$location $location} hasn't changed.
           *
           * As a result of that, {@link ngRoute.directive:ngView ngView}
           * creates new scope and reinstantiates the controller.
           */
          reload: function() {
            forceReload = true;
            $rootScope.$evalAsync(function() {
              // Don't support cancellation of a reload for now...
              prepareRoute();
              commitRoute();
            });
          },

          /**
           * @ngdoc method
           * @name $route#updateParams
           *
           * @description
           * Causes `$route` service to update the current URL, replacing
           * current route parameters with those specified in `newParams`.
           * Provided property names that match the route's path segment
           * definitions will be interpolated into the location's path, while
           * remaining properties will be treated as query params.
           *
           * @param {!Object<string, string>} newParams mapping of URL parameter names to values
           */
          updateParams: function(newParams) {
            if (this.current && this.current.$$route) {
              newParams = angular.extend({}, this.current.params, newParams);
              $location.path(interpolate(this.current.$$route.originalPath, newParams));
              // interpolate modifies newParams, only query params are left
              $location.search(newParams);
            } else {
              throw $routeMinErr('norout', 'Tried updating route when with no current route');
            }
          }
        };

    $rootScope.$on('$locationChangeStart', prepareRoute);
    $rootScope.$on('$locationChangeSuccess', commitRoute);

    return $route;

    /////////////////////////////////////////////////////

    /**
     * @param on {string} current url
     * @param route {Object} route regexp to match the url against
     * @return {?Object}
     *
     * @description
     * Check if the route matches the current url.
     *
     * Inspired by match in
     * visionmedia/express/lib/router/router.js.
     */
    function switchRouteMatcher(on, route) {
      var keys = route.keys,
          params = {};

      if (!route.regexp) return null;

      var m = route.regexp.exec(on);
      if (!m) return null;

      for (var i = 1, len = m.length; i < len; ++i) {
        var key = keys[i - 1];

        var val = m[i];

        if (key && val) {
          params[key.name] = val;
        }
      }
      return params;
    }

    function prepareRoute($locationEvent) {
      var lastRoute = $route.current;

      preparedRoute = parseRoute();
      preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route
          && angular.equals(preparedRoute.pathParams, lastRoute.pathParams)
          && !preparedRoute.reloadOnSearch && !forceReload;

      if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {
        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {
          if ($locationEvent) {
            $locationEvent.preventDefault();
          }
        }
      }
    }

    function commitRoute() {
      var lastRoute = $route.current;
      var nextRoute = preparedRoute;

      if (preparedRouteIsUpdateOnly) {
        lastRoute.params = nextRoute.params;
        angular.copy(lastRoute.params, $routeParams);
        $rootScope.$broadcast('$routeUpdate', lastRoute);
      } else if (nextRoute || lastRoute) {
        forceReload = false;
        $route.current = nextRoute;
        if (nextRoute) {
          if (nextRoute.redirectTo) {
            if (angular.isString(nextRoute.redirectTo)) {
              $location.path(interpolate(nextRoute.redirectTo, nextRoute.params)).search(nextRoute.params)
                       .replace();
            } else {
              $location.url(nextRoute.redirectTo(nextRoute.pathParams, $location.path(), $location.search()))
                       .replace();
            }
          }
        }

        $q.when(nextRoute).
          then(function() {
            if (nextRoute) {
              var locals = angular.extend({}, nextRoute.resolve),
                  template, templateUrl;

              angular.forEach(locals, function(value, key) {
                locals[key] = angular.isString(value) ?
                    $injector.get(value) : $injector.invoke(value, null, null, key);
              });

              if (angular.isDefined(template = nextRoute.template)) {
                if (angular.isFunction(template)) {
                  template = template(nextRoute.params);
                }
              } else if (angular.isDefined(templateUrl = nextRoute.templateUrl)) {
                if (angular.isFunction(templateUrl)) {
                  templateUrl = templateUrl(nextRoute.params);
                }
                if (angular.isDefined(templateUrl)) {
                  nextRoute.loadedTemplateUrl = $sce.valueOf(templateUrl);
                  template = $templateRequest(templateUrl);
                }
              }
              if (angular.isDefined(template)) {
                locals['$template'] = template;
              }
              return $q.all(locals);
            }
          }).
          then(function(locals) {
            // after route change
            if (nextRoute == $route.current) {
              if (nextRoute) {
                nextRoute.locals = locals;
                angular.copy(nextRoute.params, $routeParams);
              }
              $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);
            }
          }, function(error) {
            if (nextRoute == $route.current) {
              $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);
            }
          });
      }
    }


    /**
     * @returns {Object} the current active route, by matching it against the URL
     */
    function parseRoute() {
      // Match a route
      var params, match;
      angular.forEach(routes, function(route, path) {
        if (!match && (params = switchRouteMatcher($location.path(), route))) {
          match = inherit(route, {
            params: angular.extend({}, $location.search(), params),
            pathParams: params});
          match.$$route = route;
        }
      });
      // No route matched; fallback to "otherwise" route
      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});
    }

    /**
     * @returns {string} interpolation of the redirect path with the parameters
     */
    function interpolate(string, params) {
      var result = [];
      angular.forEach((string || '').split(':'), function(segment, i) {
        if (i === 0) {
          result.push(segment);
        } else {
          var segmentMatch = segment.match(/(\w+)(?:[?*])?(.*)/);
          var key = segmentMatch[1];
          result.push(params[key]);
          result.push(segmentMatch[2] || '');
          delete params[key];
        }
      });
      return result.join('');
    }
  }];
}

ngRouteModule.provider('$routeParams', $RouteParamsProvider);


/**
 * @ngdoc service
 * @name $routeParams
 * @requires $route
 *
 * @description
 * The `$routeParams` service allows you to retrieve the current set of route parameters.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * The route parameters are a combination of {@link ng.$location `$location`}'s
 * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.
 * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.
 *
 * In case of parameter name collision, `path` params take precedence over `search` params.
 *
 * The service guarantees that the identity of the `$routeParams` object will remain unchanged
 * (but its properties will likely change) even when a route change occurs.
 *
 * Note that the `$routeParams` are only updated *after* a route change completes successfully.
 * This means that you cannot rely on `$routeParams` being correct in route resolve functions.
 * Instead you can use `$route.current.params` to access the new route's parameters.
 *
 * @example
 * ```js
 *  // Given:
 *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby
 *  // Route: /Chapter/:chapterId/Section/:sectionId
 *  //
 *  // Then
 *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}
 * ```
 */
function $RouteParamsProvider() {
  this.$get = function() { return {}; };
}

ngRouteModule.directive('ngView', ngViewFactory);
ngRouteModule.directive('ngView', ngViewFillContentFactory);


/**
 * @ngdoc directive
 * @name ngView
 * @restrict ECA
 *
 * @description
 * # Overview
 * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by
 * including the rendered template of the current route into the main layout (`index.html`) file.
 * Every time the current route changes, the included view changes with it according to the
 * configuration of the `$route` service.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 * @param {string=} onload Expression to evaluate whenever the view updates.
 *
 * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the view is updated.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated
 *                    as an expression yields a truthy value.
 * @example
    <example name="ngView-directive" module="ngViewExample"
             deps="angular-route.js;angular-animate.js"
             animations="true" fixBase="true">
      <file name="index.html">
        <div ng-controller="MainCtrl as main">
          Choose:
          <a href="Book/Moby">Moby</a> |
          <a href="Book/Moby/ch/1">Moby: Ch1</a> |
          <a href="Book/Gatsby">Gatsby</a> |
          <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
          <a href="Book/Scarlet">Scarlet Letter</a><br/>

          <div class="view-animate-container">
            <div ng-view class="view-animate"></div>
          </div>
          <hr />

          <pre>$location.path() = {{main.$location.path()}}</pre>
          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>
          <pre>$route.current.params = {{main.$route.current.params}}</pre>
          <pre>$routeParams = {{main.$routeParams}}</pre>
        </div>
      </file>

      <file name="book.html">
        <div>
          controller: {{book.name}}<br />
          Book Id: {{book.params.bookId}}<br />
        </div>
      </file>

      <file name="chapter.html">
        <div>
          controller: {{chapter.name}}<br />
          Book Id: {{chapter.params.bookId}}<br />
          Chapter Id: {{chapter.params.chapterId}}
        </div>
      </file>

      <file name="animations.css">
        .view-animate-container {
          position:relative;
          height:100px!important;
          background:white;
          border:1px solid black;
          height:40px;
          overflow:hidden;
        }

        .view-animate {
          padding:10px;
        }

        .view-animate.ng-enter, .view-animate.ng-leave {
          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;

          display:block;
          width:100%;
          border-left:1px solid black;

          position:absolute;
          top:0;
          left:0;
          right:0;
          bottom:0;
          padding:10px;
        }

        .view-animate.ng-enter {
          left:100%;
        }
        .view-animate.ng-enter.ng-enter-active {
          left:0;
        }
        .view-animate.ng-leave.ng-leave-active {
          left:-100%;
        }
      </file>

      <file name="script.js">
        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])
          .config(['$routeProvider', '$locationProvider',
            function($routeProvider, $locationProvider) {
              $routeProvider
                .when('/Book/:bookId', {
                  templateUrl: 'book.html',
                  controller: 'BookCtrl',
                  controllerAs: 'book'
                })
                .when('/Book/:bookId/ch/:chapterId', {
                  templateUrl: 'chapter.html',
                  controller: 'ChapterCtrl',
                  controllerAs: 'chapter'
                });

              $locationProvider.html5Mode(true);
          }])
          .controller('MainCtrl', ['$route', '$routeParams', '$location',
            function($route, $routeParams, $location) {
              this.$route = $route;
              this.$location = $location;
              this.$routeParams = $routeParams;
          }])
          .controller('BookCtrl', ['$routeParams', function($routeParams) {
            this.name = "BookCtrl";
            this.params = $routeParams;
          }])
          .controller('ChapterCtrl', ['$routeParams', function($routeParams) {
            this.name = "ChapterCtrl";
            this.params = $routeParams;
          }]);

      </file>

      <file name="protractor.js" type="protractor">
        it('should load and compile correct template', function() {
          element(by.linkText('Moby: Ch1')).click();
          var content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller\: ChapterCtrl/);
          expect(content).toMatch(/Book Id\: Moby/);
          expect(content).toMatch(/Chapter Id\: 1/);

          element(by.partialLinkText('Scarlet')).click();

          content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller\: BookCtrl/);
          expect(content).toMatch(/Book Id\: Scarlet/);
        });
      </file>
    </example>
 */


/**
 * @ngdoc event
 * @name ngView#$viewContentLoaded
 * @eventType emit on the current ngView scope
 * @description
 * Emitted every time the ngView content is reloaded.
 */
ngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];
function ngViewFactory($route, $anchorScroll, $animate) {
  return {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    link: function(scope, $element, attr, ctrl, $transclude) {
        var currentScope,
            currentElement,
            previousLeaveAnimation,
            autoScrollExp = attr.autoscroll,
            onloadExp = attr.onload || '';

        scope.$on('$routeChangeSuccess', update);
        update();

        function cleanupLastView() {
          if (previousLeaveAnimation) {
            $animate.cancel(previousLeaveAnimation);
            previousLeaveAnimation = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            previousLeaveAnimation = $animate.leave(currentElement);
            previousLeaveAnimation.then(function() {
              previousLeaveAnimation = null;
            });
            currentElement = null;
          }
        }

        function update() {
          var locals = $route.current && $route.current.locals,
              template = locals && locals.$template;

          if (angular.isDefined(template)) {
            var newScope = scope.$new();
            var current = $route.current;

            // Note: This will also link all children of ng-view that were contained in the original
            // html. If that content contains controllers, ... they could pollute/change the scope.
            // However, using ng-view on an element with additional content does not make sense...
            // Note: We can't remove them in the cloneAttchFn of $transclude as that
            // function is called before linking the content, which would apply child
            // directives to non existing elements.
            var clone = $transclude(newScope, function(clone) {
              $animate.enter(clone, null, currentElement || $element).then(function onNgViewEnter() {
                if (angular.isDefined(autoScrollExp)
                  && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                  $anchorScroll();
                }
              });
              cleanupLastView();
            });

            currentElement = clone;
            currentScope = current.scope = newScope;
            currentScope.$emit('$viewContentLoaded');
            currentScope.$eval(onloadExp);
          } else {
            cleanupLastView();
          }
        }
    }
  };
}

// This directive is called during the $transclude call of the first `ngView` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngView
// is called.
ngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];
function ngViewFillContentFactory($compile, $controller, $route) {
  return {
    restrict: 'ECA',
    priority: -400,
    link: function(scope, $element) {
      var current = $route.current,
          locals = current.locals;

      $element.html(locals.$template);

      var link = $compile($element.contents());

      if (current.controller) {
        locals.$scope = scope;
        var controller = $controller(current.controller, locals);
        if (current.controllerAs) {
          scope[current.controllerAs] = controller;
        }
        $element.data('$ngControllerController', controller);
        $element.children().data('$ngControllerController', controller);
      }

      link(scope);
    }
  };
}


})(window, window.angular);

/**
 * @license AngularJS v1.4.3
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/* jshint ignore:start */
var noop        = angular.noop;
var extend      = angular.extend;
var jqLite      = angular.element;
var forEach     = angular.forEach;
var isArray     = angular.isArray;
var isString    = angular.isString;
var isObject    = angular.isObject;
var isUndefined = angular.isUndefined;
var isDefined   = angular.isDefined;
var isFunction  = angular.isFunction;
var isElement   = angular.isElement;

var ELEMENT_NODE = 1;
var COMMENT_NODE = 8;

var NG_ANIMATE_CLASSNAME = 'ng-animate';
var NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';

var isPromiseLike = function(p) {
  return p && p.then ? true : false;
}

function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function mergeClasses(a,b) {
  if (!a && !b) return '';
  if (!a) return b;
  if (!b) return a;
  if (isArray(a)) a = a.join(' ');
  if (isArray(b)) b = b.join(' ');
  return a + ' ' + b;
}

function packageStyles(options) {
  var styles = {};
  if (options && (options.to || options.from)) {
    styles.to = options.to;
    styles.from = options.from;
  }
  return styles;
}

function pendClasses(classes, fix, isPrefix) {
  var className = '';
  classes = isArray(classes)
      ? classes
      : classes && isString(classes) && classes.length
          ? classes.split(/\s+/)
          : [];
  forEach(classes, function(klass, i) {
    if (klass && klass.length > 0) {
      className += (i > 0) ? ' ' : '';
      className += isPrefix ? fix + klass
                            : klass + fix;
    }
  });
  return className;
}

function removeFromArray(arr, val) {
  var index = arr.indexOf(val);
  if (val >= 0) {
    arr.splice(index, 1);
  }
}

function stripCommentsFromElement(element) {
  if (element instanceof jqLite) {
    switch (element.length) {
      case 0:
        return [];
        break;

      case 1:
        // there is no point of stripping anything if the element
        // is the only element within the jqLite wrapper.
        // (it's important that we retain the element instance.)
        if (element[0].nodeType === ELEMENT_NODE) {
          return element;
        }
        break;

      default:
        return jqLite(extractElementNode(element));
        break;
    }
  }

  if (element.nodeType === ELEMENT_NODE) {
    return jqLite(element);
  }
}

function extractElementNode(element) {
  if (!element[0]) return element;
  for (var i = 0; i < element.length; i++) {
    var elm = element[i];
    if (elm.nodeType == ELEMENT_NODE) {
      return elm;
    }
  }
}

function $$addClass($$jqLite, element, className) {
  forEach(element, function(elm) {
    $$jqLite.addClass(elm, className);
  });
}

function $$removeClass($$jqLite, element, className) {
  forEach(element, function(elm) {
    $$jqLite.removeClass(elm, className);
  });
}

function applyAnimationClassesFactory($$jqLite) {
  return function(element, options) {
    if (options.addClass) {
      $$addClass($$jqLite, element, options.addClass);
      options.addClass = null;
    }
    if (options.removeClass) {
      $$removeClass($$jqLite, element, options.removeClass);
      options.removeClass = null;
    }
  }
}

function prepareAnimationOptions(options) {
  options = options || {};
  if (!options.$$prepared) {
    var domOperation = options.domOperation || noop;
    options.domOperation = function() {
      options.$$domOperationFired = true;
      domOperation();
      domOperation = noop;
    };
    options.$$prepared = true;
  }
  return options;
}

function applyAnimationStyles(element, options) {
  applyAnimationFromStyles(element, options);
  applyAnimationToStyles(element, options);
}

function applyAnimationFromStyles(element, options) {
  if (options.from) {
    element.css(options.from);
    options.from = null;
  }
}

function applyAnimationToStyles(element, options) {
  if (options.to) {
    element.css(options.to);
    options.to = null;
  }
}

function mergeAnimationOptions(element, target, newOptions) {
  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');
  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');
  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);

  extend(target, newOptions);

  if (classes.addClass) {
    target.addClass = classes.addClass;
  } else {
    target.addClass = null;
  }

  if (classes.removeClass) {
    target.removeClass = classes.removeClass;
  } else {
    target.removeClass = null;
  }

  return target;
}

function resolveElementClasses(existing, toAdd, toRemove) {
  var ADD_CLASS = 1;
  var REMOVE_CLASS = -1;

  var flags = {};
  existing = splitClassesToLookup(existing);

  toAdd = splitClassesToLookup(toAdd);
  forEach(toAdd, function(value, key) {
    flags[key] = ADD_CLASS;
  });

  toRemove = splitClassesToLookup(toRemove);
  forEach(toRemove, function(value, key) {
    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
  });

  var classes = {
    addClass: '',
    removeClass: ''
  };

  forEach(flags, function(val, klass) {
    var prop, allow;
    if (val === ADD_CLASS) {
      prop = 'addClass';
      allow = !existing[klass];
    } else if (val === REMOVE_CLASS) {
      prop = 'removeClass';
      allow = existing[klass];
    }
    if (allow) {
      if (classes[prop].length) {
        classes[prop] += ' ';
      }
      classes[prop] += klass;
    }
  });

  function splitClassesToLookup(classes) {
    if (isString(classes)) {
      classes = classes.split(' ');
    }

    var obj = {};
    forEach(classes, function(klass) {
      // sometimes the split leaves empty string values
      // incase extra spaces were applied to the options
      if (klass.length) {
        obj[klass] = true;
      }
    });
    return obj;
  }

  return classes;
}

function getDomNode(element) {
  return (element instanceof angular.element) ? element[0] : element;
}

var $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {
  var tickQueue = [];
  var cancelFn;

  function scheduler(tasks) {
    // we make a copy since RAFScheduler mutates the state
    // of the passed in array variable and this would be difficult
    // to track down on the outside code
    tickQueue.push([].concat(tasks));
    nextTick();
  }

  /* waitUntilQuiet does two things:
   * 1. It will run the FINAL `fn` value only when an uncancelled RAF has passed through
   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.
   *
   * The motivation here is that animation code can request more time from the scheduler
   * before the next wave runs. This allows for certain DOM properties such as classes to
   * be resolved in time for the next animation to run.
   */
  scheduler.waitUntilQuiet = function(fn) {
    if (cancelFn) cancelFn();

    cancelFn = $$rAF(function() {
      cancelFn = null;
      fn();
      nextTick();
    });
  };

  return scheduler;

  function nextTick() {
    if (!tickQueue.length) return;

    var updatedQueue = [];
    for (var i = 0; i < tickQueue.length; i++) {
      var innerQueue = tickQueue[i];
      runNextTask(innerQueue);
      if (innerQueue.length) {
        updatedQueue.push(innerQueue);
      }
    }
    tickQueue = updatedQueue;

    if (!cancelFn) {
      $$rAF(function() {
        if (!cancelFn) nextTick();
      });
    }
  }

  function runNextTask(tasks) {
    var nextTask = tasks.shift();
    nextTask();
  }
}];

var $$AnimateChildrenDirective = [function() {
  return function(scope, element, attrs) {
    var val = attrs.ngAnimateChildren;
    if (angular.isString(val) && val.length === 0) { //empty attribute
      element.data(NG_ANIMATE_CHILDREN_DATA, true);
    } else {
      attrs.$observe('ngAnimateChildren', function(value) {
        value = value === 'on' || value === 'true';
        element.data(NG_ANIMATE_CHILDREN_DATA, value);
      });
    }
  };
}];

/**
 * @ngdoc service
 * @name $animateCss
 * @kind object
 *
 * @description
 * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes
 * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT
 * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or
 * directives to create more complex animations that can be purely driven using CSS code.
 *
 * Note that only browsers that support CSS transitions and/or keyframe animations are capable of
 * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).
 *
 * ## Usage
 * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that
 * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,
 * any automatic control over cancelling animations and/or preventing animations from being run on
 * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to
 * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger
 * the CSS animation.
 *
 * The example below shows how we can create a folding animation on an element using `ng-if`:
 *
 * ```html
 * <!-- notice the `fold-animation` CSS class -->
 * <div ng-if="onOff" class="fold-animation">
 *   This element will go BOOM
 * </div>
 * <button ng-click="onOff=true">Fold In</button>
 * ```
 *
 * Now we create the **JavaScript animation** that will trigger the CSS transition:
 *
 * ```js
 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var height = element[0].offsetHeight;
 *       return $animateCss(element, {
 *         from: { height:'0px' },
 *         to: { height:height + 'px' },
 *         duration: 1 // one second
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * ## More Advanced Uses
 *
 * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks
 * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.
 *
 * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,
 * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with
 * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order
 * to provide a working animation that will run in CSS.
 *
 * The example below showcases a more advanced version of the `.fold-animation` from the example above:
 *
 * ```js
 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var height = element[0].offsetHeight;
 *       return $animateCss(element, {
 *         addClass: 'red large-text pulse-twice',
 *         easing: 'ease-out',
 *         from: { height:'0px' },
 *         to: { height:height + 'px' },
 *         duration: 1 // one second
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * Since we're adding/removing CSS classes then the CSS transition will also pick those up:
 *
 * ```css
 * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,
 * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/
 * .red { background:red; }
 * .large-text { font-size:20px; }
 *
 * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/
 * .pulse-twice {
 *   animation: 0.5s pulse linear 2;
 *   -webkit-animation: 0.5s pulse linear 2;
 * }
 *
 * @keyframes pulse {
 *   from { transform: scale(0.5); }
 *   to { transform: scale(1.5); }
 * }
 *
 * @-webkit-keyframes pulse {
 *   from { -webkit-transform: scale(0.5); }
 *   to { -webkit-transform: scale(1.5); }
 * }
 * ```
 *
 * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.
 *
 * ## How the Options are handled
 *
 * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation
 * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline
 * styles using the `from` and `to` properties.
 *
 * ```js
 * var animator = $animateCss(element, {
 *   from: { background:'red' },
 *   to: { background:'blue' }
 * });
 * animator.start();
 * ```
 *
 * ```css
 * .rotating-animation {
 *   animation:0.5s rotate linear;
 *   -webkit-animation:0.5s rotate linear;
 * }
 *
 * @keyframes rotate {
 *   from { transform: rotate(0deg); }
 *   to { transform: rotate(360deg); }
 * }
 *
 * @-webkit-keyframes rotate {
 *   from { -webkit-transform: rotate(0deg); }
 *   to { -webkit-transform: rotate(360deg); }
 * }
 * ```
 *
 * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is
 * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition
 * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition
 * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied
 * and spread across the transition and keyframe animation.
 *
 * ## What is returned
 *
 * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually
 * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are
 * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:
 *
 * ```js
 * var animator = $animateCss(element, { ... });
 * ```
 *
 * Now what do the contents of our `animator` variable look like:
 *
 * ```js
 * {
 *   // starts the animation
 *   start: Function,
 *
 *   // ends (aborts) the animation
 *   end: Function
 * }
 * ```
 *
 * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.
 * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and stlyes may have been
 * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties
 * and that changing them will not reconfigure the parameters of the animation.
 *
 * ### runner.done() vs runner.then()
 * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the
 * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.
 * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`
 * unless you really need a digest to kick off afterwards.
 *
 * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss
 * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).
 * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.
 *
 * @param {DOMElement} element the element that will be animated
 * @param {object} options the animation-related options that will be applied during the animation
 *
 * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied
 * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)
 * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).
 * * `transition` - The raw CSS transition style that will be used (e.g. `1s linear all`).
 * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).
 * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.
 * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.
 * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.
 * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.
 * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`
 * is provided then the animation will be skipped entirely.
 * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is
 * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value
 * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same
 * CSS delay value.
 * * `stagger` - A numeric time value representing the delay between successively animated elements
 * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})
 * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a
 * `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)
 * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occuring on the classes being added and removed.)
 *
 * @return {object} an object with start and end methods and details about the animation.
 *
 * * `start` - The method to start the animation. This will return a `Promise` when called.
 * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.
 */

// Detect proper transitionend/animationend event names.
var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

// If unprefixed events are not supported but webkit-prefixed are, use the latter.
// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
// Register both events in case `window.onanimationend` is not supported because of that,
// do the same for `transitionend` as Safari is likely to exhibit similar behavior.
// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
// therefore there is no reason to test anymore for other vendor prefixes:
// http://caniuse.com/#search=transition
if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
  CSS_PREFIX = '-webkit-';
  TRANSITION_PROP = 'WebkitTransition';
  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
} else {
  TRANSITION_PROP = 'transition';
  TRANSITIONEND_EVENT = 'transitionend';
}

if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
  CSS_PREFIX = '-webkit-';
  ANIMATION_PROP = 'WebkitAnimation';
  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
} else {
  ANIMATION_PROP = 'animation';
  ANIMATIONEND_EVENT = 'animationend';
}

var DURATION_KEY = 'Duration';
var PROPERTY_KEY = 'Property';
var DELAY_KEY = 'Delay';
var TIMING_KEY = 'TimingFunction';
var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
var ANIMATION_PLAYSTATE_KEY = 'PlayState';
var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
var CLOSING_TIME_BUFFER = 1.5;
var ONE_SECOND = 1000;
var BASE_TEN = 10;

var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;

var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;

var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;

var DETECT_CSS_PROPERTIES = {
  transitionDuration:      TRANSITION_DURATION_PROP,
  transitionDelay:         TRANSITION_DELAY_PROP,
  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,
  animationDuration:       ANIMATION_DURATION_PROP,
  animationDelay:          ANIMATION_DELAY_PROP,
  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
};

var DETECT_STAGGER_CSS_PROPERTIES = {
  transitionDuration:      TRANSITION_DURATION_PROP,
  transitionDelay:         TRANSITION_DELAY_PROP,
  animationDuration:       ANIMATION_DURATION_PROP,
  animationDelay:          ANIMATION_DELAY_PROP
};

function computeCssStyles($window, element, properties) {
  var styles = Object.create(null);
  var detectedStyles = $window.getComputedStyle(element) || {};
  forEach(properties, function(formalStyleName, actualStyleName) {
    var val = detectedStyles[formalStyleName];
    if (val) {
      var c = val.charAt(0);

      // only numerical-based values have a negative sign or digit as the first value
      if (c === '-' || c === '+' || c >= 0) {
        val = parseMaxTime(val);
      }

      // by setting this to null in the event that the delay is not set or is set directly as 0
      // then we can still allow for zegative values to be used later on and not mistake this
      // value for being greater than any other negative value.
      if (val === 0) {
        val = null;
      }
      styles[actualStyleName] = val;
    }
  });

  return styles;
}

function parseMaxTime(str) {
  var maxValue = 0;
  var values = str.split(/\s*,\s*/);
  forEach(values, function(value) {
    // it's always safe to consider only second values and omit `ms` values since
    // getComputedStyle will always handle the conversion for us
    if (value.charAt(value.length - 1) == 's') {
      value = value.substring(0, value.length - 1);
    }
    value = parseFloat(value) || 0;
    maxValue = maxValue ? Math.max(value, maxValue) : value;
  });
  return maxValue;
}

function truthyTimingValue(val) {
  return val === 0 || val != null;
}

function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
  var style = TRANSITION_PROP;
  var value = duration + 's';
  if (applyOnlyDuration) {
    style += DURATION_KEY;
  } else {
    value += ' linear all';
  }
  return [style, value];
}

function getCssKeyframeDurationStyle(duration) {
  return [ANIMATION_DURATION_PROP, duration + 's'];
}

function getCssDelayStyle(delay, isKeyframeAnimation) {
  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
  return [prop, delay + 's'];
}

function blockTransitions(node, duration) {
  // we use a negative delay value since it performs blocking
  // yet it doesn't kill any existing transitions running on the
  // same element which makes this safe for class-based animations
  var value = duration ? '-' + duration + 's' : '';
  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);
  return [TRANSITION_DELAY_PROP, value];
}

function blockKeyframeAnimations(node, applyBlock) {
  var value = applyBlock ? 'paused' : '';
  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
  applyInlineStyle(node, [key, value]);
  return [key, value];
}

function applyInlineStyle(node, styleTuple) {
  var prop = styleTuple[0];
  var value = styleTuple[1];
  node.style[prop] = value;
}

function createLocalCacheLookup() {
  var cache = Object.create(null);
  return {
    flush: function() {
      cache = Object.create(null);
    },

    count: function(key) {
      var entry = cache[key];
      return entry ? entry.total : 0;
    },

    get: function(key) {
      var entry = cache[key];
      return entry && entry.value;
    },

    put: function(key, value) {
      if (!cache[key]) {
        cache[key] = { total: 1, value: value };
      } else {
        cache[key].total++;
      }
    }
  };
}

var $AnimateCssProvider = ['$animateProvider', function($animateProvider) {
  var gcsLookup = createLocalCacheLookup();
  var gcsStaggerLookup = createLocalCacheLookup();

  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',
               '$document', '$sniffer', '$$rAFScheduler',
       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,
                $document,   $sniffer,   $$rAFScheduler) {

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    var parentCounter = 0;
    function gcsHashFn(node, extraClasses) {
      var KEY = "$$ngAnimateParentKey";
      var parentNode = node.parentNode;
      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;
    }

    function computeCachedCssStyles(node, className, cacheKey, properties) {
      var timings = gcsLookup.get(cacheKey);

      if (!timings) {
        timings = computeCssStyles($window, node, properties);
        if (timings.animationIterationCount === 'infinite') {
          timings.animationIterationCount = 1;
        }
      }

      // we keep putting this in multiple times even though the value and the cacheKey are the same
      // because we're keeping an interal tally of how many duplicate animations are detected.
      gcsLookup.put(cacheKey, timings);
      return timings;
    }

    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
      var stagger;

      // if we have one or more existing matches of matching elements
      // containing the same parent + CSS styles (which is how cacheKey works)
      // then staggering is possible
      if (gcsLookup.count(cacheKey) > 0) {
        stagger = gcsStaggerLookup.get(cacheKey);

        if (!stagger) {
          var staggerClassName = pendClasses(className, '-stagger');

          $$jqLite.addClass(node, staggerClassName);

          stagger = computeCssStyles($window, node, properties);

          // force the conversion of a null value to zero incase not set
          stagger.animationDuration = Math.max(stagger.animationDuration, 0);
          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);

          $$jqLite.removeClass(node, staggerClassName);

          gcsStaggerLookup.put(cacheKey, stagger);
        }
      }

      return stagger || {};
    }

    var bod = getDomNode($document).body;
    var rafWaitQueue = [];
    function waitUntilQuiet(callback) {
      rafWaitQueue.push(callback);
      $$rAFScheduler.waitUntilQuiet(function() {
        gcsLookup.flush();
        gcsStaggerLookup.flush();

        //the line below will force the browser to perform a repaint so
        //that all the animated elements within the animation frame will
        //be properly updated and drawn on screen. This is required to
        //ensure that the preparation animation is properly flushed so that
        //the active state picks up from there. DO NOT REMOVE THIS LINE.
        //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
        //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
        //WILL TAKE YEARS AWAY FROM YOUR LIFE.
        var width = bod.offsetWidth + 1;

        // we use a for loop to ensure that if the queue is changed
        // during this looping then it will consider new requests
        for (var i = 0; i < rafWaitQueue.length; i++) {
          rafWaitQueue[i](width);
        }
        rafWaitQueue.length = 0;
      });
    }

    return init;

    function computeTimings(node, className, cacheKey) {
      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
      var aD = timings.animationDelay;
      var tD = timings.transitionDelay;
      timings.maxDelay = aD && tD
          ? Math.max(aD, tD)
          : (aD || tD);
      timings.maxDuration = Math.max(
          timings.animationDuration * timings.animationIterationCount,
          timings.transitionDuration);

      return timings;
    }

    function init(element, options) {
      var node = getDomNode(element);
      if (!node || !node.parentNode) {
        return closeAndReturnNoopAnimator();
      }

      options = prepareAnimationOptions(options);

      var temporaryStyles = [];
      var classes = element.attr('class');
      var styles = packageStyles(options);
      var animationClosed;
      var animationPaused;
      var animationCompleted;
      var runner;
      var runnerHost;
      var maxDelay;
      var maxDelayTime;
      var maxDuration;
      var maxDurationTime;

      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {
        return closeAndReturnNoopAnimator();
      }

      var method = options.event && isArray(options.event)
            ? options.event.join(' ')
            : options.event;

      var isStructural = method && options.structural;
      var structuralClassName = '';
      var addRemoveClassName = '';

      if (isStructural) {
        structuralClassName = pendClasses(method, 'ng-', true);
      } else if (method) {
        structuralClassName = method;
      }

      if (options.addClass) {
        addRemoveClassName += pendClasses(options.addClass, '-add');
      }

      if (options.removeClass) {
        if (addRemoveClassName.length) {
          addRemoveClassName += ' ';
        }
        addRemoveClassName += pendClasses(options.removeClass, '-remove');
      }

      // there may be a situation where a structural animation is combined together
      // with CSS classes that need to resolve before the animation is computed.
      // However this means that there is no explicit CSS code to block the animation
      // from happening (by setting 0s none in the class name). If this is the case
      // we need to apply the classes before the first rAF so we know to continue if
      // there actually is a detected transition or keyframe animation
      if (options.applyClassesEarly && addRemoveClassName.length) {
        applyAnimationClasses(element, options);
        addRemoveClassName = '';
      }

      var setupClasses = [structuralClassName, addRemoveClassName].join(' ').trim();
      var fullClassName = classes + ' ' + setupClasses;
      var activeClasses = pendClasses(setupClasses, '-active');
      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;

      // there is no way we can trigger an animation if no styles and
      // no classes are being applied which would then trigger a transition,
      // unless there a is raw keyframe value that is applied to the element.
      if (!containsKeyframeAnimation
           && !hasToStyles
           && !setupClasses) {
        return closeAndReturnNoopAnimator();
      }

      var cacheKey, stagger;
      if (options.stagger > 0) {
        var staggerVal = parseFloat(options.stagger);
        stagger = {
          transitionDelay: staggerVal,
          animationDelay: staggerVal,
          transitionDuration: 0,
          animationDuration: 0
        };
      } else {
        cacheKey = gcsHashFn(node, fullClassName);
        stagger = computeCachedCssStaggerStyles(node, setupClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
      }

      $$jqLite.addClass(element, setupClasses);

      var applyOnlyDuration;

      if (options.transitionStyle) {
        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];
        applyInlineStyle(node, transitionStyle);
        temporaryStyles.push(transitionStyle);
      }

      if (options.duration >= 0) {
        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);

        // we set the duration so that it will be picked up by getComputedStyle later
        applyInlineStyle(node, durationStyle);
        temporaryStyles.push(durationStyle);
      }

      if (options.keyframeStyle) {
        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];
        applyInlineStyle(node, keyframeStyle);
        temporaryStyles.push(keyframeStyle);
      }

      var itemIndex = stagger
          ? options.staggerIndex >= 0
              ? options.staggerIndex
              : gcsLookup.count(cacheKey)
          : 0;

      var isFirst = itemIndex === 0;

      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY
      // without causing any combination of transitions to kick in. By adding a negative delay value
      // it forces the setup class' transition to end immediately. We later then remove the negative
      // transition delay to allow for the transition to naturally do it's thing. The beauty here is
      // that if there is no transition defined then nothing will happen and this will also allow
      // other transitions to be stacked on top of each other without any chopping them out.
      if (isFirst) {
        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
      }

      var timings = computeTimings(node, fullClassName, cacheKey);
      var relativeDelay = timings.maxDelay;
      maxDelay = Math.max(relativeDelay, 0);
      maxDuration = timings.maxDuration;

      var flags = {};
      flags.hasTransitions          = timings.transitionDuration > 0;
      flags.hasAnimations           = timings.animationDuration > 0;
      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';
      flags.applyTransitionDuration = hasToStyles && (
                                        (flags.hasTransitions && !flags.hasTransitionAll)
                                         || (flags.hasAnimations && !flags.hasTransitions));
      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;
      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;
      flags.recalculateTimingStyles = addRemoveClassName.length > 0;

      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;

        if (flags.applyTransitionDuration) {
          flags.hasTransitions = true;
          timings.transitionDuration = maxDuration;
          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
        }

        if (flags.applyAnimationDuration) {
          flags.hasAnimations = true;
          timings.animationDuration = maxDuration;
          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
        }
      }

      if (maxDuration === 0 && !flags.recalculateTimingStyles) {
        return closeAndReturnNoopAnimator();
      }

      // we need to recalculate the delay value since we used a pre-emptive negative
      // delay value and the delay value is required for the final event checking. This
      // property will ensure that this will happen after the RAF phase has passed.
      if (options.duration == null && timings.transitionDuration > 0) {
        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
      }

      maxDelayTime = maxDelay * ONE_SECOND;
      maxDurationTime = maxDuration * ONE_SECOND;
      if (!options.skipBlocking) {
        flags.blockTransition = timings.transitionDuration > 0;
        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&
                                       stagger.animationDelay > 0 &&
                                       stagger.animationDuration === 0;
      }

      applyAnimationFromStyles(element, options);
      if (!flags.blockTransition) {
        blockTransitions(node, false);
      }

      applyBlocking(maxDuration);

      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging
      return {
        $$willAnimate: true,
        end: endFn,
        start: function() {
          if (animationClosed) return;

          runnerHost = {
            end: endFn,
            cancel: cancelFn,
            resume: null, //this will be set during the start() phase
            pause: null
          };

          runner = new $$AnimateRunner(runnerHost);

          waitUntilQuiet(start);

          // we don't have access to pause/resume the animation
          // since it hasn't run yet. AnimateRunner will therefore
          // set noop functions for resume and pause and they will
          // later be overridden once the animation is triggered
          return runner;
        }
      };

      function endFn() {
        close();
      }

      function cancelFn() {
        close(true);
      }

      function close(rejected) { // jshint ignore:line
        // if the promise has been called already then we shouldn't close
        // the animation again
        if (animationClosed || (animationCompleted && animationPaused)) return;
        animationClosed = true;
        animationPaused = false;

        $$jqLite.removeClass(element, setupClasses);
        $$jqLite.removeClass(element, activeClasses);

        blockKeyframeAnimations(node, false);
        blockTransitions(node, false);

        forEach(temporaryStyles, function(entry) {
          // There is only one way to remove inline style properties entirely from elements.
          // By using `removeProperty` this works, but we need to convert camel-cased CSS
          // styles down to hyphenated values.
          node.style[entry[0]] = '';
        });

        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);

        // the reason why we have this option is to allow a synchronous closing callback
        // that is fired as SOON as the animation ends (when the CSS is removed) or if
        // the animation never takes off at all. A good example is a leave animation since
        // the element must be removed just after the animation is over or else the element
        // will appear on screen for one animation frame causing an overbearing flicker.
        if (options.onDone) {
          options.onDone();
        }

        // if the preparation function fails then the promise is not setup
        if (runner) {
          runner.complete(!rejected);
        }
      }

      function applyBlocking(duration) {
        if (flags.blockTransition) {
          blockTransitions(node, duration);
        }

        if (flags.blockKeyframeAnimation) {
          blockKeyframeAnimations(node, !!duration);
        }
      }

      function closeAndReturnNoopAnimator() {
        runner = new $$AnimateRunner({
          end: endFn,
          cancel: cancelFn
        });

        close();

        return {
          $$willAnimate: false,
          start: function() {
            return runner;
          },
          end: endFn
        };
      }

      function start() {
        if (animationClosed) return;
        if (!node.parentNode) {
          close();
          return;
        }

        var startTime, events = [];

        // even though we only pause keyframe animations here the pause flag
        // will still happen when transitions are used. Only the transition will
        // not be paused since that is not possible. If the animation ends when
        // paused then it will not complete until unpaused or cancelled.
        var playPause = function(playAnimation) {
          if (!animationCompleted) {
            animationPaused = !playAnimation;
            if (timings.animationDuration) {
              var value = blockKeyframeAnimations(node, animationPaused);
              animationPaused
                  ? temporaryStyles.push(value)
                  : removeFromArray(temporaryStyles, value);
            }
          } else if (animationPaused && playAnimation) {
            animationPaused = false;
            close();
          }
        };

        // checking the stagger duration prevents an accidently cascade of the CSS delay style
        // being inherited from the parent. If the transition duration is zero then we can safely
        // rely that the delay value is an intential stagger delay style.
        var maxStagger = itemIndex > 0
                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||
                            (timings.animationDuration && stagger.animationDuration === 0))
                         && Math.max(stagger.animationDelay, stagger.transitionDelay);
        if (maxStagger) {
          $timeout(triggerAnimationStart,
                   Math.floor(maxStagger * itemIndex * ONE_SECOND),
                   false);
        } else {
          triggerAnimationStart();
        }

        // this will decorate the existing promise runner with pause/resume methods
        runnerHost.resume = function() {
          playPause(true);
        };

        runnerHost.pause = function() {
          playPause(false);
        };

        function triggerAnimationStart() {
          // just incase a stagger animation kicks in when the animation
          // itself was cancelled entirely
          if (animationClosed) return;

          applyBlocking(false);

          forEach(temporaryStyles, function(entry) {
            var key = entry[0];
            var value = entry[1];
            node.style[key] = value;
          });

          applyAnimationClasses(element, options);
          $$jqLite.addClass(element, activeClasses);

          if (flags.recalculateTimingStyles) {
            fullClassName = node.className + ' ' + setupClasses;
            cacheKey = gcsHashFn(node, fullClassName);

            timings = computeTimings(node, fullClassName, cacheKey);
            relativeDelay = timings.maxDelay;
            maxDelay = Math.max(relativeDelay, 0);
            maxDuration = timings.maxDuration;

            if (maxDuration === 0) {
              close();
              return;
            }

            flags.hasTransitions = timings.transitionDuration > 0;
            flags.hasAnimations = timings.animationDuration > 0;
          }

          if (flags.applyTransitionDelay || flags.applyAnimationDelay) {
            relativeDelay = typeof options.delay !== "boolean" && truthyTimingValue(options.delay)
                  ? parseFloat(options.delay)
                  : relativeDelay;

            maxDelay = Math.max(relativeDelay, 0);

            var delayStyle;
            if (flags.applyTransitionDelay) {
              timings.transitionDelay = relativeDelay;
              delayStyle = getCssDelayStyle(relativeDelay);
              temporaryStyles.push(delayStyle);
              node.style[delayStyle[0]] = delayStyle[1];
            }

            if (flags.applyAnimationDelay) {
              timings.animationDelay = relativeDelay;
              delayStyle = getCssDelayStyle(relativeDelay, true);
              temporaryStyles.push(delayStyle);
              node.style[delayStyle[0]] = delayStyle[1];
            }
          }

          maxDelayTime = maxDelay * ONE_SECOND;
          maxDurationTime = maxDuration * ONE_SECOND;

          if (options.easing) {
            var easeProp, easeVal = options.easing;
            if (flags.hasTransitions) {
              easeProp = TRANSITION_PROP + TIMING_KEY;
              temporaryStyles.push([easeProp, easeVal]);
              node.style[easeProp] = easeVal;
            }
            if (flags.hasAnimations) {
              easeProp = ANIMATION_PROP + TIMING_KEY;
              temporaryStyles.push([easeProp, easeVal]);
              node.style[easeProp] = easeVal;
            }
          }

          if (timings.transitionDuration) {
            events.push(TRANSITIONEND_EVENT);
          }

          if (timings.animationDuration) {
            events.push(ANIMATIONEND_EVENT);
          }

          startTime = Date.now();
          element.on(events.join(' '), onAnimationProgress);
          $timeout(onAnimationExpired, maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime);

          applyAnimationToStyles(element, options);
        }

        function onAnimationExpired() {
          // although an expired animation is a failed animation, getting to
          // this outcome is very easy if the CSS code screws up. Therefore we
          // should still continue normally as if the animation completed correctly.
          close();
        }

        function onAnimationProgress(event) {
          event.stopPropagation();
          var ev = event.originalEvent || event;
          var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();

          /* Firefox (or possibly just Gecko) likes to not round values up
           * when a ms measurement is used for the animation */
          var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

          /* $manualTimeStamp is a mocked timeStamp value which is set
           * within browserTrigger(). This is only here so that tests can
           * mock animations properly. Real events fallback to event.timeStamp,
           * or, if they don't, then a timeStamp is automatically created for them.
           * We're checking to see if the timeStamp surpasses the expected delay,
           * but we're using elapsedTime instead of the timeStamp on the 2nd
           * pre-condition since animations sometimes close off early */
          if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
            // we set this flag to ensure that if the transition is paused then, when resumed,
            // the animation will automatically close itself since transitions cannot be paused.
            animationCompleted = true;
            close();
          }
        }
      }
    }
  }];
}];

var $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {
  $$animationProvider.drivers.push('$$animateCssDriver');

  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';
  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';

  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';
  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';

  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$document', '$sniffer',
       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $document,   $sniffer) {

    // only browsers that support these properties can render animations
    if (!$sniffer.animations && !$sniffer.transitions) return noop;

    var bodyNode = getDomNode($document).body;
    var rootNode = getDomNode($rootElement);

    var rootBodyElement = jqLite(bodyNode.parentNode === rootNode ? bodyNode : rootNode);

    return function initDriverFn(animationDetails) {
      return animationDetails.from && animationDetails.to
          ? prepareFromToAnchorAnimation(animationDetails.from,
                                         animationDetails.to,
                                         animationDetails.classes,
                                         animationDetails.anchors)
          : prepareRegularAnimation(animationDetails);
    };

    function filterCssClasses(classes) {
      //remove all the `ng-` stuff
      return classes.replace(/\bng-\S+\b/g, '');
    }

    function getUniqueValues(a, b) {
      if (isString(a)) a = a.split(' ');
      if (isString(b)) b = b.split(' ');
      return a.filter(function(val) {
        return b.indexOf(val) === -1;
      }).join(' ');
    }

    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
      var startingClasses = filterCssClasses(getClassVal(clone));

      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);

      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);

      rootBodyElement.append(clone);

      var animatorIn, animatorOut = prepareOutAnimation();

      // the user may not end up using the `out` animation and
      // only making use of the `in` animation or vice-versa.
      // In either case we should allow this and not assume the
      // animation is over unless both animations are not used.
      if (!animatorOut) {
        animatorIn = prepareInAnimation();
        if (!animatorIn) {
          return end();
        }
      }

      var startingAnimator = animatorOut || animatorIn;

      return {
        start: function() {
          var runner;

          var currentAnimation = startingAnimator.start();
          currentAnimation.done(function() {
            currentAnimation = null;
            if (!animatorIn) {
              animatorIn = prepareInAnimation();
              if (animatorIn) {
                currentAnimation = animatorIn.start();
                currentAnimation.done(function() {
                  currentAnimation = null;
                  end();
                  runner.complete();
                });
                return currentAnimation;
              }
            }
            // in the event that there is no `in` animation
            end();
            runner.complete();
          });

          runner = new $$AnimateRunner({
            end: endFn,
            cancel: endFn
          });

          return runner;

          function endFn() {
            if (currentAnimation) {
              currentAnimation.end();
            }
          }
        }
      };

      function calculateAnchorStyles(anchor) {
        var styles = {};

        var coords = getDomNode(anchor).getBoundingClientRect();

        // we iterate directly since safari messes up and doesn't return
        // all the keys for the coods object when iterated
        forEach(['width','height','top','left'], function(key) {
          var value = coords[key];
          switch (key) {
            case 'top':
              value += bodyNode.scrollTop;
              break;
            case 'left':
              value += bodyNode.scrollLeft;
              break;
          }
          styles[key] = Math.floor(value) + 'px';
        });
        return styles;
      }

      function prepareOutAnimation() {
        var animator = $animateCss(clone, {
          addClass: NG_OUT_ANCHOR_CLASS_NAME,
          delay: true,
          from: calculateAnchorStyles(outAnchor)
        });

        // read the comment within `prepareRegularAnimation` to understand
        // why this check is necessary
        return animator.$$willAnimate ? animator : null;
      }

      function getClassVal(element) {
        return element.attr('class') || '';
      }

      function prepareInAnimation() {
        var endingClasses = filterCssClasses(getClassVal(inAnchor));
        var toAdd = getUniqueValues(endingClasses, startingClasses);
        var toRemove = getUniqueValues(startingClasses, endingClasses);

        var animator = $animateCss(clone, {
          to: calculateAnchorStyles(inAnchor),
          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,
          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,
          delay: true
        });

        // read the comment within `prepareRegularAnimation` to understand
        // why this check is necessary
        return animator.$$willAnimate ? animator : null;
      }

      function end() {
        clone.remove();
        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
      }
    }

    function prepareFromToAnchorAnimation(from, to, classes, anchors) {
      var fromAnimation = prepareRegularAnimation(from);
      var toAnimation = prepareRegularAnimation(to);

      var anchorAnimations = [];
      forEach(anchors, function(anchor) {
        var outElement = anchor['out'];
        var inElement = anchor['in'];
        var animator = prepareAnchoredAnimation(classes, outElement, inElement);
        if (animator) {
          anchorAnimations.push(animator);
        }
      });

      // no point in doing anything when there are no elements to animate
      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;

      return {
        start: function() {
          var animationRunners = [];

          if (fromAnimation) {
            animationRunners.push(fromAnimation.start());
          }

          if (toAnimation) {
            animationRunners.push(toAnimation.start());
          }

          forEach(anchorAnimations, function(animation) {
            animationRunners.push(animation.start());
          });

          var runner = new $$AnimateRunner({
            end: endFn,
            cancel: endFn // CSS-driven animations cannot be cancelled, only ended
          });

          $$AnimateRunner.all(animationRunners, function(status) {
            runner.complete(status);
          });

          return runner;

          function endFn() {
            forEach(animationRunners, function(runner) {
              runner.end();
            });
          }
        }
      };
    }

    function prepareRegularAnimation(animationDetails) {
      var element = animationDetails.element;
      var options = animationDetails.options || {};

      if (animationDetails.structural) {
        // structural animations ensure that the CSS classes are always applied
        // before the detection starts.
        options.structural = options.applyClassesEarly = true;

        // we special case the leave animation since we want to ensure that
        // the element is removed as soon as the animation is over. Otherwise
        // a flicker might appear or the element may not be removed at all
        options.event = animationDetails.event;
        if (options.event === 'leave') {
          options.onDone = options.domOperation;
        }
      } else {
        options.event = null;
      }

      var animator = $animateCss(element, options);

      // the driver lookup code inside of $$animation attempts to spawn a
      // driver one by one until a driver returns a.$$willAnimate animator object.
      // $animateCss will always return an object, however, it will pass in
      // a flag as a hint as to whether an animation was detected or not
      return animator.$$willAnimate ? animator : null;
    }
  }];
}];

// TODO(matsko): use caching here to speed things up for detection
// TODO(matsko): add documentation
//  by the time...

var $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {
  this.$get = ['$injector', '$$AnimateRunner', '$$rAFMutex', '$$jqLite',
       function($injector,   $$AnimateRunner,   $$rAFMutex,   $$jqLite) {

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
         // $animateJs(element, 'enter');
    return function(element, event, classes, options) {
      // the `classes` argument is optional and if it is not used
      // then the classes will be resolved from the element's className
      // property as well as options.addClass/options.removeClass.
      if (arguments.length === 3 && isObject(classes)) {
        options = classes;
        classes = null;
      }

      options = prepareAnimationOptions(options);
      if (!classes) {
        classes = element.attr('class') || '';
        if (options.addClass) {
          classes += ' ' + options.addClass;
        }
        if (options.removeClass) {
          classes += ' ' + options.removeClass;
        }
      }

      var classesToAdd = options.addClass;
      var classesToRemove = options.removeClass;

      // the lookupAnimations function returns a series of animation objects that are
      // matched up with one or more of the CSS classes. These animation objects are
      // defined via the module.animation factory function. If nothing is detected then
      // we don't return anything which then makes $animation query the next driver.
      var animations = lookupAnimations(classes);
      var before, after;
      if (animations.length) {
        var afterFn, beforeFn;
        if (event == 'leave') {
          beforeFn = 'leave';
          afterFn = 'afterLeave'; // TODO(matsko): get rid of this
        } else {
          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);
          afterFn = event;
        }

        if (event !== 'enter' && event !== 'move') {
          before = packageAnimations(element, event, options, animations, beforeFn);
        }
        after  = packageAnimations(element, event, options, animations, afterFn);
      }

      // no matching animations
      if (!before && !after) return;

      function applyOptions() {
        options.domOperation();
        applyAnimationClasses(element, options);
      }

      return {
        start: function() {
          var closeActiveAnimations;
          var chain = [];

          if (before) {
            chain.push(function(fn) {
              closeActiveAnimations = before(fn);
            });
          }

          if (chain.length) {
            chain.push(function(fn) {
              applyOptions();
              fn(true);
            });
          } else {
            applyOptions();
          }

          if (after) {
            chain.push(function(fn) {
              closeActiveAnimations = after(fn);
            });
          }

          var animationClosed = false;
          var runner = new $$AnimateRunner({
            end: function() {
              endAnimations();
            },
            cancel: function() {
              endAnimations(true);
            }
          });

          $$AnimateRunner.chain(chain, onComplete);
          return runner;

          function onComplete(success) {
            animationClosed = true;
            applyOptions();
            applyAnimationStyles(element, options);
            runner.complete(success);
          }

          function endAnimations(cancelled) {
            if (!animationClosed) {
              (closeActiveAnimations || noop)(cancelled);
              onComplete(cancelled);
            }
          }
        }
      };

      function executeAnimationFn(fn, element, event, options, onDone) {
        var args;
        switch (event) {
          case 'animate':
            args = [element, options.from, options.to, onDone];
            break;

          case 'setClass':
            args = [element, classesToAdd, classesToRemove, onDone];
            break;

          case 'addClass':
            args = [element, classesToAdd, onDone];
            break;

          case 'removeClass':
            args = [element, classesToRemove, onDone];
            break;

          default:
            args = [element, onDone];
            break;
        }

        args.push(options);

        var value = fn.apply(fn, args);
        if (value) {
          if (isFunction(value.start)) {
            value = value.start();
          }

          if (value instanceof $$AnimateRunner) {
            value.done(onDone);
          } else if (isFunction(value)) {
            // optional onEnd / onCancel callback
            return value;
          }
        }

        return noop;
      }

      function groupEventedAnimations(element, event, options, animations, fnName) {
        var operations = [];
        forEach(animations, function(ani) {
          var animation = ani[fnName];
          if (!animation) return;

          // note that all of these animations will run in parallel
          operations.push(function() {
            var runner;
            var endProgressCb;

            var resolved = false;
            var onAnimationComplete = function(rejected) {
              if (!resolved) {
                resolved = true;
                (endProgressCb || noop)(rejected);
                runner.complete(!rejected);
              }
            };

            runner = new $$AnimateRunner({
              end: function() {
                onAnimationComplete();
              },
              cancel: function() {
                onAnimationComplete(true);
              }
            });

            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
              var cancelled = result === false;
              onAnimationComplete(cancelled);
            });

            return runner;
          });
        });

        return operations;
      }

      function packageAnimations(element, event, options, animations, fnName) {
        var operations = groupEventedAnimations(element, event, options, animations, fnName);
        if (operations.length === 0) {
          var a,b;
          if (fnName === 'beforeSetClass') {
            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');
            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');
          } else if (fnName === 'setClass') {
            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');
            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');
          }

          if (a) {
            operations = operations.concat(a);
          }
          if (b) {
            operations = operations.concat(b);
          }
        }

        if (operations.length === 0) return;

        // TODO(matsko): add documentation
        return function startAnimation(callback) {
          var runners = [];
          if (operations.length) {
            forEach(operations, function(animateFn) {
              runners.push(animateFn());
            });
          }

          runners.length ? $$AnimateRunner.all(runners, callback) : callback();

          return function endFn(reject) {
            forEach(runners, function(runner) {
              reject ? runner.cancel() : runner.end();
            });
          };
        };
      }
    };

    function lookupAnimations(classes) {
      classes = isArray(classes) ? classes : classes.split(' ');
      var matches = [], flagMap = {};
      for (var i=0; i < classes.length; i++) {
        var klass = classes[i],
            animationFactory = $animateProvider.$$registeredAnimations[klass];
        if (animationFactory && !flagMap[klass]) {
          matches.push($injector.get(animationFactory));
          flagMap[klass] = true;
        }
      }
      return matches;
    }
  }];
}];

var $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {
  $$animationProvider.drivers.push('$$animateJsDriver');
  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {
    return function initDriverFn(animationDetails) {
      if (animationDetails.from && animationDetails.to) {
        var fromAnimation = prepareAnimation(animationDetails.from);
        var toAnimation = prepareAnimation(animationDetails.to);
        if (!fromAnimation && !toAnimation) return;

        return {
          start: function() {
            var animationRunners = [];

            if (fromAnimation) {
              animationRunners.push(fromAnimation.start());
            }

            if (toAnimation) {
              animationRunners.push(toAnimation.start());
            }

            $$AnimateRunner.all(animationRunners, done);

            var runner = new $$AnimateRunner({
              end: endFnFactory(),
              cancel: endFnFactory()
            });

            return runner;

            function endFnFactory() {
              return function() {
                forEach(animationRunners, function(runner) {
                  // at this point we cannot cancel animations for groups just yet. 1.5+
                  runner.end();
                });
              };
            }

            function done(status) {
              runner.complete(status);
            }
          }
        };
      } else {
        return prepareAnimation(animationDetails);
      }
    };

    function prepareAnimation(animationDetails) {
      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations
      var element = animationDetails.element;
      var event = animationDetails.event;
      var options = animationDetails.options;
      var classes = animationDetails.classes;
      return $$animateJs(element, event, classes, options);
    }
  }];
}];

var NG_ANIMATE_ATTR_NAME = 'data-ng-animate';
var NG_ANIMATE_PIN_DATA = '$ngAnimatePin';
var $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {
  var PRE_DIGEST_STATE = 1;
  var RUNNING_STATE = 2;

  var rules = this.rules = {
    skip: [],
    cancel: [],
    join: []
  };

  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {
    return rules[ruleType].some(function(fn) {
      return fn(element, currentAnimation, previousAnimation);
    });
  }

  function hasAnimationClasses(options, and) {
    options = options || {};
    var a = (options.addClass || '').length > 0;
    var b = (options.removeClass || '').length > 0;
    return and ? a && b : a || b;
  }

  rules.join.push(function(element, newAnimation, currentAnimation) {
    // if the new animation is class-based then we can just tack that on
    return !newAnimation.structural && hasAnimationClasses(newAnimation.options);
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // there is no need to animate anything if no classes are being added and
    // there is no structural animation that will be triggered
    return !newAnimation.structural && !hasAnimationClasses(newAnimation.options);
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // why should we trigger a new structural animation if the element will
    // be removed from the DOM anyway?
    return currentAnimation.event == 'leave' && newAnimation.structural;
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // if there is a current animation then skip the class-based animation
    return currentAnimation.structural && !newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // there can never be two structural animations running at the same time
    return currentAnimation.structural && newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // if the previous animation is already running, but the new animation will
    // be triggered, but the new animation is structural
    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    var nO = newAnimation.options;
    var cO = currentAnimation.options;

    // if the exact same CSS class is added/removed then it's safe to cancel it
    return (nO.addClass && nO.addClass === cO.removeClass) || (nO.removeClass && nO.removeClass === cO.addClass);
  });

  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',
               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite',
       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,
                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite) {

    var activeAnimationsLookup = new $$HashMap();
    var disabledElementsLookup = new $$HashMap();

    var animationsEnabled = null;

    // Wait until all directive and route-related templates are downloaded and
    // compiled. The $templateRequest.totalPendingRequests variable keeps track of
    // all of the remote templates being currently downloaded. If there are no
    // templates currently downloading then the watcher will still fire anyway.
    var deregisterWatch = $rootScope.$watch(
      function() { return $templateRequest.totalPendingRequests === 0; },
      function(isEmpty) {
        if (!isEmpty) return;
        deregisterWatch();

        // Now that all templates have been downloaded, $animate will wait until
        // the post digest queue is empty before enabling animations. By having two
        // calls to $postDigest calls we can ensure that the flag is enabled at the
        // very end of the post digest queue. Since all of the animations in $animate
        // use $postDigest, it's important that the code below executes at the end.
        // This basically means that the page is fully downloaded and compiled before
        // any animations are triggered.
        $rootScope.$$postDigest(function() {
          $rootScope.$$postDigest(function() {
            // we check for null directly in the event that the application already called
            // .enabled() with whatever arguments that it provided it with
            if (animationsEnabled === null) {
              animationsEnabled = true;
            }
          });
        });
      }
    );

    var bodyElement = jqLite($document[0].body);

    var callbackRegistry = {};

    // remember that the classNameFilter is set during the provider/config
    // stage therefore we can optimize here and setup a helper function
    var classNameFilter = $animateProvider.classNameFilter();
    var isAnimatableClassName = !classNameFilter
              ? function() { return true; }
              : function(className) {
                return classNameFilter.test(className);
              };

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    function normalizeAnimationOptions(element, options) {
      return mergeAnimationOptions(element, options, {});
    }

    function findCallbacks(element, event) {
      var targetNode = getDomNode(element);

      var matches = [];
      var entries = callbackRegistry[event];
      if (entries) {
        forEach(entries, function(entry) {
          if (entry.node.contains(targetNode)) {
            matches.push(entry.callback);
          }
        });
      }

      return matches;
    }

    function triggerCallback(event, element, phase, data) {
      $$rAF(function() {
        forEach(findCallbacks(element, event), function(callback) {
          callback(element, phase, data);
        });
      });
    }

    return {
      on: function(event, container, callback) {
        var node = extractElementNode(container);
        callbackRegistry[event] = callbackRegistry[event] || [];
        callbackRegistry[event].push({
          node: node,
          callback: callback
        });
      },

      off: function(event, container, callback) {
        var entries = callbackRegistry[event];
        if (!entries) return;

        callbackRegistry[event] = arguments.length === 1
            ? null
            : filterFromRegistry(entries, container, callback);

        function filterFromRegistry(list, matchContainer, matchCallback) {
          var containerNode = extractElementNode(matchContainer);
          return list.filter(function(entry) {
            var isMatch = entry.node === containerNode &&
                            (!matchCallback || entry.callback === matchCallback);
            return !isMatch;
          });
        }
      },

      pin: function(element, parentElement) {
        assertArg(isElement(element), 'element', 'not an element');
        assertArg(isElement(parentElement), 'parentElement', 'not an element');
        element.data(NG_ANIMATE_PIN_DATA, parentElement);
      },

      push: function(element, event, options, domOperation) {
        options = options || {};
        options.domOperation = domOperation;
        return queueAnimation(element, event, options);
      },

      // this method has four signatures:
      //  () - global getter
      //  (bool) - global setter
      //  (element) - element getter
      //  (element, bool) - element setter<F37>
      enabled: function(element, bool) {
        var argCount = arguments.length;

        if (argCount === 0) {
          // () - Global getter
          bool = !!animationsEnabled;
        } else {
          var hasElement = isElement(element);

          if (!hasElement) {
            // (bool) - Global setter
            bool = animationsEnabled = !!element;
          } else {
            var node = getDomNode(element);
            var recordExists = disabledElementsLookup.get(node);

            if (argCount === 1) {
              // (element) - Element getter
              bool = !recordExists;
            } else {
              // (element, bool) - Element setter
              bool = !!bool;
              if (!bool) {
                disabledElementsLookup.put(node, true);
              } else if (recordExists) {
                disabledElementsLookup.remove(node);
              }
            }
          }
        }

        return bool;
      }
    };

    function queueAnimation(element, event, options) {
      var node, parent;
      element = stripCommentsFromElement(element);
      if (element) {
        node = getDomNode(element);
        parent = element.parent();
      }

      options = prepareAnimationOptions(options);

      // we create a fake runner with a working promise.
      // These methods will become available after the digest has passed
      var runner = new $$AnimateRunner();

      // there are situations where a directive issues an animation for
      // a jqLite wrapper that contains only comment nodes... If this
      // happens then there is no way we can perform an animation
      if (!node) {
        close();
        return runner;
      }

      if (isArray(options.addClass)) {
        options.addClass = options.addClass.join(' ');
      }

      if (isArray(options.removeClass)) {
        options.removeClass = options.removeClass.join(' ');
      }

      if (options.from && !isObject(options.from)) {
        options.from = null;
      }

      if (options.to && !isObject(options.to)) {
        options.to = null;
      }

      var className = [node.className, options.addClass, options.removeClass].join(' ');
      if (!isAnimatableClassName(className)) {
        close();
        return runner;
      }

      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

      // this is a hard disable of all animations for the application or on
      // the element itself, therefore  there is no need to continue further
      // past this point if not enabled
      var skipAnimations = !animationsEnabled || disabledElementsLookup.get(node);
      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};
      var hasExistingAnimation = !!existingAnimation.state;

      // there is no point in traversing the same collection of parent ancestors if a followup
      // animation will be run on the same element that already did all that checking work
      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {
        skipAnimations = !areAnimationsAllowed(element, parent, event);
      }

      if (skipAnimations) {
        close();
        return runner;
      }

      if (isStructural) {
        closeChildAnimations(element);
      }

      var newAnimation = {
        structural: isStructural,
        element: element,
        event: event,
        close: close,
        options: options,
        runner: runner
      };

      if (hasExistingAnimation) {
        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);
        if (skipAnimationFlag) {
          if (existingAnimation.state === RUNNING_STATE) {
            close();
            return runner;
          } else {
            mergeAnimationOptions(element, existingAnimation.options, options);
            return existingAnimation.runner;
          }
        }

        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);
        if (cancelAnimationFlag) {
          if (existingAnimation.state === RUNNING_STATE) {
            // this will end the animation right away and it is safe
            // to do so since the animation is already running and the
            // runner callback code will run in async
            existingAnimation.runner.end();
          } else if (existingAnimation.structural) {
            // this means that the animation is queued into a digest, but
            // hasn't started yet. Therefore it is safe to run the close
            // method which will call the runner methods in async.
            existingAnimation.close();
          } else {
            // this will merge the existing animation options into this new follow-up animation
            mergeAnimationOptions(element, newAnimation.options, existingAnimation.options);
          }
        } else {
          // a joined animation means that this animation will take over the existing one
          // so an example would involve a leave animation taking over an enter. Then when
          // the postDigest kicks in the enter will be ignored.
          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);
          if (joinAnimationFlag) {
            if (existingAnimation.state === RUNNING_STATE) {
              normalizeAnimationOptions(element, options);
            } else {
              event = newAnimation.event = existingAnimation.event;
              options = mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);
              return runner;
            }
          }
        }
      } else {
        // normalization in this case means that it removes redundant CSS classes that
        // already exist (addClass) or do not exist (removeClass) on the element
        normalizeAnimationOptions(element, options);
      }

      // when the options are merged and cleaned up we may end up not having to do
      // an animation at all, therefore we should check this before issuing a post
      // digest callback. Structural animations will always run no matter what.
      var isValidAnimation = newAnimation.structural;
      if (!isValidAnimation) {
        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present
        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)
                            || hasAnimationClasses(newAnimation.options);
      }

      if (!isValidAnimation) {
        close();
        clearElementAnimationState(element);
        return runner;
      }

      if (isStructural) {
        closeParentClassBasedAnimations(parent);
      }

      // the counter keeps track of cancelled animations
      var counter = (existingAnimation.counter || 0) + 1;
      newAnimation.counter = counter;

      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);

      $rootScope.$$postDigest(function() {
        var animationDetails = activeAnimationsLookup.get(node);
        var animationCancelled = !animationDetails;
        animationDetails = animationDetails || {};

        // if addClass/removeClass is called before something like enter then the
        // registered parent element may not be present. The code below will ensure
        // that a final value for parent element is obtained
        var parentElement = element.parent() || [];

        // animate/structural/class-based animations all have requirements. Otherwise there
        // is no point in performing an animation. The parent node must also be set.
        var isValidAnimation = parentElement.length > 0
                                && (animationDetails.event === 'animate'
                                    || animationDetails.structural
                                    || hasAnimationClasses(animationDetails.options));

        // this means that the previous animation was cancelled
        // even if the follow-up animation is the same event
        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
          // if another animation did not take over then we need
          // to make sure that the domOperation and options are
          // handled accordingly
          if (animationCancelled) {
            applyAnimationClasses(element, options);
            applyAnimationStyles(element, options);
          }

          // if the event changed from something like enter to leave then we do
          // it, otherwise if it's the same then the end result will be the same too
          if (animationCancelled || (isStructural && animationDetails.event !== event)) {
            options.domOperation();
            runner.end();
          }

          // in the event that the element animation was not cancelled or a follow-up animation
          // isn't allowed to animate from here then we need to clear the state of the element
          // so that any future animations won't read the expired animation data.
          if (!isValidAnimation) {
            clearElementAnimationState(element);
          }

          return;
        }

        // this combined multiple class to addClass / removeClass into a setClass event
        // so long as a structural event did not take over the animation
        event = !animationDetails.structural && hasAnimationClasses(animationDetails.options, true)
            ? 'setClass'
            : animationDetails.event;

        if (animationDetails.structural) {
          closeParentClassBasedAnimations(parentElement);
        }

        markElementAnimationState(element, RUNNING_STATE);
        var realRunner = $$animation(element, event, animationDetails.options);
        realRunner.done(function(status) {
          close(!status);
          var animationDetails = activeAnimationsLookup.get(node);
          if (animationDetails && animationDetails.counter === counter) {
            clearElementAnimationState(getDomNode(element));
          }
          notifyProgress(runner, event, 'close', {});
        });

        // this will update the runner's flow-control events based on
        // the `realRunner` object.
        runner.setHost(realRunner);
        notifyProgress(runner, event, 'start', {});
      });

      return runner;

      function notifyProgress(runner, event, phase, data) {
        triggerCallback(event, element, phase, data);
        runner.progress(event, phase, data);
      }

      function close(reject) { // jshint ignore:line
        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);
        options.domOperation();
        runner.complete(!reject);
      }
    }

    function closeChildAnimations(element) {
      var node = getDomNode(element);
      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');
      forEach(children, function(child) {
        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));
        var animationDetails = activeAnimationsLookup.get(child);
        switch (state) {
          case RUNNING_STATE:
            animationDetails.runner.end();
            /* falls through */
          case PRE_DIGEST_STATE:
            if (animationDetails) {
              activeAnimationsLookup.remove(child);
            }
            break;
        }
      });
    }

    function clearElementAnimationState(element) {
      var node = getDomNode(element);
      node.removeAttribute(NG_ANIMATE_ATTR_NAME);
      activeAnimationsLookup.remove(node);
    }

    function isMatchingElement(nodeOrElmA, nodeOrElmB) {
      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);
    }

    function closeParentClassBasedAnimations(startingElement) {
      var parentNode = getDomNode(startingElement);
      do {
        if (!parentNode || parentNode.nodeType !== ELEMENT_NODE) break;

        var animationDetails = activeAnimationsLookup.get(parentNode);
        if (animationDetails) {
          examineParentAnimation(parentNode, animationDetails);
        }

        parentNode = parentNode.parentNode;
      } while (true);

      // since animations are detected from CSS classes, we need to flush all parent
      // class-based animations so that the parent classes are all present for child
      // animations to properly function (otherwise any CSS selectors may not work)
      function examineParentAnimation(node, animationDetails) {
        // enter/leave/move always have priority
        if (animationDetails.structural || !hasAnimationClasses(animationDetails.options)) return;

        if (animationDetails.state === RUNNING_STATE) {
          animationDetails.runner.end();
        }
        clearElementAnimationState(node);
      }
    }

    function areAnimationsAllowed(element, parentElement, event) {
      var bodyElementDetected = false;
      var rootElementDetected = false;
      var parentAnimationDetected = false;
      var animateChildren;

      var parentHost = element.data(NG_ANIMATE_PIN_DATA);
      if (parentHost) {
        parentElement = parentHost;
      }

      while (parentElement && parentElement.length) {
        if (!rootElementDetected) {
          // angular doesn't want to attempt to animate elements outside of the application
          // therefore we need to ensure that the rootElement is an ancestor of the current element
          rootElementDetected = isMatchingElement(parentElement, $rootElement);
        }

        var parentNode = parentElement[0];
        if (parentNode.nodeType !== ELEMENT_NODE) {
          // no point in inspecting the #document element
          break;
        }

        var details = activeAnimationsLookup.get(parentNode) || {};
        // either an enter, leave or move animation will commence
        // therefore we can't allow any animations to take place
        // but if a parent animation is class-based then that's ok
        if (!parentAnimationDetected) {
          parentAnimationDetected = details.structural || disabledElementsLookup.get(parentNode);
        }

        if (isUndefined(animateChildren) || animateChildren === true) {
          var value = parentElement.data(NG_ANIMATE_CHILDREN_DATA);
          if (isDefined(value)) {
            animateChildren = value;
          }
        }

        // there is no need to continue traversing at this point
        if (parentAnimationDetected && animateChildren === false) break;

        if (!rootElementDetected) {
          // angular doesn't want to attempt to animate elements outside of the application
          // therefore we need to ensure that the rootElement is an ancestor of the current element
          rootElementDetected = isMatchingElement(parentElement, $rootElement);
          if (!rootElementDetected) {
            parentHost = parentElement.data(NG_ANIMATE_PIN_DATA);
            if (parentHost) {
              parentElement = parentHost;
            }
          }
        }

        if (!bodyElementDetected) {
          // we also need to ensure that the element is or will be apart of the body element
          // otherwise it is pointless to even issue an animation to be rendered
          bodyElementDetected = isMatchingElement(parentElement, bodyElement);
        }

        parentElement = parentElement.parent();
      }

      var allowAnimation = !parentAnimationDetected || animateChildren;
      return allowAnimation && rootElementDetected && bodyElementDetected;
    }

    function markElementAnimationState(element, state, details) {
      details = details || {};
      details.state = state;

      var node = getDomNode(element);
      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);

      var oldValue = activeAnimationsLookup.get(node);
      var newValue = oldValue
          ? extend(oldValue, details)
          : details;
      activeAnimationsLookup.put(node, newValue);
    }
  }];
}];

var $$rAFMutexFactory = ['$$rAF', function($$rAF) {
  return function() {
    var passed = false;
    $$rAF(function() {
      passed = true;
    });
    return function(fn) {
      passed ? fn() : $$rAF(fn);
    };
  };
}];

var $$AnimateRunnerFactory = ['$q', '$$rAFMutex', function($q, $$rAFMutex) {
  var INITIAL_STATE = 0;
  var DONE_PENDING_STATE = 1;
  var DONE_COMPLETE_STATE = 2;

  AnimateRunner.chain = function(chain, callback) {
    var index = 0;

    next();
    function next() {
      if (index === chain.length) {
        callback(true);
        return;
      }

      chain[index](function(response) {
        if (response === false) {
          callback(false);
          return;
        }
        index++;
        next();
      });
    }
  };

  AnimateRunner.all = function(runners, callback) {
    var count = 0;
    var status = true;
    forEach(runners, function(runner) {
      runner.done(onProgress);
    });

    function onProgress(response) {
      status = status && response;
      if (++count === runners.length) {
        callback(status);
      }
    }
  };

  function AnimateRunner(host) {
    this.setHost(host);

    this._doneCallbacks = [];
    this._runInAnimationFrame = $$rAFMutex();
    this._state = 0;
  }

  AnimateRunner.prototype = {
    setHost: function(host) {
      this.host = host || {};
    },

    done: function(fn) {
      if (this._state === DONE_COMPLETE_STATE) {
        fn();
      } else {
        this._doneCallbacks.push(fn);
      }
    },

    progress: noop,

    getPromise: function() {
      if (!this.promise) {
        var self = this;
        this.promise = $q(function(resolve, reject) {
          self.done(function(status) {
            status === false ? reject() : resolve();
          });
        });
      }
      return this.promise;
    },

    then: function(resolveHandler, rejectHandler) {
      return this.getPromise().then(resolveHandler, rejectHandler);
    },

    'catch': function(handler) {
      return this.getPromise()['catch'](handler);
    },

    'finally': function(handler) {
      return this.getPromise()['finally'](handler);
    },

    pause: function() {
      if (this.host.pause) {
        this.host.pause();
      }
    },

    resume: function() {
      if (this.host.resume) {
        this.host.resume();
      }
    },

    end: function() {
      if (this.host.end) {
        this.host.end();
      }
      this._resolve(true);
    },

    cancel: function() {
      if (this.host.cancel) {
        this.host.cancel();
      }
      this._resolve(false);
    },

    complete: function(response) {
      var self = this;
      if (self._state === INITIAL_STATE) {
        self._state = DONE_PENDING_STATE;
        self._runInAnimationFrame(function() {
          self._resolve(response);
        });
      }
    },

    _resolve: function(response) {
      if (this._state !== DONE_COMPLETE_STATE) {
        forEach(this._doneCallbacks, function(fn) {
          fn(response);
        });
        this._doneCallbacks.length = 0;
        this._state = DONE_COMPLETE_STATE;
      }
    }
  };

  return AnimateRunner;
}];

var $$AnimationProvider = ['$animateProvider', function($animateProvider) {
  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';

  var drivers = this.drivers = [];

  var RUNNER_STORAGE_KEY = '$$animationRunner';

  function setRunner(element, runner) {
    element.data(RUNNER_STORAGE_KEY, runner);
  }

  function removeRunner(element) {
    element.removeData(RUNNER_STORAGE_KEY);
  }

  function getRunner(element) {
    return element.data(RUNNER_STORAGE_KEY);
  }

  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$rAFScheduler',
       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$rAFScheduler) {

    var animationQueue = [];
    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    var totalPendingClassBasedAnimations = 0;
    var totalActiveClassBasedAnimations = 0;
    var classBasedAnimationsQueue = [];

    // TODO(matsko): document the signature in a better way
    return function(element, event, options) {
      options = prepareAnimationOptions(options);
      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

      // there is no animation at the current moment, however
      // these runner methods will get later updated with the
      // methods leading into the driver's end/cancel methods
      // for now they just stop the animation from starting
      var runner = new $$AnimateRunner({
        end: function() { close(); },
        cancel: function() { close(true); }
      });

      if (!drivers.length) {
        close();
        return runner;
      }

      setRunner(element, runner);

      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));
      var tempClasses = options.tempClasses;
      if (tempClasses) {
        classes += ' ' + tempClasses;
        options.tempClasses = null;
      }

      var classBasedIndex;
      if (!isStructural) {
        classBasedIndex = totalPendingClassBasedAnimations;
        totalPendingClassBasedAnimations += 1;
      }

      animationQueue.push({
        // this data is used by the postDigest code and passed into
        // the driver step function
        element: element,
        classes: classes,
        event: event,
        classBasedIndex: classBasedIndex,
        structural: isStructural,
        options: options,
        beforeStart: beforeStart,
        close: close
      });

      element.on('$destroy', handleDestroyedElement);

      // we only want there to be one function called within the post digest
      // block. This way we can group animations for all the animations that
      // were apart of the same postDigest flush call.
      if (animationQueue.length > 1) return runner;

      $rootScope.$$postDigest(function() {
        totalActiveClassBasedAnimations = totalPendingClassBasedAnimations;
        totalPendingClassBasedAnimations = 0;
        classBasedAnimationsQueue.length = 0;

        var animations = [];
        forEach(animationQueue, function(entry) {
          // the element was destroyed early on which removed the runner
          // form its storage. This means we can't animate this element
          // at all and it already has been closed due to destruction.
          if (getRunner(entry.element)) {
            animations.push(entry);
          }
        });

        // now any future animations will be in another postDigest
        animationQueue.length = 0;

        forEach(groupAnimations(animations), function(animationEntry) {
          if (animationEntry.structural) {
            triggerAnimationStart();
          } else {
            classBasedAnimationsQueue.push({
              node: getDomNode(animationEntry.element),
              fn: triggerAnimationStart
            });

            if (animationEntry.classBasedIndex === totalActiveClassBasedAnimations - 1) {
              // we need to sort each of the animations in order of parent to child
              // relationships. This ensures that the child classes are applied at the
              // right time.
              classBasedAnimationsQueue = classBasedAnimationsQueue.sort(function(a,b) {
                return b.node.contains(a.node);
              }).map(function(entry) {
                return entry.fn;
              });

              $$rAFScheduler(classBasedAnimationsQueue);
            }
          }

          function triggerAnimationStart() {
            // it's important that we apply the `ng-animate` CSS class and the
            // temporary classes before we do any driver invoking since these
            // CSS classes may be required for proper CSS detection.
            animationEntry.beforeStart();

            var startAnimationFn, closeFn = animationEntry.close;

            // in the event that the element was removed before the digest runs or
            // during the RAF sequencing then we should not trigger the animation.
            var targetElement = animationEntry.anchors
                ? (animationEntry.from.element || animationEntry.to.element)
                : animationEntry.element;

            if (getRunner(targetElement) && getDomNode(targetElement).parentNode) {
              var operation = invokeFirstDriver(animationEntry);
              if (operation) {
                startAnimationFn = operation.start;
              }
            }

            if (!startAnimationFn) {
              closeFn();
            } else {
              var animationRunner = startAnimationFn();
              animationRunner.done(function(status) {
                closeFn(!status);
              });
              updateAnimationRunners(animationEntry, animationRunner);
            }
          }
        });
      });

      return runner;

      // TODO(matsko): change to reference nodes
      function getAnchorNodes(node) {
        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';
        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)
              ? [node]
              : node.querySelectorAll(SELECTOR);
        var anchors = [];
        forEach(items, function(node) {
          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
          if (attr && attr.length) {
            anchors.push(node);
          }
        });
        return anchors;
      }

      function groupAnimations(animations) {
        var preparedAnimations = [];
        var refLookup = {};
        forEach(animations, function(animation, index) {
          var element = animation.element;
          var node = getDomNode(element);
          var event = animation.event;
          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;
          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];

          if (anchorNodes.length) {
            var direction = enterOrMove ? 'to' : 'from';

            forEach(anchorNodes, function(anchor) {
              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
              refLookup[key] = refLookup[key] || {};
              refLookup[key][direction] = {
                animationID: index,
                element: jqLite(anchor)
              };
            });
          } else {
            preparedAnimations.push(animation);
          }
        });

        var usedIndicesLookup = {};
        var anchorGroups = {};
        forEach(refLookup, function(operations, key) {
          var from = operations.from;
          var to = operations.to;

          if (!from || !to) {
            // only one of these is set therefore we can't have an
            // anchor animation since all three pieces are required
            var index = from ? from.animationID : to.animationID;
            var indexKey = index.toString();
            if (!usedIndicesLookup[indexKey]) {
              usedIndicesLookup[indexKey] = true;
              preparedAnimations.push(animations[index]);
            }
            return;
          }

          var fromAnimation = animations[from.animationID];
          var toAnimation = animations[to.animationID];
          var lookupKey = from.animationID.toString();
          if (!anchorGroups[lookupKey]) {
            var group = anchorGroups[lookupKey] = {
              structural: true,
              beforeStart: function() {
                fromAnimation.beforeStart();
                toAnimation.beforeStart();
              },
              close: function() {
                fromAnimation.close();
                toAnimation.close();
              },
              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
              from: fromAnimation,
              to: toAnimation,
              anchors: [] // TODO(matsko): change to reference nodes
            };

            // the anchor animations require that the from and to elements both have at least
            // one shared CSS class which effictively marries the two elements together to use
            // the same animation driver and to properly sequence the anchor animation.
            if (group.classes.length) {
              preparedAnimations.push(group);
            } else {
              preparedAnimations.push(fromAnimation);
              preparedAnimations.push(toAnimation);
            }
          }

          anchorGroups[lookupKey].anchors.push({
            'out': from.element, 'in': to.element
          });
        });

        return preparedAnimations;
      }

      function cssClassesIntersection(a,b) {
        a = a.split(' ');
        b = b.split(' ');
        var matches = [];

        for (var i = 0; i < a.length; i++) {
          var aa = a[i];
          if (aa.substring(0,3) === 'ng-') continue;

          for (var j = 0; j < b.length; j++) {
            if (aa === b[j]) {
              matches.push(aa);
              break;
            }
          }
        }

        return matches.join(' ');
      }

      function invokeFirstDriver(animationDetails) {
        // we loop in reverse order since the more general drivers (like CSS and JS)
        // may attempt more elements, but custom drivers are more particular
        for (var i = drivers.length - 1; i >= 0; i--) {
          var driverName = drivers[i];
          if (!$injector.has(driverName)) continue; // TODO(matsko): remove this check

          var factory = $injector.get(driverName);
          var driver = factory(animationDetails);
          if (driver) {
            return driver;
          }
        }
      }

      function beforeStart() {
        element.addClass(NG_ANIMATE_CLASSNAME);
        if (tempClasses) {
          $$jqLite.addClass(element, tempClasses);
        }
      }

      function updateAnimationRunners(animation, newRunner) {
        if (animation.from && animation.to) {
          update(animation.from.element);
          update(animation.to.element);
        } else {
          update(animation.element);
        }

        function update(element) {
          getRunner(element).setHost(newRunner);
        }
      }

      function handleDestroyedElement() {
        var runner = getRunner(element);
        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {
          runner.end();
        }
      }

      function close(rejected) { // jshint ignore:line
        element.off('$destroy', handleDestroyedElement);
        removeRunner(element);

        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);
        options.domOperation();

        if (tempClasses) {
          $$jqLite.removeClass(element, tempClasses);
        }

        element.removeClass(NG_ANIMATE_CLASSNAME);
        runner.complete(!rejected);
      }
    };
  }];
}];

/* global angularAnimateModule: true,

   $$rAFMutexFactory,
   $$rAFSchedulerFactory,
   $$AnimateChildrenDirective,
   $$AnimateRunnerFactory,
   $$AnimateQueueProvider,
   $$AnimationProvider,
   $AnimateCssProvider,
   $$AnimateCssDriverProvider,
   $$AnimateJsProvider,
   $$AnimateJsDriverProvider,
*/

/**
 * @ngdoc module
 * @name ngAnimate
 * @description
 *
 * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via
 * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` then the animation hooks are enabled for an Angular app.
 *
 * <div doc-module-components="ngAnimate"></div>
 *
 * # Usage
 * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based
 * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For
 * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within
 * the HTML element that the animation will be triggered on.
 *
 * ## Directive Support
 * The following directives are "animation aware":
 *
 * | Directive                                                                                                | Supported Animations                                                     |
 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
 *
 * (More information can be found by visiting each the documentation associated with each directive.)
 *
 * ## CSS-based Animations
 *
 * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML
 * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.
 *
 * The example below shows how an `enter` animation can be made possible on a element using `ng-if`:
 *
 * ```html
 * <div ng-if="bool" class="fade">
 *    Fade me in out
 * </div>
 * <button ng-click="bool=true">Fade In!</button>
 * <button ng-click="bool=false">Fade Out!</button>
 * ```
 *
 * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:
 *
 * ```css
 * /&#42; The starting CSS styles for the enter animation &#42;/
 * .fade.ng-enter {
 *   transition:0.5s linear all;
 *   opacity:0;
 * }
 *
 * /&#42; The finishing CSS styles for the enter animation &#42;/
 * .fade.ng-enter.ng-enter-active {
 *   opacity:1;
 * }
 * ```
 *
 * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two
 * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition
 * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.
 *
 * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:
 *
 * ```css
 * /&#42; now the element will fade out before it is removed from the DOM &#42;/
 * .fade.ng-leave {
 *   transition:0.5s linear all;
 *   opacity:1;
 * }
 * .fade.ng-leave.ng-leave-active {
 *   opacity:0;
 * }
 * ```
 *
 * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:
 *
 * ```css
 * /&#42; there is no need to define anything inside of the destination
 * CSS class since the keyframe will take charge of the animation &#42;/
 * .fade.ng-leave {
 *   animation: my_fade_animation 0.5s linear;
 *   -webkit-animation: my_fade_animation 0.5s linear;
 * }
 *
 * @keyframes my_fade_animation {
 *   from { opacity:1; }
 *   to { opacity:0; }
 * }
 *
 * @-webkit-keyframes my_fade_animation {
 *   from { opacity:1; }
 *   to { opacity:0; }
 * }
 * ```
 *
 * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.
 *
 * ### CSS Class-based Animations
 *
 * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different
 * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added
 * and removed.
 *
 * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:
 *
 * ```html
 * <div ng-show="bool" class="fade">
 *   Show and hide me
 * </div>
 * <button ng-click="bool=true">Toggle</button>
 *
 * <style>
 * .fade.ng-hide {
 *   transition:0.5s linear all;
 *   opacity:0;
 * }
 * </style>
 * ```
 *
 * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since
 * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.
 *
 * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation
 * with CSS styles.
 *
 * ```html
 * <div ng-class="{on:onOff}" class="highlight">
 *   Highlight this box
 * </div>
 * <button ng-click="onOff=!onOff">Toggle</button>
 *
 * <style>
 * .highlight {
 *   transition:0.5s linear all;
 * }
 * .highlight.on-add {
 *   background:white;
 * }
 * .highlight.on {
 *   background:yellow;
 * }
 * .highlight.on-remove {
 *   background:black;
 * }
 * </style>
 * ```
 *
 * We can also make use of CSS keyframes by placing them within the CSS classes.
 *
 *
 * ### CSS Staggering Animations
 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
 *
 * ```css
 * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   transition: 1s linear all;
 *   opacity:0;
 * }
 * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   transition-delay: 0.1s;
 *
 *   /&#42; in case the stagger doesn't work then the duration value
 *    must be set to 0 to avoid an accidental CSS inheritance &#42;/
 *   transition-duration: 0s;
 * }
 * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
 * ```
 *
 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
 * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.
 *
 * The following code will issue the **ng-leave-stagger** event on the element provided:
 *
 * ```js
 * var kids = parent.children();
 *
 * $animate.leave(kids[0]); //stagger index=0
 * $animate.leave(kids[1]); //stagger index=1
 * $animate.leave(kids[2]); //stagger index=2
 * $animate.leave(kids[3]); //stagger index=3
 * $animate.leave(kids[4]); //stagger index=4
 *
 * window.requestAnimationFrame(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 *
 *   $scope.$digest();
 * });
 * ```
 *
 * Stagger animations are currently only supported within CSS-defined animations.
 *
 * ### The `ng-animate` CSS class
 *
 * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.
 * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).
 *
 * Therefore, animations can be applied to an element using this temporary class directly via CSS.
 *
 * ```css
 * .zipper.ng-animate {
 *   transition:0.5s linear all;
 * }
 * .zipper.ng-enter {
 *   opacity:0;
 * }
 * .zipper.ng-enter.ng-enter-active {
 *   opacity:1;
 * }
 * .zipper.ng-leave {
 *   opacity:1;
 * }
 * .zipper.ng-leave.ng-leave-active {
 *   opacity:0;
 * }
 * ```
 *
 * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove
 * the CSS class once an animation has completed.)
 *
 *
 * ## JavaScript-based Animations
 *
 * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared
 * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the
 * `module.animation()` module function we can register the ainmation.
 *
 * Let's see an example of a enter/leave animation using `ngRepeat`:
 *
 * ```html
 * <div ng-repeat="item in items" class="slide">
 *   {{ item }}
 * </div>
 * ```
 *
 * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:
 *
 * ```js
 * myModule.animation('.slide', [function() {
 *   return {
 *     // make note that other events (like addClass/removeClass)
 *     // have different function input parameters
 *     enter: function(element, doneFn) {
 *       jQuery(element).fadeIn(1000, doneFn);
 *
 *       // remember to call doneFn so that angular
 *       // knows that the animation has concluded
 *     },
 *
 *     move: function(element, doneFn) {
 *       jQuery(element).fadeIn(1000, doneFn);
 *     },
 *
 *     leave: function(element, doneFn) {
 *       jQuery(element).fadeOut(1000, doneFn);
 *     }
 *   }
 * }]
 * ```
 *
 * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as
 * greensock.js and velocity.js.
 *
 * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define
 * our animations inside of the same registered animation, however, the function input arguments are a bit different:
 *
 * ```html
 * <div ng-class="color" class="colorful">
 *   this box is moody
 * </div>
 * <button ng-click="color='red'">Change to red</button>
 * <button ng-click="color='blue'">Change to blue</button>
 * <button ng-click="color='green'">Change to green</button>
 * ```
 *
 * ```js
 * myModule.animation('.colorful', [function() {
 *   return {
 *     addClass: function(element, className, doneFn) {
 *       // do some cool animation and call the doneFn
 *     },
 *     removeClass: function(element, className, doneFn) {
 *       // do some cool animation and call the doneFn
 *     },
 *     setClass: function(element, addedClass, removedClass, doneFn) {
 *       // do some cool animation and call the doneFn
 *     }
 *   }
 * }]
 * ```
 *
 * ## CSS + JS Animations Together
 *
 * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,
 * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking
 * charge of the animation**:
 *
 * ```html
 * <div ng-if="bool" class="slide">
 *   Slide in and out
 * </div>
 * ```
 *
 * ```js
 * myModule.animation('.slide', [function() {
 *   return {
 *     enter: function(element, doneFn) {
 *       jQuery(element).slideIn(1000, doneFn);
 *     }
 *   }
 * }]
 * ```
 *
 * ```css
 * .slide.ng-enter {
 *   transition:0.5s linear all;
 *   transform:translateY(-100px);
 * }
 * .slide.ng-enter.ng-enter-active {
 *   transform:translateY(0);
 * }
 * ```
 *
 * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the
 * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from
 * our own JS-based animation code:
 *
 * ```js
 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.
 *       var runner = $animateCss(element, {
 *         event: 'enter',
 *         structural: true
 *       }).start();
*        runner.done(doneFn);
 *     }
 *   }
 * }]
 * ```
 *
 * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.
 *
 * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or
 * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that
 * data into `$animateCss` directly:
 *
 * ```js
 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var runner = $animateCss(element, {
 *         event: 'enter',
 *         addClass: 'maroon-setting',
 *         from: { height:0 },
 *         to: { height: 200 }
 *       }).start();
 *
 *       runner.done(doneFn);
 *     }
 *   }
 * }]
 * ```
 *
 * Now we can fill in the rest via our transition CSS code:
 *
 * ```css
 * /&#42; the transition tells ngAnimate to make the animation happen &#42;/
 * .slide.ng-enter { transition:0.5s linear all; }
 *
 * /&#42; this extra CSS class will be absorbed into the transition
 * since the $animateCss code is adding the class &#42;/
 * .maroon-setting { background:red; }
 * ```
 *
 * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.
 *
 * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.
 *
 * ## Animation Anchoring (via `ng-animate-ref`)
 *
 * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between
 * structural areas of an application (like views) by pairing up elements using an attribute
 * called `ng-animate-ref`.
 *
 * Let's say for example we have two views that are managed by `ng-view` and we want to show
 * that there is a relationship between two components situated in within these views. By using the
 * `ng-animate-ref` attribute we can identify that the two components are paired together and we
 * can then attach an animation, which is triggered when the view changes.
 *
 * Say for example we have the following template code:
 *
 * ```html
 * <!-- index.html -->
 * <div ng-view class="view-animation">
 * </div>
 *
 * <!-- home.html -->
 * <a href="#/banner-page">
 *   <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
 * </a>
 *
 * <!-- banner-page.html -->
 * <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
 * ```
 *
 * Now, when the view changes (once the link is clicked), ngAnimate will examine the
 * HTML contents to see if there is a match reference between any components in the view
 * that is leaving and the view that is entering. It will scan both the view which is being
 * removed (leave) and inserted (enter) to see if there are any paired DOM elements that
 * contain a matching ref value.
 *
 * The two images match since they share the same ref value. ngAnimate will now create a
 * transport element (which is a clone of the first image element) and it will then attempt
 * to animate to the position of the second image element in the next view. For the animation to
 * work a special CSS class called `ng-anchor` will be added to the transported element.
 *
 * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then
 * ngAnimate will handle the entire transition for us as well as the addition and removal of
 * any changes of CSS classes between the elements:
 *
 * ```css
 * .banner.ng-anchor {
 *   /&#42; this animation will last for 1 second since there are
 *          two phases to the animation (an `in` and an `out` phase) &#42;/
 *   transition:0.5s linear all;
 * }
 * ```
 *
 * We also **must** include animations for the views that are being entered and removed
 * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).
 *
 * ```css
 * .view-animation.ng-enter, .view-animation.ng-leave {
 *   transition:0.5s linear all;
 *   position:fixed;
 *   left:0;
 *   top:0;
 *   width:100%;
 * }
 * .view-animation.ng-enter {
 *   transform:translateX(100%);
 * }
 * .view-animation.ng-leave,
 * .view-animation.ng-enter.ng-enter-active {
 *   transform:translateX(0%);
 * }
 * .view-animation.ng-leave.ng-leave-active {
 *   transform:translateX(-100%);
 * }
 * ```
 *
 * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:
 * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away
 * from its origin. Once that animation is over then the `in` stage occurs which animates the
 * element to its destination. The reason why there are two animations is to give enough time
 * for the enter animation on the new element to be ready.
 *
 * The example above sets up a transition for both the in and out phases, but we can also target the out or
 * in phases directly via `ng-anchor-out` and `ng-anchor-in`.
 *
 * ```css
 * .banner.ng-anchor-out {
 *   transition: 0.5s linear all;
 *
 *   /&#42; the scale will be applied during the out animation,
 *          but will be animated away when the in animation runs &#42;/
 *   transform: scale(1.2);
 * }
 *
 * .banner.ng-anchor-in {
 *   transition: 1s linear all;
 * }
 * ```
 *
 *
 *
 *
 * ### Anchoring Demo
 *
  <example module="anchoringExample"
           name="anchoringExample"
           id="anchoringExample"
           deps="angular-animate.js;angular-route.js"
           animations="true">
    <file name="index.html">
      <a href="#/">Home</a>
      <hr />
      <div class="view-container">
        <div ng-view class="view"></div>
      </div>
    </file>
    <file name="script.js">
      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])
        .config(['$routeProvider', function($routeProvider) {
          $routeProvider.when('/', {
            templateUrl: 'home.html',
            controller: 'HomeController as home'
          });
          $routeProvider.when('/profile/:id', {
            templateUrl: 'profile.html',
            controller: 'ProfileController as profile'
          });
        }])
        .run(['$rootScope', function($rootScope) {
          $rootScope.records = [
            { id:1, title: "Miss Beulah Roob" },
            { id:2, title: "Trent Morissette" },
            { id:3, title: "Miss Ava Pouros" },
            { id:4, title: "Rod Pouros" },
            { id:5, title: "Abdul Rice" },
            { id:6, title: "Laurie Rutherford Sr." },
            { id:7, title: "Nakia McLaughlin" },
            { id:8, title: "Jordon Blanda DVM" },
            { id:9, title: "Rhoda Hand" },
            { id:10, title: "Alexandrea Sauer" }
          ];
        }])
        .controller('HomeController', [function() {
          //empty
        }])
        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {
          var index = parseInt($routeParams.id, 10);
          var record = $rootScope.records[index - 1];

          this.title = record.title;
          this.id = record.id;
        }]);
    </file>
    <file name="home.html">
      <h2>Welcome to the home page</h1>
      <p>Please click on an element</p>
      <a class="record"
         ng-href="#/profile/{{ record.id }}"
         ng-animate-ref="{{ record.id }}"
         ng-repeat="record in records">
        {{ record.title }}
      </a>
    </file>
    <file name="profile.html">
      <div class="profile record" ng-animate-ref="{{ profile.id }}">
        {{ profile.title }}
      </div>
    </file>
    <file name="animations.css">
      .record {
        display:block;
        font-size:20px;
      }
      .profile {
        background:black;
        color:white;
        font-size:100px;
      }
      .view-container {
        position:relative;
      }
      .view-container > .view.ng-animate {
        position:absolute;
        top:0;
        left:0;
        width:100%;
        min-height:500px;
      }
      .view.ng-enter, .view.ng-leave,
      .record.ng-anchor {
        transition:0.5s linear all;
      }
      .view.ng-enter {
        transform:translateX(100%);
      }
      .view.ng-enter.ng-enter-active, .view.ng-leave {
        transform:translateX(0%);
      }
      .view.ng-leave.ng-leave-active {
        transform:translateX(-100%);
      }
      .record.ng-anchor-out {
        background:red;
      }
    </file>
  </example>
 *
 * ### How is the element transported?
 *
 * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting
 * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element
 * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The
 * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match
 * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied
 * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class
 * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element
 * will become visible since the shim class will be removed.
 *
 * ### How is the morphing handled?
 *
 * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out
 * what CSS classes differ between the starting element and the destination element. These different CSS classes
 * will be added/removed on the anchor element and a transition will be applied (the transition that is provided
 * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will
 * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that
 * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since
 * the cloned element is placed inside of root element which is likely close to the body element).
 *
 * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.
 *
 *
 * ## Using $animate in your directive code
 *
 * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?
 * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's
 * imagine we have a greeting box that shows and hides itself when the data changes
 *
 * ```html
 * <greeting-box active="onOrOff">Hi there</greeting-box>
 * ```
 *
 * ```js
 * ngModule.directive('greetingBox', ['$animate', function($animate) {
 *   return function(scope, element, attrs) {
 *     attrs.$observe('active', function(value) {
 *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');
 *     });
 *   });
 * }]);
 * ```
 *
 * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element
 * in our HTML code then we can trigger a CSS or JS animation to happen.
 *
 * ```css
 * /&#42; normally we would create a CSS class to reference on the element &#42;/
 * greeting-box.on { transition:0.5s linear all; background:green; color:white; }
 * ```
 *
 * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's
 * possible be sure to visit the {@link ng.$animate $animate service API page}.
 *
 *
 * ### Preventing Collisions With Third Party Libraries
 *
 * Some third-party frameworks place animation duration defaults across many element or className
 * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which
 * is expecting actual animations on these elements and has to wait for their completion.
 *
 * You can prevent this unwanted behavior by using a prefix on all your animation classes:
 *
 * ```css
 * /&#42; prefixed with animate- &#42;/
 * .animate-fade-add.animate-fade-add-active {
 *   transition:1s linear all;
 *   opacity:0;
 * }
 * ```
 *
 * You then configure `$animate` to enforce this prefix:
 *
 * ```js
 * $animateProvider.classNameFilter(/animate-/);
 * ```
 *
 * This also may provide your application with a speed boost since only specific elements containing CSS class prefix
 * will be evaluated for animation when any DOM changes occur in the application.
 *
 * ## Callbacks and Promises
 *
 * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger
 * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has
 * ended by chaining onto the returned promise that animation method returns.
 *
 * ```js
 * // somewhere within the depths of the directive
 * $animate.enter(element, parent).then(function() {
 *   //the animation has completed
 * });
 * ```
 *
 * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case
 * anymore.)
 *
 * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering
 * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view
 * routing controller to hook into that:
 *
 * ```js
 * ngModule.controller('HomePageController', ['$animate', function($animate) {
 *   $animate.on('enter', ngViewElement, function(element) {
 *     // the animation for this route has completed
 *   }]);
 * }])
 * ```
 *
 * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)
 */

/**
 * @ngdoc service
 * @name $animate
 * @kind object
 *
 * @description
 * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.
 *
 * Click here {@link ng.$animate $animate to learn more about animations with `$animate`}.
 */
angular.module('ngAnimate', [])
  .directive('ngAnimateChildren', $$AnimateChildrenDirective)

  .factory('$$rAFMutex', $$rAFMutexFactory)
  .factory('$$rAFScheduler', $$rAFSchedulerFactory)

  .factory('$$AnimateRunner', $$AnimateRunnerFactory)

  .provider('$$animateQueue', $$AnimateQueueProvider)
  .provider('$$animation', $$AnimationProvider)

  .provider('$animateCss', $AnimateCssProvider)
  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)

  .provider('$$animateJs', $$AnimateJsProvider)
  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);


})(window, window.angular);

/**
 * @license AngularJS v1.4.3
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc module
 * @name ngCookies
 * @description
 *
 * # ngCookies
 *
 * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.
 *
 *
 * <div doc-module-components="ngCookies"></div>
 *
 * See {@link ngCookies.$cookies `$cookies`} for usage.
 */


angular.module('ngCookies', ['ng']).
  /**
   * @ngdoc provider
   * @name $cookiesProvider
   * @description
   * Use `$cookiesProvider` to change the default behavior of the {@link ngCookies.$cookies $cookies} service.
   * */
   provider('$cookies', [function $CookiesProvider() {
    /**
     * @ngdoc property
     * @name $cookiesProvider#defaults
     * @description
     *
     * Object containing default options to pass when setting cookies.
     *
     * The object may have following properties:
     *
     * - **path** - `{string}` - The cookie will be available only for this path and its
     *   sub-paths. By default, this would be the URL that appears in your base tag.
     * - **domain** - `{string}` - The cookie will be available only for this domain and
     *   its sub-domains. For obvious security reasons the user agent will not accept the
     *   cookie if the current domain is not a sub domain or equals to the requested domain.
     * - **expires** - `{string|Date}` - String of the form "Wdy, DD Mon YYYY HH:MM:SS GMT"
     *   or a Date object indicating the exact date/time this cookie will expire.
     * - **secure** - `{boolean}` - The cookie will be available only in secured connection.
     *
     * Note: by default the address that appears in your `<base>` tag will be used as path.
     * This is import so that cookies will be visible for all routes in case html5mode is enabled
     *
     **/
    var defaults = this.defaults = {};

    function calcOptions(options) {
      return options ? angular.extend({}, defaults, options) : defaults;
    }

    /**
     * @ngdoc service
     * @name $cookies
     *
     * @description
     * Provides read/write access to browser's cookies.
     *
     * <div class="alert alert-info">
     * Up until Angular 1.3, `$cookies` exposed properties that represented the
     * current browser cookie values. In version 1.4, this behavior has changed, and
     * `$cookies` now provides a standard api of getters, setters etc.
     * </div>
     *
     * Requires the {@link ngCookies `ngCookies`} module to be installed.
     *
     * @example
     *
     * ```js
     * angular.module('cookiesExample', ['ngCookies'])
     *   .controller('ExampleController', ['$cookies', function($cookies) {
     *     // Retrieving a cookie
     *     var favoriteCookie = $cookies.get('myFavorite');
     *     // Setting a cookie
     *     $cookies.put('myFavorite', 'oatmeal');
     *   }]);
     * ```
     */
    this.$get = ['$$cookieReader', '$$cookieWriter', function($$cookieReader, $$cookieWriter) {
      return {
        /**
         * @ngdoc method
         * @name $cookies#get
         *
         * @description
         * Returns the value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {string} Raw cookie value.
         */
        get: function(key) {
          return $$cookieReader()[key];
        },

        /**
         * @ngdoc method
         * @name $cookies#getObject
         *
         * @description
         * Returns the deserialized value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {Object} Deserialized cookie value.
         */
        getObject: function(key) {
          var value = this.get(key);
          return value ? angular.fromJson(value) : value;
        },

        /**
         * @ngdoc method
         * @name $cookies#getAll
         *
         * @description
         * Returns a key value object with all the cookies
         *
         * @returns {Object} All cookies
         */
        getAll: function() {
          return $$cookieReader();
        },

        /**
         * @ngdoc method
         * @name $cookies#put
         *
         * @description
         * Sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {string} value Raw value to be stored.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        put: function(key, value, options) {
          $$cookieWriter(key, value, calcOptions(options));
        },

        /**
         * @ngdoc method
         * @name $cookies#putObject
         *
         * @description
         * Serializes and sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {Object} value Value to be stored.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        putObject: function(key, value, options) {
          this.put(key, angular.toJson(value), options);
        },

        /**
         * @ngdoc method
         * @name $cookies#remove
         *
         * @description
         * Remove given cookie
         *
         * @param {string} key Id of the key-value pair to delete.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        remove: function(key, options) {
          $$cookieWriter(key, undefined, calcOptions(options));
        }
      };
    }];
  }]);

angular.module('ngCookies').
/**
 * @ngdoc service
 * @name $cookieStore
 * @deprecated
 * @requires $cookies
 *
 * @description
 * Provides a key-value (string-object) storage, that is backed by session cookies.
 * Objects put or retrieved from this storage are automatically serialized or
 * deserialized by angular's toJson/fromJson.
 *
 * Requires the {@link ngCookies `ngCookies`} module to be installed.
 *
 * <div class="alert alert-danger">
 * **Note:** The $cookieStore service is **deprecated**.
 * Please use the {@link ngCookies.$cookies `$cookies`} service instead.
 * </div>
 *
 * @example
 *
 * ```js
 * angular.module('cookieStoreExample', ['ngCookies'])
 *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {
 *     // Put cookie
 *     $cookieStore.put('myFavorite','oatmeal');
 *     // Get cookie
 *     var favoriteCookie = $cookieStore.get('myFavorite');
 *     // Removing a cookie
 *     $cookieStore.remove('myFavorite');
 *   }]);
 * ```
 */
 factory('$cookieStore', ['$cookies', function($cookies) {

    return {
      /**
       * @ngdoc method
       * @name $cookieStore#get
       *
       * @description
       * Returns the value of given cookie key
       *
       * @param {string} key Id to use for lookup.
       * @returns {Object} Deserialized cookie value, undefined if the cookie does not exist.
       */
      get: function(key) {
        return $cookies.getObject(key);
      },

      /**
       * @ngdoc method
       * @name $cookieStore#put
       *
       * @description
       * Sets a value for given cookie key
       *
       * @param {string} key Id for the `value`.
       * @param {Object} value Value to be stored.
       */
      put: function(key, value) {
        $cookies.putObject(key, value);
      },

      /**
       * @ngdoc method
       * @name $cookieStore#remove
       *
       * @description
       * Remove given cookie
       *
       * @param {string} key Id of the key-value pair to delete.
       */
      remove: function(key) {
        $cookies.remove(key);
      }
    };

  }]);

/**
 * @name $$cookieWriter
 * @requires $document
 *
 * @description
 * This is a private service for writing cookies
 *
 * @param {string} name Cookie name
 * @param {string=} value Cookie value (if undefined, cookie will be deleted)
 * @param {Object=} options Object with options that need to be stored for the cookie.
 */
function $$CookieWriter($document, $log, $browser) {
  var cookiePath = $browser.baseHref();
  var rawDocument = $document[0];

  function buildCookieString(name, value, options) {
    var path, expires;
    options = options || {};
    expires = options.expires;
    path = angular.isDefined(options.path) ? options.path : cookiePath;
    if (value === undefined) {
      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
      value = '';
    }
    if (angular.isString(expires)) {
      expires = new Date(expires);
    }

    var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    str += path ? ';path=' + path : '';
    str += options.domain ? ';domain=' + options.domain : '';
    str += expires ? ';expires=' + expires.toUTCString() : '';
    str += options.secure ? ';secure' : '';

    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
    // - 300 cookies
    // - 20 cookies per unique domain
    // - 4096 bytes per cookie
    var cookieLength = str.length + 1;
    if (cookieLength > 4096) {
      $log.warn("Cookie '" + name +
        "' possibly not set or overflowed because it was too large (" +
        cookieLength + " > 4096 bytes)!");
    }

    return str;
  }

  return function(name, value, options) {
    rawDocument.cookie = buildCookieString(name, value, options);
  };
}

$$CookieWriter.$inject = ['$document', '$log', '$browser'];

angular.module('ngCookies').provider('$$cookieWriter', function $$CookieWriterProvider() {
  this.$get = $$CookieWriter;
});


})(window, window.angular);

/**
 * @license AngularJS v1.4.3
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

var $resourceMinErr = angular.$$minErr('$resource');

// Helper functions and regex to lookup a dotted path on an object
// stopping at undefined/null.  The path must be composed of ASCII
// identifiers (just like $parse)
var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;

function isValidDottedPath(path) {
  return (path != null && path !== '' && path !== 'hasOwnProperty' &&
      MEMBER_NAME_REGEX.test('.' + path));
}

function lookupDottedPath(obj, path) {
  if (!isValidDottedPath(path)) {
    throw $resourceMinErr('badmember', 'Dotted member path "@{0}" is invalid.', path);
  }
  var keys = path.split('.');
  for (var i = 0, ii = keys.length; i < ii && obj !== undefined; i++) {
    var key = keys[i];
    obj = (obj !== null) ? obj[key] : undefined;
  }
  return obj;
}

/**
 * Create a shallow copy of an object and clear other fields from the destination
 */
function shallowClearAndCopy(src, dst) {
  dst = dst || {};

  angular.forEach(dst, function(value, key) {
    delete dst[key];
  });

  for (var key in src) {
    if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
      dst[key] = src[key];
    }
  }

  return dst;
}

/**
 * @ngdoc module
 * @name ngResource
 * @description
 *
 * # ngResource
 *
 * The `ngResource` module provides interaction support with RESTful services
 * via the $resource service.
 *
 *
 * <div doc-module-components="ngResource"></div>
 *
 * See {@link ngResource.$resource `$resource`} for usage.
 */

/**
 * @ngdoc service
 * @name $resource
 * @requires $http
 *
 * @description
 * A factory which creates a resource object that lets you interact with
 * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.
 *
 * The returned resource object has action methods which provide high-level behaviors without
 * the need to interact with the low level {@link ng.$http $http} service.
 *
 * Requires the {@link ngResource `ngResource`} module to be installed.
 *
 * By default, trailing slashes will be stripped from the calculated URLs,
 * which can pose problems with server backends that do not expect that
 * behavior.  This can be disabled by configuring the `$resourceProvider` like
 * this:
 *
 * ```js
     app.config(['$resourceProvider', function($resourceProvider) {
       // Don't strip trailing slashes from calculated URLs
       $resourceProvider.defaults.stripTrailingSlashes = false;
     }]);
 * ```
 *
 * @param {string} url A parameterized URL template with parameters prefixed by `:` as in
 *   `/user/:username`. If you are using a URL with a port number (e.g.
 *   `http://example.com:8080/api`), it will be respected.
 *
 *   If you are using a url with a suffix, just add the suffix, like this:
 *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`
 *   or even `$resource('http://example.com/resource/:resource_id.:format')`
 *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be
 *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you
 *   can escape it with `/\.`.
 *
 * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in
 *   `actions` methods. If any of the parameter value is a function, it will be executed every time
 *   when a param value needs to be obtained for a request (unless the param was overridden).
 *
 *   Each key value in the parameter object is first bound to url template if present and then any
 *   excess keys are appended to the url search query after the `?`.
 *
 *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in
 *   URL `/path/greet?salutation=Hello`.
 *
 *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted
 *   from the corresponding property on the `data` object (provided when calling an action method).  For
 *   example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of `someParam`
 *   will be `data.someProp`.
 *
 * @param {Object.<Object>=} actions Hash with declaration of custom actions that should extend
 *   the default set of resource actions. The declaration should be created in the format of {@link
 *   ng.$http#usage $http.config}:
 *
 *       {action1: {method:?, params:?, isArray:?, headers:?, ...},
 *        action2: {method:?, params:?, isArray:?, headers:?, ...},
 *        ...}
 *
 *   Where:
 *
 *   - **`action`** – {string} – The name of action. This name becomes the name of the method on
 *     your resource object.
 *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,
 *     `DELETE`, `JSONP`, etc).
 *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of
 *     the parameter value is a function, it will be executed every time when a param value needs to
 *     be obtained for a request (unless the param was overridden).
 *   - **`url`** – {string} – action specific `url` override. The url templating is supported just
 *     like for the resource-level urls.
 *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,
 *     see `returns` section.
 *   - **`transformRequest`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     request body and headers and returns its transformed (typically serialized) version.
 *     By default, transformRequest will contain one function that checks if the request data is
 *     an object and serializes to using `angular.toJson`. To prevent this behavior, set
 *     `transformRequest` to an empty array: `transformRequest: []`
 *   - **`transformResponse`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     response body and headers and returns its transformed (typically deserialized) version.
 *     By default, transformResponse will contain one function that checks if the response looks like
 *     a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior, set
 *     `transformResponse` to an empty array: `transformResponse: []`
 *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
 *     GET request, otherwise if a cache instance built with
 *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
 *     caching.
 *   - **`timeout`** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise} that
 *     should abort the request when resolved.
 *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the
 *     XHR object. See
 *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)
 *     for more information.
 *   - **`responseType`** - `{string}` - see
 *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
 *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -
 *     `response` and `responseError`. Both `response` and `responseError` interceptors get called
 *     with `http response` object. See {@link ng.$http $http interceptors}.
 *
 * @param {Object} options Hash with custom settings that should extend the
 *   default `$resourceProvider` behavior.  The only supported option is
 *
 *   Where:
 *
 *   - **`stripTrailingSlashes`** – {boolean} – If true then the trailing
 *   slashes from any calculated URL will be stripped. (Defaults to true.)
 *
 * @returns {Object} A resource "class" object with methods for the default set of resource actions
 *   optionally extended with custom `actions`. The default set contains these actions:
 *   ```js
 *   { 'get':    {method:'GET'},
 *     'save':   {method:'POST'},
 *     'query':  {method:'GET', isArray:true},
 *     'remove': {method:'DELETE'},
 *     'delete': {method:'DELETE'} };
 *   ```
 *
 *   Calling these methods invoke an {@link ng.$http} with the specified http method,
 *   destination and parameters. When the data is returned from the server then the object is an
 *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it
 *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,
 *   read, update, delete) on server-side data like this:
 *   ```js
 *   var User = $resource('/user/:userId', {userId:'@id'});
 *   var user = User.get({userId:123}, function() {
 *     user.abc = true;
 *     user.$save();
 *   });
 *   ```
 *
 *   It is important to realize that invoking a $resource object method immediately returns an
 *   empty reference (object or array depending on `isArray`). Once the data is returned from the
 *   server the existing reference is populated with the actual data. This is a useful trick since
 *   usually the resource is assigned to a model which is then rendered by the view. Having an empty
 *   object results in no rendering, once the data arrives from the server then the object is
 *   populated with the data and the view automatically re-renders itself showing the new data. This
 *   means that in most cases one never has to write a callback function for the action methods.
 *
 *   The action methods on the class object or instance object can be invoked with the following
 *   parameters:
 *
 *   - HTTP GET "class" actions: `Resource.action([parameters], [success], [error])`
 *   - non-GET "class" actions: `Resource.action([parameters], postData, [success], [error])`
 *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`
 *
 *
 *   Success callback is called with (value, responseHeaders) arguments, where the value is
 *   the populated resource instance or collection object. The error callback is called
 *   with (httpResponse) argument.
 *
 *   Class actions return empty instance (with additional properties below).
 *   Instance actions return promise of the action.
 *
 *   The Resource instances and collection have these additional properties:
 *
 *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this
 *     instance or collection.
 *
 *     On success, the promise is resolved with the same resource instance or collection object,
 *     updated with data from server. This makes it easy to use in
 *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view
 *     rendering until the resource(s) are loaded.
 *
 *     On failure, the promise is resolved with the {@link ng.$http http response} object, without
 *     the `resource` property.
 *
 *     If an interceptor object was provided, the promise will instead be resolved with the value
 *     returned by the interceptor.
 *
 *   - `$resolved`: `true` after first server interaction is completed (either with success or
 *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in
 *      data-binding.
 *
 * @example
 *
 * # Credit card resource
 *
 * ```js
     // Define CreditCard class
     var CreditCard = $resource('/user/:userId/card/:cardId',
      {userId:123, cardId:'@id'}, {
       charge: {method:'POST', params:{charge:true}}
      });

     // We can retrieve a collection from the server
     var cards = CreditCard.query(function() {
       // GET: /user/123/card
       // server returns: [ {id:456, number:'1234', name:'Smith'} ];

       var card = cards[0];
       // each item is an instance of CreditCard
       expect(card instanceof CreditCard).toEqual(true);
       card.name = "J. Smith";
       // non GET methods are mapped onto the instances
       card.$save();
       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}
       // server returns: {id:456, number:'1234', name: 'J. Smith'};

       // our custom method is mapped as well.
       card.$charge({amount:9.99});
       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}
     });

     // we can create an instance as well
     var newCard = new CreditCard({number:'0123'});
     newCard.name = "Mike Smith";
     newCard.$save();
     // POST: /user/123/card {number:'0123', name:'Mike Smith'}
     // server returns: {id:789, number:'0123', name: 'Mike Smith'};
     expect(newCard.id).toEqual(789);
 * ```
 *
 * The object returned from this function execution is a resource "class" which has "static" method
 * for each action in the definition.
 *
 * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and
 * `headers`.
 * When the data is returned from the server then the object is an instance of the resource type and
 * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD
 * operations (create, read, update, delete) on server-side data.

   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(user) {
       user.abc = true;
       user.$save();
     });
   ```
 *
 * It's worth noting that the success callback for `get`, `query` and other methods gets passed
 * in the response that came from the server as well as $http header getter function, so one
 * could rewrite the above example and get access to http headers as:
 *
   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(u, getResponseHeaders){
       u.abc = true;
       u.$save(function(u, putResponseHeaders) {
         //u => saved user object
         //putResponseHeaders => $http header getter
       });
     });
   ```
 *
 * You can also access the raw `$http` promise via the `$promise` property on the object returned
 *
   ```
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123})
         .$promise.then(function(user) {
           $scope.user = user;
         });
   ```

 * # Creating a custom 'PUT' request
 * In this example we create a custom method on our resource to make a PUT request
 * ```js
 *    var app = angular.module('app', ['ngResource', 'ngRoute']);
 *
 *    // Some APIs expect a PUT request in the format URL/object/ID
 *    // Here we are creating an 'update' method
 *    app.factory('Notes', ['$resource', function($resource) {
 *    return $resource('/notes/:id', null,
 *        {
 *            'update': { method:'PUT' }
 *        });
 *    }]);
 *
 *    // In our controller we get the ID from the URL using ngRoute and $routeParams
 *    // We pass in $routeParams and our Notes factory along with $scope
 *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',
                                      function($scope, $routeParams, Notes) {
 *    // First get a note object from the factory
 *    var note = Notes.get({ id:$routeParams.id });
 *    $id = note.id;
 *
 *    // Now call update passing in the ID first then the object you are updating
 *    Notes.update({ id:$id }, note);
 *
 *    // This will PUT /notes/ID with the note object in the request payload
 *    }]);
 * ```
 */
angular.module('ngResource', ['ng']).
  provider('$resource', function() {
    var provider = this;

    this.defaults = {
      // Strip slashes by default
      stripTrailingSlashes: true,

      // Default actions configuration
      actions: {
        'get': {method: 'GET'},
        'save': {method: 'POST'},
        'query': {method: 'GET', isArray: true},
        'remove': {method: 'DELETE'},
        'delete': {method: 'DELETE'}
      }
    };

    this.$get = ['$http', '$q', function($http, $q) {

      var noop = angular.noop,
        forEach = angular.forEach,
        extend = angular.extend,
        copy = angular.copy,
        isFunction = angular.isFunction;

      /**
       * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
       * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set
       * (pchar) allowed in path segments:
       *    segment       = *pchar
       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
       *    pct-encoded   = "%" HEXDIG HEXDIG
       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
       *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
       *                     / "*" / "+" / "," / ";" / "="
       */
      function encodeUriSegment(val) {
        return encodeUriQuery(val, true).
          replace(/%26/gi, '&').
          replace(/%3D/gi, '=').
          replace(/%2B/gi, '+');
      }


      /**
       * This method is intended for encoding *key* or *value* parts of query component. We need a
       * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't
       * have to be encoded per http://tools.ietf.org/html/rfc3986:
       *    query       = *( pchar / "/" / "?" )
       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
       *    pct-encoded   = "%" HEXDIG HEXDIG
       *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
       *                     / "*" / "+" / "," / ";" / "="
       */
      function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).
          replace(/%40/gi, '@').
          replace(/%3A/gi, ':').
          replace(/%24/g, '$').
          replace(/%2C/gi, ',').
          replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
      }

      function Route(template, defaults) {
        this.template = template;
        this.defaults = extend({}, provider.defaults, defaults);
        this.urlParams = {};
      }

      Route.prototype = {
        setUrlParams: function(config, params, actionUrl) {
          var self = this,
            url = actionUrl || self.template,
            val,
            encodedVal;

          var urlParams = self.urlParams = {};
          forEach(url.split(/\W/), function(param) {
            if (param === 'hasOwnProperty') {
              throw $resourceMinErr('badname', "hasOwnProperty is not a valid parameter name.");
            }
            if (!(new RegExp("^\\d+$").test(param)) && param &&
              (new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url))) {
              urlParams[param] = true;
            }
          });
          url = url.replace(/\\:/g, ':');

          params = params || {};
          forEach(self.urlParams, function(_, urlParam) {
            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
            if (angular.isDefined(val) && val !== null) {
              encodedVal = encodeUriSegment(val);
              url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
                return encodedVal + p1;
              });
            } else {
              url = url.replace(new RegExp("(\/?):" + urlParam + "(\\W|$)", "g"), function(match,
                  leadingSlashes, tail) {
                if (tail.charAt(0) == '/') {
                  return tail;
                } else {
                  return leadingSlashes + tail;
                }
              });
            }
          });

          // strip trailing slashes and set the url (unless this behavior is specifically disabled)
          if (self.defaults.stripTrailingSlashes) {
            url = url.replace(/\/+$/, '') || '/';
          }

          // then replace collapse `/.` if found in the last URL path segment before the query
          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`
          url = url.replace(/\/\.(?=\w+($|\?))/, '.');
          // replace escaped `/\.` with `/.`
          config.url = url.replace(/\/\\\./, '/.');


          // set params - delegate param encoding to $http
          forEach(params, function(value, key) {
            if (!self.urlParams[key]) {
              config.params = config.params || {};
              config.params[key] = value;
            }
          });
        }
      };


      function resourceFactory(url, paramDefaults, actions, options) {
        var route = new Route(url, options);

        actions = extend({}, provider.defaults.actions, actions);

        function extractParams(data, actionParams) {
          var ids = {};
          actionParams = extend({}, paramDefaults, actionParams);
          forEach(actionParams, function(value, key) {
            if (isFunction(value)) { value = value(); }
            ids[key] = value && value.charAt && value.charAt(0) == '@' ?
              lookupDottedPath(data, value.substr(1)) : value;
          });
          return ids;
        }

        function defaultResponseInterceptor(response) {
          return response.resource;
        }

        function Resource(value) {
          shallowClearAndCopy(value || {}, this);
        }

        Resource.prototype.toJSON = function() {
          var data = extend({}, this);
          delete data.$promise;
          delete data.$resolved;
          return data;
        };

        forEach(actions, function(action, name) {
          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);

          Resource[name] = function(a1, a2, a3, a4) {
            var params = {}, data, success, error;

            /* jshint -W086 */ /* (purposefully fall through case statements) */
            switch (arguments.length) {
              case 4:
                error = a4;
                success = a3;
              //fallthrough
              case 3:
              case 2:
                if (isFunction(a2)) {
                  if (isFunction(a1)) {
                    success = a1;
                    error = a2;
                    break;
                  }

                  success = a2;
                  error = a3;
                  //fallthrough
                } else {
                  params = a1;
                  data = a2;
                  success = a3;
                  break;
                }
              case 1:
                if (isFunction(a1)) success = a1;
                else if (hasBody) data = a1;
                else params = a1;
                break;
              case 0: break;
              default:
                throw $resourceMinErr('badargs',
                  "Expected up to 4 arguments [params, data, success, error], got {0} arguments",
                  arguments.length);
            }
            /* jshint +W086 */ /* (purposefully fall through case statements) */

            var isInstanceCall = this instanceof Resource;
            var value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));
            var httpConfig = {};
            var responseInterceptor = action.interceptor && action.interceptor.response ||
              defaultResponseInterceptor;
            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError ||
              undefined;

            forEach(action, function(value, key) {
              if (key != 'params' && key != 'isArray' && key != 'interceptor') {
                httpConfig[key] = copy(value);
              }
            });

            if (hasBody) httpConfig.data = data;
            route.setUrlParams(httpConfig,
              extend({}, extractParams(data, action.params || {}), params),
              action.url);

            var promise = $http(httpConfig).then(function(response) {
              var data = response.data,
                promise = value.$promise;

              if (data) {
                // Need to convert action.isArray to boolean in case it is undefined
                // jshint -W018
                if (angular.isArray(data) !== (!!action.isArray)) {
                  throw $resourceMinErr('badcfg',
                      'Error in resource configuration for action `{0}`. Expected response to ' +
                      'contain an {1} but got an {2} (Request: {3} {4})', name, action.isArray ? 'array' : 'object',
                    angular.isArray(data) ? 'array' : 'object', httpConfig.method, httpConfig.url);
                }
                // jshint +W018
                if (action.isArray) {
                  value.length = 0;
                  forEach(data, function(item) {
                    if (typeof item === "object") {
                      value.push(new Resource(item));
                    } else {
                      // Valid JSON values may be string literals, and these should not be converted
                      // into objects. These items will not have access to the Resource prototype
                      // methods, but unfortunately there
                      value.push(item);
                    }
                  });
                } else {
                  shallowClearAndCopy(data, value);
                  value.$promise = promise;
                }
              }

              value.$resolved = true;

              response.resource = value;

              return response;
            }, function(response) {
              value.$resolved = true;

              (error || noop)(response);

              return $q.reject(response);
            });

            promise = promise.then(
              function(response) {
                var value = responseInterceptor(response);
                (success || noop)(value, response.headers);
                return value;
              },
              responseErrorInterceptor);

            if (!isInstanceCall) {
              // we are creating instance / collection
              // - set the initial promise
              // - return the instance / collection
              value.$promise = promise;
              value.$resolved = false;

              return value;
            }

            // instance call
            return promise;
          };


          Resource.prototype['$' + name] = function(params, success, error) {
            if (isFunction(params)) {
              error = success; success = params; params = {};
            }
            var result = Resource[name].call(this, params, this, success, error);
            return result.$promise || result;
          };
        });

        Resource.bind = function(additionalParamDefaults) {
          return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);
        };

        return Resource;
      }

      return resourceFactory;
    }];
  });


})(window, window.angular);

/**
 * @license AngularJS v1.4.3
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc module
 * @name ngTouch
 * @description
 *
 * # ngTouch
 *
 * The `ngTouch` module provides touch events and other helpers for touch-enabled devices.
 * The implementation is based on jQuery Mobile touch event handling
 * ([jquerymobile.com](http://jquerymobile.com/)).
 *
 *
 * See {@link ngTouch.$swipe `$swipe`} for usage.
 *
 * <div doc-module-components="ngTouch"></div>
 *
 */

// define ngTouch module
/* global -ngTouch */
var ngTouch = angular.module('ngTouch', []);

function nodeName_(element) {
  return angular.lowercase(element.nodeName || (element[0] && element[0].nodeName));
}

/* global ngTouch: false */

    /**
     * @ngdoc service
     * @name $swipe
     *
     * @description
     * The `$swipe` service is a service that abstracts the messier details of hold-and-drag swipe
     * behavior, to make implementing swipe-related directives more convenient.
     *
     * Requires the {@link ngTouch `ngTouch`} module to be installed.
     *
     * `$swipe` is used by the `ngSwipeLeft` and `ngSwipeRight` directives in `ngTouch`, and by
     * `ngCarousel` in a separate component.
     *
     * # Usage
     * The `$swipe` service is an object with a single method: `bind`. `bind` takes an element
     * which is to be watched for swipes, and an object with four handler functions. See the
     * documentation for `bind` below.
     */

ngTouch.factory('$swipe', [function() {
  // The total distance in any direction before we make the call on swipe vs. scroll.
  var MOVE_BUFFER_RADIUS = 10;

  var POINTER_EVENTS = {
    'mouse': {
      start: 'mousedown',
      move: 'mousemove',
      end: 'mouseup'
    },
    'touch': {
      start: 'touchstart',
      move: 'touchmove',
      end: 'touchend',
      cancel: 'touchcancel'
    }
  };

  function getCoordinates(event) {
    var originalEvent = event.originalEvent || event;
    var touches = originalEvent.touches && originalEvent.touches.length ? originalEvent.touches : [originalEvent];
    var e = (originalEvent.changedTouches && originalEvent.changedTouches[0]) || touches[0];

    return {
      x: e.clientX,
      y: e.clientY
    };
  }

  function getEvents(pointerTypes, eventType) {
    var res = [];
    angular.forEach(pointerTypes, function(pointerType) {
      var eventName = POINTER_EVENTS[pointerType][eventType];
      if (eventName) {
        res.push(eventName);
      }
    });
    return res.join(' ');
  }

  return {
    /**
     * @ngdoc method
     * @name $swipe#bind
     *
     * @description
     * The main method of `$swipe`. It takes an element to be watched for swipe motions, and an
     * object containing event handlers.
     * The pointer types that should be used can be specified via the optional
     * third argument, which is an array of strings `'mouse'` and `'touch'`. By default,
     * `$swipe` will listen for `mouse` and `touch` events.
     *
     * The four events are `start`, `move`, `end`, and `cancel`. `start`, `move`, and `end`
     * receive as a parameter a coordinates object of the form `{ x: 150, y: 310 }` and the raw
     * `event`. `cancel` receives the raw `event` as its single parameter.
     *
     * `start` is called on either `mousedown` or `touchstart`. After this event, `$swipe` is
     * watching for `touchmove` or `mousemove` events. These events are ignored until the total
     * distance moved in either dimension exceeds a small threshold.
     *
     * Once this threshold is exceeded, either the horizontal or vertical delta is greater.
     * - If the horizontal distance is greater, this is a swipe and `move` and `end` events follow.
     * - If the vertical distance is greater, this is a scroll, and we let the browser take over.
     *   A `cancel` event is sent.
     *
     * `move` is called on `mousemove` and `touchmove` after the above logic has determined that
     * a swipe is in progress.
     *
     * `end` is called when a swipe is successfully completed with a `touchend` or `mouseup`.
     *
     * `cancel` is called either on a `touchcancel` from the browser, or when we begin scrolling
     * as described above.
     *
     */
    bind: function(element, eventHandlers, pointerTypes) {
      // Absolute total movement, used to control swipe vs. scroll.
      var totalX, totalY;
      // Coordinates of the start position.
      var startCoords;
      // Last event's position.
      var lastPos;
      // Whether a swipe is active.
      var active = false;

      pointerTypes = pointerTypes || ['mouse', 'touch'];
      element.on(getEvents(pointerTypes, 'start'), function(event) {
        startCoords = getCoordinates(event);
        active = true;
        totalX = 0;
        totalY = 0;
        lastPos = startCoords;
        eventHandlers['start'] && eventHandlers['start'](startCoords, event);
      });
      var events = getEvents(pointerTypes, 'cancel');
      if (events) {
        element.on(events, function(event) {
          active = false;
          eventHandlers['cancel'] && eventHandlers['cancel'](event);
        });
      }

      element.on(getEvents(pointerTypes, 'move'), function(event) {
        if (!active) return;

        // Android will send a touchcancel if it thinks we're starting to scroll.
        // So when the total distance (+ or - or both) exceeds 10px in either direction,
        // we either:
        // - On totalX > totalY, we send preventDefault() and treat this as a swipe.
        // - On totalY > totalX, we let the browser handle it as a scroll.

        if (!startCoords) return;
        var coords = getCoordinates(event);

        totalX += Math.abs(coords.x - lastPos.x);
        totalY += Math.abs(coords.y - lastPos.y);

        lastPos = coords;

        if (totalX < MOVE_BUFFER_RADIUS && totalY < MOVE_BUFFER_RADIUS) {
          return;
        }

        // One of totalX or totalY has exceeded the buffer, so decide on swipe vs. scroll.
        if (totalY > totalX) {
          // Allow native scrolling to take over.
          active = false;
          eventHandlers['cancel'] && eventHandlers['cancel'](event);
          return;
        } else {
          // Prevent the browser from scrolling.
          event.preventDefault();
          eventHandlers['move'] && eventHandlers['move'](coords, event);
        }
      });

      element.on(getEvents(pointerTypes, 'end'), function(event) {
        if (!active) return;
        active = false;
        eventHandlers['end'] && eventHandlers['end'](getCoordinates(event), event);
      });
    }
  };
}]);

/* global ngTouch: false,
  nodeName_: false
*/

/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * A more powerful replacement for the default ngClick designed to be used on touchscreen
 * devices. Most mobile browsers wait about 300ms after a tap-and-release before sending
 * the click event. This version handles them immediately, and then prevents the
 * following click event from propagating.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * This directive can fall back to using an ordinary click event, and so works on desktop
 * browsers as well as mobile.
 *
 * This directive also sets the CSS class `ng-click-active` while the element is being held
 * down (by a mouse click or touch) so you can restyle the depressed element if you wish.
 *
 * @element ANY
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate
 * upon tap. (Event object is available as `$event`)
 *
 * @example
    <example module="ngClickExample" deps="angular-touch.js">
      <file name="index.html">
        <button ng-click="count = count + 1" ng-init="count=0">
          Increment
        </button>
        count: {{ count }}
      </file>
      <file name="script.js">
        angular.module('ngClickExample', ['ngTouch']);
      </file>
    </example>
 */

ngTouch.config(['$provide', function($provide) {
  $provide.decorator('ngClickDirective', ['$delegate', function($delegate) {
    // drop the default ngClick directive
    $delegate.shift();
    return $delegate;
  }]);
}]);

ngTouch.directive('ngClick', ['$parse', '$timeout', '$rootElement',
    function($parse, $timeout, $rootElement) {
  var TAP_DURATION = 750; // Shorter than 750ms is a tap, longer is a taphold or drag.
  var MOVE_TOLERANCE = 12; // 12px seems to work in most mobile browsers.
  var PREVENT_DURATION = 2500; // 2.5 seconds maximum from preventGhostClick call to click
  var CLICKBUSTER_THRESHOLD = 25; // 25 pixels in any dimension is the limit for busting clicks.

  var ACTIVE_CLASS_NAME = 'ng-click-active';
  var lastPreventedTime;
  var touchCoordinates;
  var lastLabelClickCoordinates;


  // TAP EVENTS AND GHOST CLICKS
  //
  // Why tap events?
  // Mobile browsers detect a tap, then wait a moment (usually ~300ms) to see if you're
  // double-tapping, and then fire a click event.
  //
  // This delay sucks and makes mobile apps feel unresponsive.
  // So we detect touchstart, touchcancel and touchend ourselves and determine when
  // the user has tapped on something.
  //
  // What happens when the browser then generates a click event?
  // The browser, of course, also detects the tap and fires a click after a delay. This results in
  // tapping/clicking twice. We do "clickbusting" to prevent it.
  //
  // How does it work?
  // We attach global touchstart and click handlers, that run during the capture (early) phase.
  // So the sequence for a tap is:
  // - global touchstart: Sets an "allowable region" at the point touched.
  // - element's touchstart: Starts a touch
  // (- touchcancel ends the touch, no click follows)
  // - element's touchend: Determines if the tap is valid (didn't move too far away, didn't hold
  //   too long) and fires the user's tap handler. The touchend also calls preventGhostClick().
  // - preventGhostClick() removes the allowable region the global touchstart created.
  // - The browser generates a click event.
  // - The global click handler catches the click, and checks whether it was in an allowable region.
  //     - If preventGhostClick was called, the region will have been removed, the click is busted.
  //     - If the region is still there, the click proceeds normally. Therefore clicks on links and
  //       other elements without ngTap on them work normally.
  //
  // This is an ugly, terrible hack!
  // Yeah, tell me about it. The alternatives are using the slow click events, or making our users
  // deal with the ghost clicks, so I consider this the least of evils. Fortunately Angular
  // encapsulates this ugly logic away from the user.
  //
  // Why not just put click handlers on the element?
  // We do that too, just to be sure. If the tap event caused the DOM to change,
  // it is possible another element is now in that position. To take account for these possibly
  // distinct elements, the handlers are global and care only about coordinates.

  // Checks if the coordinates are close enough to be within the region.
  function hit(x1, y1, x2, y2) {
    return Math.abs(x1 - x2) < CLICKBUSTER_THRESHOLD && Math.abs(y1 - y2) < CLICKBUSTER_THRESHOLD;
  }

  // Checks a list of allowable regions against a click location.
  // Returns true if the click should be allowed.
  // Splices out the allowable region from the list after it has been used.
  function checkAllowableRegions(touchCoordinates, x, y) {
    for (var i = 0; i < touchCoordinates.length; i += 2) {
      if (hit(touchCoordinates[i], touchCoordinates[i + 1], x, y)) {
        touchCoordinates.splice(i, i + 2);
        return true; // allowable region
      }
    }
    return false; // No allowable region; bust it.
  }

  // Global click handler that prevents the click if it's in a bustable zone and preventGhostClick
  // was called recently.
  function onClick(event) {
    if (Date.now() - lastPreventedTime > PREVENT_DURATION) {
      return; // Too old.
    }

    var touches = event.touches && event.touches.length ? event.touches : [event];
    var x = touches[0].clientX;
    var y = touches[0].clientY;
    // Work around desktop Webkit quirk where clicking a label will fire two clicks (on the label
    // and on the input element). Depending on the exact browser, this second click we don't want
    // to bust has either (0,0), negative coordinates, or coordinates equal to triggering label
    // click event
    if (x < 1 && y < 1) {
      return; // offscreen
    }
    if (lastLabelClickCoordinates &&
        lastLabelClickCoordinates[0] === x && lastLabelClickCoordinates[1] === y) {
      return; // input click triggered by label click
    }
    // reset label click coordinates on first subsequent click
    if (lastLabelClickCoordinates) {
      lastLabelClickCoordinates = null;
    }
    // remember label click coordinates to prevent click busting of trigger click event on input
    if (nodeName_(event.target) === 'label') {
      lastLabelClickCoordinates = [x, y];
    }

    // Look for an allowable region containing this click.
    // If we find one, that means it was created by touchstart and not removed by
    // preventGhostClick, so we don't bust it.
    if (checkAllowableRegions(touchCoordinates, x, y)) {
      return;
    }

    // If we didn't find an allowable region, bust the click.
    event.stopPropagation();
    event.preventDefault();

    // Blur focused form elements
    event.target && event.target.blur && event.target.blur();
  }


  // Global touchstart handler that creates an allowable region for a click event.
  // This allowable region can be removed by preventGhostClick if we want to bust it.
  function onTouchStart(event) {
    var touches = event.touches && event.touches.length ? event.touches : [event];
    var x = touches[0].clientX;
    var y = touches[0].clientY;
    touchCoordinates.push(x, y);

    $timeout(function() {
      // Remove the allowable region.
      for (var i = 0; i < touchCoordinates.length; i += 2) {
        if (touchCoordinates[i] == x && touchCoordinates[i + 1] == y) {
          touchCoordinates.splice(i, i + 2);
          return;
        }
      }
    }, PREVENT_DURATION, false);
  }

  // On the first call, attaches some event handlers. Then whenever it gets called, it creates a
  // zone around the touchstart where clicks will get busted.
  function preventGhostClick(x, y) {
    if (!touchCoordinates) {
      $rootElement[0].addEventListener('click', onClick, true);
      $rootElement[0].addEventListener('touchstart', onTouchStart, true);
      touchCoordinates = [];
    }

    lastPreventedTime = Date.now();

    checkAllowableRegions(touchCoordinates, x, y);
  }

  // Actual linking function.
  return function(scope, element, attr) {
    var clickHandler = $parse(attr.ngClick),
        tapping = false,
        tapElement,  // Used to blur the element after a tap.
        startTime,   // Used to check if the tap was held too long.
        touchStartX,
        touchStartY;

    function resetState() {
      tapping = false;
      element.removeClass(ACTIVE_CLASS_NAME);
    }

    element.on('touchstart', function(event) {
      tapping = true;
      tapElement = event.target ? event.target : event.srcElement; // IE uses srcElement.
      // Hack for Safari, which can target text nodes instead of containers.
      if (tapElement.nodeType == 3) {
        tapElement = tapElement.parentNode;
      }

      element.addClass(ACTIVE_CLASS_NAME);

      startTime = Date.now();

      // Use jQuery originalEvent
      var originalEvent = event.originalEvent || event;
      var touches = originalEvent.touches && originalEvent.touches.length ? originalEvent.touches : [originalEvent];
      var e = touches[0];
      touchStartX = e.clientX;
      touchStartY = e.clientY;
    });

    element.on('touchcancel', function(event) {
      resetState();
    });

    element.on('touchend', function(event) {
      var diff = Date.now() - startTime;

      // Use jQuery originalEvent
      var originalEvent = event.originalEvent || event;
      var touches = (originalEvent.changedTouches && originalEvent.changedTouches.length) ?
          originalEvent.changedTouches :
          ((originalEvent.touches && originalEvent.touches.length) ? originalEvent.touches : [originalEvent]);
      var e = touches[0];
      var x = e.clientX;
      var y = e.clientY;
      var dist = Math.sqrt(Math.pow(x - touchStartX, 2) + Math.pow(y - touchStartY, 2));

      if (tapping && diff < TAP_DURATION && dist < MOVE_TOLERANCE) {
        // Call preventGhostClick so the clickbuster will catch the corresponding click.
        preventGhostClick(x, y);

        // Blur the focused element (the button, probably) before firing the callback.
        // This doesn't work perfectly on Android Chrome, but seems to work elsewhere.
        // I couldn't get anything to work reliably on Android Chrome.
        if (tapElement) {
          tapElement.blur();
        }

        if (!angular.isDefined(attr.disabled) || attr.disabled === false) {
          element.triggerHandler('click', [event]);
        }
      }

      resetState();
    });

    // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
    // something else nearby.
    element.onclick = function(event) { };

    // Actual click handler.
    // There are three different kinds of clicks, only two of which reach this point.
    // - On desktop browsers without touch events, their clicks will always come here.
    // - On mobile browsers, the simulated "fast" click will call this.
    // - But the browser's follow-up slow click will be "busted" before it reaches this handler.
    // Therefore it's safe to use this directive on both mobile and desktop.
    element.on('click', function(event, touchend) {
      scope.$apply(function() {
        clickHandler(scope, {$event: (touchend || event)});
      });
    });

    element.on('mousedown', function(event) {
      element.addClass(ACTIVE_CLASS_NAME);
    });

    element.on('mousemove mouseup', function(event) {
      element.removeClass(ACTIVE_CLASS_NAME);
    });

  };
}]);

/* global ngTouch: false */

/**
 * @ngdoc directive
 * @name ngSwipeLeft
 *
 * @description
 * Specify custom behavior when an element is swiped to the left on a touchscreen device.
 * A leftward swipe is a quick, right-to-left slide of the finger.
 * Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag
 * too.
 *
 * To disable the mouse click and drag functionality, add `ng-swipe-disable-mouse` to
 * the `ng-swipe-left` or `ng-swipe-right` DOM Element.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * @element ANY
 * @param {expression} ngSwipeLeft {@link guide/expression Expression} to evaluate
 * upon left swipe. (Event object is available as `$event`)
 *
 * @example
    <example module="ngSwipeLeftExample" deps="angular-touch.js">
      <file name="index.html">
        <div ng-show="!showActions" ng-swipe-left="showActions = true">
          Some list content, like an email in the inbox
        </div>
        <div ng-show="showActions" ng-swipe-right="showActions = false">
          <button ng-click="reply()">Reply</button>
          <button ng-click="delete()">Delete</button>
        </div>
      </file>
      <file name="script.js">
        angular.module('ngSwipeLeftExample', ['ngTouch']);
      </file>
    </example>
 */

/**
 * @ngdoc directive
 * @name ngSwipeRight
 *
 * @description
 * Specify custom behavior when an element is swiped to the right on a touchscreen device.
 * A rightward swipe is a quick, left-to-right slide of the finger.
 * Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag
 * too.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * @element ANY
 * @param {expression} ngSwipeRight {@link guide/expression Expression} to evaluate
 * upon right swipe. (Event object is available as `$event`)
 *
 * @example
    <example module="ngSwipeRightExample" deps="angular-touch.js">
      <file name="index.html">
        <div ng-show="!showActions" ng-swipe-left="showActions = true">
          Some list content, like an email in the inbox
        </div>
        <div ng-show="showActions" ng-swipe-right="showActions = false">
          <button ng-click="reply()">Reply</button>
          <button ng-click="delete()">Delete</button>
        </div>
      </file>
      <file name="script.js">
        angular.module('ngSwipeRightExample', ['ngTouch']);
      </file>
    </example>
 */

function makeSwipeDirective(directiveName, direction, eventName) {
  ngTouch.directive(directiveName, ['$parse', '$swipe', function($parse, $swipe) {
    // The maximum vertical delta for a swipe should be less than 75px.
    var MAX_VERTICAL_DISTANCE = 75;
    // Vertical distance should not be more than a fraction of the horizontal distance.
    var MAX_VERTICAL_RATIO = 0.3;
    // At least a 30px lateral motion is necessary for a swipe.
    var MIN_HORIZONTAL_DISTANCE = 30;

    return function(scope, element, attr) {
      var swipeHandler = $parse(attr[directiveName]);

      var startCoords, valid;

      function validSwipe(coords) {
        // Check that it's within the coordinates.
        // Absolute vertical distance must be within tolerances.
        // Horizontal distance, we take the current X - the starting X.
        // This is negative for leftward swipes and positive for rightward swipes.
        // After multiplying by the direction (-1 for left, +1 for right), legal swipes
        // (ie. same direction as the directive wants) will have a positive delta and
        // illegal ones a negative delta.
        // Therefore this delta must be positive, and larger than the minimum.
        if (!startCoords) return false;
        var deltaY = Math.abs(coords.y - startCoords.y);
        var deltaX = (coords.x - startCoords.x) * direction;
        return valid && // Short circuit for already-invalidated swipes.
            deltaY < MAX_VERTICAL_DISTANCE &&
            deltaX > 0 &&
            deltaX > MIN_HORIZONTAL_DISTANCE &&
            deltaY / deltaX < MAX_VERTICAL_RATIO;
      }

      var pointerTypes = ['touch'];
      if (!angular.isDefined(attr['ngSwipeDisableMouse'])) {
        pointerTypes.push('mouse');
      }
      $swipe.bind(element, {
        'start': function(coords, event) {
          startCoords = coords;
          valid = true;
        },
        'cancel': function(event) {
          valid = false;
        },
        'end': function(coords, event) {
          if (validSwipe(coords)) {
            scope.$apply(function() {
              element.triggerHandler(eventName);
              swipeHandler(scope, {$event: event});
            });
          }
        }
      }, pointerTypes);
    };
  }]);
}

// Left is negative X-coordinate, right is positive.
makeSwipeDirective('ngSwipeLeft', -1, 'swipeleft');
makeSwipeDirective('ngSwipeRight', 1, 'swiperight');



})(window, window.angular);

/**
 * State-based routing for AngularJS
 * @version v0.2.15
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
  module.exports = 'ui.router';
}

(function (window, angular, undefined) {
/*jshint globalstrict:true*/
/*global angular:false*/
'use strict';

var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy;

function inherit(parent, extra) {
  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
}

function merge(dst) {
  forEach(arguments, function(obj) {
    if (obj !== dst) {
      forEach(obj, function(value, key) {
        if (!dst.hasOwnProperty(key)) dst[key] = value;
      });
    }
  });
  return dst;
}

/**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
function ancestors(first, second) {
  var path = [];

  for (var n in first.path) {
    if (first.path[n] !== second.path[n]) break;
    path.push(first.path[n]);
  }
  return path;
}

/**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
function objectKeys(object) {
  if (Object.keys) {
    return Object.keys(object);
  }
  var result = [];

  forEach(object, function(val, key) {
    result.push(key);
  });
  return result;
}

/**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
function indexOf(array, value) {
  if (Array.prototype.indexOf) {
    return array.indexOf(value, Number(arguments[2]) || 0);
  }
  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

  if (from < 0) from += len;

  for (; from < len; from++) {
    if (from in array && array[from] === value) return from;
  }
  return -1;
}

/**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
function inheritParams(currentParams, newParams, $current, $to) {
  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

  for (var i in parents) {
    if (!parents[i].params) continue;
    parentParams = objectKeys(parents[i].params);
    if (!parentParams.length) continue;

    for (var j in parentParams) {
      if (indexOf(inheritList, parentParams[j]) >= 0) continue;
      inheritList.push(parentParams[j]);
      inherited[parentParams[j]] = currentParams[parentParams[j]];
    }
  }
  return extend({}, inherited, newParams);
}

/**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
function equalForKeys(a, b, keys) {
  if (!keys) {
    keys = [];
    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
  }

  for (var i=0; i<keys.length; i++) {
    var k = keys[i];
    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
  }
  return true;
}

/**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
function filterByKeys(keys, values) {
  var filtered = {};

  forEach(keys, function (name) {
    filtered[name] = values[name];
  });
  return filtered;
}

// like _.indexBy
// when you know that your index values will be unique, or you want last-one-in to win
function indexBy(array, propName) {
  var result = {};
  forEach(array, function(item) {
    result[item[propName]] = item;
  });
  return result;
}

// extracted from underscore.js
// Return a copy of the object only containing the whitelisted properties.
function pick(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  forEach(keys, function(key) {
    if (key in obj) copy[key] = obj[key];
  });
  return copy;
}

// extracted from underscore.js
// Return a copy of the object omitting the blacklisted properties.
function omit(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  for (var key in obj) {
    if (indexOf(keys, key) == -1) copy[key] = obj[key];
  }
  return copy;
}

function pluck(collection, key) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = isFunction(key) ? key(val) : val[key];
  });
  return result;
}

function filter(collection, callback) {
  var array = isArray(collection);
  var result = array ? [] : {};
  forEach(collection, function(val, i) {
    if (callback(val, i)) {
      result[array ? result.length : i] = val;
    }
  });
  return result;
}

function map(collection, callback) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = callback(val, i);
  });
  return result;
}

/**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
angular.module('ui.router.util', ['ng']);

/**
 * @ngdoc overview
 * @name ui.router.router
 * 
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
angular.module('ui.router.router', ['ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router.state
 * 
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 * 
 */
angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 * 
 * ## The main module for ui.router 
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes. 
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router - 
 * 
 * *You'll need to include **only** this module as the dependency within your angular app.*
 * 
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
angular.module('ui.router', ['ui.router.state']);

angular.module('ui.router.compat', ['ui.router']);

/**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
$Resolve.$inject = ['$q', '$injector'];
function $Resolve(  $q,    $injector) {
  
  var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
  

  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study` 
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
  this.study = function (invocables) {
    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
    var invocableKeys = objectKeys(invocables || {});
    
    // Perform a topological sort of invocables to build an ordered plan
    var plan = [], cycle = [], visited = {};
    function visit(value, key) {
      if (visited[key] === VISIT_DONE) return;
      
      cycle.push(key);
      if (visited[key] === VISIT_IN_PROGRESS) {
        cycle.splice(0, indexOf(cycle, key));
        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
      }
      visited[key] = VISIT_IN_PROGRESS;
      
      if (isString(value)) {
        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
      } else {
        var params = $injector.annotate(value);
        forEach(params, function (param) {
          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
        });
        plan.push(key, value, params);
      }
      
      cycle.pop();
      visited[key] = VISIT_DONE;
    }
    forEach(invocables, visit);
    invocables = cycle = visited = null; // plan is all that's required
    
    function isResolve(value) {
      return isObject(value) && value.then && value.$$promises;
    }
    
    return function (locals, parent, self) {
      if (isResolve(locals) && self === undefined) {
        self = parent; parent = locals; locals = null;
      }
      if (!locals) locals = NO_LOCALS;
      else if (!isObject(locals)) {
        throw new Error("'locals' must be an object");
      }       
      if (!parent) parent = NO_PARENT;
      else if (!isResolve(parent)) {
        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
      }
      
      // To complete the overall resolution, we have to wait for the parent
      // promise and for the promise for each invokable in our plan.
      var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;
          
      function done() {
        // Merge parent values we haven't got yet and publish our own $$values
        if (!--wait) {
          if (!merged) merge(values, parent.$$values); 
          result.$$values = values;
          result.$$promises = result.$$promises || true; // keep for isResolve()
          delete result.$$inheritedValues;
          resolution.resolve(values);
        }
      }
      
      function fail(reason) {
        result.$$failure = reason;
        resolution.reject(reason);
      }

      // Short-circuit if parent has already failed
      if (isDefined(parent.$$failure)) {
        fail(parent.$$failure);
        return result;
      }
      
      if (parent.$$inheritedValues) {
        merge(values, omit(parent.$$inheritedValues, invocableKeys));
      }

      // Merge parent values if the parent has already resolved, or merge
      // parent promises and wait if the parent resolve is still in progress.
      extend(promises, parent.$$promises);
      if (parent.$$values) {
        merged = merge(values, omit(parent.$$values, invocableKeys));
        result.$$inheritedValues = omit(parent.$$values, invocableKeys);
        done();
      } else {
        if (parent.$$inheritedValues) {
          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
        }        
        parent.then(done, fail);
      }
      
      // Process each invocable in the plan, but ignore any where a local of the same name exists.
      for (var i=0, ii=plan.length; i<ii; i+=3) {
        if (locals.hasOwnProperty(plan[i])) done();
        else invoke(plan[i], plan[i+1], plan[i+2]);
      }
      
      function invoke(key, invocable, params) {
        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
        var invocation = $q.defer(), waitParams = 0;
        function onfailure(reason) {
          invocation.reject(reason);
          fail(reason);
        }
        // Wait for any parameter that we have a promise for (either from parent or from this
        // resolve; in that case study() will have made sure it's ordered before us in the plan).
        forEach(params, function (dep) {
          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
            waitParams++;
            promises[dep].then(function (result) {
              values[dep] = result;
              if (!(--waitParams)) proceed();
            }, onfailure);
          }
        });
        if (!waitParams) proceed();
        function proceed() {
          if (isDefined(result.$$failure)) return;
          try {
            invocation.resolve($injector.invoke(invocable, self, values));
            invocation.promise.then(function (result) {
              values[key] = result;
              done();
            }, onfailure);
          } catch (e) {
            onfailure(e);
          }
        }
        // Publish promise synchronously; invocations further down in the plan may depend on it.
        promises[key] = invocation.promise;
      }
      
      return result;
    };
  };
  
  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via 
   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the 
   * resulting value will be used instead. Dependencies of invocables are resolved 
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` 
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains 
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises 
   * returned by injectables have been resolved. If any invocable 
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
   * same error. A rejection of a `parent` promise (if specified) will likewise be 
   * propagated immediately. Once the `$resolve` promise has been rejected, no 
   * further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter 
   * with the same name as the injectable, which will be fulfilled from the `parent` 
   * injectable of the same name. This allows inherited values to be decorated. 
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. 
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to 
   * be a service name to be passed to `$injector.get()`. This is supported primarily 
   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
   * routes.
   *
   * @param {object} invocables functions to invoke or 
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
  this.resolve = function (invocables, locals, parent, self) {
    return this.study(invocables)(locals, parent, self);
  };
}

angular.module('ui.router.util').service('$resolve', $Resolve);


/**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
function $TemplateFactory(  $http,   $templateCache,   $injector) {

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object. 
   *
   * @param {object} config Configuration object for which to load a template. 
   * The following properties are search in the specified order, and the first one 
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to 
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning 
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via 
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for 
   * that string,or `null` if no template is configured.
   */
  this.fromConfig = function (config, params, locals) {
    return (
      isDefined(config.template) ? this.fromString(config.template, params) :
      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
      null
    );
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that 
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that 
   * string.
   */
  this.fromString = function (template, params) {
    return isFunction(template) ? template(params) : template;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   * 
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function 
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromUrl = function (url, params) {
    if (isFunction(url)) url = url(params);
    if (url == null) return null;
    else return $http
        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})
        .then(function(response) { return response.data; });
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromProvider
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromProvider = function (provider, params, locals) {
    return $injector.invoke(provider, null, locals || { params: params });
  };
}

angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

var $$UMFP; // reference to $UrlMatcherFactoryProvider

/**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 *
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 *
 * Examples:
 *
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 * @param {string} pattern  The pattern to compile into a matcher.
 * @param {Object} config  A configuration object hash:
 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
 *   an existing UrlMatcher
 *
 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the constructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New `UrlMatcher` object
 */
function UrlMatcher(pattern, config, parentMatcher) {
  config = extend({ params: {} }, isObject(config) ? config : {});

  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
  //   '*' name
  //   ':' name
  //   '{' name '}'
  //   '{' name ':' regexp '}'
  // The regular expression is somewhat complicated due to the need to allow curly braces
  // inside the regular expression. The placeholder regexp breaks down as follows:
  //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
  //    \{([\w\[\]]+)(?:\:( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
  //    [^{}\\]+                       - anything other than curly braces or backslash
  //    \\.                            - a backslash escape
  //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
  var placeholder       = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      searchPlaceholder = /([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      compiled = '^', last = 0, m,
      segments = this.segments = [],
      parentParams = parentMatcher ? parentMatcher.params : {},
      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
      paramNames = [];

  function addParameter(id, type, config, location) {
    paramNames.push(id);
    if (parentParams[id]) return parentParams[id];
    if (!/^\w+(-+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
    if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
    params[id] = new $$UMFP.Param(id, type, config, location);
    return params[id];
  }

  function quoteRegExp(string, pattern, squash, optional) {
    var surroundPattern = ['',''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
    if (!pattern) return result;
    switch(squash) {
      case false: surroundPattern = ['(', ')' + (optional ? "?" : "")]; break;
      case true:  surroundPattern = ['?(', ')?']; break;
      default:    surroundPattern = ['(' + squash + "|", ')?']; break;
    }
    return result + surroundPattern[0] + pattern + surroundPattern[1];
  }

  this.source = pattern;

  // Split into static segments separated by path parameter placeholders.
  // The number of segments is always 1 more than the number of parameters.
  function matchDetails(m, isSearch) {
    var id, regexp, segment, type, cfg, arrayMode;
    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
    cfg         = config.params[id];
    segment     = pattern.substring(last, m.index);
    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
    type        = $$UMFP.type(regexp || "string") || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
    return {
      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
    };
  }

  var p, param, segment;
  while ((m = placeholder.exec(pattern))) {
    p = matchDetails(m, false);
    if (p.segment.indexOf('?') >= 0) break; // we're into the search part

    param = addParameter(p.id, p.type, p.cfg, "path");
    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
    segments.push(p.segment);
    last = placeholder.lastIndex;
  }
  segment = pattern.substring(last);

  // Find any search parameter names and remove them from the last segment
  var i = segment.indexOf('?');

  if (i >= 0) {
    var search = this.sourceSearch = segment.substring(i);
    segment = segment.substring(0, i);
    this.sourcePath = pattern.substring(0, last + i);

    if (search.length > 0) {
      last = 0;
      while ((m = searchPlaceholder.exec(search))) {
        p = matchDetails(m, true);
        param = addParameter(p.id, p.type, p.cfg, "search");
        last = placeholder.lastIndex;
        // check if ?&
      }
    }
  } else {
    this.sourcePath = pattern;
    this.sourceSearch = '';
  }

  compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
  segments.push(segment);

  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
  this.prefix = segments[0];
  this.$$paramNames = paramNames;
}

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * <pre>
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * </pre>
 *
 * @param {string} pattern  The pattern to append.
 * @param {Object} config  An object hash of the configuration for the matcher.
 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
 */
UrlMatcher.prototype.concat = function (pattern, config) {
  // Because order of search parameters is irrelevant, we can add our own search
  // parameters to the end of the new pattern. Parse the new pattern by itself
  // and then join the bits together, but it's much easier to do this on a string level.
  var defaultConfig = {
    caseInsensitive: $$UMFP.caseInsensitive(),
    strict: $$UMFP.strictMode(),
    squash: $$UMFP.defaultSquashPolicy()
  };
  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
};

UrlMatcher.prototype.toString = function () {
  return this.source;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
 *   x: '1', q: 'hello'
 * });
 * // returns { id: 'bob', q: 'hello', r: null }
 * </pre>
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
UrlMatcher.prototype.exec = function (path, searchParams) {
  var m = this.regexp.exec(path);
  if (!m) return null;
  searchParams = searchParams || {};

  var paramNames = this.parameters(), nTotal = paramNames.length,
    nPath = this.segments.length - 1,
    values = {}, i, j, cfg, paramName;

  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

  function decodePathArray(string) {
    function reverseString(str) { return str.split("").reverse().join(""); }
    function unquoteDashes(str) { return str.replace(/\\-/g, "-"); }

    var split = reverseString(string).split(/-(?!\\)/);
    var allReversed = map(split, reverseString);
    return map(allReversed, unquoteDashes).reverse();
  }

  for (i = 0; i < nPath; i++) {
    paramName = paramNames[i];
    var param = this.params[paramName];
    var paramVal = m[i+1];
    // if the param value matches a pre-replace pair, replace the value before decoding.
    for (j = 0; j < param.replace; j++) {
      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
    }
    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
    values[paramName] = param.value(paramVal);
  }
  for (/**/; i < nTotal; i++) {
    paramName = paramNames[i];
    values[paramName] = this.params[paramName].value(searchParams[paramName]);
  }

  return values;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 *
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
UrlMatcher.prototype.parameters = function (param) {
  if (!isDefined(param)) return this.$$paramNames;
  return this.params[param] || null;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#validate
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Checks an object hash of parameters to validate their correctness according to the parameter
 * types of this `UrlMatcher`.
 *
 * @param {Object} params The object hash of parameters to validate.
 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
 */
UrlMatcher.prototype.validates = function (params) {
  return this.params.$$validates(params);
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * </pre>
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
UrlMatcher.prototype.format = function (values) {
  values = values || {};
  var segments = this.segments, params = this.parameters(), paramset = this.params;
  if (!this.validates(values)) return null;

  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

  function encodeDashes(str) { // Replace dashes with encoded "\-"
    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
  }

  for (i = 0; i < nTotal; i++) {
    var isPathParam = i < nPath;
    var name = params[i], param = paramset[name], value = param.value(values[name]);
    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
    var squash = isDefaultValue ? param.squash : false;
    var encoded = param.type.encode(value);

    if (isPathParam) {
      var nextSegment = segments[i + 1];
      if (squash === false) {
        if (encoded != null) {
          if (isArray(encoded)) {
            result += map(encoded, encodeDashes).join("-");
          } else {
            result += encodeURIComponent(encoded);
          }
        }
        result += nextSegment;
      } else if (squash === true) {
        var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
        result += nextSegment.match(capture)[1];
      } else if (isString(squash)) {
        result += squash + nextSegment;
      }
    } else {
      if (encoded == null || (isDefaultValue && squash !== false)) continue;
      if (!isArray(encoded)) encoded = [ encoded ];
      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
      result += (search ? '&' : '?') + (name + '=' + encoded);
      search = true;
    }
  }

  return result;
};

/**
 * @ngdoc object
 * @name ui.router.util.type:Type
 *
 * @description
 * Implements an interface to define custom parameter types that can be decoded from and encoded to
 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
 * objects when matching or formatting URLs, or comparing or validating parameter values.
 *
 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
 * information on registering custom types.
 *
 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
 *        properties will override the default methods and/or pattern in `Type`'s public interface.
 * @example
 * <pre>
 * {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 * </pre>
 *
 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
 *           coming from a substring of a URL.
 *
 * @returns {Object}  Returns a new `Type` object.
 */
function Type(config) {
  extend(this, config);
}

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#is
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Detects whether a value is of a particular type. Accepts a native (decoded) value
 * and determines whether it matches the current `Type` object.
 *
 * @param {*} val  The value to check.
 * @param {string} key  Optional. If the type check is happening in the context of a specific
 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
 */
Type.prototype.is = function(val, key) {
  return true;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#encode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
 * only needs to be a representation of `val` that has been coerced to a string.
 *
 * @param {*} val  The value to encode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
 */
Type.prototype.encode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#decode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 *
 * @param {string} val  The URL parameter value to decode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {*}  Returns a custom representation of the URL parameter value.
 */
Type.prototype.decode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#equals
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Determines whether two decoded values are equivalent.
 *
 * @param {*} a  A value to compare against.
 * @param {*} b  A value to compare against.
 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
 */
Type.prototype.equals = function(a, b) {
  return a == b;
};

Type.prototype.$subPattern = function() {
  var sub = this.pattern.toString();
  return sub.substr(1, sub.length - 2);
};

Type.prototype.pattern = /.*/;

Type.prototype.toString = function() { return "{Type:" + this.name + "}"; };

/** Given an encoded string, or a decoded object, returns a decoded object */
Type.prototype.$normalize = function(val) {
  return this.is(val) ? val : this.decode(val);
};

/*
 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
 * e.g.:
 * - urlmatcher pattern "/path?{queryParam[]:int}"
 * - url: "/path?queryParam=1&queryParam=2
 * - $stateParams.queryParam will be [1, 2]
 * if `mode` is "auto", then
 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
 */
Type.prototype.$asArray = function(mode, isSearch) {
  if (!mode) return this;
  if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");

  function ArrayType(type, mode) {
    function bindTo(type, callbackName) {
      return function() {
        return type[callbackName].apply(type, arguments);
      };
    }

    // Wrap non-array value as array
    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }
    // Unwrap array value for "auto" mode. Return undefined for empty array.
    function arrayUnwrap(val) {
      switch(val.length) {
        case 0: return undefined;
        case 1: return mode === "auto" ? val[0] : val;
        default: return val;
      }
    }
    function falsey(val) { return !val; }

    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
    function arrayHandler(callback, allTruthyMode) {
      return function handleArray(val) {
        val = arrayWrap(val);
        var result = map(val, callback);
        if (allTruthyMode === true)
          return filter(result, falsey).length === 0;
        return arrayUnwrap(result);
      };
    }

    // Wraps type (.equals) functions to operate on each value of an array
    function arrayEqualsHandler(callback) {
      return function handleArray(val1, val2) {
        var left = arrayWrap(val1), right = arrayWrap(val2);
        if (left.length !== right.length) return false;
        for (var i = 0; i < left.length; i++) {
          if (!callback(left[i], right[i])) return false;
        }
        return true;
      };
    }

    this.encode = arrayHandler(bindTo(type, 'encode'));
    this.decode = arrayHandler(bindTo(type, 'decode'));
    this.is     = arrayHandler(bindTo(type, 'is'), true);
    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
    this.pattern = type.pattern;
    this.$normalize = arrayHandler(bindTo(type, '$normalize'));
    this.name = type.name;
    this.$arrayMode = mode;
  }

  return new ArrayType(this, mode);
};



/**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
 * is also available to providers under the name `$urlMatcherFactoryProvider`.
 */
function $UrlMatcherFactory() {
  $$UMFP = this;

  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

  function valToString(val) { return val != null ? val.toString().replace(/\//g, "%2F") : val; }
  function valFromString(val) { return val != null ? val.toString().replace(/%2F/g, "/") : val; }

  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
    string: {
      encode: valToString,
      decode: valFromString,
      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.
      // In 0.2.x, string params are optional by default for backwards compat
      is: function(val) { return val == null || !isDefined(val) || typeof val === "string"; },
      pattern: /[^/]*/
    },
    int: {
      encode: valToString,
      decode: function(val) { return parseInt(val, 10); },
      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },
      pattern: /\d+/
    },
    bool: {
      encode: function(val) { return val ? 1 : 0; },
      decode: function(val) { return parseInt(val, 10) !== 0; },
      is: function(val) { return val === true || val === false; },
      pattern: /0|1/
    },
    date: {
      encode: function (val) {
        if (!this.is(val))
          return undefined;
        return [ val.getFullYear(),
          ('0' + (val.getMonth() + 1)).slice(-2),
          ('0' + val.getDate()).slice(-2)
        ].join("-");
      },
      decode: function (val) {
        if (this.is(val)) return val;
        var match = this.capture.exec(val);
        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
      },
      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },
      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
    },
    json: {
      encode: angular.toJson,
      decode: angular.fromJson,
      is: angular.isObject,
      equals: angular.equals,
      pattern: /[^/]*/
    },
    any: { // does not encode/decode
      encode: angular.identity,
      decode: angular.identity,
      equals: angular.equals,
      pattern: /.*/
    }
  };

  function getDefaultConfig() {
    return {
      strict: isStrictMode,
      caseInsensitive: isCaseInsensitive
    };
  }

  function isInjectable(value) {
    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
  }

  /**
   * [Internal] Get the default value of a parameter, which may be an injectable function.
   */
  $UrlMatcherFactory.$$getDefaultValue = function(config) {
    if (!isInjectable(config.value)) return config.value;
    if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
    return injector.invoke(config.value);
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URL matching should be case sensitive (the default behavior), or not.
   *
   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
   * @returns {boolean} the current value of caseInsensitive
   */
  this.caseInsensitive = function(value) {
    if (isDefined(value))
      isCaseInsensitive = value;
    return isCaseInsensitive;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#strictMode
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URLs should match trailing slashes, or not (the default behavior).
   *
   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
   * @returns {boolean} the current value of strictMode
   */
  this.strictMode = function(value) {
    if (isDefined(value))
      isStrictMode = value;
    return isStrictMode;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Sets the default behavior when generating or matching URLs with default parameter values.
   *
   * @param {string} value A string that defines the default parameter URL squashing behavior.
   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
   *             the parameter value from the URL and replace it with this string.
   */
  this.defaultSquashPolicy = function(value) {
    if (!isDefined(value)) return defaultSquashPolicy;
    if (value !== true && value !== false && !isString(value))
      throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
    defaultSquashPolicy = value;
    return value;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
   *
   * @param {string} pattern  The URL pattern.
   * @param {Object} config  The config object hash.
   * @returns {UrlMatcher}  The UrlMatcher.
   */
  this.compile = function (pattern, config) {
    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
   *          implementing all the same methods.
   */
  this.isMatcher = function (o) {
    if (!isObject(o)) return false;
    var result = true;

    forEach(UrlMatcher.prototype, function(val, name) {
      if (isFunction(val)) {
        result = result && (isDefined(o[name]) && isFunction(o[name]));
      }
    });
    return result;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#type
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
   * generate URLs with typed parameters.
   *
   * @param {string} name  The type name.
   * @param {Object|Function} definition   The type definition. See
   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
   *        runtime starts.  The result of this function is merged into the existing `definition`.
   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   *
   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
   *
   * @example
   * This is a simple example of a custom type that encodes and decodes items from an
   * array, using the array index as the URL-encoded value:
   *
   * <pre>
   * var list = ['John', 'Paul', 'George', 'Ringo'];
   *
   * $urlMatcherFactoryProvider.type('listItem', {
   *   encode: function(item) {
   *     // Represent the list item in the URL using its corresponding index
   *     return list.indexOf(item);
   *   },
   *   decode: function(item) {
   *     // Look up the list item by index
   *     return list[parseInt(item, 10)];
   *   },
   *   is: function(item) {
   *     // Ensure the item is valid by checking to see that it appears
   *     // in the list
   *     return list.indexOf(item) > -1;
   *   }
   * });
   *
   * $stateProvider.state('list', {
   *   url: "/list/{item:listItem}",
   *   controller: function($scope, $stateParams) {
   *     console.log($stateParams.item);
   *   }
   * });
   *
   * // ...
   *
   * // Changes URL to '/list/3', logs "Ringo" to the console
   * $state.go('list', { item: "Ringo" });
   * </pre>
   *
   * This is a more complex example of a type that relies on dependency injection to
   * interact with services, and uses the parameter name from the URL to infer how to
   * handle encoding and decoding parameter values:
   *
   * <pre>
   * // Defines a custom type that gets a value from a service,
   * // where each service gets different types of values from
   * // a backend API:
   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
   *
   *   // Matches up services to URL parameter names
   *   var services = {
   *     user: Users,
   *     post: Posts
   *   };
   *
   *   return {
   *     encode: function(object) {
   *       // Represent the object in the URL using its unique ID
   *       return object.id;
   *     },
   *     decode: function(value, key) {
   *       // Look up the object by ID, using the parameter
   *       // name (key) to call the correct service
   *       return services[key].findById(value);
   *     },
   *     is: function(object, key) {
   *       // Check that object is a valid dbObject
   *       return angular.isObject(object) && object.id && services[key];
   *     }
   *     equals: function(a, b) {
   *       // Check the equality of decoded objects by comparing
   *       // their unique IDs
   *       return a.id === b.id;
   *     }
   *   };
   * });
   *
   * // In a config() block, you can then attach URLs with
   * // type-annotated parameters:
   * $stateProvider.state('users', {
   *   url: "/users",
   *   // ...
   * }).state('users.item', {
   *   url: "/{user:dbObject}",
   *   controller: function($scope, $stateParams) {
   *     // $stateParams.user will now be an object returned from
   *     // the Users service
   *   },
   *   // ...
   * });
   * </pre>
   */
  this.type = function (name, definition, definitionFn) {
    if (!isDefined(definition)) return $types[name];
    if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

    $types[name] = new Type(extend({ name: name }, definition));
    if (definitionFn) {
      typeQueue.push({ name: name, def: definitionFn });
      if (!enqueue) flushTypeQueue();
    }
    return this;
  };

  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
  function flushTypeQueue() {
    while(typeQueue.length) {
      var type = typeQueue.shift();
      if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
      angular.extend($types[type.name], injector.invoke(type.def));
    }
  }

  // Register default types. Store them in the prototype of $types.
  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });
  $types = inherit($types, {});

  /* No need to document $get, since it returns this */
  this.$get = ['$injector', function ($injector) {
    injector = $injector;
    enqueue = false;
    flushTypeQueue();

    forEach(defaultTypes, function(type, name) {
      if (!$types[name]) $types[name] = new Type(type);
    });
    return this;
  }];

  this.Param = function Param(id, type, config, location) {
    var self = this;
    config = unwrapShorthand(config);
    type = getType(config, type, location);
    var arrayMode = getArrayMode();
    type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
    if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
      config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
    var isOptional = config.value !== undefined;
    var squash = getSquashPolicy(config, isOptional);
    var replace = getReplace(config, arrayMode, isOptional, squash);

    function unwrapShorthand(config) {
      var keys = isObject(config) ? objectKeys(config) : [];
      var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
                        indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
      if (isShorthand) config = { value: config };
      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
      return config;
    }

    function getType(config, urlType, location) {
      if (config.type && urlType) throw new Error("Param '"+id+"' has two type configurations.");
      if (urlType) return urlType;
      if (!config.type) return (location === "config" ? $types.any : $types.string);
      return config.type instanceof Type ? config.type : new Type(config.type);
    }

    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
    function getArrayMode() {
      var arrayDefaults = { array: (location === "search" ? "auto" : false) };
      var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
      return extend(arrayDefaults, arrayParamNomenclature, config).array;
    }

    /**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
    function getSquashPolicy(config, isOptional) {
      var squash = config.squash;
      if (!isOptional || squash === false) return false;
      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
      if (squash === true || isString(squash)) return squash;
      throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
    }

    function getReplace(config, arrayMode, isOptional, squash) {
      var replace, configuredKeys, defaultPolicy = [
        { from: "",   to: (isOptional || arrayMode ? undefined : "") },
        { from: null, to: (isOptional || arrayMode ? undefined : "") }
      ];
      replace = isArray(config.replace) ? config.replace : [];
      if (isString(squash))
        replace.push({ from: squash, to: undefined });
      configuredKeys = map(replace, function(item) { return item.from; } );
      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
    }

    /**
     * [Internal] Get the default value of a parameter, which may be an injectable function.
     */
    function $$getDefaultValue() {
      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
      var defaultValue = injector.invoke(config.$$fn);
      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
        throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
      return defaultValue;
    }

    /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
    function $value(value) {
      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }
      function $replace(value) {
        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });
        return replacement.length ? replacement[0] : value;
      }
      value = $replace(value);
      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
    }

    function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

    extend(this, {
      id: id,
      type: type,
      location: location,
      array: arrayMode,
      squash: squash,
      replace: replace,
      isOptional: isOptional,
      value: $value,
      dynamic: undefined,
      config: config,
      toString: toString
    });
  };

  function ParamSet(params) {
    extend(this, params || {});
  }

  ParamSet.prototype = {
    $$new: function() {
      return inherit(this, extend(new ParamSet(), { $$parent: this}));
    },
    $$keys: function () {
      var keys = [], chain = [], parent = this,
        ignore = objectKeys(ParamSet.prototype);
      while (parent) { chain.push(parent); parent = parent.$$parent; }
      chain.reverse();
      forEach(chain, function(paramset) {
        forEach(objectKeys(paramset), function(key) {
            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
        });
      });
      return keys;
    },
    $$values: function(paramValues) {
      var values = {}, self = this;
      forEach(self.$$keys(), function(key) {
        values[key] = self[key].value(paramValues && paramValues[key]);
      });
      return values;
    },
    $$equals: function(paramValues1, paramValues2) {
      var equal = true, self = this;
      forEach(self.$$keys(), function(key) {
        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
        if (!self[key].type.equals(left, right)) equal = false;
      });
      return equal;
    },
    $$validates: function $$validate(paramValues) {
      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
      for (i = 0; i < keys.length; i++) {
        param = this[keys[i]];
        rawVal = paramValues[keys[i]];
        if ((rawVal === undefined || rawVal === null) && param.isOptional)
          break; // There was no parameter value, but the param is optional
        normalized = param.type.$normalize(rawVal);
        if (!param.type.is(normalized))
          return false; // The value was not of the correct Type, and could not be decoded to the correct Type
        encoded = param.type.encode(normalized);
        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
      }
      return true;
    },
    $$parent: undefined
  };

  this.ParamSet = ParamSet;
}

// Register as a provider so it's available to other providers
angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);

/**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`. 
 * When `$location` changes it runs through a list of rules one by one until a 
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
function $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {
  var rules = [], otherwise = null, interceptDeferred = false, listener;

  // Returns a string that is a prefix of all strings matching the RegExp
  function regExpPrefix(re) {
    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
  }

  // Interpolates matched values into a String.replace()-style pattern
  function interpolate(pattern, match) {
    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
      return match[what === '$' ? 0 : Number(what)];
    });
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider` to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {object} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.rule = function (rule) {
    if (!isFunction(rule)) throw new Error("'rule' must be a function");
    rules.push(rule);
    return this;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalid route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     return '/a/valid/url';
   *   });
   * });
   * </pre>
   *
   * @param {string|object} rule The url path you want to redirect to or a function 
   * rule that returns the url path. The function version is passed two params: 
   * `$injector` and `$location` services, and must return a url string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.otherwise = function (rule) {
    if (isString(rule)) {
      var redirect = rule;
      rule = function () { return redirect; };
    }
    else if (!isFunction(rule)) throw new Error("'rule' must be a function");
    otherwise = rule;
    return this;
  };


  function handleIfMatch($injector, handler, match) {
    if (!match) return false;
    var result = $injector.invoke(handler, handler, { $match: match });
    return isDefined(result) ? result : true;
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching. if handle is a string, it is
   * treated as a redirect, and is interpolated according to the syntax of match
   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|object} handler The path you want to redirect your user to.
   */
  this.when = function (what, handler) {
    var redirect, handlerIsString = isString(handler);
    if (isString(what)) what = $urlMatcherFactory.compile(what);

    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
      throw new Error("invalid 'handler' in when()");

    var strategies = {
      matcher: function (what, handler) {
        if (handlerIsString) {
          redirect = $urlMatcherFactory.compile(handler);
          handler = ['$match', function ($match) { return redirect.format($match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
        }, {
          prefix: isString(what.prefix) ? what.prefix : ''
        });
      },
      regex: function (what, handler) {
        if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

        if (handlerIsString) {
          redirect = handler;
          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path()));
        }, {
          prefix: regExpPrefix(what)
        });
      }
    };

    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

    for (var n in check) {
      if (check[n]) return this.rule(strategies[n](what, handler));
    }

    throw new Error("invalid 'what' in when()");
  };

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#deferIntercept
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Disables (or enables) deferring location change interception.
   *
   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
   * defer a transition but maintain the current URL), call this method at configuration time.
   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
   * `$locationChangeSuccess` event handler.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *
   *   // Prevent $urlRouter from automatically intercepting URL changes;
   *   // this allows you to configure custom behavior in between
   *   // location changes and route synchronization:
   *   $urlRouterProvider.deferIntercept();
   *
   * }).run(function ($rootScope, $urlRouter, UserService) {
   *
   *   $rootScope.$on('$locationChangeSuccess', function(e) {
   *     // UserService is an example service for managing user state
   *     if (UserService.isLoggedIn()) return;
   *
   *     // Prevent $urlRouter's default handler from firing
   *     e.preventDefault();
   *
   *     UserService.handleLogin().then(function() {
   *       // Once the user has logged in, sync the current URL
   *       // to the router:
   *       $urlRouter.sync();
   *     });
   *   });
   *
   *   // Configures $urlRouter's listener *after* your custom listener
   *   $urlRouter.listen();
   * });
   * </pre>
   *
   * @param {boolean} defer Indicates whether to defer location change interception. Passing
            no parameter is equivalent to `true`.
   */
  this.deferIntercept = function (defer) {
    if (defer === undefined) defer = true;
    interceptDeferred = defer;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   * @requires $browser
   *
   * @description
   *
   */
  this.$get = $get;
  $get.$inject = ['$location', '$rootScope', '$injector', '$browser'];
  function $get(   $location,   $rootScope,   $injector,   $browser) {

    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

    function appendBasePath(url, isHtml5, absolute) {
      if (baseHref === '/') return url;
      if (isHtml5) return baseHref.slice(0, -1) + url;
      if (absolute) return baseHref.slice(1) + url;
      return url;
    }

    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
    function update(evt) {
      if (evt && evt.defaultPrevented) return;
      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
      lastPushedUrl = undefined;
      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
      //if (ignoreUpdate) return true;

      function check(rule) {
        var handled = rule($injector, $location);

        if (!handled) return false;
        if (isString(handled)) $location.replace().url(handled);
        return true;
      }
      var n = rules.length, i;

      for (i = 0; i < n; i++) {
        if (check(rules[i])) return;
      }
      // always check otherwise last to allow dynamic updates to the set of rules
      if (otherwise) check(otherwise);
    }

    function listen() {
      listener = listener || $rootScope.$on('$locationChangeSuccess', update);
      return listener;
    }

    if (!interceptDeferred) listen();

    return {
      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#sync
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
       * with the transition by calling `$urlRouter.sync()`.
       *
       * @example
       * <pre>
       * angular.module('app', ['ui.router'])
       *   .run(function($rootScope, $urlRouter) {
       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
       *       // Halt state change from even starting
       *       evt.preventDefault();
       *       // Perform custom logic
       *       var meetsRequirement = ...
       *       // Continue with the update and state transition if logic allows
       *       if (meetsRequirement) $urlRouter.sync();
       *     });
       * });
       * </pre>
       */
      sync: function() {
        update();
      },

      listen: function() {
        return listen();
      },

      update: function(read) {
        if (read) {
          location = $location.url();
          return;
        }
        if ($location.url() === location) return;

        $location.url(location);
        $location.replace();
      },

      push: function(urlMatcher, params, options) {
         var url = urlMatcher.format(params || {});

        // Handle the special hash param, if needed
        if (url !== null && params && params['#']) {
            url += '#' + params['#'];
        }

        $location.url(url);
        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
        if (options && options.replace) $location.replace();
      },

      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#href
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * A URL generation method that returns the compiled URL for a given
       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
       *
       * @example
       * <pre>
       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
       *   person: "bob"
       * });
       * // $bob == "/about/bob";
       * </pre>
       *
       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
       * @param {object=} options Options object. The options are:
       *
       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
       *
       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
       */
      href: function(urlMatcher, params, options) {
        if (!urlMatcher.validates(params)) return null;

        var isHtml5 = $locationProvider.html5Mode();
        if (angular.isObject(isHtml5)) {
          isHtml5 = isHtml5.enabled;
        }
        
        var url = urlMatcher.format(params);
        options = options || {};

        if (!isHtml5 && url !== null) {
          url = "#" + $locationProvider.hashPrefix() + url;
        }

        // Handle special hash param, if needed
        if (url !== null && params && params['#']) {
          url += '#' + params['#'];
        }

        url = appendBasePath(url, isHtml5, options.absolute);

        if (!options.absolute || !url) {
          return url;
        }

        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
        port = (port === 80 || port === 443 ? '' : ':' + port);

        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
      }
    };
  }
}

angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {

  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

  // Builds state properties from definition passed to registerState()
  var stateBuilder = {

    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
    // state.children = [];
    // if (parent) parent.children.push(state);
    parent: function(state) {
      if (isDefined(state.parent) && state.parent) return findState(state.parent);
      // regex matches any valid composite state name
      // would match "contact.list" but not "contacts"
      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
      return compositeName ? findState(compositeName[1]) : root;
    },

    // inherit 'data' from parent and override by own values (if any)
    data: function(state) {
      if (state.parent && state.parent.data) {
        state.data = state.self.data = extend({}, state.parent.data, state.data);
      }
      return state.data;
    },

    // Build a URLMatcher if necessary, either via a relative or absolute URL
    url: function(state) {
      var url = state.url, config = { params: state.params || {} };

      if (isString(url)) {
        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
        return (state.parent.navigable || root).url.concat(url, config);
      }

      if (!url || $urlMatcherFactory.isMatcher(url)) return url;
      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
    },

    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
    navigable: function(state) {
      return state.url ? state : (state.parent ? state.parent.navigable : null);
    },

    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
    ownParams: function(state) {
      var params = state.url && state.url.params || new $$UMFP.ParamSet();
      forEach(state.params || {}, function(config, id) {
        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
      });
      return params;
    },

    // Derive parameters for this state and ensure they're a super-set of parent's parameters
    params: function(state) {
      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();
    },

    // If there is no explicit multi-view configuration, make one up so we don't have
    // to handle both cases in the view directive later. Note that having an explicit
    // 'views' property will mean the default unnamed view properties are ignored. This
    // is also a good time to resolve view names to absolute names, so everything is a
    // straight lookup at link time.
    views: function(state) {
      var views = {};

      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
        views[name] = view;
      });
      return views;
    },

    // Keep a full path from the root down to this state as this is needed for state activation.
    path: function(state) {
      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
    },

    // Speed up $state.contains() as it's used a lot
    includes: function(state) {
      var includes = state.parent ? extend({}, state.parent.includes) : {};
      includes[state.name] = true;
      return includes;
    },

    $delegates: {}
  };

  function isRelative(stateName) {
    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
  }

  function findState(stateOrName, base) {
    if (!stateOrName) return undefined;

    var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = isRelative(name);

    if (path) {
      if (!base) throw new Error("No reference point given for path '"  + name + "'");
      base = findState(base);
      
      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

      for (; i < pathLength; i++) {
        if (rel[i] === "" && i === 0) {
          current = base;
          continue;
        }
        if (rel[i] === "^") {
          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
          current = current.parent;
          continue;
        }
        break;
      }
      rel = rel.slice(i).join(".");
      name = current.name + (current.name && rel ? "." : "") + rel;
    }
    var state = states[name];

    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
      return state;
    }
    return undefined;
  }

  function queueState(parentName, state) {
    if (!queue[parentName]) {
      queue[parentName] = [];
    }
    queue[parentName].push(state);
  }

  function flushQueuedChildren(parentName) {
    var queued = queue[parentName] || [];
    while(queued.length) {
      registerState(queued.shift());
    }
  }

  function registerState(state) {
    // Wrap a new object around the state so we can store our private details easily.
    state = inherit(state, {
      self: state,
      resolve: state.resolve || {},
      toString: function() { return this.name; }
    });

    var name = state.name;
    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

    // Get parent name
    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
        : (isString(state.parent)) ? state.parent
        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
        : '';

    // If parent is not registered yet, add state to queue and register later
    if (parentName && !states[parentName]) {
      return queueState(parentName, state.self);
    }

    for (var key in stateBuilder) {
      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
    }
    states[name] = state;

    // Register the state in the global state list and with $urlRouter if necessary.
    if (!state[abstractKey] && state.url) {
      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
          $state.transitionTo(state, $match, { inherit: true, location: false });
        }
      }]);
    }

    // Register any queued children
    flushQueuedChildren(name);

    return state;
  }

  // Checks text to see if it looks like a glob.
  function isGlob (text) {
    return text.indexOf('*') > -1;
  }

  // Returns true if glob matches current $state name.
  function doesStateMatchGlob (glob) {
    var globSegments = glob.split('.'),
        segments = $state.$current.name.split('.');

    //match single stars
    for (var i = 0, l = globSegments.length; i < l; i++) {
      if (globSegments[i] === '*') {
        segments[i] = '*';
      }
    }

    //match greedy starts
    if (globSegments[0] === '**') {
       segments = segments.slice(indexOf(segments, globSegments[1]));
       segments.unshift('**');
    }
    //match greedy ends
    if (globSegments[globSegments.length - 1] === '**') {
       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
       segments.push('**');
    }

    if (globSegments.length != segments.length) {
      return false;
    }

    return segments.join('') === globSegments.join('');
  }


  // Implicit root state that is always active
  root = registerState({
    name: '',
    url: '^',
    views: null,
    'abstract': true
  });
  root.navigable = null;


  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the 
   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
   * to add custom functionality to ui-router, for example inferring templateUrl 
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new 
   * properties within the state's internal definition. There is currently no clear 
   * use-case for this beyond accessing internal states (i.e. $state.$current), 
   * however, expect this to become increasingly relevant as we introduce additional 
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of 
   * execution of the builder functions in non-deterministic. Builder functions 
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
   *   or `null`.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to 
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view 
   *   name (i.e. "viewName@stateName") and each value is the config object 
   *   (template, controller) for the view. Even when you don't use the views object 
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template 
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state. 
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that 
   *   would pass a `$state.includes()` test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function (state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(views, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate. 
   * @param {object} func A function that is responsible for decorating the original 
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
  this.decorator = decorator;
  function decorator(name, func) {
    /*jshint validthis: true */
    if (isString(name) && !isDefined(func)) {
      return stateBuilder[name];
    }
    if (!isFunction(func) || !isString(name)) {
      return this;
    }
    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
      stateBuilder.$delegates[name] = stateBuilder[name];
    }
    stateBuilder[name] = func;
    return this;
  }

  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} stateConfig State configuration object.
   * @param {string|function=} stateConfig.template
   * <a id='template'></a>
   *   html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property 
   *   takes precedence over templateUrl.
   *   
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>template:
   *   "<h1>inline template definition</h1>" +
   *   "<div ui-view></div>"</pre>
   * <pre>template: function(params) {
   *       return "<h1>generated template</h1>"; }</pre>
   * </div>
   *
   * @param {string|function=} stateConfig.templateUrl
   * <a id='templateUrl'></a>
   *
   *   path or function that returns a path to an html
   *   template that should be used by uiView.
   *   
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
   *     applying the current state
   *
   * <pre>templateUrl: "home.html"</pre>
   * <pre>templateUrl: function(params) {
   *     return myTemplates[params.pageId]; }</pre>
   *
   * @param {function=} stateConfig.templateProvider
   * <a id='templateProvider'></a>
   *    Provider function that returns HTML content string.
   * <pre> templateProvider:
   *       function(MyTemplateService, params) {
   *         return MyTemplateService.getTemplate(params.pageId);
   *       }</pre>
   *
   * @param {string|function=} stateConfig.controller
   * <a id='controller'></a>
   *
   *  Controller fn that should be associated with newly
   *   related scope or the name of a registered controller if passed as a string.
   *   Optionally, the ControllerAs may be declared here.
   * <pre>controller: "MyRegisteredController"</pre>
   * <pre>controller:
   *     "MyRegisteredController as fooCtrl"}</pre>
   * <pre>controller: function($scope, MyService) {
   *     $scope.data = MyService.getData(); }</pre>
   *
   * @param {function=} stateConfig.controllerProvider
   * <a id='controllerProvider'></a>
   *
   * Injectable provider function that returns the actual controller or string.
   * <pre>controllerProvider:
   *   function(MyResolveData) {
   *     if (MyResolveData.foo)
   *       return "FooCtrl"
   *     else if (MyResolveData.bar)
   *       return "BarCtrl";
   *     else return function($scope) {
   *       $scope.baz = "Qux";
   *     }
   *   }</pre>
   *
   * @param {string=} stateConfig.controllerAs
   * <a id='controllerAs'></a>
   * 
   * A controller alias name. If present the controller will be
   *   published to scope under the controllerAs name.
   * <pre>controllerAs: "myCtrl"</pre>
   *
   * @param {string|object=} stateConfig.parent
   * <a id='parent'></a>
   * Optionally specifies the parent state of this state.
   *
   * <pre>parent: 'parentState'</pre>
   * <pre>parent: parentState // JS variable</pre>
   *
   * @param {object=} stateConfig.resolve
   * <a id='resolve'></a>
   *
   * An optional map&lt;string, function&gt; of dependencies which
   *   should be injected into the controller. If any of these dependencies are promises, 
   *   the router will wait for them all to be resolved before the controller is instantiated.
   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
   *   and the values of the resolved promises are injected into any controllers that reference them.
   *   If any  of the promises are rejected the $stateChangeError event is fired.
   *
   *   The map object is:
   *   
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
   *     it is injected and return value it treated as dependency. If result is a promise, it is 
   *     resolved before its value is injected into controller.
   *
   * <pre>resolve: {
   *     myResolve1:
   *       function($http, $stateParams) {
   *         return $http.get("/api/foos/"+stateParams.fooID);
   *       }
   *     }</pre>
   *
   * @param {string=} stateConfig.url
   * <a id='url'></a>
   *
   *   A url fragment with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any 
   *   parameters that were passed.
   *
   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
   *   more details on acceptable patterns )
   *
   * examples:
   * <pre>url: "/home"
   * url: "/users/:userid"
   * url: "/books/{bookid:[a-zA-Z_-]}"
   * url: "/books/{categoryid:int}"
   * url: "/books/{publishername:string}/{categoryid:int}"
   * url: "/messages?before&after"
   * url: "/messages?{before:date}&{after:date}"
   * url: "/messages/:mailboxid?{before:date}&{after:date}"
   * </pre>
   *
   * @param {object=} stateConfig.views
   * <a id='views'></a>
   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
   * manually/explicitly.
   *
   * Examples:
   *
   * Targets three named `ui-view`s in the parent state's template
   * <pre>views: {
   *     header: {
   *       controller: "headerCtrl",
   *       templateUrl: "header.html"
   *     }, body: {
   *       controller: "bodyCtrl",
   *       templateUrl: "body.html"
   *     }, footer: {
   *       controller: "footCtrl",
   *       templateUrl: "footer.html"
   *     }
   *   }</pre>
   *
   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
   * <pre>views: {
   *     'header@top': {
   *       controller: "msgHeaderCtrl",
   *       templateUrl: "msgHeader.html"
   *     }, 'body': {
   *       controller: "messagesCtrl",
   *       templateUrl: "messages.html"
   *     }
   *   }</pre>
   *
   * @param {boolean=} [stateConfig.abstract=false]
   * <a id='abstract'></a>
   * An abstract state will never be directly activated,
   *   but can provide inherited properties to its common children states.
   * <pre>abstract: true</pre>
   *
   * @param {function=} stateConfig.onEnter
   * <a id='onEnter'></a>
   *
   * Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onEnter: function(MyService, $stateParams) {
   *     MyService.foo($stateParams.myParam);
   * }</pre>
   *
   * @param {function=} stateConfig.onExit
   * <a id='onExit'></a>
   *
   * Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onExit: function(MyService, $stateParams) {
   *     MyService.cleanup($stateParams.myParam);
   * }</pre>
   *
   * @param {boolean=} [stateConfig.reloadOnSearch=true]
   * <a id='reloadOnSearch'></a>
   *
   * If `false`, will not retrigger the same state
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   * <pre>reloadOnSearch: false</pre>
   *
   * @param {object=} stateConfig.data
   * <a id='data'></a>
   *
   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
   *   prototypally inherited.  In other words, adding a data property to a state adds it to
   *   the entire subtree via prototypal inheritance.
   *
   * <pre>data: {
   *     requiredRole: 'foo'
   * } </pre>
   *
   * @param {object=} stateConfig.params
   * <a id='params'></a>
   *
   * A map which optionally configures parameters declared in the `url`, or
   *   defines additional non-url parameters.  For each parameter being
   *   configured, add a configuration object keyed to the name of the parameter.
   *
   *   Each parameter configuration object may contain the following properties:
   *
   *   - ** value ** - {object|function=}: specifies the default value for this
   *     parameter.  This implicitly sets this parameter as optional.
   *
   *     When UI-Router routes to a state and no value is
   *     specified for this parameter in the URL or transition, the
   *     default value will be used instead.  If `value` is a function,
   *     it will be injected and invoked, and the return value used.
   *
   *     *Note*: `undefined` is treated as "no default value" while `null`
   *     is treated as "the default value is `null`".
   *
   *     *Shorthand*: If you only need to configure the default value of the
   *     parameter, you may use a shorthand syntax.   In the **`params`**
   *     map, instead mapping the param name to a full parameter configuration
   *     object, simply set map it to the default parameter value, e.g.:
   *
   * <pre>// define a parameter's default value
   * params: {
   *     param1: { value: "defaultValue" }
   * }
   * // shorthand default values
   * params: {
   *     param1: "defaultValue",
   *     param2: "param2Default"
   * }</pre>
   *
   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
   *     treated as an array of values.  If you specified a Type, the value will be
   *     treated as an array of the specified Type.  Note: query parameter values
   *     default to a special `"auto"` mode.
   *
   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
   *     value (e.g.: `{ foo: '1' }`).
   *
   * <pre>params: {
   *     param1: { array: true }
   * }</pre>
   *
   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
   *     configured default squash policy.
   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
   *
   *   There are three squash settings:
   *
   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
   *       This can allow for cleaner looking URLs.
   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
   *
   * <pre>params: {
   *     param1: {
   *       value: "defaultId",
   *       squash: true
   * } }
   * // squash "defaultValue" to "~"
   * params: {
   *     param1: {
   *       value: "defaultValue",
   *       squash: "~"
   * } }
   * </pre>
   *
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   */
  this.state = state;
  function state(name, definition) {
    /*jshint validthis: true */
    if (isObject(name)) definition = name;
    else definition.name = name;
    registerState(definition);
    return this;
  }

  /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   * @requires ui.router.router.$urlRouter
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However 
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll 
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
  this.$get = $get;
  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {

    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
    var TransitionPrevented = $q.reject(new Error('transition prevented'));
    var TransitionAborted = $q.reject(new Error('transition aborted'));
    var TransitionFailed = $q.reject(new Error('transition failed'));

    // Handles the case where a state which is the target of a transition is not found, and the user
    // can optionally retry or defer the transition
    function handleRedirect(redirect, state, params, options) {
      /**
       * @ngdoc event
       * @name ui.router.state.$state#$stateNotFound
       * @eventOf ui.router.state.$state
       * @eventType broadcast on root scope
       * @description
       * Fired when a requested state **cannot be found** using the provided state name during transition.
       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
       *
       * @param {Object} event Event object.
       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
       * @param {State} fromState Current state object.
       * @param {Object} fromParams Current state params.
       *
       * @example
       *
       * <pre>
       * // somewhere, assume lazy.state has not been defined
       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
       *
       * // somewhere else
       * $scope.$on('$stateNotFound',
       * function(event, unfoundState, fromState, fromParams){
       *     console.log(unfoundState.to); // "lazy.state"
       *     console.log(unfoundState.toParams); // {a:1, b:2}
       *     console.log(unfoundState.options); // {inherit:false} + default options
       * })
       * </pre>
       */
      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

      if (evt.defaultPrevented) {
        $urlRouter.update();
        return TransitionAborted;
      }

      if (!evt.retry) {
        return null;
      }

      // Allow the handler to return a promise to defer state lookup retry
      if (options.$retry) {
        $urlRouter.update();
        return TransitionFailed;
      }
      var retryTransition = $state.transition = $q.when(evt.retry);

      retryTransition.then(function() {
        if (retryTransition !== $state.transition) return TransitionSuperseded;
        redirect.options.$retry = true;
        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
      }, function() {
        return TransitionAborted;
      });
      $urlRouter.update();

      return retryTransition;
    }

    root.locals = { resolve: null, globals: { $stateParams: {} } };

    $state = {
      params: {},
      current: root.self,
      $current: root,
      transition: null
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved,
     * controllers reinstantiated, and events re-fired.
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>
     *
     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
     * @example
     * <pre>
     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
     * //and current state is 'contacts.detail.item'
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     //will reload 'contact.detail' and 'contact.detail.item' states
     *     $state.reload('contact.detail');
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>

     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.reload = function reload(state) {
      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls 
     * `$state.transitionTo` internally but automatically sets options to 
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
     * This allows you to easily use an absolute or relative to path and specify 
     * only the parameters you'd like to update (while letting unspecified parameters 
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state, 
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
     * defined parameters. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
    $state.go = function go(to, params, options) {
      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *    if String, then will reload the state with the name given in reload, and any children.
     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.transitionTo = function transitionTo(to, toParams, options) {
      toParams = toParams || {};
      options = extend({
        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
      }, options || {});

      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
      var evt, toState = findState(to, options.relative);

      // Store the hash param for later (since it will be stripped out by various methods)
      var hash = toParams['#'];

      if (!isDefined(toState)) {
        var redirect = { to: to, toParams: toParams, options: options };
        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

        if (redirectResult) {
          return redirectResult;
        }

        // Always retry once if the $stateNotFound was not prevented
        // (handles either redirect changed or state lazy-definition)
        to = redirect.to;
        toParams = redirect.toParams;
        options = redirect.options;
        toState = findState(to, options.relative);

        if (!isDefined(toState)) {
          if (!options.relative) throw new Error("No such state '" + to + "'");
          throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
        }
      }
      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
      if (!toState.params.$$validates(toParams)) return TransitionFailed;

      toParams = toState.params.$$values(toParams);
      to = toState;

      var toPath = to.path;

      // Starting from the root of the path, keep all levels that haven't changed
      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

      if (!options.reload) {
        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      } else if (isString(options.reload) || isObject(options.reload)) {
        if (isObject(options.reload) && !options.reload.name) {
          throw new Error('Invalid reload state object');
        }
        
        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
        if (options.reload && !reloadState) {
          throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
        }

        while (state && state === fromPath[keep] && state !== reloadState) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      }

      // If we're going to the same state and all locals are kept, we've got nothing to do.
      // But clear 'transition', as we still want to cancel any other pending transitions.
      // TODO: We may not want to bump 'transition' if we're called from a location change
      // that we've initiated ourselves, because we might accidentally abort a legitimate
      // transition initiated from code?
      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
        if (hash) toParams['#'] = hash;
        $state.params = toParams;
        copy($state.params, $stateParams);
        if (options.location && to.navigable && to.navigable.url) {
          $urlRouter.push(to.navigable.url, toParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
          $urlRouter.update(true);
        }
        $state.transition = null;
        return $q.when($state.current);
      }

      // Filter parameters before we pass them to event handlers etc.
      toParams = filterByKeys(to.params.$$keys(), toParams || {});

      // Broadcast start event and cancel the transition if requested
      if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeStart
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when the state transition **begins**. You can use `event.preventDefault()`
         * to prevent the transition from happening and then the transition promise will be
         * rejected with a `'transition prevented'` value.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         *
         * @example
         *
         * <pre>
         * $rootScope.$on('$stateChangeStart',
         * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
         * </pre>
         */
        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {
          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
          $urlRouter.update();
          return TransitionPrevented;
        }
      }

      // Resolve locals for the remaining states, but don't update any global state just
      // yet -- if anything fails to resolve the current state needs to remain untouched.
      // We also set up an inheritance chain for the locals here. This allows the view directive
      // to quickly look up the correct definition for each view in the current state. Even
      // though we create the locals object itself outside resolveState(), it is initially
      // empty and gets filled asynchronously. We need to keep track of the promise for the
      // (fully resolved) current locals, and pass this down the chain.
      var resolved = $q.when(locals);

      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
        locals = toLocals[l] = inherit(locals);
        resolved = resolveState(state, toParams, state === to, resolved, locals, options);
      }

      // Once everything is resolved, we are ready to perform the actual transition
      // and return a promise for the new state. We also keep track of what the
      // current promise is, so that we can detect overlapping transitions and
      // keep only the outcome of the last transition.
      var transition = $state.transition = resolved.then(function () {
        var l, entering, exiting;

        if ($state.transition !== transition) return TransitionSuperseded;

        // Exit 'from' states not kept
        for (l = fromPath.length - 1; l >= keep; l--) {
          exiting = fromPath[l];
          if (exiting.self.onExit) {
            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
          }
          exiting.locals = null;
        }

        // Enter 'to' states not kept
        for (l = keep; l < toPath.length; l++) {
          entering = toPath[l];
          entering.locals = toLocals[l];
          if (entering.self.onEnter) {
            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
          }
        }

        // Re-add the saved hash before we start returning things
        if (hash) toParams['#'] = hash;

        // Run it again, to catch any transitions in callbacks
        if ($state.transition !== transition) return TransitionSuperseded;

        // Update globals in $state
        $state.$current = to;
        $state.current = to.self;
        $state.params = toParams;
        copy($state.params, $stateParams);
        $state.transition = null;

        if (options.location && to.navigable) {
          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
        }

        if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
        }
        $urlRouter.update(true);

        return $state.current;
      }, function (error) {
        if ($state.transition !== transition) return TransitionSuperseded;

        $state.transition = null;
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

        if (!evt.defaultPrevented) {
            $urlRouter.update();
        }

        return $q.reject(error);
      });

      return transition;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be
     * tested for strict equality against the current active params object, so all params
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * </pre>
     *
     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
     * test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it is the state.
     */
    $state.is = function is(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) { return undefined; }
      if ($state.$current !== state) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * Partial and relative names
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     *
     * // Using relative names (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
     * </pre>
     *
     * Basic globbing patterns
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name, relative name, or glob pattern
     * to be searched for within the current state name.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
     * that you'd like to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
     * .includes will test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
    $state.includes = function includes(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      if (isString(stateOrName) && isGlob(stateOrName)) {
        if (!doesStateMatchGlob(stateOrName)) {
          return false;
        }
        stateOrName = $state.$current.name;
      }

      var state = findState(stateOrName, options.relative);
      if (!isDefined(state)) { return undefined; }
      if (!isDefined($state.$current.includes[state.name])) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
    };


    /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     * 
     * @returns {string} compiled state url
     */
    $state.href = function href(stateOrName, params, options) {
      options = extend({
        lossy:    true,
        inherit:  true,
        absolute: false,
        relative: $state.$current
      }, options || {});

      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) return null;
      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
      
      var nav = (state && options.lossy) ? state.navigable : state;

      if (!nav || nav.url === undefined || nav.url === null) {
        return null;
      }
      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
        absolute: options.absolute
      });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
     * @returns {Object|Array} State configuration object or array of all objects.
     */
    $state.get = function (stateOrName, context) {
      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });
      var state = findState(stateOrName, context || $state.$current);
      return (state && state.self) ? state.self : null;
    };

    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
      // Make a restricted $stateParams with only the parameters that apply to this state if
      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
      // we also need $stateParams to be available for any $injector calls we make during the
      // dependency resolution process.
      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
      var locals = { $stateParams: $stateParams };

      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
      // We're also including $stateParams in this; that way the parameters are restricted
      // to the set that should be visible to the state, and are independent of when we update
      // the global $state and $stateParams values.
      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
      var promises = [dst.resolve.then(function (globals) {
        dst.globals = globals;
      })];
      if (inherited) promises.push(inherited);

      function resolveViews() {
        var viewsPromises = [];

        // Resolve template and dependencies for all views.
        forEach(state.views, function (view, name) {
          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
          injectables.$template = [ function () {
            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';
          }];

          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
            // References to the controller (only instantiated at link time)
            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
              var injectLocals = angular.extend({}, injectables, dst.globals);
              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
            } else {
              result.$$controller = view.controller;
            }
            // Provide access to the state itself for internal use
            result.$$state = state;
            result.$$controllerAs = view.controllerAs;
            dst[name] = result;
          }));
        });

        return $q.all(viewsPromises).then(function(){
          return dst.globals;
        });
      }

      // Wait for all the promises and then return the activation object
      return $q.all(promises).then(resolveViews).then(function (values) {
        return dst;
      });
    }

    return $state;
  }

  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
    // Return true if there are no differences in non-search (path/object) params, false if there are differences
    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
      function notSearchParam(key) {
        return fromAndToState.params[key].location != "search";
      }
      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
      return nonQueryParamSet.$$equals(fromParams, toParams);
    }

    // If reload was not explicitly requested
    // and we're transitioning to the same state we're already in
    // and    the locals didn't change
    //     or they changed in a way that doesn't merit reloading
    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
    // Then return true.
    if (!options.reload && to === from &&
      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {
      return true;
    }
  }
}

angular.module('ui.router.state')
  .value('$stateParams', {})
  .provider('$state', $StateProvider);


$ViewProvider.$inject = [];
function $ViewProvider() {

  this.$get = $get;
  /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
  $get.$inject = ['$rootScope', '$templateFactory'];
  function $get(   $rootScope,   $templateFactory) {
    return {
      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
      /**
       * @ngdoc function
       * @name ui.router.state.$view#load
       * @methodOf ui.router.state.$view
       *
       * @description
       *
       * @param {string} name name
       * @param {object} options option object.
       */
      load: function load(name, options) {
        var result, defaults = {
          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
        };
        options = extend(defaults, options);

        if (options.view) {
          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
        }
        if (result && options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$viewContentLoading
         * @eventOf ui.router.state.$view
         * @eventType broadcast on root scope
         * @description
         *
         * Fired once the view **begins loading**, *before* the DOM is rendered.
         *
         * @param {Object} event Event object.
         * @param {Object} viewConfig The view config properties (template, controller, etc).
         *
         * @example
         *
         * <pre>
         * $scope.$on('$viewContentLoading',
         * function(event, viewConfig){
         *     // Access to all the view config properties.
         *     // and one special property 'targetView'
         *     // viewConfig.targetView
         * });
         * </pre>
         */
          $rootScope.$broadcast('$viewContentLoading', options);
        }
        return result;
      }
    };
  }
}

angular.module('ui.router.state').provider('$view', $ViewProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
function $ViewScrollProvider() {

  var useAnchorScroll = false;

  /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
  this.useAnchorScroll = function () {
    useAnchorScroll = true;
  };

  /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
    if (useAnchorScroll) {
      return $anchorScroll;
    }

    return function ($element) {
      return $timeout(function () {
        $element[0].scrollIntoView();
      }, 0, false);
    };
  }];
}

angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} name A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 * 
 * @example
 * A view can be unnamed or named. 
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div> 
 * 
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a 
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div> 
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 * 
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * But typically you'll only use the views property if you name your view or have more than one view 
 * in the same template. There's not really a compelling reason to name a view if its the only one, 
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre> 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div> 
 * <div ui-view="data"></div> 
 * </pre>
 * 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 */
$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];
function $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {

  function getService() {
    return ($injector.has) ? function(service) {
      return $injector.has(service) ? $injector.get(service) : null;
    } : function(service) {
      try {
        return $injector.get(service);
      } catch (e) {
        return null;
      }
    };
  }

  var service = getService(),
      $animator = service('$animator'),
      $animate = service('$animate');

  // Returns a set of DOM manipulation functions based on which Angular version
  // it should use
  function getRenderer(attrs, scope) {
    var statics = function() {
      return {
        enter: function (element, target, cb) { target.after(element); cb(); },
        leave: function (element, cb) { element.remove(); cb(); }
      };
    };

    if ($animate) {
      return {
        enter: function(element, target, cb) {
          var promise = $animate.enter(element, null, target, cb);
          if (promise && promise.then) promise.then(cb);
        },
        leave: function(element, cb) {
          var promise = $animate.leave(element, cb);
          if (promise && promise.then) promise.then(cb);
        }
      };
    }

    if ($animator) {
      var animate = $animator && $animator(scope, attrs);

      return {
        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
        leave: function(element, cb) { animate.leave(element); cb(); }
      };
    }

    return statics();
  }

  var directive = {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    compile: function (tElement, tAttrs, $transclude) {
      return function (scope, $element, attrs) {
        var previousEl, currentEl, currentScope, latestLocals,
            onloadExp     = attrs.onload || '',
            autoScrollExp = attrs.autoscroll,
            renderer      = getRenderer(attrs, scope);

        scope.$on('$stateChangeSuccess', function() {
          updateView(false);
        });
        scope.$on('$viewContentLoading', function() {
          updateView(false);
        });

        updateView(true);

        function cleanupLastView() {
          if (previousEl) {
            previousEl.remove();
            previousEl = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }

          if (currentEl) {
            renderer.leave(currentEl, function() {
              previousEl = null;
            });

            previousEl = currentEl;
            currentEl = null;
          }
        }

        function updateView(firstTime) {
          var newScope,
              name            = getUiViewName(scope, attrs, $element, $interpolate),
              previousLocals  = name && $state.$current && $state.$current.locals[name];

          if (!firstTime && previousLocals === latestLocals) return; // nothing to do
          newScope = scope.$new();
          latestLocals = $state.$current.locals[name];

          var clone = $transclude(newScope, function(clone) {
            renderer.enter(clone, $element, function onUiViewEnter() {
              if(currentScope) {
                currentScope.$emit('$viewContentAnimationEnded');
              }

              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                $uiViewScroll(clone);
              }
            });
            cleanupLastView();
          });

          currentEl = clone;
          currentScope = newScope;
          /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description           *
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           */
          currentScope.$emit('$viewContentLoaded');
          currentScope.$eval(onloadExp);
        }
      };
    }
  };

  return directive;
}

$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
function $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {
  return {
    restrict: 'ECA',
    priority: -400,
    compile: function (tElement) {
      var initial = tElement.html();
      return function (scope, $element, attrs) {
        var current = $state.$current,
            name = getUiViewName(scope, attrs, $element, $interpolate),
            locals  = current && current.locals[name];

        if (! locals) {
          return;
        }

        $element.data('$uiView', { name: name, state: locals.$$state });
        $element.html(locals.$template ? locals.$template : initial);

        var link = $compile($element.contents());

        if (locals.$$controller) {
          locals.$scope = scope;
          locals.$element = $element;
          var controller = $controller(locals.$$controller, locals);
          if (locals.$$controllerAs) {
            scope[locals.$$controllerAs] = controller;
          }
          $element.data('$ngControllerController', controller);
          $element.children().data('$ngControllerController', controller);
        }

        link(scope);
      };
    }
  };
}

/**
 * Shared ui-view code for both directives:
 * Given scope, element, and its attributes, return the view's name
 */
function getUiViewName(scope, attrs, element, $interpolate) {
  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
  var inherited = element.inheritedData('$uiView');
  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));
}

angular.module('ui.router.state').directive('uiView', $ViewDirective);
angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

function parseStateRef(ref, current) {
  var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
  if (preparsed) ref = current + '(' + preparsed[1] + ')';
  parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
  return { state: parsed[1], paramExpr: parsed[3] || null };
}

function stateContext(el) {
  var stateData = el.parent().inheritedData('$uiView');

  if (stateData && stateData.state && stateData.state.name) {
    return stateData.state;
  }
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated 
 * URL, the directive will automatically generate & update the `href` attribute via 
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking 
 * the link will trigger a state transition with optional parameters. 
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be 
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative 
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the 
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the 
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 * 
 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
 */
$StateRefDirective.$inject = ['$state', '$timeout'];
function $StateRefDirective($state, $timeout) {
  var allowedOptions = ['location', 'inherit', 'reload', 'absolute'];

  return {
    restrict: 'A',
    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
    link: function(scope, element, attrs, uiSrefActive) {
      var ref = parseStateRef(attrs.uiSref, $state.current.name);
      var params = null, url = null, base = stateContext(element) || $state.$current;
      // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
      var hrefKind = Object.prototype.toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                 'xlink:href' : 'href';
      var newHref = null, isAnchor = element.prop("tagName").toUpperCase() === "A";
      var isForm = element[0].nodeName === "FORM";
      var attr = isForm ? "action" : hrefKind, nav = true;

      var options = { relative: base, inherit: true };
      var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};

      angular.forEach(allowedOptions, function(option) {
        if (option in optionsOverride) {
          options[option] = optionsOverride[option];
        }
      });

      var update = function(newVal) {
        if (newVal) params = angular.copy(newVal);
        if (!nav) return;

        newHref = $state.href(ref.state, params, options);

        var activeDirective = uiSrefActive[1] || uiSrefActive[0];
        if (activeDirective) {
          activeDirective.$$addStateInfo(ref.state, params);
        }
        if (newHref === null) {
          nav = false;
          return false;
        }
        attrs.$set(attr, newHref);
      };

      if (ref.paramExpr) {
        scope.$watch(ref.paramExpr, function(newVal, oldVal) {
          if (newVal !== params) update(newVal);
        }, true);
        params = angular.copy(scope.$eval(ref.paramExpr));
      }
      update();

      if (isForm) return;

      element.bind("click", function(e) {
        var button = e.which || e.button;
        if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {
          // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
          var transition = $timeout(function() {
            $state.go(ref.state, params, options);
          });
          e.preventDefault();

          // if the state has no URL, ignore one preventDefault from the <a> directive.
          var ignorePreventDefaultCount = isAnchor && !newHref ? 1: 0;
          e.preventDefault = function() {
            if (ignorePreventDefaultCount-- <= 0)
              $timeout.cancel(transition);
          };
        }
      });
    }
  };
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
 * ui-sref-active found at the same level or above the ui-sref will be used.
 *
 * Will activate when the ui-sref's target state or any child state is active. If you
 * need to activate only when the ui-sref target state is active and *not* any of
 * it's children, then you will use
 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 *
 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * The class name is interpolated **once** during the directives link time (any further changes to the
 * interpolated value are ignored).
 *
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 */

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active-eq
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
 * when the exact target state used in the `ui-sref` is active; no child states.
 *
 */
$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
function $StateRefActiveDirective($state, $stateParams, $interpolate) {
  return  {
    restrict: "A",
    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
      var states = [], activeClass;

      // There probably isn't much point in $observing this
      // uiSrefActive and uiSrefActiveEq share the same directive object with some
      // slight difference in logic routing
      activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);

      // Allow uiSref to communicate with uiSrefActive[Equals]
      this.$$addStateInfo = function (newState, newParams) {
        var state = $state.get(newState, stateContext($element));

        states.push({
          state: state || { name: newState },
          params: newParams
        });

        update();
      };

      $scope.$on('$stateChangeSuccess', update);

      // Update route state
      function update() {
        if (anyMatch()) {
          $element.addClass(activeClass);
        } else {
          $element.removeClass(activeClass);
        }
      }

      function anyMatch() {
        for (var i = 0; i < states.length; i++) {
          if (isMatch(states[i].state, states[i].params)) {
            return true;
          }
        }
        return false;
      }

      function isMatch(state, params) {
        if (typeof $attrs.uiSrefActiveEq !== 'undefined') {
          return $state.is(state.name, params);
        } else {
          return $state.includes(state.name, params);
        }
      }
    }]
  };
}

angular.module('ui.router.state')
  .directive('uiSref', $StateRefDirective)
  .directive('uiSrefActive', $StateRefActiveDirective)
  .directive('uiSrefActiveEq', $StateRefActiveDirective);

/**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
$IsStateFilter.$inject = ['$state'];
function $IsStateFilter($state) {
  var isFilter = function (state) {
    return $state.is(state);
  };
  isFilter.$stateful = true;
  return isFilter;
}

/**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
$IncludedByStateFilter.$inject = ['$state'];
function $IncludedByStateFilter($state) {
  var includesFilter = function (state) {
    return $state.includes(state);
  };
  includesFilter.$stateful = true;
  return  includesFilter;
}

angular.module('ui.router.state')
  .filter('isState', $IsStateFilter)
  .filter('includedByState', $IncludedByStateFilter);
})(window, window.angular);
(function (root, factory) {
  'use strict';

  if (typeof define === 'function' && define.amd) {
    define(['angular'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('angular'));
  } else {
    // Browser globals (root is window), we don't register it.
    factory(root.angular);
  }
}(this , function (angular) {
    'use strict';

    // RequireJS does not pass in Angular to us (will be undefined).
    // Fallback to window which should mostly be there.
    angular = (angular && angular.module ) ? angular : window.angular;

    /**
     * @ngdoc overview
     * @name ngStorage
     */

    return angular.module('ngStorage', [])

    /**
     * @ngdoc object
     * @name ngStorage.$localStorage
     * @requires $rootScope
     * @requires $window
     */

    .provider('$localStorage', _storageProvider('localStorage'))

    /**
     * @ngdoc object
     * @name ngStorage.$sessionStorage
     * @requires $rootScope
     * @requires $window
     */

    .provider('$sessionStorage', _storageProvider('sessionStorage'));

    function _storageProvider(storageType) {
        return function () {
          var storageKeyPrefix = 'ngStorage-';

          this.setKeyPrefix = function (prefix) {
            if (typeof prefix !== 'string') {
              throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setKeyPrefix() expects a String.');
            }
            storageKeyPrefix = prefix;
          };

          var serializer = angular.toJson;
          var deserializer = angular.fromJson;

          this.setSerializer = function (s) {
            if (typeof s !== 'function') {
              throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setSerializer expects a function.');
            }

            serializer = s;
          };

          this.setDeserializer = function (d) {
            if (typeof d !== 'function') {
              throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setDeserializer expects a function.');
            }

            deserializer = d;
          };

          // Note: This is not very elegant at all.
          this.get = function (key) {
            return deserializer(window[storageType].getItem(storageKeyPrefix + key));
          };

          // Note: This is not very elegant at all.
          this.set = function (key, value) {
            return window[storageType].setItem(storageKeyPrefix + key, serializer(value));
          };

          this.$get = [
              '$rootScope',
              '$window',
              '$log',
              '$timeout',

              function(
                  $rootScope,
                  $window,
                  $log,
                  $timeout
              ){
                function isStorageSupported(storageType) {

                    // Some installations of IE, for an unknown reason, throw "SCRIPT5: Error: Access is denied"
                    // when accessing window.localStorage. This happens before you try to do anything with it. Catch
                    // that error and allow execution to continue.

                    // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari
                    // when "Block cookies": "Always block" is turned on
                    var supported;
                    try {
                        supported = $window[storageType];
                    }
                    catch (err) {
                        supported = false;
                    }

                    // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage
                    // is available, but trying to call .setItem throws an exception below:
                    // "QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota."
                    if (supported && storageType === 'localStorage') {
                        var key = '__' + Math.round(Math.random() * 1e7);

                        try {
                            localStorage.setItem(key, key);
                            localStorage.removeItem(key);
                        }
                        catch (err) {
                            supported = false;
                        }
                    }

                    return supported;
                }

                // The magic number 10 is used which only works for some keyPrefixes...
                // See https://github.com/gsklee/ngStorage/issues/137
                var prefixLength = storageKeyPrefix.length;

                // #9: Assign a placeholder object if Web Storage is unavailable to prevent breaking the entire AngularJS app
                var webStorage = isStorageSupported(storageType) || ($log.warn('This browser does not support Web Storage!'), {setItem: angular.noop, getItem: angular.noop}),
                    $storage = {
                        $default: function(items) {
                            for (var k in items) {
                                angular.isDefined($storage[k]) || ($storage[k] = items[k]);
                            }

                            $storage.$sync();
                            return $storage;
                        },
                        $reset: function(items) {
                            for (var k in $storage) {
                                '$' === k[0] || (delete $storage[k] && webStorage.removeItem(storageKeyPrefix + k));
                            }

                            return $storage.$default(items);
                        },
                        $sync: function () {
                            for (var i = 0, l = webStorage.length, k; i < l; i++) {
                                // #8, #10: `webStorage.key(i)` may be an empty string (or throw an exception in IE9 if `webStorage` is empty)
                                (k = webStorage.key(i)) && storageKeyPrefix === k.slice(0, prefixLength) && ($storage[k.slice(prefixLength)] = deserializer(webStorage.getItem(k)));
                            }
                        },
                        $apply: function() {
                            var temp$storage;

                            _debounce = null;

                            if (!angular.equals($storage, _last$storage)) {
                                temp$storage = angular.copy(_last$storage);
                                angular.forEach($storage, function(v, k) {
                                    if (angular.isDefined(v) && '$' !== k[0]) {
                                        webStorage.setItem(storageKeyPrefix + k, serializer(v))
                                        delete temp$storage[k];
                                    }
                                });

                                for (var k in temp$storage) {
                                    webStorage.removeItem(storageKeyPrefix + k);
                                }

                                _last$storage = angular.copy($storage);
                            }
                        },
                    },
                    _last$storage,
                    _debounce;

                $storage.$sync();

                _last$storage = angular.copy($storage);

                $rootScope.$watch(function() {
                    _debounce || (_debounce = $timeout($storage.$apply, 100, false));
                });

                // #6: Use `$window.addEventListener` instead of `angular.element` to avoid the jQuery-specific `event.originalEvent`
                $window.addEventListener && $window.addEventListener('storage', function(event) {
                    if (storageKeyPrefix === event.key.slice(0, prefixLength)) {
                        event.newValue ? $storage[event.key.slice(prefixLength)] = deserializer(event.newValue) : delete $storage[event.key.slice(prefixLength)];

                        _last$storage = angular.copy($storage);

                        $rootScope.$apply();
                    }
                });

                $window.addEventListener && $window.addEventListener('beforeunload', function() {
                    $storage.$apply();
                });

                return $storage;
            }
        ];
      };
    }

}));

/**
 * angular-ui-utils - Swiss-Army-Knife of AngularJS tools (with no external dependencies!)
 * @version v0.2.3 - 2015-03-30
 * @link http://angular-ui.github.com
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
angular.module('ui.alias', []).config(['$compileProvider', 'uiAliasConfig', function($compileProvider, uiAliasConfig){
  'use strict';

  uiAliasConfig = uiAliasConfig || {};
  angular.forEach(uiAliasConfig, function(config, alias){
    if (angular.isString(config)) {
      config = {
        replace: true,
        template: config
      };
    }
    $compileProvider.directive(alias, function(){
      return config;
    });
  });
}]);

/**
 * General-purpose Event binding. Bind any event not natively supported by Angular
 * Pass an object with keynames for events to ui-event
 * Allows $event object and $params object to be passed
 *
 * @example <input ui-event="{ focus : 'counter++', blur : 'someCallback()' }">
 * @example <input ui-event="{ myCustomEvent : 'myEventHandler($event, $params)'}">
 *
 * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks
 */
angular.module('ui.event',[]).directive('uiEvent', ['$parse',
  function ($parse) {
    'use strict';

    return function ($scope, elm, attrs) {
      var events = $scope.$eval(attrs.uiEvent);
      angular.forEach(events, function (uiEvent, eventName) {
        var fn = $parse(uiEvent);
        elm.bind(eventName, function (evt) {
          var params = Array.prototype.slice.call(arguments);
          //Take out first paramater (event object);
          params = params.splice(1);
          fn($scope, {$event: evt, $params: params});
          if (!$scope.$$phase) {
            $scope.$apply();
          }
        });
      });
    };
  }]);

/**
 * A replacement utility for internationalization very similar to sprintf.
 *
 * @param replace {mixed} The tokens to replace depends on type
 *  string: all instances of $0 will be replaced
 *  array: each instance of $0, $1, $2 etc. will be placed with each array item in corresponding order
 *  object: all attributes will be iterated through, with :key being replaced with its corresponding value
 * @return string
 *
 * @example: 'Hello :name, how are you :day'.format({ name:'John', day:'Today' })
 * @example: 'Records $0 to $1 out of $2 total'.format(['10', '20', '3000'])
 * @example: '$0 agrees to all mentions $0 makes in the event that $0 hits a tree while $0 is driving drunk'.format('Bob')
 */
angular.module('ui.format',[]).filter('format', function(){
  'use strict';

  return function(value, replace) {
    var target = value;
    if (angular.isString(target) && replace !== undefined) {
      if (!angular.isArray(replace) && !angular.isObject(replace)) {
        replace = [replace];
      }
      if (angular.isArray(replace)) {
        var rlen = replace.length;
        var rfx = function (str, i) {
          i = parseInt(i, 10);
          return (i >= 0 && i < rlen) ? replace[i] : str;
        };
        target = target.replace(/\$([0-9]+)/g, rfx);
      }
      else {
        angular.forEach(replace, function(value, key){
          target = target.split(':' + key).join(value);
        });
      }
    }
    return target;
  };
});

/**
 * Wraps the
 * @param text {string} haystack to search through
 * @param search {string} needle to search for
 * @param [caseSensitive] {boolean} optional boolean to use case-sensitive searching
 */
angular.module('ui.highlight',[]).filter('highlight', function () {
  'use strict';

  return function (text, search, caseSensitive) {
    if (text && (search || angular.isNumber(search))) {
      text = text.toString();
      search = search.toString();
      if (caseSensitive) {
        return text.split(search).join('<span class="ui-match">' + search + '</span>');
      } else {
        return text.replace(new RegExp(search, 'gi'), '<span class="ui-match">$&</span>');
      }
    } else {
      return text;
    }
  };
});

// modeled after: angular-1.0.7/src/ng/directive/ngInclude.js
angular.module('ui.include',[])
.directive('uiInclude', ['$http', '$templateCache', '$anchorScroll', '$compile',
                 function($http,   $templateCache,   $anchorScroll,   $compile) {
  'use strict';

  return {
    restrict: 'ECA',
    terminal: true,
    compile: function(element, attr) {
      var srcExp = attr.uiInclude || attr.src,
          fragExp = attr.fragment || '',
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, element) {
        var changeCounter = 0,
            childScope;

        var clearContent = function() {
          if (childScope) {
            childScope.$destroy();
            childScope = null;
          }

          element.html('');
        };

        function ngIncludeWatchAction() {
          var thisChangeId = ++changeCounter;
          var src = scope.$eval(srcExp);
          var fragment = scope.$eval(fragExp);

          if (src) {
            $http.get(src, {cache: $templateCache}).success(function(response) {
              if (thisChangeId !== changeCounter) { return; }

              if (childScope) { childScope.$destroy(); }
              childScope = scope.$new();

              var contents;
              if (fragment) {
                contents = angular.element('<div/>').html(response).find(fragment);
              }
              else {
                contents = angular.element('<div/>').html(response).contents();
              }
              element.html(contents);
              $compile(contents)(childScope);

              if (angular.isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                $anchorScroll();
              }

              childScope.$emit('$includeContentLoaded');
              scope.$eval(onloadExp);
            }).error(function() {
              if (thisChangeId === changeCounter) { clearContent(); }
            });
          } else { clearContent(); }
        }

        scope.$watch(fragExp, ngIncludeWatchAction);
        scope.$watch(srcExp, ngIncludeWatchAction);
      };
    }
  };
}]);

/**
 * Provides an easy way to toggle a checkboxes indeterminate property
 *
 * @example <input type="checkbox" ui-indeterminate="isUnkown">
 */
angular.module('ui.indeterminate',[]).directive('uiIndeterminate', [
  function () {
    'use strict';

    return {
      compile: function(tElm, tAttrs) {
        if (!tAttrs.type || tAttrs.type.toLowerCase() !== 'checkbox') {
          return angular.noop;
        }

        return function ($scope, elm, attrs) {
          $scope.$watch(attrs.uiIndeterminate, function(newVal) {
            elm[0].indeterminate = !!newVal;
          });
        };
      }
    };
  }]);

/**
 * Converts variable-esque naming conventions to something presentational, capitalized words separated by space.
 * @param {String} value The value to be parsed and prettified.
 * @param {String} [inflector] The inflector to use. Default: humanize.
 * @return {String}
 * @example {{ 'Here Is my_phoneNumber' | inflector:'humanize' }} => Here Is My Phone Number
 *          {{ 'Here Is my_phoneNumber' | inflector:'underscore' }} => here_is_my_phone_number
 *          {{ 'Here Is my_phoneNumber' | inflector:'variable' }} => hereIsMyPhoneNumber
 */
angular.module('ui.inflector',[]).filter('inflector', function () {
  'use strict';

  function tokenize(text) {
    text = text.replace(/([A-Z])|([\-|\_])/g, function(_, $1) { return ' ' + ($1 || ''); });
    return text.replace(/\s\s+/g, ' ').trim().toLowerCase().split(' ');
  }

  function capitalizeTokens(tokens) {
    var result = [];
    angular.forEach(tokens, function(token) {
      result.push(token.charAt(0).toUpperCase() + token.substr(1));
    });
    return result;
  }

  var inflectors = {
    humanize: function (value) {
      return capitalizeTokens(tokenize(value)).join(' ');
    },
    underscore: function (value) {
      return tokenize(value).join('_');
    },
    variable: function (value) {
      value = tokenize(value);
      value = value[0] + capitalizeTokens(value.slice(1)).join('');
      return value;
    }
  };

  return function (text, inflector) {
    if (inflector !== false && angular.isString(text)) {
      inflector = inflector || 'humanize';
      return inflectors[inflector](text);
    } else {
      return text;
    }
  };
});

/**
 * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.
 *
 * It is possible to specify a default set of parameters for each jQuery plugin.
 * Under the jq key, namespace each plugin by that which will be passed to ui-jq.
 * Unfortunately, at this time you can only pre-define the first parameter.
 * @example { jq : { datepicker : { showOn:'click' } } }
 *
 * @param ui-jq {string} The $elm.[pluginName]() to call.
 * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function
 *     Multiple parameters can be separated by commas
 * @param [ui-refresh] {expression} Watch expression and refire plugin on changes
 *
 * @example <input ui-jq="datepicker" ui-options="{showOn:'click'},secondParameter,thirdParameter" ui-refresh="iChange">
 */
angular.module('ui.jq',[]).
  value('uiJqConfig',{}).
  directive('uiJq', ['uiJqConfig', '$timeout', function uiJqInjectingFunction(uiJqConfig, $timeout) {
  'use strict';


  return {
    restrict: 'A',
    compile: function uiJqCompilingFunction(tElm, tAttrs) {

      if (!angular.isFunction(tElm[tAttrs.uiJq])) {
        throw new Error('ui-jq: The "' + tAttrs.uiJq + '" function does not exist');
      }
      var options = uiJqConfig && uiJqConfig[tAttrs.uiJq];

      return function uiJqLinkingFunction(scope, elm, attrs) {

        // If change compatibility is enabled, the form input's "change" event will trigger an "input" event
        if (attrs.ngModel && elm.is('select,input,textarea')) {
          elm.bind('change', function() {
            elm.trigger('input');
          });
        }

        function createLinkOptions(){
          var linkOptions = [];

          // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method
          if (attrs.uiOptions) {
            linkOptions = scope.$eval('[' + attrs.uiOptions + ']');
            if (angular.isObject(options) && angular.isObject(linkOptions[0])) {
              linkOptions[0] = angular.extend({}, options, linkOptions[0]);
            }
          } else if (options) {
            linkOptions = [options];
          }
          return linkOptions;
        }

        // Call jQuery method and pass relevant options
        function callPlugin() {
          $timeout(function() {
            elm[attrs.uiJq].apply(elm, createLinkOptions());
          }, 0, false);
        }

        // If ui-refresh is used, re-fire the the method upon every change
        if (attrs.uiRefresh) {
          scope.$watch(attrs.uiRefresh, function() {
            callPlugin();
          });
        }
        callPlugin();
      };
    }
  };
}]);

angular.module('ui.keypress',[]).
factory('keypressHelper', ['$parse', function keypress($parse){
  'use strict';

  var keysByCode = {
    8: 'backspace',
    9: 'tab',
    13: 'enter',
    27: 'esc',
    32: 'space',
    33: 'pageup',
    34: 'pagedown',
    35: 'end',
    36: 'home',
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down',
    45: 'insert',
    46: 'delete'
  };

  var capitaliseFirstLetter = function (string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  return function(mode, scope, elm, attrs) {
    var params, combinations = [];
    params = scope.$eval(attrs['ui'+capitaliseFirstLetter(mode)]);

    // Prepare combinations for simple checking
    angular.forEach(params, function (v, k) {
      var combination, expression;
      expression = $parse(v);

      angular.forEach(k.split(' '), function(variation) {
        combination = {
          expression: expression,
          keys: {}
        };
        angular.forEach(variation.split('-'), function (value) {
          combination.keys[value] = true;
        });
        combinations.push(combination);
      });
    });

    // Check only matching of pressed keys one of the conditions
    elm.bind(mode, function (event) {
      // No need to do that inside the cycle
      var metaPressed = !!(event.metaKey && !event.ctrlKey);
      var altPressed = !!event.altKey;
      var ctrlPressed = !!event.ctrlKey;
      var shiftPressed = !!event.shiftKey;
      var keyCode = event.keyCode;

      // normalize keycodes
      if (mode === 'keypress' && !shiftPressed && keyCode >= 97 && keyCode <= 122) {
        keyCode = keyCode - 32;
      }

      // Iterate over prepared combinations
      angular.forEach(combinations, function (combination) {

        var mainKeyPressed = combination.keys[keysByCode[keyCode]] || combination.keys[keyCode.toString()];

        var metaRequired = !!combination.keys.meta;
        var altRequired = !!combination.keys.alt;
        var ctrlRequired = !!combination.keys.ctrl;
        var shiftRequired = !!combination.keys.shift;

        if (
          mainKeyPressed &&
          ( metaRequired === metaPressed ) &&
          ( altRequired === altPressed ) &&
          ( ctrlRequired === ctrlPressed ) &&
          ( shiftRequired === shiftPressed )
        ) {
          // Run the function
          scope.$apply(function () {
            combination.expression(scope, { '$event': event });
          });
        }
      });
    });
  };
}]);

/**
 * Bind one or more handlers to particular keys or their combination
 * @param hash {mixed} keyBindings Can be an object or string where keybinding expression of keys or keys combinations and AngularJS Exspressions are set. Object syntax: "{ keys1: expression1 [, keys2: expression2 [ , ... ]]}". String syntax: ""expression1 on keys1 [ and expression2 on keys2 [ and ... ]]"". Expression is an AngularJS Expression, and key(s) are dash-separated combinations of keys and modifiers (one or many, if any. Order does not matter). Supported modifiers are 'ctrl', 'shift', 'alt' and key can be used either via its keyCode (13 for Return) or name. Named keys are 'backspace', 'tab', 'enter', 'esc', 'space', 'pageup', 'pagedown', 'end', 'home', 'left', 'up', 'right', 'down', 'insert', 'delete'.
 * @example <input ui-keypress="{enter:'x = 1', 'ctrl-shift-space':'foo()', 'shift-13':'bar()'}" /> <input ui-keypress="foo = 2 on ctrl-13 and bar('hello') on shift-esc" />
 **/
angular.module('ui.keypress').directive('uiKeydown', ['keypressHelper', function(keypressHelper){
  'use strict';

  return {
    link: function (scope, elm, attrs) {
      keypressHelper('keydown', scope, elm, attrs);
    }
  };
}]);

angular.module('ui.keypress').directive('uiKeypress', ['keypressHelper', function(keypressHelper){
  'use strict';

  return {
    link: function (scope, elm, attrs) {
      keypressHelper('keypress', scope, elm, attrs);
    }
  };
}]);

angular.module('ui.keypress').directive('uiKeyup', ['keypressHelper', function(keypressHelper){
  'use strict';

  return {
    link: function (scope, elm, attrs) {
      keypressHelper('keyup', scope, elm, attrs);
    }
  };
}]);

/*
 Attaches input mask onto input element
 */
angular.module('ui.mask', [])
  .value('uiMaskConfig', {
    'maskDefinitions': {
      '9': /\d/,
      'A': /[a-zA-Z]/,
      '*': /[a-zA-Z0-9]/
    },
    'clearOnBlur': true
  })
  .directive('uiMask', ['uiMaskConfig', '$parse', function (maskConfig, $parse) {
    'use strict';

    return {
      priority: 100,
      require: 'ngModel',
      restrict: 'A',
      compile: function uiMaskCompilingFunction(){
        var options = maskConfig;

        return function uiMaskLinkingFunction(scope, iElement, iAttrs, controller){
          var maskProcessed = false, eventsBound = false,
            maskCaretMap, maskPatterns, maskPlaceholder, maskComponents,
          // Minimum required length of the value to be considered valid
            minRequiredLength,
            value, valueMasked, isValid,
          // Vars for initializing/uninitializing
            originalPlaceholder = iAttrs.placeholder,
            originalMaxlength = iAttrs.maxlength,
          // Vars used exclusively in eventHandler()
            oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength;

          function initialize(maskAttr){
            if (!angular.isDefined(maskAttr)) {
              return uninitialize();
            }
            processRawMask(maskAttr);
            if (!maskProcessed) {
              return uninitialize();
            }
            initializeElement();
            bindEventListeners();
            return true;
          }

          function initPlaceholder(placeholderAttr) {
            if(! angular.isDefined(placeholderAttr)) {
              return;
            }

            maskPlaceholder = placeholderAttr;

            // If the mask is processed, then we need to update the value
            if (maskProcessed) {
              eventHandler();
            }
          }

          function formatter(fromModelValue){
            if (!maskProcessed) {
              return fromModelValue;
            }
            value = unmaskValue(fromModelValue || '');
            isValid = validateValue(value);
            controller.$setValidity('mask', isValid);
            return isValid && value.length ? maskValue(value) : undefined;
          }

          function parser(fromViewValue){
            if (!maskProcessed) {
              return fromViewValue;
            }
            value = unmaskValue(fromViewValue || '');
            isValid = validateValue(value);
            // We have to set viewValue manually as the reformatting of the input
            // value performed by eventHandler() doesn't happen until after
            // this parser is called, which causes what the user sees in the input
            // to be out-of-sync with what the controller's $viewValue is set to.
            controller.$viewValue = value.length ? maskValue(value) : '';
            controller.$setValidity('mask', isValid);
            if (value === '' && iAttrs.required) {
                controller.$setValidity('required', !controller.$error.required);
            }
            return isValid ? value : undefined;
          }

          var linkOptions = {};

          if (iAttrs.uiOptions) {
            linkOptions = scope.$eval('[' + iAttrs.uiOptions + ']');
            if (angular.isObject(linkOptions[0])) {
              // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge
              linkOptions = (function(original, current){
                for(var i in original) {
                  if (Object.prototype.hasOwnProperty.call(original, i)) {
                    if (current[i] === undefined) {
                      current[i] = angular.copy(original[i]);
                    } else {
                      angular.extend(current[i], original[i]);
                    }
                  }
                }
                return current;
              })(options, linkOptions[0]);
            }
          } else {
            linkOptions = options;
          }

          iAttrs.$observe('uiMask', initialize);
          iAttrs.$observe('placeholder', initPlaceholder);
          var modelViewValue = false;
          iAttrs.$observe('modelViewValue', function(val) {
            if(val === 'true') {
              modelViewValue = true;
            }
          });
          scope.$watch(iAttrs.ngModel, function(val) {
            if(modelViewValue && val) {
              var model = $parse(iAttrs.ngModel);
              model.assign(scope, controller.$viewValue);
            }
          });
          controller.$formatters.push(formatter);
          controller.$parsers.push(parser);

          function uninitialize(){
            maskProcessed = false;
            unbindEventListeners();

            if (angular.isDefined(originalPlaceholder)) {
              iElement.attr('placeholder', originalPlaceholder);
            } else {
              iElement.removeAttr('placeholder');
            }

            if (angular.isDefined(originalMaxlength)) {
              iElement.attr('maxlength', originalMaxlength);
            } else {
              iElement.removeAttr('maxlength');
            }

            iElement.val(controller.$modelValue);
            controller.$viewValue = controller.$modelValue;
            return false;
          }

          function initializeElement(){
            value = oldValueUnmasked = unmaskValue(controller.$viewValue || '');
            valueMasked = oldValue = maskValue(value);
            isValid = validateValue(value);
            var viewValue = isValid && value.length ? valueMasked : '';
            if (iAttrs.maxlength) { // Double maxlength to allow pasting new val at end of mask
              iElement.attr('maxlength', maskCaretMap[maskCaretMap.length - 1] * 2);
            }
            iElement.attr('placeholder', maskPlaceholder);
            iElement.val(viewValue);
            controller.$viewValue = viewValue;
            // Not using $setViewValue so we don't clobber the model value and dirty the form
            // without any kind of user interaction.
          }

          function bindEventListeners(){
            if (eventsBound) {
              return;
            }
            iElement.bind('blur', blurHandler);
            iElement.bind('mousedown mouseup', mouseDownUpHandler);
            iElement.bind('input keyup click focus', eventHandler);
            eventsBound = true;
          }

          function unbindEventListeners(){
            if (!eventsBound) {
              return;
            }
            iElement.unbind('blur', blurHandler);
            iElement.unbind('mousedown', mouseDownUpHandler);
            iElement.unbind('mouseup', mouseDownUpHandler);
            iElement.unbind('input', eventHandler);
            iElement.unbind('keyup', eventHandler);
            iElement.unbind('click', eventHandler);
            iElement.unbind('focus', eventHandler);
            eventsBound = false;
          }

          function validateValue(value){
            // Zero-length value validity is ngRequired's determination
            return value.length ? value.length >= minRequiredLength : true;
          }

          function unmaskValue(value){
            var valueUnmasked = '',
              maskPatternsCopy = maskPatterns.slice();
            // Preprocess by stripping mask components from value
            value = value.toString();
            angular.forEach(maskComponents, function (component){
              value = value.replace(component, '');
            });
            angular.forEach(value.split(''), function (chr){
              if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {
                valueUnmasked += chr;
                maskPatternsCopy.shift();
              }
            });
            return valueUnmasked;
          }

          function maskValue(unmaskedValue){
            var valueMasked = '',
                maskCaretMapCopy = maskCaretMap.slice();

            angular.forEach(maskPlaceholder.split(''), function (chr, i){
              if (unmaskedValue.length && i === maskCaretMapCopy[0]) {
                valueMasked  += unmaskedValue.charAt(0) || '_';
                unmaskedValue = unmaskedValue.substr(1);
                maskCaretMapCopy.shift();
              }
              else {
                valueMasked += chr;
              }
            });
            return valueMasked;
          }

          function getPlaceholderChar(i) {
            var placeholder = iAttrs.placeholder;

            if (typeof placeholder !== 'undefined' && placeholder[i]) {
              return placeholder[i];
            } else {
              return '_';
            }
          }

          // Generate array of mask components that will be stripped from a masked value
          // before processing to prevent mask components from being added to the unmasked value.
          // E.g., a mask pattern of '+7 9999' won't have the 7 bleed into the unmasked value.
          // If a maskable char is followed by a mask char and has a mask
          // char behind it, we'll split it into it's own component so if
          // a user is aggressively deleting in the input and a char ahead
          // of the maskable char gets deleted, we'll still be able to strip
          // it in the unmaskValue() preprocessing.
          function getMaskComponents() {
            return maskPlaceholder.replace(/[_]+/g, '_').replace(/([^_]+)([a-zA-Z0-9])([^_])/g, '$1$2_$3').split('_');
          }

          function processRawMask(mask){
            var characterCount = 0;

            maskCaretMap    = [];
            maskPatterns    = [];
            maskPlaceholder = '';

            if (typeof mask === 'string') {
              minRequiredLength = 0;

              var isOptional = false,
                  numberOfOptionalCharacters = 0,
                  splitMask  = mask.split('');

              angular.forEach(splitMask, function (chr, i){
                if (linkOptions.maskDefinitions[chr]) {

                  maskCaretMap.push(characterCount);

                  maskPlaceholder += getPlaceholderChar(i - numberOfOptionalCharacters);
                  maskPatterns.push(linkOptions.maskDefinitions[chr]);

                  characterCount++;
                  if (!isOptional) {
                    minRequiredLength++;
                  }
                }
                else if (chr === '?') {
                  isOptional = true;
                  numberOfOptionalCharacters++;
                }
                else {
                  maskPlaceholder += chr;
                  characterCount++;
                }
              });
            }
            // Caret position immediately following last position is valid.
            maskCaretMap.push(maskCaretMap.slice().pop() + 1);

            maskComponents = getMaskComponents();
            maskProcessed  = maskCaretMap.length > 1 ? true : false;
          }

          function blurHandler(){
            if (linkOptions.clearOnBlur) {
              oldCaretPosition = 0;
              oldSelectionLength = 0;
              if (!isValid || value.length === 0) {
                valueMasked = '';
                iElement.val('');
                scope.$apply(function () {
                  controller.$setViewValue('');
                });
              }
            }
          }

          function mouseDownUpHandler(e){
            if (e.type === 'mousedown') {
              iElement.bind('mouseout', mouseoutHandler);
            } else {
              iElement.unbind('mouseout', mouseoutHandler);
            }
          }

          iElement.bind('mousedown mouseup', mouseDownUpHandler);

          function mouseoutHandler(){
            /*jshint validthis: true */
            oldSelectionLength = getSelectionLength(this);
            iElement.unbind('mouseout', mouseoutHandler);
          }

          function eventHandler(e){
            /*jshint validthis: true */
            e = e || {};
            // Allows more efficient minification
            var eventWhich = e.which,
              eventType = e.type;

            // Prevent shift and ctrl from mucking with old values
            if (eventWhich === 16 || eventWhich === 91) { return;}

            var val = iElement.val(),
              valOld = oldValue,
              valMasked,
              valUnmasked = unmaskValue(val),
              valUnmaskedOld = oldValueUnmasked,
              valAltered = false,

              caretPos = getCaretPosition(this) || 0,
              caretPosOld = oldCaretPosition || 0,
              caretPosDelta = caretPos - caretPosOld,
              caretPosMin = maskCaretMap[0],
              caretPosMax = maskCaretMap[valUnmasked.length] || maskCaretMap.slice().shift(),

              selectionLenOld = oldSelectionLength || 0,
              isSelected = getSelectionLength(this) > 0,
              wasSelected = selectionLenOld > 0,

            // Case: Typing a character to overwrite a selection
              isAddition = (val.length > valOld.length) || (selectionLenOld && val.length > valOld.length - selectionLenOld),
            // Case: Delete and backspace behave identically on a selection
              isDeletion = (val.length < valOld.length) || (selectionLenOld && val.length === valOld.length - selectionLenOld),
              isSelection = (eventWhich >= 37 && eventWhich <= 40) && e.shiftKey, // Arrow key codes

              isKeyLeftArrow = eventWhich === 37,
            // Necessary due to "input" event not providing a key code
              isKeyBackspace = eventWhich === 8 || (eventType !== 'keyup' && isDeletion && (caretPosDelta === -1)),
              isKeyDelete = eventWhich === 46 || (eventType !== 'keyup' && isDeletion && (caretPosDelta === 0 ) && !wasSelected),

            // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below
            // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of
            // non-mask character. Also applied to click since users are (arguably) more likely to backspace
            // a character when clicking within a filled input.
              caretBumpBack = (isKeyLeftArrow || isKeyBackspace || eventType === 'click') && caretPos > caretPosMin;

            oldSelectionLength = getSelectionLength(this);

            // These events don't require any action
            if (isSelection || (isSelected && (eventType === 'click' || eventType === 'keyup'))) {
              return;
            }

            // Value Handling
            // ==============

            // User attempted to delete but raw value was unaffected--correct this grievous offense
            if ((eventType === 'input') && isDeletion && !wasSelected && valUnmasked === valUnmaskedOld) {
              while (isKeyBackspace && caretPos > caretPosMin && !isValidCaretPosition(caretPos)) {
                caretPos--;
              }
              while (isKeyDelete && caretPos < caretPosMax && maskCaretMap.indexOf(caretPos) === -1) {
                caretPos++;
              }
              var charIndex = maskCaretMap.indexOf(caretPos);
              // Strip out non-mask character that user would have deleted if mask hadn't been in the way.
              valUnmasked = valUnmasked.substring(0, charIndex) + valUnmasked.substring(charIndex + 1);
              valAltered = true;
            }

            // Update values
            valMasked = maskValue(valUnmasked);

            oldValue = valMasked;
            oldValueUnmasked = valUnmasked;
            iElement.val(valMasked);
            if (valAltered) {
              // We've altered the raw value after it's been $digest'ed, we need to $apply the new value.
              scope.$apply(function (){
                controller.$setViewValue(valUnmasked);
              });
            }

            // Caret Repositioning
            // ===================

            // Ensure that typing always places caret ahead of typed character in cases where the first char of
            // the input is a mask char and the caret is placed at the 0 position.
            if (isAddition && (caretPos <= caretPosMin)) {
              caretPos = caretPosMin + 1;
            }

            if (caretBumpBack) {
              caretPos--;
            }

            // Make sure caret is within min and max position limits
            caretPos = caretPos > caretPosMax ? caretPosMax : caretPos < caretPosMin ? caretPosMin : caretPos;

            // Scoot the caret back or forth until it's in a non-mask position and within min/max position limits
            while (!isValidCaretPosition(caretPos) && caretPos > caretPosMin && caretPos < caretPosMax) {
              caretPos += caretBumpBack ? -1 : 1;
            }

            if ((caretBumpBack && caretPos < caretPosMax) || (isAddition && !isValidCaretPosition(caretPosOld))) {
              caretPos++;
            }
            oldCaretPosition = caretPos;
            setCaretPosition(this, caretPos);
          }

          function isValidCaretPosition(pos){ return maskCaretMap.indexOf(pos) > -1; }

          function getCaretPosition(input){
            if (!input) return 0;
            if (input.selectionStart !== undefined) {
              return input.selectionStart;
            } else if (document.selection) {
              // Curse you IE
              input.focus();
              var selection = document.selection.createRange();
              selection.moveStart('character', input.value ? -input.value.length : 0);
              return selection.text.length;
            }
            return 0;
          }

          function setCaretPosition(input, pos){
            if (!input) return 0;
            if (input.offsetWidth === 0 || input.offsetHeight === 0) {
              return; // Input's hidden
            }
            if (input.setSelectionRange) {
              input.focus();
              input.setSelectionRange(pos, pos);
            }
            else if (input.createTextRange) {
              // Curse you IE
              var range = input.createTextRange();
              range.collapse(true);
              range.moveEnd('character', pos);
              range.moveStart('character', pos);
              range.select();
            }
          }

          function getSelectionLength(input){
            if (!input) return 0;
            if (input.selectionStart !== undefined) {
              return (input.selectionEnd - input.selectionStart);
            }
            if (document.selection) {
              return (document.selection.createRange().text.length);
            }
            return 0;
          }

          // https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf
          if (!Array.prototype.indexOf) {
            Array.prototype.indexOf = function (searchElement /*, fromIndex */){
              if (this === null) {
                throw new TypeError();
              }
              var t = Object(this);
              var len = t.length >>> 0;
              if (len === 0) {
                return -1;
              }
              var n = 0;
              if (arguments.length > 1) {
                n = Number(arguments[1]);
                if (n !== n) { // shortcut for verifying if it's NaN
                  n = 0;
                } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
                  n = (n > 0 || -1) * Math.floor(Math.abs(n));
                }
              }
              if (n >= len) {
                return -1;
              }
              var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
              for (; k < len; k++) {
                if (k in t && t[k] === searchElement) {
                  return k;
                }
              }
              return -1;
            };
          }

        };
      }
    };
  }
]);

/**
 * Add a clear button to form inputs to reset their value
 */
angular.module('ui.reset',[]).value('uiResetConfig',null).directive('uiReset', ['uiResetConfig', function (uiResetConfig) {
  'use strict';

  var resetValue = null;
  if (uiResetConfig !== undefined){
      resetValue = uiResetConfig;
  }
  return {
    require: 'ngModel',
    link: function (scope, elm, attrs, ctrl) {
      var aElement;
      aElement = angular.element('<a class="ui-reset" />');
      elm.wrap('<span class="ui-resetwrap" />').after(aElement);
      aElement.bind('click', function (e) {
        e.preventDefault();
        scope.$apply(function () {
          if (attrs.uiReset){
            ctrl.$setViewValue(scope.$eval(attrs.uiReset));
          }else{
            ctrl.$setViewValue(resetValue);
          }
          ctrl.$render();
        });
      });
    }
  };
}]);

/**
 * Set a $uiRoute boolean to see if the current route matches
 */
angular.module('ui.route', []).directive('uiRoute', ['$location', '$parse', function ($location, $parse) {
  'use strict';

  return {
    restrict: 'AC',
    scope: true,
    compile: function(tElement, tAttrs) {
      var useProperty;
      if (tAttrs.uiRoute) {
        useProperty = 'uiRoute';
      } else if (tAttrs.ngHref) {
        useProperty = 'ngHref';
      } else if (tAttrs.href) {
        useProperty = 'href';
      } else {
        throw new Error('uiRoute missing a route or href property on ' + tElement[0]);
      }
      return function ($scope, elm, attrs) {
        var modelSetter = $parse(attrs.ngModel || attrs.routeModel || '$uiRoute').assign;
        var watcher = angular.noop;

        // Used by href and ngHref
        function staticWatcher(newVal) {
          var hash = newVal.indexOf('#');
          if (hash > -1){
            newVal = newVal.substr(hash + 1);
          }
          watcher = function watchHref() {
            modelSetter($scope, ($location.path().indexOf(newVal) > -1));
          };
          watcher();
        }
        // Used by uiRoute
        function regexWatcher(newVal) {
          var hash = newVal.indexOf('#');
          if (hash > -1){
            newVal = newVal.substr(hash + 1);
          }
          watcher = function watchRegex() {
            var regexp = new RegExp('^' + newVal + '$', ['i']);
            modelSetter($scope, regexp.test($location.path()));
          };
          watcher();
        }

        switch (useProperty) {
          case 'uiRoute':
            // if uiRoute={{}} this will be undefined, otherwise it will have a value and $observe() never gets triggered
            if (attrs.uiRoute){
              regexWatcher(attrs.uiRoute);
            }else{
              attrs.$observe('uiRoute', regexWatcher);
            }
            break;
          case 'ngHref':
            // Setup watcher() every time ngHref changes
            if (attrs.ngHref){
              staticWatcher(attrs.ngHref);
            }else{
              attrs.$observe('ngHref', staticWatcher);
            }
            break;
          case 'href':
            // Setup watcher()
            staticWatcher(attrs.href);
        }

        $scope.$on('$routeChangeSuccess', function(){
          watcher();
        });

        //Added for compatibility with ui-router
        $scope.$on('$stateChangeSuccess', function(){
          watcher();
        });
      };
    }
  };
}]);

angular.module('ui.scroll.jqlite', ['ui.scroll']).service('jqLiteExtras', [
  '$log', '$window', function(console, window) {
    'use strict';

    return {
      registerFor: function(element) {
        var convertToPx, css, getMeasurements, getStyle, getWidthHeight, isWindow, scrollTo;
        css = angular.element.prototype.css;
        element.prototype.css = function(name, value) {
          var elem, self;
          self = this;
          elem = self[0];
          if (!(!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style)) {
            return css.call(self, name, value);
          }
        };
        isWindow = function(obj) {
          return obj && obj.document && obj.location && obj.alert && obj.setInterval;
        };
        scrollTo = function(self, direction, value) {
          var elem, method, preserve, prop, _ref;
          elem = self[0];
          _ref = {
            top: ['scrollTop', 'pageYOffset', 'scrollLeft'],
            left: ['scrollLeft', 'pageXOffset', 'scrollTop']
          }[direction], method = _ref[0], prop = _ref[1], preserve = _ref[2];
          if (isWindow(elem)) {
            if (angular.isDefined(value)) {
              return elem.scrollTo(self[preserve].call(self), value);
            } else {
              if (prop in elem) {
                return elem[prop];
              } else {
                return elem.document.documentElement[method];
              }
            }
          } else {
            if (angular.isDefined(value)) {
              return elem[method] = value;
            } else {
              return elem[method];
            }
          }
        };
        if (window.getComputedStyle) {
          getStyle = function(elem) {
            return window.getComputedStyle(elem, null);
          };
          convertToPx = function(elem, value) {
            return parseFloat(value);
          };
        } else {
          getStyle = function(elem) {
            return elem.currentStyle;
          };
          convertToPx = function(elem, value) {
            var core_pnum, left, result, rnumnonpx, rs, rsLeft, style;
            core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
            rnumnonpx = new RegExp('^(' + core_pnum + ')(?!px)[a-z%]+$', 'i');
            if (!rnumnonpx.test(value)) {
              return parseFloat(value);
            } else {
              style = elem.style;
              left = style.left;
              rs = elem.runtimeStyle;
              rsLeft = rs && rs.left;
              if (rs) {
                rs.left = style.left;
              }
              style.left = value;
              result = style.pixelLeft;
              style.left = left;
              if (rsLeft) {
                rs.left = rsLeft;
              }
              return result;
            }
          };
        }
        getMeasurements = function(elem, measure) {
          var base, borderA, borderB, computedMarginA, computedMarginB, computedStyle, dirA, dirB, marginA, marginB, paddingA, paddingB, _ref;
          if (isWindow(elem)) {
            base = document.documentElement[{
              height: 'clientHeight',
              width: 'clientWidth'
            }[measure]];
            return {
              base: base,
              padding: 0,
              border: 0,
              margin: 0
            };
          }
          _ref = {
            width: [elem.offsetWidth, 'Left', 'Right'],
            height: [elem.offsetHeight, 'Top', 'Bottom']
          }[measure], base = _ref[0], dirA = _ref[1], dirB = _ref[2];
          computedStyle = getStyle(elem);
          paddingA = convertToPx(elem, computedStyle['padding' + dirA]) || 0;
          paddingB = convertToPx(elem, computedStyle['padding' + dirB]) || 0;
          borderA = convertToPx(elem, computedStyle['border' + dirA + 'Width']) || 0;
          borderB = convertToPx(elem, computedStyle['border' + dirB + 'Width']) || 0;
          computedMarginA = computedStyle['margin' + dirA];
          computedMarginB = computedStyle['margin' + dirB];
          marginA = convertToPx(elem, computedMarginA) || 0;
          marginB = convertToPx(elem, computedMarginB) || 0;
          return {
            base: base,
            padding: paddingA + paddingB,
            border: borderA + borderB,
            margin: marginA + marginB
          };
        };
        getWidthHeight = function(elem, direction, measure) {
          var computedStyle, measurements, result;
          measurements = getMeasurements(elem, direction);
          if (measurements.base > 0) {
            return {
              base: measurements.base - measurements.padding - measurements.border,
              outer: measurements.base,
              outerfull: measurements.base + measurements.margin
            }[measure];
          } else {
            computedStyle = getStyle(elem);
            result = computedStyle[direction];
            if (result < 0 || result === null) {
              result = elem.style[direction] || 0;
            }
            result = parseFloat(result) || 0;
            return {
              base: result - measurements.padding - measurements.border,
              outer: result,
              outerfull: result + measurements.padding + measurements.border + measurements.margin
            }[measure];
          }
        };
        return angular.forEach({
          before: function(newElem) {
            var children, elem, i, parent, self, _i, _ref;
            self = this;
            elem = self[0];
            parent = self.parent();
            children = parent.contents();
            if (children[0] === elem) {
              return parent.prepend(newElem);
            } else {
              for (i = _i = 1, _ref = children.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
                if (children[i] === elem) {
                  angular.element(children[i - 1]).after(newElem);
                  return;
                }
              }
              throw new Error('invalid DOM structure ' + elem.outerHTML);
            }
          },
          height: function(value) {
            var self;
            self = this;
            if (angular.isDefined(value)) {
              if (angular.isNumber(value)) {
                value = value + 'px';
              }
              return css.call(self, 'height', value);
            } else {
              return getWidthHeight(this[0], 'height', 'base');
            }
          },
          outerHeight: function(option) {
            return getWidthHeight(this[0], 'height', option ? 'outerfull' : 'outer');
          },
          /*
          UIScroller no longer relies on jQuery method offset. The jQLite implementation of the method
          is kept here just for the reference. Also the offset setter method was never implemented
          */

          offset: function(value) {
            var box, doc, docElem, elem, self, win;
            self = this;
            if (arguments.length) {
              if (value === void 0) {
                return self;
              } else {
                throw new Error('offset setter method is not implemented');
              }
            }
            box = {
              top: 0,
              left: 0
            };
            elem = self[0];
            doc = elem && elem.ownerDocument;
            if (!doc) {
              return;
            }
            docElem = doc.documentElement;
            if (elem.getBoundingClientRect != null) {
              box = elem.getBoundingClientRect();
            }
            win = doc.defaultView || doc.parentWindow;
            return {
              top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
              left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
            };
          },
          scrollTop: function(value) {
            return scrollTo(this, 'top', value);
          },
          scrollLeft: function(value) {
            return scrollTo(this, 'left', value);
          }
        }, function(value, key) {
          if (!element.prototype[key]) {
            return element.prototype[key] = value;
          }
        });
      }
    };
  }
]).run([
  '$log', '$window', 'jqLiteExtras', function(console, window, jqLiteExtras) {
    'use strict';

    if (!window.jQuery) {
      return jqLiteExtras.registerFor(angular.element);
    }
  }
]);

/*
//# sourceURL=src/scripts/ui-scroll-jqlite.js
*/


/*
 globals: angular, window

 List of used element methods available in JQuery but not in JQuery Lite

 element.before(elem)
 element.height()
 element.outerHeight(true)
 element.height(value) = only for Top/Bottom padding elements
 element.scrollTop()
 element.scrollTop(value)
 */

angular.module('ui.scroll', []).directive('uiScrollViewport', [
  '$log', function() {
    'use strict';

    return {
      controller: [
        '$scope', '$element', function(scope, element) {
          this.viewport = element;
          return this;
        }
      ]
    };
  }
]).directive('uiScroll', [
  '$log', '$injector', '$rootScope', '$timeout', function(console, $injector, $rootScope, $timeout) {
    'use strict';

    return {
      require: ['?^uiScrollViewport'],
      transclude: 'element',
      priority: 1000,
      terminal: true,
      compile: function(elementTemplate, attr, linker) {
        return function($scope, element, $attr, controllers) {
          var adapter, adapterOnScope, adjustBuffer, adjustRowHeight, applyUpdate, bof, bottomVisiblePos, buffer, bufferPadding, bufferSize, builder, clipBottom, clipTop, datasource, datasourceName, doAdjustment, doDelete, doInsert, doUpdate, enqueueFetch, eof, eventListener, fetch, finalize, first, getValueChain, hideElementBeforeAppend, insert, isDatasourceValid, itemName, loading, log, match, next, pending, reload, removeFromBuffer, resizeAndScrollHandler, ridActual, scrollHeight, setValueChain, shouldLoadBottom, shouldLoadTop, showElementAfterRender, topVisible, topVisiblePos, viewport, viewportScope, wheelHandler;
          log = console.debug || console.log;
          match = $attr.uiScroll.match(/^\s*(\w+)\s+in\s+([\w\.]+)\s*$/);
          if (!match) {
            throw new Error('Expected uiScroll in form of \'_item_ in _datasource_\' but got \'' + $attr.uiScroll + '\'');
          }
          itemName = match[1];
          datasourceName = match[2];
          getValueChain = function(targetScope, target) {
            var chain;
            if (!targetScope) {
              return;
            }
            chain = target.match(/^([\w]+)\.(.+)$/);
            if (!chain || chain.length !== 3) {
              return targetScope[target];
            }
            return getValueChain(targetScope[chain[1]], chain[2]);
          };
          setValueChain = function(targetScope, target, value, doNotSet) {
            var chain;
            if (!targetScope || !target) {
              return;
            }
            if (!(chain = target.match(/^([\w]+)\.(.+)$/))) {
              if (target.indexOf('.') !== -1) {
                return;
              }
            }
            if (!chain || chain.length !== 3) {
              if (!angular.isObject(targetScope[target]) && !doNotSet) {
                return targetScope[target] = value;
              }
              return targetScope[target] = value;
            }
            if (!angular.isObject(targetScope[chain[1]]) && !doNotSet) {
              targetScope[chain[1]] = {};
            }
            return setValueChain(targetScope[chain[1]], chain[2], value, doNotSet);
          };
          datasource = getValueChain($scope, datasourceName);
          isDatasourceValid = function() {
            return angular.isObject(datasource) && typeof datasource.get === 'function';
          };
          if (!isDatasourceValid()) {
            datasource = $injector.get(datasourceName);
            if (!isDatasourceValid()) {
              throw new Error('' + datasourceName + ' is not a valid datasource');
            }
          }
          bufferSize = Math.max(3, +$attr.bufferSize || 10);
          bufferPadding = function() {
            return viewport.outerHeight() * Math.max(0.1, +$attr.padding || 0.1);
          };
          scrollHeight = function(elem) {
            var _ref;
            return (_ref = elem[0].scrollHeight) != null ? _ref : elem[0].document.documentElement.scrollHeight;
          };
          builder = null;
          linker($scope.$new(), function(template) {
            var bottomPadding, createPadding, padding, repeaterType, topPadding, viewport;
            repeaterType = template[0].localName;
            if (repeaterType === 'dl') {
              throw new Error('ui-scroll directive does not support <' + template[0].localName + '> as a repeating tag: ' + template[0].outerHTML);
            }
            if (repeaterType !== 'li' && repeaterType !== 'tr') {
              repeaterType = 'div';
            }
            viewport = controllers[0] && controllers[0].viewport ? controllers[0].viewport : angular.element(window);
            viewport.css({
              'overflow-y': 'auto',
              'display': 'block'
            });
            padding = function(repeaterType) {
              var div, result, table;
              switch (repeaterType) {
                case 'tr':
                  table = angular.element('<table><tr><td><div></div></td></tr></table>');
                  div = table.find('div');
                  result = table.find('tr');
                  result.paddingHeight = function() {
                    return div.height.apply(div, arguments);
                  };
                  return result;
                default:
                  result = angular.element('<' + repeaterType + '></' + repeaterType + '>');
                  result.paddingHeight = result.height;
                  return result;
              }
            };
            createPadding = function(padding, element, direction) {
              element[{
                top: 'before',
                bottom: 'after'
              }[direction]](padding);
              return {
                paddingHeight: function() {
                  return padding.paddingHeight.apply(padding, arguments);
                },
                insert: function(element) {
                  return padding[{
                    top: 'after',
                    bottom: 'before'
                  }[direction]](element);
                }
              };
            };
            topPadding = createPadding(padding(repeaterType), element, 'top');
            bottomPadding = createPadding(padding(repeaterType), element, 'bottom');
            $scope.$on('$destroy', template.remove);
            return builder = {
              viewport: viewport,
              topPadding: topPadding.paddingHeight,
              bottomPadding: bottomPadding.paddingHeight,
              append: bottomPadding.insert,
              prepend: topPadding.insert,
              bottomDataPos: function() {
                return scrollHeight(viewport) - bottomPadding.paddingHeight();
              },
              topDataPos: function() {
                return topPadding.paddingHeight();
              }
            };
          });
          viewport = builder.viewport;
          viewportScope = viewport.scope() || $rootScope;
          topVisible = function(item) {
            adapter.topVisible = item.scope[itemName];
            adapter.topVisibleElement = item.element;
            adapter.topVisibleScope = item.scope;
            if ($attr.topVisible) {
              setValueChain(viewportScope, $attr.topVisible, adapter.topVisible);
            }
            if ($attr.topVisibleElement) {
              setValueChain(viewportScope, $attr.topVisibleElement, adapter.topVisibleElement);
            }
            if ($attr.topVisibleScope) {
              setValueChain(viewportScope, $attr.topVisibleScope, adapter.topVisibleScope);
            }
            if (typeof datasource.topVisible === 'function') {
              return datasource.topVisible(item);
            }
          };
          loading = function(value) {
            adapter.isLoading = value;
            if ($attr.isLoading) {
              setValueChain($scope, $attr.isLoading, value);
            }
            if (typeof datasource.loading === 'function') {
              return datasource.loading(value);
            }
          };
          ridActual = 0;
          first = 1;
          next = 1;
          buffer = [];
          pending = [];
          eof = false;
          bof = false;
          removeFromBuffer = function(start, stop) {
            var i, _i;
            for (i = _i = start; start <= stop ? _i < stop : _i > stop; i = start <= stop ? ++_i : --_i) {
              buffer[i].scope.$destroy();
              buffer[i].element.remove();
            }
            return buffer.splice(start, stop - start);
          };
          reload = function() {
            ridActual++;
            first = 1;
            next = 1;
            removeFromBuffer(0, buffer.length);
            builder.topPadding(0);
            builder.bottomPadding(0);
            pending = [];
            eof = false;
            bof = false;
            return adjustBuffer(ridActual);
          };
          bottomVisiblePos = function() {
            return viewport.scrollTop() + viewport.outerHeight();
          };
          topVisiblePos = function() {
            return viewport.scrollTop();
          };
          shouldLoadBottom = function() {
            return !eof && builder.bottomDataPos() < bottomVisiblePos() + bufferPadding();
          };
          clipBottom = function() {
            var bottomHeight, i, item, itemHeight, itemTop, newRow, overage, rowTop, _i, _ref;
            bottomHeight = 0;
            overage = 0;
            for (i = _i = _ref = buffer.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
              item = buffer[i];
              itemTop = item.element.offset().top;
              newRow = rowTop !== itemTop;
              rowTop = itemTop;
              if (newRow) {
                itemHeight = item.element.outerHeight(true);
              }
              if (builder.bottomDataPos() - bottomHeight - itemHeight > bottomVisiblePos() + bufferPadding()) {
                if (newRow) {
                  bottomHeight += itemHeight;
                }
                overage++;
                eof = false;
              } else {
                if (newRow) {
                  break;
                }
                overage++;
              }
            }
            if (overage > 0) {
              builder.bottomPadding(builder.bottomPadding() + bottomHeight);
              removeFromBuffer(buffer.length - overage, buffer.length);
              return next -= overage;
            }
          };
          shouldLoadTop = function() {
            return !bof && (builder.topDataPos() > topVisiblePos() - bufferPadding());
          };
          clipTop = function() {
            var item, itemHeight, itemTop, newRow, overage, rowTop, topHeight, _i, _len;
            topHeight = 0;
            overage = 0;
            for (_i = 0, _len = buffer.length; _i < _len; _i++) {
              item = buffer[_i];
              itemTop = item.element.offset().top;
              newRow = rowTop !== itemTop;
              rowTop = itemTop;
              if (newRow) {
                itemHeight = item.element.outerHeight(true);
              }
              if (builder.topDataPos() + topHeight + itemHeight < topVisiblePos() - bufferPadding()) {
                if (newRow) {
                  topHeight += itemHeight;
                }
                overage++;
                bof = false;
              } else {
                if (newRow) {
                  break;
                }
                overage++;
              }
            }
            if (overage > 0) {
              builder.topPadding(builder.topPadding() + topHeight);
              removeFromBuffer(0, overage);
              return first += overage;
            }
          };
          enqueueFetch = function(rid, direction) {
            if (!adapter.isLoading) {
              loading(true);
            }
            if (pending.push(direction) === 1) {
              return fetch(rid);
            }
          };
          hideElementBeforeAppend = function(element) {
            element.displayTemp = element.css('display');
            return element.css('display', 'none');
          };
          showElementAfterRender = function(element) {
            if (element.hasOwnProperty('displayTemp')) {
              return element.css('display', element.displayTemp);
            }
          };
          insert = function(index, item) {
            var itemScope, toBeAppended, wrapper;
            itemScope = $scope.$new();
            itemScope[itemName] = item;
            toBeAppended = index > first;
            itemScope.$index = index;
            if (toBeAppended) {
              itemScope.$index--;
            }
            wrapper = {
              scope: itemScope
            };
            linker(itemScope, function(clone) {
              wrapper.element = clone;
              if (toBeAppended) {
                if (index === next) {
                  hideElementBeforeAppend(clone);
                  builder.append(clone);
                  return buffer.push(wrapper);
                } else {
                  buffer[index - first].element.after(clone);
                  return buffer.splice(index - first + 1, 0, wrapper);
                }
              } else {
                hideElementBeforeAppend(clone);
                builder.prepend(clone);
                return buffer.unshift(wrapper);
              }
            });
            return {
              appended: toBeAppended,
              wrapper: wrapper
            };
          };
          adjustRowHeight = function(appended, wrapper) {
            var newHeight;
            if (appended) {
              return builder.bottomPadding(Math.max(0, builder.bottomPadding() - wrapper.element.outerHeight(true)));
            } else {
              newHeight = builder.topPadding() - wrapper.element.outerHeight(true);
              if (newHeight >= 0) {
                return builder.topPadding(newHeight);
              } else {
                return viewport.scrollTop(viewport.scrollTop() + wrapper.element.outerHeight(true));
              }
            }
          };
          doAdjustment = function(rid, finalize) {
            var item, itemHeight, itemTop, newRow, rowTop, topHeight, _i, _len, _results;
            if (shouldLoadBottom()) {
              enqueueFetch(rid, true);
            } else {
              if (shouldLoadTop()) {
                enqueueFetch(rid, false);
              }
            }
            if (finalize) {
              finalize(rid);
            }
            if (pending.length === 0) {
              topHeight = 0;
              _results = [];
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                item = buffer[_i];
                itemTop = item.element.offset().top;
                newRow = rowTop !== itemTop;
                rowTop = itemTop;
                if (newRow) {
                  itemHeight = item.element.outerHeight(true);
                }
                if (newRow && (builder.topDataPos() + topHeight + itemHeight < topVisiblePos())) {
                  _results.push(topHeight += itemHeight);
                } else {
                  if (newRow) {
                    topVisible(item);
                  }
                  break;
                }
              }
              return _results;
            }
          };
          adjustBuffer = function(rid, newItems, finalize) {
            if (newItems && newItems.length) {
              return $timeout(function() {
                var elt, itemTop, row, rowTop, rows, _i, _j, _len, _len1;
                rows = [];
                for (_i = 0, _len = newItems.length; _i < _len; _i++) {
                  row = newItems[_i];
                  elt = row.wrapper.element;
                  showElementAfterRender(elt);
                  itemTop = elt.offset().top;
                  if (rowTop !== itemTop) {
                    rows.push(row);
                    rowTop = itemTop;
                  }
                }
                for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
                  row = rows[_j];
                  adjustRowHeight(row.appended, row.wrapper);
                }
                return doAdjustment(rid, finalize);
              });
            } else {
              return doAdjustment(rid, finalize);
            }
          };
          finalize = function(rid, newItems) {
            return adjustBuffer(rid, newItems, function() {
              pending.shift();
              if (pending.length === 0) {
                return loading(false);
              } else {
                return fetch(rid);
              }
            });
          };
          fetch = function(rid) {
            var direction;
            direction = pending[0];
            if (direction) {
              if (buffer.length && !shouldLoadBottom()) {
                return finalize(rid);
              } else {
                return datasource.get(next, bufferSize, function(result) {
                  var item, newItems, _i, _len;
                  if ((rid && rid !== ridActual) || $scope.$$destroyed) {
                    return;
                  }
                  newItems = [];
                  if (result.length < bufferSize) {
                    eof = true;
                    builder.bottomPadding(0);
                  }
                  if (result.length > 0) {
                    clipTop();
                    for (_i = 0, _len = result.length; _i < _len; _i++) {
                      item = result[_i];
                      newItems.push(insert(++next, item));
                    }
                  }
                  return finalize(rid, newItems);
                });
              }
            } else {
              if (buffer.length && !shouldLoadTop()) {
                return finalize(rid);
              } else {
                return datasource.get(first - bufferSize, bufferSize, function(result) {
                  var i, newItems, _i, _ref;
                  if ((rid && rid !== ridActual) || $scope.$$destroyed) {
                    return;
                  }
                  newItems = [];
                  if (result.length < bufferSize) {
                    bof = true;
                    builder.topPadding(0);
                  }
                  if (result.length > 0) {
                    if (buffer.length) {
                      clipBottom();
                    }
                    for (i = _i = _ref = result.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
                      newItems.unshift(insert(--first, result[i]));
                    }
                  }
                  return finalize(rid, newItems);
                });
              }
            }
          };
          resizeAndScrollHandler = function() {
            if (!$rootScope.$$phase && !adapter.isLoading) {
              adjustBuffer();
              return $scope.$apply();
            }
          };
          wheelHandler = function(event) {
            var scrollTop, yMax;
            scrollTop = viewport[0].scrollTop;
            yMax = viewport[0].scrollHeight - viewport[0].clientHeight;
            if ((scrollTop === 0 && !bof) || (scrollTop === yMax && !eof)) {
              return event.preventDefault();
            }
          };
          viewport.bind('resize', resizeAndScrollHandler);
          viewport.bind('scroll', resizeAndScrollHandler);
          viewport.bind('mousewheel', wheelHandler);
          $scope.$watch(datasource.revision, reload);
          if (datasource.scope) {
            eventListener = datasource.scope.$new();
          } else {
            eventListener = $scope.$new();
          }
          $scope.$on('$destroy', function() {
            var item, _i, _len;
            for (_i = 0, _len = buffer.length; _i < _len; _i++) {
              item = buffer[_i];
              item.scope.$destroy();
              item.element.remove();
            }
            viewport.unbind('resize', resizeAndScrollHandler);
            viewport.unbind('scroll', resizeAndScrollHandler);
            return viewport.unbind('mousewheel', wheelHandler);
          });
          adapter = {};
          adapter.isLoading = false;
          applyUpdate = function(wrapper, newItems) {
            var i, inserted, item, ndx, newItem, oldItemNdx, _i, _j, _k, _len, _len1, _len2;
            inserted = [];
            if (angular.isArray(newItems)) {
              if (newItems.length) {
                if (newItems.length === 1 && newItems[0] === wrapper.scope[itemName]) {
                  return inserted;
                } else {
                  ndx = wrapper.scope.$index;
                  if (ndx > first) {
                    oldItemNdx = ndx - first;
                  } else {
                    oldItemNdx = 1;
                  }
                  for (i = _i = 0, _len = newItems.length; _i < _len; i = ++_i) {
                    newItem = newItems[i];
                    inserted.push(insert(ndx + i, newItem));
                  }
                  removeFromBuffer(oldItemNdx, oldItemNdx + 1);
                  for (i = _j = 0, _len1 = buffer.length; _j < _len1; i = ++_j) {
                    item = buffer[i];
                    item.scope.$index = first + i;
                  }
                }
              } else {
                removeFromBuffer(wrapper.scope.$index - first, wrapper.scope.$index - first + 1);
                next--;
                for (i = _k = 0, _len2 = buffer.length; _k < _len2; i = ++_k) {
                  item = buffer[i];
                  item.scope.$index = first + i;
                }
              }
            }
            return inserted;
          };
          adapter.applyUpdates = function(arg1, arg2) {
            var inserted, wrapper, _i, _len, _ref, _ref1;
            inserted = [];
            ridActual++;
            if (angular.isFunction(arg1)) {
              _ref = buffer.slice(0);
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                wrapper = _ref[_i];
                inserted.concat(inserted, applyUpdate(wrapper, arg1(wrapper.scope[itemName], wrapper.scope, wrapper.element)));
              }
            } else {
              if (arg1 % 1 === 0) {
                if ((0 <= (_ref1 = arg1 - first - 1) && _ref1 < buffer.length)) {
                  inserted = applyUpdate(buffer[arg1 - first], arg2);
                }
              } else {
                throw new Error('applyUpdates - ' + arg1 + ' is not a valid index or outside of range');
              }
            }
            return adjustBuffer(ridActual, inserted);
          };
          if ($attr.adapter) {
            adapterOnScope = getValueChain($scope, $attr.adapter);
            if (!adapterOnScope) {
              setValueChain($scope, $attr.adapter, {});
              adapterOnScope = getValueChain($scope, $attr.adapter);
            }
            angular.extend(adapterOnScope, adapter);
            adapter = adapterOnScope;
          }
          doUpdate = function(locator, newItem) {
            var wrapper, _fn, _i, _len, _ref;
            if (angular.isFunction(locator)) {
              _fn = function(wrapper) {
                return locator(wrapper.scope);
              };
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                wrapper = buffer[_i];
                _fn(wrapper);
              }
            } else {
              if ((0 <= (_ref = locator - first - 1) && _ref < buffer.length)) {
                buffer[locator - first - 1].scope[itemName] = newItem;
              }
            }
            return null;
          };
          doDelete = function(locator) {
            var i, item, temp, wrapper, _fn, _i, _j, _k, _len, _len1, _len2, _ref;
            if (angular.isFunction(locator)) {
              temp = [];
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                item = buffer[_i];
                temp.unshift(item);
              }
              _fn = function(wrapper) {
                if (locator(wrapper.scope)) {
                  removeFromBuffer(temp.length - 1 - i, temp.length - i);
                  return next--;
                }
              };
              for (i = _j = 0, _len1 = temp.length; _j < _len1; i = ++_j) {
                wrapper = temp[i];
                _fn(wrapper);
              }
            } else {
              if ((0 <= (_ref = locator - first - 1) && _ref < buffer.length)) {
                removeFromBuffer(locator - first - 1, locator - first);
                next--;
              }
            }
            for (i = _k = 0, _len2 = buffer.length; _k < _len2; i = ++_k) {
              item = buffer[i];
              item.scope.$index = first + i;
            }
            return adjustBuffer();
          };
          doInsert = function(locator, item) {
            var i, inserted, _i, _len, _ref;
            inserted = [];
            if (angular.isFunction(locator)) {
              throw new Error('not implemented - Insert with locator function');
            } else {
              if ((0 <= (_ref = locator - first - 1) && _ref < buffer.length)) {
                inserted.push(insert(locator, item));
                next++;
              }
            }
            for (i = _i = 0, _len = buffer.length; _i < _len; i = ++_i) {
              item = buffer[i];
              item.scope.$index = first + i;
            }
            return adjustBuffer(null, inserted);
          };
          eventListener.$on('insert.item', function(event, locator, item) {
            return doInsert(locator, item);
          });
          eventListener.$on('update.items', function(event, locator, newItem) {
            return doUpdate(locator, newItem);
          });
          return eventListener.$on('delete.items', function(event, locator) {
            return doDelete(locator);
          });
        };
      }
    };
  }
]);

/*
//# sourceURL=src/scripts/ui-scroll.js
*/


/**
 * Adds a 'ui-scrollfix' class to the element when the page scrolls past it's position.
 * @param [offset] {int} optional Y-offset to override the detected offset.
 *   Takes 300 (absolute) or -300 or +300 (relative to detected)
 */
angular.module('ui.scrollfix',[]).directive('uiScrollfix', ['$window', function ($window) {
  'use strict';

  function getWindowScrollTop() {
    if (angular.isDefined($window.pageYOffset)) {
      return $window.pageYOffset;
    } else {
      var iebody = (document.compatMode && document.compatMode !== 'BackCompat') ? document.documentElement : document.body;
      return iebody.scrollTop;
    }
  }
  return {
    require: '^?uiScrollfixTarget',
    link: function (scope, elm, attrs, uiScrollfixTarget) {
      var absolute = true,
          shift = 0,
          fixLimit,
          $target = uiScrollfixTarget && uiScrollfixTarget.$element || angular.element($window);

      if (!attrs.uiScrollfix) {
          absolute = false;
      } else if (typeof(attrs.uiScrollfix) === 'string') {
        // charAt is generally faster than indexOf: http://jsperf.com/indexof-vs-charat
        if (attrs.uiScrollfix.charAt(0) === '-') {
          absolute = false;
          shift = - parseFloat(attrs.uiScrollfix.substr(1));
        } else if (attrs.uiScrollfix.charAt(0) === '+') {
          absolute = false;
          shift = parseFloat(attrs.uiScrollfix.substr(1));
        }
      }

      fixLimit = absolute ? attrs.uiScrollfix : elm[0].offsetTop + shift;

      function onScroll() {

        var limit = absolute ? attrs.uiScrollfix : elm[0].offsetTop + shift;

        // if pageYOffset is defined use it, otherwise use other crap for IE
        var offset = uiScrollfixTarget ? $target[0].scrollTop : getWindowScrollTop();
        if (!elm.hasClass('ui-scrollfix') && offset > limit) {
          elm.addClass('ui-scrollfix');
          fixLimit = limit;
        } else if (elm.hasClass('ui-scrollfix') && offset < fixLimit) {
          elm.removeClass('ui-scrollfix');
        }
      }

      $target.on('scroll', onScroll);

      // Unbind scroll event handler when directive is removed
      scope.$on('$destroy', function() {
        $target.off('scroll', onScroll);
      });
    }
  };
}]).directive('uiScrollfixTarget', [function () {
  'use strict';
  return {
    controller: ['$element', function($element) {
      this.$element = $element;
    }]
  };
}]);

/**
 * uiShow Directive
 *
 * Adds a 'ui-show' class to the element instead of display:block
 * Created to allow tighter control  of CSS without bulkier directives
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
angular.module('ui.showhide',[])
.directive('uiShow', [function () {
  'use strict';

  return function (scope, elm, attrs) {
    scope.$watch(attrs.uiShow, function (newVal) {
      if (newVal) {
        elm.addClass('ui-show');
      } else {
        elm.removeClass('ui-show');
      }
    });
  };
}])

/**
 * uiHide Directive
 *
 * Adds a 'ui-hide' class to the element instead of display:block
 * Created to allow tighter control  of CSS without bulkier directives
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
.directive('uiHide', [function () {
  'use strict';

  return function (scope, elm, attrs) {
    scope.$watch(attrs.uiHide, function (newVal) {
      if (newVal) {
        elm.addClass('ui-hide');
      } else {
        elm.removeClass('ui-hide');
      }
    });
  };
}])

/**
 * uiToggle Directive
 *
 * Adds a class 'ui-show' if true, and a 'ui-hide' if false to the element instead of display:block/display:none
 * Created to allow tighter control  of CSS without bulkier directives. This also allows you to override the
 * default visibility of the element using either class.
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
.directive('uiToggle', [function () {
  'use strict';

  return function (scope, elm, attrs) {
    scope.$watch(attrs.uiToggle, function (newVal) {
      if (newVal) {
        elm.removeClass('ui-hide').addClass('ui-show');
      } else {
        elm.removeClass('ui-show').addClass('ui-hide');
      }
    });
  };
}]);

/**
 * Filters out all duplicate items from an array by checking the specified key
 * @param [key] {string} the name of the attribute of each object to compare for uniqueness
 if the key is empty, the entire object will be compared
 if the key === false then no filtering will be performed
 * @return {array}
 */
angular.module('ui.unique',[]).filter('unique', ['$parse', function ($parse) {
  'use strict';

  return function (items, filterOn) {

    if (filterOn === false) {
      return items;
    }

    if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
      var newItems = [],
        get = angular.isString(filterOn) ? $parse(filterOn) : function (item) { return item; };

      var extractValueToCompare = function (item) {
        return angular.isObject(item) ? get(item) : item;
      };

      angular.forEach(items, function (item) {
        var isDuplicate = false;

        for (var i = 0; i < newItems.length; i++) {
          if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
            isDuplicate = true;
            break;
          }
        }
        if (!isDuplicate) {
          newItems.push(item);
        }

      });
      items = newItems;
    }
    return items;
  };
}]);

/*
 * Author: Remy Alain Ticona Carbajal http://realtica.org
 * Description: The main objective of ng-uploader is to have a user control,
 * clean, simple, customizable, and above all very easy to implement.
 * Licence: MIT
 */

angular.module('ui.uploader', []).service('uiUploader', uiUploader);

uiUploader.$inject = ['$log'];

function uiUploader($log) {
    'use strict';

    /*jshint validthis: true */
    var self = this;
    self.files = [];
    self.options = {};
    self.activeUploads = 0;
    $log.info('uiUploader loaded');
    
    function addFiles(files) {
        for (var i = 0; i < files.length; i++) {
            self.files.push(files[i]);
        }
    }

    function getFiles() {
        return self.files;
    }

    function startUpload(options) {
        self.options = options;
        for (var i = 0; i < self.files.length; i++) {
            if (self.activeUploads == self.options.concurrency) {
                break;
            }
            if (self.files[i].active)
                continue;
            ajaxUpload(self.files[i], self.options.url);
        }
    }
    
    function removeFile(file){
        self.files.splice(self.files.indexOf(file),1);
    }
    
    function removeAll(){
        self.files.splice(0,self.files.length);
    }
    
    return {
        addFiles: addFiles,
        getFiles: getFiles,
        files: self.files,
        startUpload: startUpload,
        removeFile: removeFile,
        removeAll:removeAll
    };
    
    function getHumanSize(bytes) {
        var sizes = ['n/a', 'bytes', 'KiB', 'MiB', 'GiB', 'TB', 'PB', 'EiB', 'ZiB', 'YiB'];
        var i = +Math.floor(Math.log(bytes) / Math.log(1024));
        return (bytes / Math.pow(1024, i)).toFixed(i ? 1 : 0) + ' ' + sizes[isNaN(bytes) ? 0 : i + 1];
    }

    function ajaxUpload(file, url) {
        var xhr, formData, prop, data = '',
            key = '' || 'file';
        self.activeUploads += 1;
        file.active = true;
        xhr = new window.XMLHttpRequest();
        formData = new window.FormData();
        xhr.open('POST', url);

        // Triggered when upload starts:
        xhr.upload.onloadstart = function() {};

        // Triggered many times during upload:
        xhr.upload.onprogress = function(event) {
            if (!event.lengthComputable) {
                return;
            }
            // Update file size because it might be bigger than reported by
            // the fileSize:
            //$log.info("progres..");
            //console.info(event.loaded);
            file.loaded = event.loaded;
            file.humanSize = getHumanSize(event.loaded);
            self.options.onProgress(file);
        };

        // Triggered when upload is completed:
        xhr.onload = function() {
            self.activeUploads -= 1;
            startUpload(self.options);
            self.options.onCompleted(file, xhr.responseText);
        };

        // Triggered when upload fails:
        xhr.onerror = function() {};

        // Append additional data if provided:
        if (data) {
            for (prop in data) {
                if (data.hasOwnProperty(prop)) {
                    formData.append(prop, data[prop]);
                }
            }
        }

        // Append file data:
        formData.append(key, file, file.name);

        // Initiate upload:
        xhr.send(formData);

        return xhr;
    }

}

/**
 * General-purpose validator for ngModel.
 * angular.js comes with several built-in validation mechanism for input fields (ngRequired, ngPattern etc.) but using
 * an arbitrary validation function requires creation of a custom formatters and / or parsers.
 * The ui-validate directive makes it easy to use any function(s) defined in scope as a validator function(s).
 * A validator function will trigger validation on both model and input changes.
 *
 * @example <input ui-validate=" 'myValidatorFunction($value)' ">
 * @example <input ui-validate="{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }">
 * @example <input ui-validate="{ foo : '$value > anotherModel' }" ui-validate-watch=" 'anotherModel' ">
 * @example <input ui-validate="{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }" ui-validate-watch=" { foo : 'anotherModel' } ">
 *
 * @param ui-validate {string|object literal} If strings is passed it should be a scope's function to be used as a validator.
 * If an object literal is passed a key denotes a validation error key while a value should be a validator function.
 * In both cases validator function should take a value to validate as its argument and should return true/false indicating a validation result.
 */
angular.module('ui.validate',[]).directive('uiValidate', function () {
  'use strict';

  return {
    restrict: 'A',
    require: 'ngModel',
    link: function (scope, elm, attrs, ctrl) {
      var validateFn, validators = {},
          validateExpr = scope.$eval(attrs.uiValidate);

      if (!validateExpr){ return;}

      if (angular.isString(validateExpr)) {
        validateExpr = { validator: validateExpr };
      }

      angular.forEach(validateExpr, function (exprssn, key) {
        validateFn = function (valueToValidate) {
          var expression = scope.$eval(exprssn, { '$value' : valueToValidate });
          if (angular.isObject(expression) && angular.isFunction(expression.then)) {
            // expression is a promise
            expression.then(function(){
              ctrl.$setValidity(key, true);
            }, function(){
              ctrl.$setValidity(key, false);
            });
            return valueToValidate;
          } else if (expression) {
            // expression is true
            ctrl.$setValidity(key, true);
            return valueToValidate;
          } else {
            // expression is false
            ctrl.$setValidity(key, false);
            return valueToValidate;
          }
        };
        validators[key] = validateFn;
        ctrl.$formatters.push(validateFn);
        ctrl.$parsers.push(validateFn);
      });

      function apply_watch(watch)
      {
          //string - update all validators on expression change
          if (angular.isString(watch))
          {
              scope.$watch(watch, function(){
                  angular.forEach(validators, function(validatorFn){
                      validatorFn(ctrl.$modelValue);
                  });
              });
              return;
          }

          //array - update all validators on change of any expression
          if (angular.isArray(watch))
          {
              angular.forEach(watch, function(expression){
                  scope.$watch(expression, function()
                  {
                      angular.forEach(validators, function(validatorFn){
                          validatorFn(ctrl.$modelValue);
                      });
                  });
              });
              return;
          }

          //object - update appropriate validator
          if (angular.isObject(watch))
          {
              angular.forEach(watch, function(expression, validatorKey)
              {
                  //value is string - look after one expression
                  if (angular.isString(expression))
                  {
                      scope.$watch(expression, function(){
                          validators[validatorKey](ctrl.$modelValue);
                      });
                  }

                  //value is array - look after all expressions in array
                  if (angular.isArray(expression))
                  {
                      angular.forEach(expression, function(intExpression)
                      {
                          scope.$watch(intExpression, function(){
                              validators[validatorKey](ctrl.$modelValue);
                          });
                      });
                  }
              });
          }
      }
      // Support for ui-validate-watch
      if (attrs.uiValidateWatch){
          apply_watch( scope.$eval(attrs.uiValidateWatch) );
      }
    }
  };
});

angular.module('ui.utils',  [
  'ui.event',
  'ui.format',
  'ui.highlight',
  'ui.include',
  'ui.indeterminate',
  'ui.inflector',
  'ui.jq',
  'ui.keypress',
  'ui.mask',
  'ui.reset',
  'ui.route',
  'ui.scrollfix',
  'ui.scroll',
  'ui.scroll.jqlite',
  'ui.showhide',
  'ui.unique',
  'ui.validate'
]);

/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.12.1 - 2015-02-20
 * License: MIT
 */
angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]);
angular.module("ui.bootstrap.tpls", ["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]);
angular.module('ui.bootstrap.transition', [])

/**
 * $transition service provides a consistent interface to trigger CSS 3 transitions and to be informed when they complete.
 * @param  {DOMElement} element  The DOMElement that will be animated.
 * @param  {string|object|function} trigger  The thing that will cause the transition to start:
 *   - As a string, it represents the css class to be added to the element.
 *   - As an object, it represents a hash of style attributes to be applied to the element.
 *   - As a function, it represents a function to be called that will cause the transition to occur.
 * @return {Promise}  A promise that is resolved when the transition finishes.
 */
.factory('$transition', ['$q', '$timeout', '$rootScope', function($q, $timeout, $rootScope) {

  var $transition = function(element, trigger, options) {
    options = options || {};
    var deferred = $q.defer();
    var endEventName = $transition[options.animation ? 'animationEndEventName' : 'transitionEndEventName'];

    var transitionEndHandler = function(event) {
      $rootScope.$apply(function() {
        element.unbind(endEventName, transitionEndHandler);
        deferred.resolve(element);
      });
    };

    if (endEventName) {
      element.bind(endEventName, transitionEndHandler);
    }

    // Wrap in a timeout to allow the browser time to update the DOM before the transition is to occur
    $timeout(function() {
      if ( angular.isString(trigger) ) {
        element.addClass(trigger);
      } else if ( angular.isFunction(trigger) ) {
        trigger(element);
      } else if ( angular.isObject(trigger) ) {
        element.css(trigger);
      }
      //If browser does not support transitions, instantly resolve
      if ( !endEventName ) {
        deferred.resolve(element);
      }
    });

    // Add our custom cancel function to the promise that is returned
    // We can call this if we are about to run a new transition, which we know will prevent this transition from ending,
    // i.e. it will therefore never raise a transitionEnd event for that transition
    deferred.promise.cancel = function() {
      if ( endEventName ) {
        element.unbind(endEventName, transitionEndHandler);
      }
      deferred.reject('Transition cancelled');
    };

    return deferred.promise;
  };

  // Work out the name of the transitionEnd event
  var transElement = document.createElement('trans');
  var transitionEndEventNames = {
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'oTransitionEnd',
    'transition': 'transitionend'
  };
  var animationEndEventNames = {
    'WebkitTransition': 'webkitAnimationEnd',
    'MozTransition': 'animationend',
    'OTransition': 'oAnimationEnd',
    'transition': 'animationend'
  };
  function findEndEventName(endEventNames) {
    for (var name in endEventNames){
      if (transElement.style[name] !== undefined) {
        return endEventNames[name];
      }
    }
  }
  $transition.transitionEndEventName = findEndEventName(transitionEndEventNames);
  $transition.animationEndEventName = findEndEventName(animationEndEventNames);
  return $transition;
}]);

angular.module('ui.bootstrap.collapse', ['ui.bootstrap.transition'])

  .directive('collapse', ['$transition', function ($transition) {

    return {
      link: function (scope, element, attrs) {

        var initialAnimSkip = true;
        var currentTransition;

        function doTransition(change) {
          var newTransition = $transition(element, change);
          if (currentTransition) {
            currentTransition.cancel();
          }
          currentTransition = newTransition;
          newTransition.then(newTransitionDone, newTransitionDone);
          return newTransition;

          function newTransitionDone() {
            // Make sure it's this transition, otherwise, leave it alone.
            if (currentTransition === newTransition) {
              currentTransition = undefined;
            }
          }
        }

        function expand() {
          if (initialAnimSkip) {
            initialAnimSkip = false;
            expandDone();
          } else {
            element.removeClass('collapse').addClass('collapsing');
            doTransition({ height: element[0].scrollHeight + 'px' }).then(expandDone);
          }
        }

        function expandDone() {
          element.removeClass('collapsing');
          element.addClass('collapse in');
          element.css({height: 'auto'});
        }

        function collapse() {
          if (initialAnimSkip) {
            initialAnimSkip = false;
            collapseDone();
            element.css({height: 0});
          } else {
            // CSS transitions don't work with height: auto, so we have to manually change the height to a specific value
            element.css({ height: element[0].scrollHeight + 'px' });
            //trigger reflow so a browser realizes that height was updated from auto to a specific value
            var x = element[0].offsetWidth;

            element.removeClass('collapse in').addClass('collapsing');

            doTransition({ height: 0 }).then(collapseDone);
          }
        }

        function collapseDone() {
          element.removeClass('collapsing');
          element.addClass('collapse');
        }

        scope.$watch(attrs.collapse, function (shouldCollapse) {
          if (shouldCollapse) {
            collapse();
          } else {
            expand();
          }
        });
      }
    };
  }]);

angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse'])

.constant('accordionConfig', {
  closeOthers: true
})

.controller('AccordionController', ['$scope', '$attrs', 'accordionConfig', function ($scope, $attrs, accordionConfig) {

  // This array keeps track of the accordion groups
  this.groups = [];

  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
  this.closeOthers = function(openGroup) {
    var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
    if ( closeOthers ) {
      angular.forEach(this.groups, function (group) {
        if ( group !== openGroup ) {
          group.isOpen = false;
        }
      });
    }
  };

  // This is called from the accordion-group directive to add itself to the accordion
  this.addGroup = function(groupScope) {
    var that = this;
    this.groups.push(groupScope);

    groupScope.$on('$destroy', function (event) {
      that.removeGroup(groupScope);
    });
  };

  // This is called from the accordion-group directive when to remove itself
  this.removeGroup = function(group) {
    var index = this.groups.indexOf(group);
    if ( index !== -1 ) {
      this.groups.splice(index, 1);
    }
  };

}])

// The accordion directive simply sets up the directive controller
// and adds an accordion CSS class to itself element.
.directive('accordion', function () {
  return {
    restrict:'EA',
    controller:'AccordionController',
    transclude: true,
    replace: false,
    templateUrl: 'template/accordion/accordion.html'
  };
})

// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
.directive('accordionGroup', function() {
  return {
    require:'^accordion',         // We need this directive to be inside an accordion
    restrict:'EA',
    transclude:true,              // It transcludes the contents of the directive into the template
    replace: true,                // The element containing the directive will be replaced with the template
    templateUrl:'template/accordion/accordion-group.html',
    scope: {
      heading: '@',               // Interpolate the heading attribute onto this scope
      isOpen: '=?',
      isDisabled: '=?'
    },
    controller: function() {
      this.setHeading = function(element) {
        this.heading = element;
      };
    },
    link: function(scope, element, attrs, accordionCtrl) {
      accordionCtrl.addGroup(scope);

      scope.$watch('isOpen', function(value) {
        if ( value ) {
          accordionCtrl.closeOthers(scope);
        }
      });

      scope.toggleOpen = function() {
        if ( !scope.isDisabled ) {
          scope.isOpen = !scope.isOpen;
        }
      };
    }
  };
})

// Use accordion-heading below an accordion-group to provide a heading containing HTML
// <accordion-group>
//   <accordion-heading>Heading containing HTML - <img src="..."></accordion-heading>
// </accordion-group>
.directive('accordionHeading', function() {
  return {
    restrict: 'EA',
    transclude: true,   // Grab the contents to be used as the heading
    template: '',       // In effect remove this element!
    replace: true,
    require: '^accordionGroup',
    link: function(scope, element, attr, accordionGroupCtrl, transclude) {
      // Pass the heading to the accordion-group controller
      // so that it can be transcluded into the right place in the template
      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
      accordionGroupCtrl.setHeading(transclude(scope, function() {}));
    }
  };
})

// Use in the accordion-group template to indicate where you want the heading to be transcluded
// You must provide the property on the accordion-group controller that will hold the transcluded element
// <div class="accordion-group">
//   <div class="accordion-heading" ><a ... accordion-transclude="heading">...</a></div>
//   ...
// </div>
.directive('accordionTransclude', function() {
  return {
    require: '^accordionGroup',
    link: function(scope, element, attr, controller) {
      scope.$watch(function() { return controller[attr.accordionTransclude]; }, function(heading) {
        if ( heading ) {
          element.html('');
          element.append(heading);
        }
      });
    }
  };
});

angular.module('ui.bootstrap.alert', [])

.controller('AlertController', ['$scope', '$attrs', function ($scope, $attrs) {
  $scope.closeable = 'close' in $attrs;
  this.close = $scope.close;
}])

.directive('alert', function () {
  return {
    restrict:'EA',
    controller:'AlertController',
    templateUrl:'template/alert/alert.html',
    transclude:true,
    replace:true,
    scope: {
      type: '@',
      close: '&'
    }
  };
})

.directive('dismissOnTimeout', ['$timeout', function($timeout) {
  return {
    require: 'alert',
    link: function(scope, element, attrs, alertCtrl) {
      $timeout(function(){
        alertCtrl.close();
      }, parseInt(attrs.dismissOnTimeout, 10));
    }
  };
}]);

angular.module('ui.bootstrap.bindHtml', [])

  .directive('bindHtmlUnsafe', function () {
    return function (scope, element, attr) {
      element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);
      scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {
        element.html(value || '');
      });
    };
  });
angular.module('ui.bootstrap.buttons', [])

.constant('buttonConfig', {
  activeClass: 'active',
  toggleEvent: 'click'
})

.controller('ButtonsController', ['buttonConfig', function(buttonConfig) {
  this.activeClass = buttonConfig.activeClass || 'active';
  this.toggleEvent = buttonConfig.toggleEvent || 'click';
}])

.directive('btnRadio', function () {
  return {
    require: ['btnRadio', 'ngModel'],
    controller: 'ButtonsController',
    link: function (scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));
      };

      //ui->model
      element.bind(buttonsCtrl.toggleEvent, function () {
        var isActive = element.hasClass(buttonsCtrl.activeClass);

        if (!isActive || angular.isDefined(attrs.uncheckable)) {
          scope.$apply(function () {
            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.btnRadio));
            ngModelCtrl.$render();
          });
        }
      });
    }
  };
})

.directive('btnCheckbox', function () {
  return {
    require: ['btnCheckbox', 'ngModel'],
    controller: 'ButtonsController',
    link: function (scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      function getTrueValue() {
        return getCheckboxValue(attrs.btnCheckboxTrue, true);
      }

      function getFalseValue() {
        return getCheckboxValue(attrs.btnCheckboxFalse, false);
      }

      function getCheckboxValue(attributeValue, defaultValue) {
        var val = scope.$eval(attributeValue);
        return angular.isDefined(val) ? val : defaultValue;
      }

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
      };

      //ui->model
      element.bind(buttonsCtrl.toggleEvent, function () {
        scope.$apply(function () {
          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
          ngModelCtrl.$render();
        });
      });
    }
  };
});

/**
* @ngdoc overview
* @name ui.bootstrap.carousel
*
* @description
* AngularJS version of an image carousel.
*
*/
angular.module('ui.bootstrap.carousel', ['ui.bootstrap.transition'])
.controller('CarouselController', ['$scope', '$timeout', '$interval', '$transition', function ($scope, $timeout, $interval, $transition) {
  var self = this,
    slides = self.slides = $scope.slides = [],
    currentIndex = -1,
    currentInterval, isPlaying;
  self.currentSlide = null;

  var destroyed = false;
  /* direction: "prev" or "next" */
  self.select = $scope.select = function(nextSlide, direction) {
    var nextIndex = slides.indexOf(nextSlide);
    //Decide direction if it's not given
    if (direction === undefined) {
      direction = nextIndex > currentIndex ? 'next' : 'prev';
    }
    if (nextSlide && nextSlide !== self.currentSlide) {
      if ($scope.$currentTransition) {
        $scope.$currentTransition.cancel();
        //Timeout so ng-class in template has time to fix classes for finished slide
        $timeout(goNext);
      } else {
        goNext();
      }
    }
    function goNext() {
      // Scope has been destroyed, stop here.
      if (destroyed) { return; }
      //If we have a slide to transition from and we have a transition type and we're allowed, go
      if (self.currentSlide && angular.isString(direction) && !$scope.noTransition && nextSlide.$element) {
        //We shouldn't do class manip in here, but it's the same weird thing bootstrap does. need to fix sometime
        nextSlide.$element.addClass(direction);
        var reflow = nextSlide.$element[0].offsetWidth; //force reflow

        //Set all other slides to stop doing their stuff for the new transition
        angular.forEach(slides, function(slide) {
          angular.extend(slide, {direction: '', entering: false, leaving: false, active: false});
        });
        angular.extend(nextSlide, {direction: direction, active: true, entering: true});
        angular.extend(self.currentSlide||{}, {direction: direction, leaving: true});

        $scope.$currentTransition = $transition(nextSlide.$element, {});
        //We have to create new pointers inside a closure since next & current will change
        (function(next,current) {
          $scope.$currentTransition.then(
            function(){ transitionDone(next, current); },
            function(){ transitionDone(next, current); }
          );
        }(nextSlide, self.currentSlide));
      } else {
        transitionDone(nextSlide, self.currentSlide);
      }
      self.currentSlide = nextSlide;
      currentIndex = nextIndex;
      //every time you change slides, reset the timer
      restartTimer();
    }
    function transitionDone(next, current) {
      angular.extend(next, {direction: '', active: true, leaving: false, entering: false});
      angular.extend(current||{}, {direction: '', active: false, leaving: false, entering: false});
      $scope.$currentTransition = null;
    }
  };
  $scope.$on('$destroy', function () {
    destroyed = true;
  });

  /* Allow outside people to call indexOf on slides array */
  self.indexOfSlide = function(slide) {
    return slides.indexOf(slide);
  };

  $scope.next = function() {
    var newIndex = (currentIndex + 1) % slides.length;

    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (!$scope.$currentTransition) {
      return self.select(slides[newIndex], 'next');
    }
  };

  $scope.prev = function() {
    var newIndex = currentIndex - 1 < 0 ? slides.length - 1 : currentIndex - 1;

    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (!$scope.$currentTransition) {
      return self.select(slides[newIndex], 'prev');
    }
  };

  $scope.isActive = function(slide) {
     return self.currentSlide === slide;
  };

  $scope.$watch('interval', restartTimer);
  $scope.$on('$destroy', resetTimer);

  function restartTimer() {
    resetTimer();
    var interval = +$scope.interval;
    if (!isNaN(interval) && interval > 0) {
      currentInterval = $interval(timerFn, interval);
    }
  }

  function resetTimer() {
    if (currentInterval) {
      $interval.cancel(currentInterval);
      currentInterval = null;
    }
  }

  function timerFn() {
    var interval = +$scope.interval;
    if (isPlaying && !isNaN(interval) && interval > 0) {
      $scope.next();
    } else {
      $scope.pause();
    }
  }

  $scope.play = function() {
    if (!isPlaying) {
      isPlaying = true;
      restartTimer();
    }
  };
  $scope.pause = function() {
    if (!$scope.noPause) {
      isPlaying = false;
      resetTimer();
    }
  };

  self.addSlide = function(slide, element) {
    slide.$element = element;
    slides.push(slide);
    //if this is the first slide or the slide is set to active, select it
    if(slides.length === 1 || slide.active) {
      self.select(slides[slides.length-1]);
      if (slides.length == 1) {
        $scope.play();
      }
    } else {
      slide.active = false;
    }
  };

  self.removeSlide = function(slide) {
    //get the index of the slide inside the carousel
    var index = slides.indexOf(slide);
    slides.splice(index, 1);
    if (slides.length > 0 && slide.active) {
      if (index >= slides.length) {
        self.select(slides[index-1]);
      } else {
        self.select(slides[index]);
      }
    } else if (currentIndex > index) {
      currentIndex--;
    }
  };

}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:carousel
 * @restrict EA
 *
 * @description
 * Carousel is the outer container for a set of image 'slides' to showcase.
 *
 * @param {number=} interval The time, in milliseconds, that it will take the carousel to go to the next slide.
 * @param {boolean=} noTransition Whether to disable transitions on the carousel.
 * @param {boolean=} noPause Whether to disable pausing on the carousel (by default, the carousel interval pauses on hover).
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <carousel>
      <slide>
        <img src="http://placekitten.com/150/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>Beautiful!</p>
        </div>
      </slide>
      <slide>
        <img src="http://placekitten.com/100/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>D'aww!</p>
        </div>
      </slide>
    </carousel>
  </file>
  <file name="demo.css">
    .carousel-indicators {
      top: auto;
      bottom: 15px;
    }
  </file>
</example>
 */
.directive('carousel', [function() {
  return {
    restrict: 'EA',
    transclude: true,
    replace: true,
    controller: 'CarouselController',
    require: 'carousel',
    templateUrl: 'template/carousel/carousel.html',
    scope: {
      interval: '=',
      noTransition: '=',
      noPause: '='
    }
  };
}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:slide
 * @restrict EA
 *
 * @description
 * Creates a slide inside a {@link ui.bootstrap.carousel.directive:carousel carousel}.  Must be placed as a child of a carousel element.
 *
 * @param {boolean=} active Model binding, whether or not this slide is currently active.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
<div ng-controller="CarouselDemoCtrl">
  <carousel>
    <slide ng-repeat="slide in slides" active="slide.active">
      <img ng-src="{{slide.image}}" style="margin:auto;">
      <div class="carousel-caption">
        <h4>Slide {{$index}}</h4>
        <p>{{slide.text}}</p>
      </div>
    </slide>
  </carousel>
  Interval, in milliseconds: <input type="number" ng-model="myInterval">
  <br />Enter a negative number to stop the interval.
</div>
  </file>
  <file name="script.js">
function CarouselDemoCtrl($scope) {
  $scope.myInterval = 5000;
}
  </file>
  <file name="demo.css">
    .carousel-indicators {
      top: auto;
      bottom: 15px;
    }
  </file>
</example>
*/

.directive('slide', function() {
  return {
    require: '^carousel',
    restrict: 'EA',
    transclude: true,
    replace: true,
    templateUrl: 'template/carousel/slide.html',
    scope: {
      active: '=?'
    },
    link: function (scope, element, attrs, carouselCtrl) {
      carouselCtrl.addSlide(scope, element);
      //when the scope is destroyed then remove the slide from the current slides array
      scope.$on('$destroy', function() {
        carouselCtrl.removeSlide(scope);
      });

      scope.$watch('active', function(active) {
        if (active) {
          carouselCtrl.select(scope);
        }
      });
    }
  };
});

angular.module('ui.bootstrap.dateparser', [])

.service('dateParser', ['$locale', 'orderByFilter', function($locale, orderByFilter) {

  this.parsers = {};

  var formatCodeToRegex = {
    'yyyy': {
      regex: '\\d{4}',
      apply: function(value) { this.year = +value; }
    },
    'yy': {
      regex: '\\d{2}',
      apply: function(value) { this.year = +value + 2000; }
    },
    'y': {
      regex: '\\d{1,4}',
      apply: function(value) { this.year = +value; }
    },
    'MMMM': {
      regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
      apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); }
    },
    'MMM': {
      regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
      apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); }
    },
    'MM': {
      regex: '0[1-9]|1[0-2]',
      apply: function(value) { this.month = value - 1; }
    },
    'M': {
      regex: '[1-9]|1[0-2]',
      apply: function(value) { this.month = value - 1; }
    },
    'dd': {
      regex: '[0-2][0-9]{1}|3[0-1]{1}',
      apply: function(value) { this.date = +value; }
    },
    'd': {
      regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
      apply: function(value) { this.date = +value; }
    },
    'EEEE': {
      regex: $locale.DATETIME_FORMATS.DAY.join('|')
    },
    'EEE': {
      regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|')
    }
  };

  function createParser(format) {
    var map = [], regex = format.split('');

    angular.forEach(formatCodeToRegex, function(data, code) {
      var index = format.indexOf(code);

      if (index > -1) {
        format = format.split('');

        regex[index] = '(' + data.regex + ')';
        format[index] = '$'; // Custom symbol to define consumed part of format
        for (var i = index + 1, n = index + code.length; i < n; i++) {
          regex[i] = '';
          format[i] = '$';
        }
        format = format.join('');

        map.push({ index: index, apply: data.apply });
      }
    });

    return {
      regex: new RegExp('^' + regex.join('') + '$'),
      map: orderByFilter(map, 'index')
    };
  }

  this.parse = function(input, format) {
    if ( !angular.isString(input) || !format ) {
      return input;
    }

    format = $locale.DATETIME_FORMATS[format] || format;

    if ( !this.parsers[format] ) {
      this.parsers[format] = createParser(format);
    }

    var parser = this.parsers[format],
        regex = parser.regex,
        map = parser.map,
        results = input.match(regex);

    if ( results && results.length ) {
      var fields = { year: 1900, month: 0, date: 1, hours: 0 }, dt;

      for( var i = 1, n = results.length; i < n; i++ ) {
        var mapper = map[i-1];
        if ( mapper.apply ) {
          mapper.apply.call(fields, results[i]);
        }
      }

      if ( isValid(fields.year, fields.month, fields.date) ) {
        dt = new Date( fields.year, fields.month, fields.date, fields.hours);
      }

      return dt;
    }
  };

  // Check if date is valid for specific month (and year for February).
  // Month: 0 = Jan, 1 = Feb, etc
  function isValid(year, month, date) {
    if ( month === 1 && date > 28) {
        return date === 29 && ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
    }

    if ( month === 3 || month === 5 || month === 8 || month === 10) {
        return date < 31;
    }

    return true;
  }
}]);

angular.module('ui.bootstrap.position', [])

/**
 * A set of utility methods that can be use to retrieve position of DOM elements.
 * It is meant to be used where we need to absolute-position DOM elements in
 * relation to other, existing elements (this is the case for tooltips, popovers,
 * typeahead suggestions etc.).
 */
  .factory('$position', ['$document', '$window', function ($document, $window) {

    function getStyle(el, cssprop) {
      if (el.currentStyle) { //IE
        return el.currentStyle[cssprop];
      } else if ($window.getComputedStyle) {
        return $window.getComputedStyle(el)[cssprop];
      }
      // finally try and get inline style
      return el.style[cssprop];
    }

    /**
     * Checks if a given element is statically positioned
     * @param element - raw DOM element
     */
    function isStaticPositioned(element) {
      return (getStyle(element, 'position') || 'static' ) === 'static';
    }

    /**
     * returns the closest, non-statically positioned parentOffset of a given element
     * @param element
     */
    var parentOffsetEl = function (element) {
      var docDomEl = $document[0];
      var offsetParent = element.offsetParent || docDomEl;
      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {
        offsetParent = offsetParent.offsetParent;
      }
      return offsetParent || docDomEl;
    };

    return {
      /**
       * Provides read-only equivalent of jQuery's position function:
       * http://api.jquery.com/position/
       */
      position: function (element) {
        var elBCR = this.offset(element);
        var offsetParentBCR = { top: 0, left: 0 };
        var offsetParentEl = parentOffsetEl(element[0]);
        if (offsetParentEl != $document[0]) {
          offsetParentBCR = this.offset(angular.element(offsetParentEl));
          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }

        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: boundingClientRect.width || element.prop('offsetWidth'),
          height: boundingClientRect.height || element.prop('offsetHeight'),
          top: elBCR.top - offsetParentBCR.top,
          left: elBCR.left - offsetParentBCR.left
        };
      },

      /**
       * Provides read-only equivalent of jQuery's offset function:
       * http://api.jquery.com/offset/
       */
      offset: function (element) {
        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: boundingClientRect.width || element.prop('offsetWidth'),
          height: boundingClientRect.height || element.prop('offsetHeight'),
          top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
          left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
        };
      },

      /**
       * Provides coordinates for the targetEl in relation to hostEl
       */
      positionElements: function (hostEl, targetEl, positionStr, appendToBody) {

        var positionStrParts = positionStr.split('-');
        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';

        var hostElPos,
          targetElWidth,
          targetElHeight,
          targetElPos;

        hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);

        targetElWidth = targetEl.prop('offsetWidth');
        targetElHeight = targetEl.prop('offsetHeight');

        var shiftWidth = {
          center: function () {
            return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;
          },
          left: function () {
            return hostElPos.left;
          },
          right: function () {
            return hostElPos.left + hostElPos.width;
          }
        };

        var shiftHeight = {
          center: function () {
            return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;
          },
          top: function () {
            return hostElPos.top;
          },
          bottom: function () {
            return hostElPos.top + hostElPos.height;
          }
        };

        switch (pos0) {
          case 'right':
            targetElPos = {
              top: shiftHeight[pos1](),
              left: shiftWidth[pos0]()
            };
            break;
          case 'left':
            targetElPos = {
              top: shiftHeight[pos1](),
              left: hostElPos.left - targetElWidth
            };
            break;
          case 'bottom':
            targetElPos = {
              top: shiftHeight[pos0](),
              left: shiftWidth[pos1]()
            };
            break;
          default:
            targetElPos = {
              top: hostElPos.top - targetElHeight,
              left: shiftWidth[pos1]()
            };
            break;
        }

        return targetElPos;
      }
    };
  }]);

angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.position'])

.constant('datepickerConfig', {
  formatDay: 'dd',
  formatMonth: 'MMMM',
  formatYear: 'yyyy',
  formatDayHeader: 'EEE',
  formatDayTitle: 'MMMM yyyy',
  formatMonthTitle: 'yyyy',
  datepickerMode: 'day',
  minMode: 'day',
  maxMode: 'year',
  showWeeks: true,
  startingDay: 0,
  yearRange: 20,
  minDate: null,
  maxDate: null
})

.controller('DatepickerController', ['$scope', '$attrs', '$parse', '$interpolate', '$timeout', '$log', 'dateFilter', 'datepickerConfig', function($scope, $attrs, $parse, $interpolate, $timeout, $log, dateFilter, datepickerConfig) {
  var self = this,
      ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl;

  // Modes chain
  this.modes = ['day', 'month', 'year'];

  // Configuration attributes
  angular.forEach(['formatDay', 'formatMonth', 'formatYear', 'formatDayHeader', 'formatDayTitle', 'formatMonthTitle',
                   'minMode', 'maxMode', 'showWeeks', 'startingDay', 'yearRange'], function( key, index ) {
    self[key] = angular.isDefined($attrs[key]) ? (index < 8 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key])) : datepickerConfig[key];
  });

  // Watchable date attributes
  angular.forEach(['minDate', 'maxDate'], function( key ) {
    if ( $attrs[key] ) {
      $scope.$parent.$watch($parse($attrs[key]), function(value) {
        self[key] = value ? new Date(value) : null;
        self.refreshView();
      });
    } else {
      self[key] = datepickerConfig[key] ? new Date(datepickerConfig[key]) : null;
    }
  });

  $scope.datepickerMode = $scope.datepickerMode || datepickerConfig.datepickerMode;
  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);
  this.activeDate = angular.isDefined($attrs.initDate) ? $scope.$parent.$eval($attrs.initDate) : new Date();

  $scope.isActive = function(dateObject) {
    if (self.compare(dateObject.date, self.activeDate) === 0) {
      $scope.activeDateId = dateObject.uid;
      return true;
    }
    return false;
  };

  this.init = function( ngModelCtrl_ ) {
    ngModelCtrl = ngModelCtrl_;

    ngModelCtrl.$render = function() {
      self.render();
    };
  };

  this.render = function() {
    if ( ngModelCtrl.$modelValue ) {
      var date = new Date( ngModelCtrl.$modelValue ),
          isValid = !isNaN(date);

      if ( isValid ) {
        this.activeDate = date;
      } else {
        $log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
      }
      ngModelCtrl.$setValidity('date', isValid);
    }
    this.refreshView();
  };

  this.refreshView = function() {
    if ( this.element ) {
      this._refreshView();

      var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
      ngModelCtrl.$setValidity('date-disabled', !date || (this.element && !this.isDisabled(date)));
    }
  };

  this.createDateObject = function(date, format) {
    var model = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
    return {
      date: date,
      label: dateFilter(date, format),
      selected: model && this.compare(date, model) === 0,
      disabled: this.isDisabled(date),
      current: this.compare(date, new Date()) === 0
    };
  };

  this.isDisabled = function( date ) {
    return ((this.minDate && this.compare(date, this.minDate) < 0) || (this.maxDate && this.compare(date, this.maxDate) > 0) || ($attrs.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode})));
  };

  // Split array into smaller arrays
  this.split = function(arr, size) {
    var arrays = [];
    while (arr.length > 0) {
      arrays.push(arr.splice(0, size));
    }
    return arrays;
  };

  $scope.select = function( date ) {
    if ( $scope.datepickerMode === self.minMode ) {
      var dt = ngModelCtrl.$modelValue ? new Date( ngModelCtrl.$modelValue ) : new Date(0, 0, 0, 0, 0, 0, 0);
      dt.setFullYear( date.getFullYear(), date.getMonth(), date.getDate() );
      ngModelCtrl.$setViewValue( dt );
      ngModelCtrl.$render();
    } else {
      self.activeDate = date;
      $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) - 1 ];
    }
  };

  $scope.move = function( direction ) {
    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
        month = self.activeDate.getMonth() + direction * (self.step.months || 0);
    self.activeDate.setFullYear(year, month, 1);
    self.refreshView();
  };

  $scope.toggleMode = function( direction ) {
    direction = direction || 1;

    if (($scope.datepickerMode === self.maxMode && direction === 1) || ($scope.datepickerMode === self.minMode && direction === -1)) {
      return;
    }

    $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) + direction ];
  };

  // Key event mapper
  $scope.keys = { 13:'enter', 32:'space', 33:'pageup', 34:'pagedown', 35:'end', 36:'home', 37:'left', 38:'up', 39:'right', 40:'down' };

  var focusElement = function() {
    $timeout(function() {
      self.element[0].focus();
    }, 0 , false);
  };

  // Listen for focus requests from popup directive
  $scope.$on('datepicker.focus', focusElement);

  $scope.keydown = function( evt ) {
    var key = $scope.keys[evt.which];

    if ( !key || evt.shiftKey || evt.altKey ) {
      return;
    }

    evt.preventDefault();
    evt.stopPropagation();

    if (key === 'enter' || key === 'space') {
      if ( self.isDisabled(self.activeDate)) {
        return; // do nothing
      }
      $scope.select(self.activeDate);
      focusElement();
    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
      $scope.toggleMode(key === 'up' ? 1 : -1);
      focusElement();
    } else {
      self.handleKeyDown(key, evt);
      self.refreshView();
    }
  };
}])

.directive( 'datepicker', function () {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/datepicker.html',
    scope: {
      datepickerMode: '=?',
      dateDisabled: '&'
    },
    require: ['datepicker', '?^ngModel'],
    controller: 'DatepickerController',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if ( ngModelCtrl ) {
        datepickerCtrl.init( ngModelCtrl );
      }
    }
  };
})

.directive('daypicker', ['dateFilter', function (dateFilter) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/day.html',
    require: '^datepicker',
    link: function(scope, element, attrs, ctrl) {
      scope.showWeeks = ctrl.showWeeks;

      ctrl.step = { months: 1 };
      ctrl.element = element;

      var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      function getDaysInMonth( year, month ) {
        return ((month === 1) && (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0))) ? 29 : DAYS_IN_MONTH[month];
      }

      function getDates(startDate, n) {
        var dates = new Array(n), current = new Date(startDate), i = 0;
        current.setHours(12); // Prevent repeated dates because of timezone bug
        while ( i < n ) {
          dates[i++] = new Date(current);
          current.setDate( current.getDate() + 1 );
        }
        return dates;
      }

      ctrl._refreshView = function() {
        var year = ctrl.activeDate.getFullYear(),
          month = ctrl.activeDate.getMonth(),
          firstDayOfMonth = new Date(year, month, 1),
          difference = ctrl.startingDay - firstDayOfMonth.getDay(),
          numDisplayedFromPreviousMonth = (difference > 0) ? 7 - difference : - difference,
          firstDate = new Date(firstDayOfMonth);

        if ( numDisplayedFromPreviousMonth > 0 ) {
          firstDate.setDate( - numDisplayedFromPreviousMonth + 1 );
        }

        // 42 is the number of days on a six-month calendar
        var days = getDates(firstDate, 42);
        for (var i = 0; i < 42; i ++) {
          days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), {
            secondary: days[i].getMonth() !== month,
            uid: scope.uniqueId + '-' + i
          });
        }

        scope.labels = new Array(7);
        for (var j = 0; j < 7; j++) {
          scope.labels[j] = {
            abbr: dateFilter(days[j].date, ctrl.formatDayHeader),
            full: dateFilter(days[j].date, 'EEEE')
          };
        }

        scope.title = dateFilter(ctrl.activeDate, ctrl.formatDayTitle);
        scope.rows = ctrl.split(days, 7);

        if ( scope.showWeeks ) {
          scope.weekNumbers = [];
          var weekNumber = getISO8601WeekNumber( scope.rows[0][0].date ),
              numWeeks = scope.rows.length;
          while( scope.weekNumbers.push(weekNumber++) < numWeeks ) {}
        }
      };

      ctrl.compare = function(date1, date2) {
        return (new Date( date1.getFullYear(), date1.getMonth(), date1.getDate() ) - new Date( date2.getFullYear(), date2.getMonth(), date2.getDate() ) );
      };

      function getISO8601WeekNumber(date) {
        var checkDate = new Date(date);
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
        var time = checkDate.getTime();
        checkDate.setMonth(0); // Compare with Jan 1
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
      }

      ctrl.handleKeyDown = function( key, evt ) {
        var date = ctrl.activeDate.getDate();

        if (key === 'left') {
          date = date - 1;   // up
        } else if (key === 'up') {
          date = date - 7;   // down
        } else if (key === 'right') {
          date = date + 1;   // down
        } else if (key === 'down') {
          date = date + 7;
        } else if (key === 'pageup' || key === 'pagedown') {
          var month = ctrl.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);
          ctrl.activeDate.setMonth(month, 1);
          date = Math.min(getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth()), date);
        } else if (key === 'home') {
          date = 1;
        } else if (key === 'end') {
          date = getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth());
        }
        ctrl.activeDate.setDate(date);
      };

      ctrl.refreshView();
    }
  };
}])

.directive('monthpicker', ['dateFilter', function (dateFilter) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/month.html',
    require: '^datepicker',
    link: function(scope, element, attrs, ctrl) {
      ctrl.step = { years: 1 };
      ctrl.element = element;

      ctrl._refreshView = function() {
        var months = new Array(12),
            year = ctrl.activeDate.getFullYear();

        for ( var i = 0; i < 12; i++ ) {
          months[i] = angular.extend(ctrl.createDateObject(new Date(year, i, 1), ctrl.formatMonth), {
            uid: scope.uniqueId + '-' + i
          });
        }

        scope.title = dateFilter(ctrl.activeDate, ctrl.formatMonthTitle);
        scope.rows = ctrl.split(months, 3);
      };

      ctrl.compare = function(date1, date2) {
        return new Date( date1.getFullYear(), date1.getMonth() ) - new Date( date2.getFullYear(), date2.getMonth() );
      };

      ctrl.handleKeyDown = function( key, evt ) {
        var date = ctrl.activeDate.getMonth();

        if (key === 'left') {
          date = date - 1;   // up
        } else if (key === 'up') {
          date = date - 3;   // down
        } else if (key === 'right') {
          date = date + 1;   // down
        } else if (key === 'down') {
          date = date + 3;
        } else if (key === 'pageup' || key === 'pagedown') {
          var year = ctrl.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);
          ctrl.activeDate.setFullYear(year);
        } else if (key === 'home') {
          date = 0;
        } else if (key === 'end') {
          date = 11;
        }
        ctrl.activeDate.setMonth(date);
      };

      ctrl.refreshView();
    }
  };
}])

.directive('yearpicker', ['dateFilter', function (dateFilter) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/year.html',
    require: '^datepicker',
    link: function(scope, element, attrs, ctrl) {
      var range = ctrl.yearRange;

      ctrl.step = { years: range };
      ctrl.element = element;

      function getStartingYear( year ) {
        return parseInt((year - 1) / range, 10) * range + 1;
      }

      ctrl._refreshView = function() {
        var years = new Array(range);

        for ( var i = 0, start = getStartingYear(ctrl.activeDate.getFullYear()); i < range; i++ ) {
          years[i] = angular.extend(ctrl.createDateObject(new Date(start + i, 0, 1), ctrl.formatYear), {
            uid: scope.uniqueId + '-' + i
          });
        }

        scope.title = [years[0].label, years[range - 1].label].join(' - ');
        scope.rows = ctrl.split(years, 5);
      };

      ctrl.compare = function(date1, date2) {
        return date1.getFullYear() - date2.getFullYear();
      };

      ctrl.handleKeyDown = function( key, evt ) {
        var date = ctrl.activeDate.getFullYear();

        if (key === 'left') {
          date = date - 1;   // up
        } else if (key === 'up') {
          date = date - 5;   // down
        } else if (key === 'right') {
          date = date + 1;   // down
        } else if (key === 'down') {
          date = date + 5;
        } else if (key === 'pageup' || key === 'pagedown') {
          date += (key === 'pageup' ? - 1 : 1) * ctrl.step.years;
        } else if (key === 'home') {
          date = getStartingYear( ctrl.activeDate.getFullYear() );
        } else if (key === 'end') {
          date = getStartingYear( ctrl.activeDate.getFullYear() ) + range - 1;
        }
        ctrl.activeDate.setFullYear(date);
      };

      ctrl.refreshView();
    }
  };
}])

.constant('datepickerPopupConfig', {
  datepickerPopup: 'yyyy-MM-dd',
  currentText: 'Today',
  clearText: 'Clear',
  closeText: 'Done',
  closeOnDateSelection: true,
  appendToBody: false,
  showButtonBar: true
})

.directive('datepickerPopup', ['$compile', '$parse', '$document', '$position', 'dateFilter', 'dateParser', 'datepickerPopupConfig',
function ($compile, $parse, $document, $position, dateFilter, dateParser, datepickerPopupConfig) {
  return {
    restrict: 'EA',
    require: 'ngModel',
    scope: {
      isOpen: '=?',
      currentText: '@',
      clearText: '@',
      closeText: '@',
      dateDisabled: '&'
    },
    link: function(scope, element, attrs, ngModel) {
      var dateFormat,
          closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection,
          appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;

      scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;

      scope.getText = function( key ) {
        return scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
      };

      attrs.$observe('datepickerPopup', function(value) {
          dateFormat = value || datepickerPopupConfig.datepickerPopup;
          ngModel.$render();
      });

      // popup element used to display calendar
      var popupEl = angular.element('<div datepicker-popup-wrap><div datepicker></div></div>');
      popupEl.attr({
        'ng-model': 'date',
        'ng-change': 'dateSelection()'
      });

      function cameltoDash( string ){
        return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });
      }

      // datepicker element
      var datepickerEl = angular.element(popupEl.children()[0]);
      if ( attrs.datepickerOptions ) {
        angular.forEach(scope.$parent.$eval(attrs.datepickerOptions), function( value, option ) {
          datepickerEl.attr( cameltoDash(option), value );
        });
      }

      scope.watchData = {};
      angular.forEach(['minDate', 'maxDate', 'datepickerMode'], function( key ) {
        if ( attrs[key] ) {
          var getAttribute = $parse(attrs[key]);
          scope.$parent.$watch(getAttribute, function(value){
            scope.watchData[key] = value;
          });
          datepickerEl.attr(cameltoDash(key), 'watchData.' + key);

          // Propagate changes from datepicker to outside
          if ( key === 'datepickerMode' ) {
            var setAttribute = getAttribute.assign;
            scope.$watch('watchData.' + key, function(value, oldvalue) {
              if ( value !== oldvalue ) {
                setAttribute(scope.$parent, value);
              }
            });
          }
        }
      });
      if (attrs.dateDisabled) {
        datepickerEl.attr('date-disabled', 'dateDisabled({ date: date, mode: mode })');
      }

      function parseDate(viewValue) {
        if (!viewValue) {
          ngModel.$setValidity('date', true);
          return null;
        } else if (angular.isDate(viewValue) && !isNaN(viewValue)) {
          ngModel.$setValidity('date', true);
          return viewValue;
        } else if (angular.isString(viewValue)) {
          var date = dateParser.parse(viewValue, dateFormat) || new Date(viewValue);
          if (isNaN(date)) {
            ngModel.$setValidity('date', false);
            return undefined;
          } else {
            ngModel.$setValidity('date', true);
            return date;
          }
        } else {
          ngModel.$setValidity('date', false);
          return undefined;
        }
      }
      ngModel.$parsers.unshift(parseDate);

      // Inner change
      scope.dateSelection = function(dt) {
        if (angular.isDefined(dt)) {
          scope.date = dt;
        }
        ngModel.$setViewValue(scope.date);
        ngModel.$render();

        if ( closeOnDateSelection ) {
          scope.isOpen = false;
          element[0].focus();
        }
      };

      element.bind('input change keyup', function() {
        scope.$apply(function() {
          scope.date = ngModel.$modelValue;
        });
      });

      // Outter change
      ngModel.$render = function() {
        var date = ngModel.$viewValue ? dateFilter(ngModel.$viewValue, dateFormat) : '';
        element.val(date);
        scope.date = parseDate( ngModel.$modelValue );
      };

      var documentClickBind = function(event) {
        if (scope.isOpen && event.target !== element[0]) {
          scope.$apply(function() {
            scope.isOpen = false;
          });
        }
      };

      var keydown = function(evt, noApply) {
        scope.keydown(evt);
      };
      element.bind('keydown', keydown);

      scope.keydown = function(evt) {
        if (evt.which === 27) {
          evt.preventDefault();
          evt.stopPropagation();
          scope.close();
        } else if (evt.which === 40 && !scope.isOpen) {
          scope.isOpen = true;
        }
      };

      scope.$watch('isOpen', function(value) {
        if (value) {
          scope.$broadcast('datepicker.focus');
          scope.position = appendToBody ? $position.offset(element) : $position.position(element);
          scope.position.top = scope.position.top + element.prop('offsetHeight');

          $document.bind('click', documentClickBind);
        } else {
          $document.unbind('click', documentClickBind);
        }
      });

      scope.select = function( date ) {
        if (date === 'today') {
          var today = new Date();
          if (angular.isDate(ngModel.$modelValue)) {
            date = new Date(ngModel.$modelValue);
            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
          } else {
            date = new Date(today.setHours(0, 0, 0, 0));
          }
        }
        scope.dateSelection( date );
      };

      scope.close = function() {
        scope.isOpen = false;
        element[0].focus();
      };

      var $popup = $compile(popupEl)(scope);
      // Prevent jQuery cache memory leak (template is now redundant after linking)
      popupEl.remove();

      if ( appendToBody ) {
        $document.find('body').append($popup);
      } else {
        element.after($popup);
      }

      scope.$on('$destroy', function() {
        $popup.remove();
        element.unbind('keydown', keydown);
        $document.unbind('click', documentClickBind);
      });
    }
  };
}])

.directive('datepickerPopupWrap', function() {
  return {
    restrict:'EA',
    replace: true,
    transclude: true,
    templateUrl: 'template/datepicker/popup.html',
    link:function (scope, element, attrs) {
      element.bind('click', function(event) {
        event.preventDefault();
        event.stopPropagation();
      });
    }
  };
});

angular.module('ui.bootstrap.dropdown', [])

.constant('dropdownConfig', {
  openClass: 'open'
})

.service('dropdownService', ['$document', function($document) {
  var openScope = null;

  this.open = function( dropdownScope ) {
    if ( !openScope ) {
      $document.bind('click', closeDropdown);
      $document.bind('keydown', escapeKeyBind);
    }

    if ( openScope && openScope !== dropdownScope ) {
        openScope.isOpen = false;
    }

    openScope = dropdownScope;
  };

  this.close = function( dropdownScope ) {
    if ( openScope === dropdownScope ) {
      openScope = null;
      $document.unbind('click', closeDropdown);
      $document.unbind('keydown', escapeKeyBind);
    }
  };

  var closeDropdown = function( evt ) {
    // This method may still be called during the same mouse event that
    // unbound this event handler. So check openScope before proceeding.
    if (!openScope) { return; }

    var toggleElement = openScope.getToggleElement();
    if ( evt && toggleElement && toggleElement[0].contains(evt.target) ) {
        return;
    }

    openScope.$apply(function() {
      openScope.isOpen = false;
    });
  };

  var escapeKeyBind = function( evt ) {
    if ( evt.which === 27 ) {
      openScope.focusToggleElement();
      closeDropdown();
    }
  };
}])

.controller('DropdownController', ['$scope', '$attrs', '$parse', 'dropdownConfig', 'dropdownService', '$animate', function($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate) {
  var self = this,
      scope = $scope.$new(), // create a child scope so we are not polluting original one
      openClass = dropdownConfig.openClass,
      getIsOpen,
      setIsOpen = angular.noop,
      toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop;

  this.init = function( element ) {
    self.$element = element;

    if ( $attrs.isOpen ) {
      getIsOpen = $parse($attrs.isOpen);
      setIsOpen = getIsOpen.assign;

      $scope.$watch(getIsOpen, function(value) {
        scope.isOpen = !!value;
      });
    }
  };

  this.toggle = function( open ) {
    return scope.isOpen = arguments.length ? !!open : !scope.isOpen;
  };

  // Allow other directives to watch status
  this.isOpen = function() {
    return scope.isOpen;
  };

  scope.getToggleElement = function() {
    return self.toggleElement;
  };

  scope.focusToggleElement = function() {
    if ( self.toggleElement ) {
      self.toggleElement[0].focus();
    }
  };

  scope.$watch('isOpen', function( isOpen, wasOpen ) {
    $animate[isOpen ? 'addClass' : 'removeClass'](self.$element, openClass);

    if ( isOpen ) {
      scope.focusToggleElement();
      dropdownService.open( scope );
    } else {
      dropdownService.close( scope );
    }

    setIsOpen($scope, isOpen);
    if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
      toggleInvoker($scope, { open: !!isOpen });
    }
  });

  $scope.$on('$locationChangeSuccess', function() {
    scope.isOpen = false;
  });

  $scope.$on('$destroy', function() {
    scope.$destroy();
  });
}])

.directive('dropdown', function() {
  return {
    controller: 'DropdownController',
    link: function(scope, element, attrs, dropdownCtrl) {
      dropdownCtrl.init( element );
    }
  };
})

.directive('dropdownToggle', function() {
  return {
    require: '?^dropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if ( !dropdownCtrl ) {
        return;
      }

      dropdownCtrl.toggleElement = element;

      var toggleDropdown = function(event) {
        event.preventDefault();

        if ( !element.hasClass('disabled') && !attrs.disabled ) {
          scope.$apply(function() {
            dropdownCtrl.toggle();
          });
        }
      };

      element.bind('click', toggleDropdown);

      // WAI-ARIA
      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });
      scope.$watch(dropdownCtrl.isOpen, function( isOpen ) {
        element.attr('aria-expanded', !!isOpen);
      });

      scope.$on('$destroy', function() {
        element.unbind('click', toggleDropdown);
      });
    }
  };
});

angular.module('ui.bootstrap.modal', ['ui.bootstrap.transition'])

/**
 * A helper, internal data structure that acts as a map but also allows getting / removing
 * elements in the LIFO order
 */
  .factory('$$stackedMap', function () {
    return {
      createNew: function () {
        var stack = [];

        return {
          add: function (key, value) {
            stack.push({
              key: key,
              value: value
            });
          },
          get: function (key) {
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                return stack[i];
              }
            }
          },
          keys: function() {
            var keys = [];
            for (var i = 0; i < stack.length; i++) {
              keys.push(stack[i].key);
            }
            return keys;
          },
          top: function () {
            return stack[stack.length - 1];
          },
          remove: function (key) {
            var idx = -1;
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                idx = i;
                break;
              }
            }
            return stack.splice(idx, 1)[0];
          },
          removeTop: function () {
            return stack.splice(stack.length - 1, 1)[0];
          },
          length: function () {
            return stack.length;
          }
        };
      }
    };
  })

/**
 * A helper directive for the $modal service. It creates a backdrop element.
 */
  .directive('modalBackdrop', ['$timeout', function ($timeout) {
    return {
      restrict: 'EA',
      replace: true,
      templateUrl: 'template/modal/backdrop.html',
      link: function (scope, element, attrs) {
        scope.backdropClass = attrs.backdropClass || '';

        scope.animate = false;

        //trigger CSS transitions
        $timeout(function () {
          scope.animate = true;
        });
      }
    };
  }])

  .directive('modalWindow', ['$modalStack', '$timeout', function ($modalStack, $timeout) {
    return {
      restrict: 'EA',
      scope: {
        index: '@',
        animate: '='
      },
      replace: true,
      transclude: true,
      templateUrl: function(tElement, tAttrs) {
        return tAttrs.templateUrl || 'template/modal/window.html';
      },
      link: function (scope, element, attrs) {
        element.addClass(attrs.windowClass || '');
        scope.size = attrs.size;

        $timeout(function () {
          // trigger CSS transitions
          scope.animate = true;

          /**
           * Auto-focusing of a freshly-opened modal element causes any child elements
           * with the autofocus attribute to lose focus. This is an issue on touch
           * based devices which will show and then hide the onscreen keyboard.
           * Attempts to refocus the autofocus element via JavaScript will not reopen
           * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
           * the modal element if the modal does not contain an autofocus element.
           */
          if (!element[0].querySelectorAll('[autofocus]').length) {
            element[0].focus();
          }
        });

        scope.close = function (evt) {
          var modal = $modalStack.getTop();
          if (modal && modal.value.backdrop && modal.value.backdrop != 'static' && (evt.target === evt.currentTarget)) {
            evt.preventDefault();
            evt.stopPropagation();
            $modalStack.dismiss(modal.key, 'backdrop click');
          }
        };
      }
    };
  }])

  .directive('modalTransclude', function () {
    return {
      link: function($scope, $element, $attrs, controller, $transclude) {
        $transclude($scope.$parent, function(clone) {
          $element.empty();
          $element.append(clone);
        });
      }
    };
  })

  .factory('$modalStack', ['$transition', '$timeout', '$document', '$compile', '$rootScope', '$$stackedMap',
    function ($transition, $timeout, $document, $compile, $rootScope, $$stackedMap) {

      var OPENED_MODAL_CLASS = 'modal-open';

      var backdropDomEl, backdropScope;
      var openedWindows = $$stackedMap.createNew();
      var $modalStack = {};

      function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
          if (openedWindows.get(opened[i]).value.backdrop) {
            topBackdropIndex = i;
          }
        }
        return topBackdropIndex;
      }

      $rootScope.$watch(backdropIndex, function(newBackdropIndex){
        if (backdropScope) {
          backdropScope.index = newBackdropIndex;
        }
      });

      function removeModalWindow(modalInstance) {

        var body = $document.find('body').eq(0);
        var modalWindow = openedWindows.get(modalInstance).value;

        //clean up the stack
        openedWindows.remove(modalInstance);

        //remove window DOM element
        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, 300, function() {
          modalWindow.modalScope.$destroy();
          body.toggleClass(OPENED_MODAL_CLASS, openedWindows.length() > 0);
          checkRemoveBackdrop();
        });
      }

      function checkRemoveBackdrop() {
          //remove backdrop if no longer needed
          if (backdropDomEl && backdropIndex() == -1) {
            var backdropScopeRef = backdropScope;
            removeAfterAnimate(backdropDomEl, backdropScope, 150, function () {
              backdropScopeRef.$destroy();
              backdropScopeRef = null;
            });
            backdropDomEl = undefined;
            backdropScope = undefined;
          }
      }

      function removeAfterAnimate(domEl, scope, emulateTime, done) {
        // Closing animation
        scope.animate = false;

        var transitionEndEventName = $transition.transitionEndEventName;
        if (transitionEndEventName) {
          // transition out
          var timeout = $timeout(afterAnimating, emulateTime);

          domEl.bind(transitionEndEventName, function () {
            $timeout.cancel(timeout);
            afterAnimating();
            scope.$apply();
          });
        } else {
          // Ensure this call is async
          $timeout(afterAnimating);
        }

        function afterAnimating() {
          if (afterAnimating.done) {
            return;
          }
          afterAnimating.done = true;

          domEl.remove();
          if (done) {
            done();
          }
        }
      }

      $document.bind('keydown', function (evt) {
        var modal;

        if (evt.which === 27) {
          modal = openedWindows.top();
          if (modal && modal.value.keyboard) {
            evt.preventDefault();
            $rootScope.$apply(function () {
              $modalStack.dismiss(modal.key, 'escape key press');
            });
          }
        }
      });

      $modalStack.open = function (modalInstance, modal) {

        openedWindows.add(modalInstance, {
          deferred: modal.deferred,
          modalScope: modal.scope,
          backdrop: modal.backdrop,
          keyboard: modal.keyboard
        });

        var body = $document.find('body').eq(0),
            currBackdropIndex = backdropIndex();

        if (currBackdropIndex >= 0 && !backdropDomEl) {
          backdropScope = $rootScope.$new(true);
          backdropScope.index = currBackdropIndex;
          var angularBackgroundDomEl = angular.element('<div modal-backdrop></div>');
          angularBackgroundDomEl.attr('backdrop-class', modal.backdropClass);
          backdropDomEl = $compile(angularBackgroundDomEl)(backdropScope);
          body.append(backdropDomEl);
        }

        var angularDomEl = angular.element('<div modal-window></div>');
        angularDomEl.attr({
          'template-url': modal.windowTemplateUrl,
          'window-class': modal.windowClass,
          'size': modal.size,
          'index': openedWindows.length() - 1,
          'animate': 'animate'
        }).html(modal.content);

        var modalDomEl = $compile(angularDomEl)(modal.scope);
        openedWindows.top().value.modalDomEl = modalDomEl;
        body.append(modalDomEl);
        body.addClass(OPENED_MODAL_CLASS);
      };

      $modalStack.close = function (modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.deferred.resolve(result);
          removeModalWindow(modalInstance);
        }
      };

      $modalStack.dismiss = function (modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.deferred.reject(reason);
          removeModalWindow(modalInstance);
        }
      };

      $modalStack.dismissAll = function (reason) {
        var topModal = this.getTop();
        while (topModal) {
          this.dismiss(topModal.key, reason);
          topModal = this.getTop();
        }
      };

      $modalStack.getTop = function () {
        return openedWindows.top();
      };

      return $modalStack;
    }])

  .provider('$modal', function () {

    var $modalProvider = {
      options: {
        backdrop: true, //can be also false or 'static'
        keyboard: true
      },
      $get: ['$injector', '$rootScope', '$q', '$http', '$templateCache', '$controller', '$modalStack',
        function ($injector, $rootScope, $q, $http, $templateCache, $controller, $modalStack) {

          var $modal = {};

          function getTemplatePromise(options) {
            return options.template ? $q.when(options.template) :
              $http.get(angular.isFunction(options.templateUrl) ? (options.templateUrl)() : options.templateUrl,
                {cache: $templateCache}).then(function (result) {
                  return result.data;
              });
          }

          function getResolvePromises(resolves) {
            var promisesArr = [];
            angular.forEach(resolves, function (value) {
              if (angular.isFunction(value) || angular.isArray(value)) {
                promisesArr.push($q.when($injector.invoke(value)));
              }
            });
            return promisesArr;
          }

          $modal.open = function (modalOptions) {

            var modalResultDeferred = $q.defer();
            var modalOpenedDeferred = $q.defer();

            //prepare an instance of a modal to be injected into controllers and returned to a caller
            var modalInstance = {
              result: modalResultDeferred.promise,
              opened: modalOpenedDeferred.promise,
              close: function (result) {
                $modalStack.close(modalInstance, result);
              },
              dismiss: function (reason) {
                $modalStack.dismiss(modalInstance, reason);
              }
            };

            //merge and clean up options
            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
            modalOptions.resolve = modalOptions.resolve || {};

            //verify options
            if (!modalOptions.template && !modalOptions.templateUrl) {
              throw new Error('One of template or templateUrl options is required.');
            }

            var templateAndResolvePromise =
              $q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));


            templateAndResolvePromise.then(function resolveSuccess(tplAndVars) {

              var modalScope = (modalOptions.scope || $rootScope).$new();
              modalScope.$close = modalInstance.close;
              modalScope.$dismiss = modalInstance.dismiss;

              var ctrlInstance, ctrlLocals = {};
              var resolveIter = 1;

              //controllers
              if (modalOptions.controller) {
                ctrlLocals.$scope = modalScope;
                ctrlLocals.$modalInstance = modalInstance;
                angular.forEach(modalOptions.resolve, function (value, key) {
                  ctrlLocals[key] = tplAndVars[resolveIter++];
                });

                ctrlInstance = $controller(modalOptions.controller, ctrlLocals);
                if (modalOptions.controllerAs) {
                  modalScope[modalOptions.controllerAs] = ctrlInstance;
                }
              }

              $modalStack.open(modalInstance, {
                scope: modalScope,
                deferred: modalResultDeferred,
                content: tplAndVars[0],
                backdrop: modalOptions.backdrop,
                keyboard: modalOptions.keyboard,
                backdropClass: modalOptions.backdropClass,
                windowClass: modalOptions.windowClass,
                windowTemplateUrl: modalOptions.windowTemplateUrl,
                size: modalOptions.size
              });

            }, function resolveError(reason) {
              modalResultDeferred.reject(reason);
            });

            templateAndResolvePromise.then(function () {
              modalOpenedDeferred.resolve(true);
            }, function () {
              modalOpenedDeferred.reject(false);
            });

            return modalInstance;
          };

          return $modal;
        }]
    };

    return $modalProvider;
  });

angular.module('ui.bootstrap.pagination', [])

.controller('PaginationController', ['$scope', '$attrs', '$parse', function ($scope, $attrs, $parse) {
  var self = this,
      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
      setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;

  this.init = function(ngModelCtrl_, config) {
    ngModelCtrl = ngModelCtrl_;
    this.config = config;

    ngModelCtrl.$render = function() {
      self.render();
    };

    if ($attrs.itemsPerPage) {
      $scope.$parent.$watch($parse($attrs.itemsPerPage), function(value) {
        self.itemsPerPage = parseInt(value, 10);
        $scope.totalPages = self.calculateTotalPages();
      });
    } else {
      this.itemsPerPage = config.itemsPerPage;
    }
  };

  this.calculateTotalPages = function() {
    var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / this.itemsPerPage);
    return Math.max(totalPages || 0, 1);
  };

  this.render = function() {
    $scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1;
  };

  $scope.selectPage = function(page) {
    if ( $scope.page !== page && page > 0 && page <= $scope.totalPages) {
      ngModelCtrl.$setViewValue(page);
      ngModelCtrl.$render();
    }
  };

  $scope.getText = function( key ) {
    return $scope[key + 'Text'] || self.config[key + 'Text'];
  };
  $scope.noPrevious = function() {
    return $scope.page === 1;
  };
  $scope.noNext = function() {
    return $scope.page === $scope.totalPages;
  };

  $scope.$watch('totalItems', function() {
    $scope.totalPages = self.calculateTotalPages();
  });

  $scope.$watch('totalPages', function(value) {
    setNumPages($scope.$parent, value); // Readonly variable

    if ( $scope.page > value ) {
      $scope.selectPage(value);
    } else {
      ngModelCtrl.$render();
    }
  });
}])

.constant('paginationConfig', {
  itemsPerPage: 10,
  boundaryLinks: false,
  directionLinks: true,
  firstText: 'First',
  previousText: 'Previous',
  nextText: 'Next',
  lastText: 'Last',
  rotate: true
})

.directive('pagination', ['$parse', 'paginationConfig', function($parse, paginationConfig) {
  return {
    restrict: 'EA',
    scope: {
      totalItems: '=',
      firstText: '@',
      previousText: '@',
      nextText: '@',
      lastText: '@'
    },
    require: ['pagination', '?ngModel'],
    controller: 'PaginationController',
    templateUrl: 'template/pagination/pagination.html',
    replace: true,
    link: function(scope, element, attrs, ctrls) {
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
         return; // do nothing if no ng-model
      }

      // Setup configuration parameters
      var maxSize = angular.isDefined(attrs.maxSize) ? scope.$parent.$eval(attrs.maxSize) : paginationConfig.maxSize,
          rotate = angular.isDefined(attrs.rotate) ? scope.$parent.$eval(attrs.rotate) : paginationConfig.rotate;
      scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : paginationConfig.boundaryLinks;
      scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : paginationConfig.directionLinks;

      paginationCtrl.init(ngModelCtrl, paginationConfig);

      if (attrs.maxSize) {
        scope.$parent.$watch($parse(attrs.maxSize), function(value) {
          maxSize = parseInt(value, 10);
          paginationCtrl.render();
        });
      }

      // Create page object used in template
      function makePage(number, text, isActive) {
        return {
          number: number,
          text: text,
          active: isActive
        };
      }

      function getPages(currentPage, totalPages) {
        var pages = [];

        // Default page limits
        var startPage = 1, endPage = totalPages;
        var isMaxSized = ( angular.isDefined(maxSize) && maxSize < totalPages );

        // recompute if maxSize
        if ( isMaxSized ) {
          if ( rotate ) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(maxSize/2), 1);
            endPage   = startPage + maxSize - 1;

            // Adjust if limit is exceeded
            if (endPage > totalPages) {
              endPage   = totalPages;
              startPage = endPage - maxSize + 1;
            }
          } else {
            // Visible pages are paginated with maxSize
            startPage = ((Math.ceil(currentPage / maxSize) - 1) * maxSize) + 1;

            // Adjust last page if limit is exceeded
            endPage = Math.min(startPage + maxSize - 1, totalPages);
          }
        }

        // Add page number links
        for (var number = startPage; number <= endPage; number++) {
          var page = makePage(number, number, number === currentPage);
          pages.push(page);
        }

        // Add links to move between page sets
        if ( isMaxSized && ! rotate ) {
          if ( startPage > 1 ) {
            var previousPageSet = makePage(startPage - 1, '...', false);
            pages.unshift(previousPageSet);
          }

          if ( endPage < totalPages ) {
            var nextPageSet = makePage(endPage + 1, '...', false);
            pages.push(nextPageSet);
          }
        }

        return pages;
      }

      var originalRender = paginationCtrl.render;
      paginationCtrl.render = function() {
        originalRender();
        if (scope.page > 0 && scope.page <= scope.totalPages) {
          scope.pages = getPages(scope.page, scope.totalPages);
        }
      };
    }
  };
}])

.constant('pagerConfig', {
  itemsPerPage: 10,
  previousText: '« Previous',
  nextText: 'Next »',
  align: true
})

.directive('pager', ['pagerConfig', function(pagerConfig) {
  return {
    restrict: 'EA',
    scope: {
      totalItems: '=',
      previousText: '@',
      nextText: '@'
    },
    require: ['pager', '?ngModel'],
    controller: 'PaginationController',
    templateUrl: 'template/pagination/pager.html',
    replace: true,
    link: function(scope, element, attrs, ctrls) {
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
         return; // do nothing if no ng-model
      }

      scope.align = angular.isDefined(attrs.align) ? scope.$parent.$eval(attrs.align) : pagerConfig.align;
      paginationCtrl.init(ngModelCtrl, pagerConfig);
    }
  };
}]);

/**
 * The following features are still outstanding: animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html tooltips, and selector delegation.
 */
angular.module( 'ui.bootstrap.tooltip', [ 'ui.bootstrap.position', 'ui.bootstrap.bindHtml' ] )

/**
 * The $tooltip service creates tooltip- and popover-like directives as well as
 * houses global options for them.
 */
.provider( '$tooltip', function () {
  // The default options tooltip and popover.
  var defaultOptions = {
    placement: 'top',
    animation: true,
    popupDelay: 0
  };

  // Default hide triggers for each show trigger
  var triggerMap = {
    'mouseenter': 'mouseleave',
    'click': 'click',
    'focus': 'blur'
  };

  // The options specified to the provider globally.
  var globalOptions = {};

  /**
   * `options({})` allows global configuration of all tooltips in the
   * application.
   *
   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
   *     // place tooltips left instead of top by default
   *     $tooltipProvider.options( { placement: 'left' } );
   *   });
   */
	this.options = function( value ) {
		angular.extend( globalOptions, value );
	};

  /**
   * This allows you to extend the set of trigger mappings available. E.g.:
   *
   *   $tooltipProvider.setTriggers( 'openTrigger': 'closeTrigger' );
   */
  this.setTriggers = function setTriggers ( triggers ) {
    angular.extend( triggerMap, triggers );
  };

  /**
   * This is a helper function for translating camel-case to snake-case.
   */
  function snake_case(name){
    var regexp = /[A-Z]/g;
    var separator = '-';
    return name.replace(regexp, function(letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }

  /**
   * Returns the actual instance of the $tooltip service.
   * TODO support multiple triggers
   */
  this.$get = [ '$window', '$compile', '$timeout', '$document', '$position', '$interpolate', function ( $window, $compile, $timeout, $document, $position, $interpolate ) {
    return function $tooltip ( type, prefix, defaultTriggerShow ) {
      var options = angular.extend( {}, defaultOptions, globalOptions );

      /**
       * Returns an object of show and hide triggers.
       *
       * If a trigger is supplied,
       * it is used to show the tooltip; otherwise, it will use the `trigger`
       * option passed to the `$tooltipProvider.options` method; else it will
       * default to the trigger supplied to this directive factory.
       *
       * The hide trigger is based on the show trigger. If the `trigger` option
       * was passed to the `$tooltipProvider.options` method, it will use the
       * mapped trigger from `triggerMap` or the passed trigger if the map is
       * undefined; otherwise, it uses the `triggerMap` value of the show
       * trigger; else it will just use the show trigger.
       */
      function getTriggers ( trigger ) {
        var show = trigger || options.trigger || defaultTriggerShow;
        var hide = triggerMap[show] || show;
        return {
          show: show,
          hide: hide
        };
      }

      var directiveName = snake_case( type );

      var startSym = $interpolate.startSymbol();
      var endSym = $interpolate.endSymbol();
      var template =
        '<div '+ directiveName +'-popup '+
          'title="'+startSym+'title'+endSym+'" '+
          'content="'+startSym+'content'+endSym+'" '+
          'placement="'+startSym+'placement'+endSym+'" '+
          'animation="animation" '+
          'is-open="isOpen"'+
          '>'+
        '</div>';

      return {
        restrict: 'EA',
        compile: function (tElem, tAttrs) {
          var tooltipLinker = $compile( template );

          return function link ( scope, element, attrs ) {
            var tooltip;
            var tooltipLinkedScope;
            var transitionTimeout;
            var popupTimeout;
            var appendToBody = angular.isDefined( options.appendToBody ) ? options.appendToBody : false;
            var triggers = getTriggers( undefined );
            var hasEnableExp = angular.isDefined(attrs[prefix+'Enable']);
            var ttScope = scope.$new(true);

            var positionTooltip = function () {

              var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
              ttPosition.top += 'px';
              ttPosition.left += 'px';

              // Now set the calculated positioning.
              tooltip.css( ttPosition );
            };

            // By default, the tooltip is not open.
            // TODO add ability to start tooltip opened
            ttScope.isOpen = false;

            function toggleTooltipBind () {
              if ( ! ttScope.isOpen ) {
                showTooltipBind();
              } else {
                hideTooltipBind();
              }
            }

            // Show the tooltip with delay if specified, otherwise show it immediately
            function showTooltipBind() {
              if(hasEnableExp && !scope.$eval(attrs[prefix+'Enable'])) {
                return;
              }

              prepareTooltip();

              if ( ttScope.popupDelay ) {
                // Do nothing if the tooltip was already scheduled to pop-up.
                // This happens if show is triggered multiple times before any hide is triggered.
                if (!popupTimeout) {
                  popupTimeout = $timeout( show, ttScope.popupDelay, false );
                  popupTimeout.then(function(reposition){reposition();});
                }
              } else {
                show()();
              }
            }

            function hideTooltipBind () {
              scope.$apply(function () {
                hide();
              });
            }

            // Show the tooltip popup element.
            function show() {

              popupTimeout = null;

              // If there is a pending remove transition, we must cancel it, lest the
              // tooltip be mysteriously removed.
              if ( transitionTimeout ) {
                $timeout.cancel( transitionTimeout );
                transitionTimeout = null;
              }

              // Don't show empty tooltips.
              if ( ! ttScope.content ) {
                return angular.noop;
              }

              createTooltip();

              // Set the initial positioning.
              tooltip.css({ top: 0, left: 0, display: 'block' });
              ttScope.$digest();

              positionTooltip();

              // And show the tooltip.
              ttScope.isOpen = true;
              ttScope.$digest(); // digest required as $apply is not called

              // Return positioning function as promise callback for correct
              // positioning after draw.
              return positionTooltip;
            }

            // Hide the tooltip popup element.
            function hide() {
              // First things first: we don't show it anymore.
              ttScope.isOpen = false;

              //if tooltip is going to be shown after delay, we must cancel this
              $timeout.cancel( popupTimeout );
              popupTimeout = null;

              // And now we remove it from the DOM. However, if we have animation, we
              // need to wait for it to expire beforehand.
              // FIXME: this is a placeholder for a port of the transitions library.
              if ( ttScope.animation ) {
                if (!transitionTimeout) {
                  transitionTimeout = $timeout(removeTooltip, 500);
                }
              } else {
                removeTooltip();
              }
            }

            function createTooltip() {
              // There can only be one tooltip element per directive shown at once.
              if (tooltip) {
                removeTooltip();
              }
              tooltipLinkedScope = ttScope.$new();
              tooltip = tooltipLinker(tooltipLinkedScope, function (tooltip) {
                if ( appendToBody ) {
                  $document.find( 'body' ).append( tooltip );
                } else {
                  element.after( tooltip );
                }
              });
            }

            function removeTooltip() {
              transitionTimeout = null;
              if (tooltip) {
                tooltip.remove();
                tooltip = null;
              }
              if (tooltipLinkedScope) {
                tooltipLinkedScope.$destroy();
                tooltipLinkedScope = null;
              }
            }

            function prepareTooltip() {
              prepPlacement();
              prepPopupDelay();
            }

            /**
             * Observe the relevant attributes.
             */
            attrs.$observe( type, function ( val ) {
              ttScope.content = val;

              if (!val && ttScope.isOpen ) {
                hide();
              }
            });

            attrs.$observe( prefix+'Title', function ( val ) {
              ttScope.title = val;
            });

            function prepPlacement() {
              var val = attrs[ prefix + 'Placement' ];
              ttScope.placement = angular.isDefined( val ) ? val : options.placement;
            }

            function prepPopupDelay() {
              var val = attrs[ prefix + 'PopupDelay' ];
              var delay = parseInt( val, 10 );
              ttScope.popupDelay = ! isNaN(delay) ? delay : options.popupDelay;
            }

            var unregisterTriggers = function () {
              element.unbind(triggers.show, showTooltipBind);
              element.unbind(triggers.hide, hideTooltipBind);
            };

            function prepTriggers() {
              var val = attrs[ prefix + 'Trigger' ];
              unregisterTriggers();

              triggers = getTriggers( val );

              if ( triggers.show === triggers.hide ) {
                element.bind( triggers.show, toggleTooltipBind );
              } else {
                element.bind( triggers.show, showTooltipBind );
                element.bind( triggers.hide, hideTooltipBind );
              }
            }
            prepTriggers();

            var animation = scope.$eval(attrs[prefix + 'Animation']);
            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

            var appendToBodyVal = scope.$eval(attrs[prefix + 'AppendToBody']);
            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

            // if a tooltip is attached to <body> we need to remove it on
            // location change as its parent scope will probably not be destroyed
            // by the change.
            if ( appendToBody ) {
              scope.$on('$locationChangeSuccess', function closeTooltipOnLocationChangeSuccess () {
              if ( ttScope.isOpen ) {
                hide();
              }
            });
            }

            // Make sure tooltip is destroyed and removed.
            scope.$on('$destroy', function onDestroyTooltip() {
              $timeout.cancel( transitionTimeout );
              $timeout.cancel( popupTimeout );
              unregisterTriggers();
              removeTooltip();
              ttScope = null;
            });
          };
        }
      };
    };
  }];
})

.directive( 'tooltipPopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { content: '@', placement: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/tooltip/tooltip-popup.html'
  };
})

.directive( 'tooltip', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'tooltip', 'tooltip', 'mouseenter' );
}])

.directive( 'tooltipHtmlUnsafePopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { content: '@', placement: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'
  };
})

.directive( 'tooltipHtmlUnsafe', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'tooltipHtmlUnsafe', 'tooltip', 'mouseenter' );
}]);

/**
 * The following features are still outstanding: popup delay, animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html popovers, and selector delegatation.
 */
angular.module( 'ui.bootstrap.popover', [ 'ui.bootstrap.tooltip' ] )

.directive( 'popoverPopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { title: '@', content: '@', placement: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/popover/popover.html'
  };
})

.directive( 'popover', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'popover', 'popover', 'click' );
}]);

angular.module('ui.bootstrap.progressbar', [])

.constant('progressConfig', {
  animate: true,
  max: 100
})

.controller('ProgressController', ['$scope', '$attrs', 'progressConfig', function($scope, $attrs, progressConfig) {
    var self = this,
        animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

    this.bars = [];
    $scope.max = angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : progressConfig.max;

    this.addBar = function(bar, element) {
        if ( !animate ) {
            element.css({'transition': 'none'});
        }

        this.bars.push(bar);

        bar.$watch('value', function( value ) {
            bar.percent = +(100 * value / $scope.max).toFixed(2);
        });

        bar.$on('$destroy', function() {
            element = null;
            self.removeBar(bar);
        });
    };

    this.removeBar = function(bar) {
        this.bars.splice(this.bars.indexOf(bar), 1);
    };
}])

.directive('progress', function() {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        controller: 'ProgressController',
        require: 'progress',
        scope: {},
        templateUrl: 'template/progressbar/progress.html'
    };
})

.directive('bar', function() {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        require: '^progress',
        scope: {
            value: '=',
            type: '@'
        },
        templateUrl: 'template/progressbar/bar.html',
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, element);
        }
    };
})

.directive('progressbar', function() {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        controller: 'ProgressController',
        scope: {
            value: '=',
            type: '@'
        },
        templateUrl: 'template/progressbar/progressbar.html',
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, angular.element(element.children()[0]));
        }
    };
});
angular.module('ui.bootstrap.rating', [])

.constant('ratingConfig', {
  max: 5,
  stateOn: null,
  stateOff: null
})

.controller('RatingController', ['$scope', '$attrs', 'ratingConfig', function($scope, $attrs, ratingConfig) {
  var ngModelCtrl  = { $setViewValue: angular.noop };

  this.init = function(ngModelCtrl_) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;

    var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) :
                        new Array( angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max );
    $scope.range = this.buildTemplateObjects(ratingStates);
  };

  this.buildTemplateObjects = function(states) {
    for (var i = 0, n = states.length; i < n; i++) {
      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff }, states[i]);
    }
    return states;
  };

  $scope.rate = function(value) {
    if ( !$scope.readonly && value >= 0 && value <= $scope.range.length ) {
      ngModelCtrl.$setViewValue(value);
      ngModelCtrl.$render();
    }
  };

  $scope.enter = function(value) {
    if ( !$scope.readonly ) {
      $scope.value = value;
    }
    $scope.onHover({value: value});
  };

  $scope.reset = function() {
    $scope.value = ngModelCtrl.$viewValue;
    $scope.onLeave();
  };

  $scope.onKeydown = function(evt) {
    if (/(37|38|39|40)/.test(evt.which)) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.rate( $scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1) );
    }
  };

  this.render = function() {
    $scope.value = ngModelCtrl.$viewValue;
  };
}])

.directive('rating', function() {
  return {
    restrict: 'EA',
    require: ['rating', 'ngModel'],
    scope: {
      readonly: '=?',
      onHover: '&',
      onLeave: '&'
    },
    controller: 'RatingController',
    templateUrl: 'template/rating/rating.html',
    replace: true,
    link: function(scope, element, attrs, ctrls) {
      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if ( ngModelCtrl ) {
        ratingCtrl.init( ngModelCtrl );
      }
    }
  };
});

/**
 * @ngdoc overview
 * @name ui.bootstrap.tabs
 *
 * @description
 * AngularJS version of the tabs directive.
 */

angular.module('ui.bootstrap.tabs', [])

.controller('TabsetController', ['$scope', function TabsetCtrl($scope) {
  var ctrl = this,
      tabs = ctrl.tabs = $scope.tabs = [];

  ctrl.select = function(selectedTab) {
    angular.forEach(tabs, function(tab) {
      if (tab.active && tab !== selectedTab) {
        tab.active = false;
        tab.onDeselect();
      }
    });
    selectedTab.active = true;
    selectedTab.onSelect();
  };

  ctrl.addTab = function addTab(tab) {
    tabs.push(tab);
    // we can't run the select function on the first tab
    // since that would select it twice
    if (tabs.length === 1) {
      tab.active = true;
    } else if (tab.active) {
      ctrl.select(tab);
    }
  };

  ctrl.removeTab = function removeTab(tab) {
    var index = tabs.indexOf(tab);
    //Select a new tab if the tab to be removed is selected and not destroyed
    if (tab.active && tabs.length > 1 && !destroyed) {
      //If this is the last tab, select the previous tab. else, the next tab.
      var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;
      ctrl.select(tabs[newActiveIndex]);
    }
    tabs.splice(index, 1);
  };

  var destroyed;
  $scope.$on('$destroy', function() {
    destroyed = true;
  });
}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tabset
 * @restrict EA
 *
 * @description
 * Tabset is the outer container for the tabs directive
 *
 * @param {boolean=} vertical Whether or not to use vertical styling for the tabs.
 * @param {boolean=} justified Whether or not to use justified styling for the tabs.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <tabset>
      <tab heading="Tab 1"><b>First</b> Content!</tab>
      <tab heading="Tab 2"><i>Second</i> Content!</tab>
    </tabset>
    <hr />
    <tabset vertical="true">
      <tab heading="Vertical Tab 1"><b>First</b> Vertical Content!</tab>
      <tab heading="Vertical Tab 2"><i>Second</i> Vertical Content!</tab>
    </tabset>
    <tabset justified="true">
      <tab heading="Justified Tab 1"><b>First</b> Justified Content!</tab>
      <tab heading="Justified Tab 2"><i>Second</i> Justified Content!</tab>
    </tabset>
  </file>
</example>
 */
.directive('tabset', function() {
  return {
    restrict: 'EA',
    transclude: true,
    replace: true,
    scope: {
      type: '@'
    },
    controller: 'TabsetController',
    templateUrl: 'template/tabs/tabset.html',
    link: function(scope, element, attrs) {
      scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
      scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;
    }
  };
})

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tab
 * @restrict EA
 *
 * @param {string=} heading The visible heading, or title, of the tab. Set HTML headings with {@link ui.bootstrap.tabs.directive:tabHeading tabHeading}.
 * @param {string=} select An expression to evaluate when the tab is selected.
 * @param {boolean=} active A binding, telling whether or not this tab is selected.
 * @param {boolean=} disabled A binding, telling whether or not this tab is disabled.
 *
 * @description
 * Creates a tab with a heading and content. Must be placed within a {@link ui.bootstrap.tabs.directive:tabset tabset}.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <div ng-controller="TabsDemoCtrl">
      <button class="btn btn-small" ng-click="items[0].active = true">
        Select item 1, using active binding
      </button>
      <button class="btn btn-small" ng-click="items[1].disabled = !items[1].disabled">
        Enable/disable item 2, using disabled binding
      </button>
      <br />
      <tabset>
        <tab heading="Tab 1">First Tab</tab>
        <tab select="alertMe()">
          <tab-heading><i class="icon-bell"></i> Alert me!</tab-heading>
          Second Tab, with alert callback and html heading!
        </tab>
        <tab ng-repeat="item in items"
          heading="{{item.title}}"
          disabled="item.disabled"
          active="item.active">
          {{item.content}}
        </tab>
      </tabset>
    </div>
  </file>
  <file name="script.js">
    function TabsDemoCtrl($scope) {
      $scope.items = [
        { title:"Dynamic Title 1", content:"Dynamic Item 0" },
        { title:"Dynamic Title 2", content:"Dynamic Item 1", disabled: true }
      ];

      $scope.alertMe = function() {
        setTimeout(function() {
          alert("You've selected the alert tab!");
        });
      };
    };
  </file>
</example>
 */

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tabHeading
 * @restrict EA
 *
 * @description
 * Creates an HTML heading for a {@link ui.bootstrap.tabs.directive:tab tab}. Must be placed as a child of a tab element.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <tabset>
      <tab>
        <tab-heading><b>HTML</b> in my titles?!</tab-heading>
        And some content, too!
      </tab>
      <tab>
        <tab-heading><i class="icon-heart"></i> Icon heading?!?</tab-heading>
        That's right.
      </tab>
    </tabset>
  </file>
</example>
 */
.directive('tab', ['$parse', function($parse) {
  return {
    require: '^tabset',
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/tabs/tab.html',
    transclude: true,
    scope: {
      active: '=?',
      heading: '@',
      onSelect: '&select', //This callback is called in contentHeadingTransclude
                          //once it inserts the tab's content into the dom
      onDeselect: '&deselect'
    },
    controller: function() {
      //Empty controller so other directives can require being 'under' a tab
    },
    compile: function(elm, attrs, transclude) {
      return function postLink(scope, elm, attrs, tabsetCtrl) {
        scope.$watch('active', function(active) {
          if (active) {
            tabsetCtrl.select(scope);
          }
        });

        scope.disabled = false;
        if ( attrs.disabled ) {
          scope.$parent.$watch($parse(attrs.disabled), function(value) {
            scope.disabled = !! value;
          });
        }

        scope.select = function() {
          if ( !scope.disabled ) {
            scope.active = true;
          }
        };

        tabsetCtrl.addTab(scope);
        scope.$on('$destroy', function() {
          tabsetCtrl.removeTab(scope);
        });

        //We need to transclude later, once the content container is ready.
        //when this link happens, we're inside a tab heading.
        scope.$transcludeFn = transclude;
      };
    }
  };
}])

.directive('tabHeadingTransclude', [function() {
  return {
    restrict: 'A',
    require: '^tab',
    link: function(scope, elm, attrs, tabCtrl) {
      scope.$watch('headingElement', function updateHeadingElement(heading) {
        if (heading) {
          elm.html('');
          elm.append(heading);
        }
      });
    }
  };
}])

.directive('tabContentTransclude', function() {
  return {
    restrict: 'A',
    require: '^tabset',
    link: function(scope, elm, attrs) {
      var tab = scope.$eval(attrs.tabContentTransclude);

      //Now our tab is ready to be transcluded: both the tab heading area
      //and the tab content area are loaded.  Transclude 'em both.
      tab.$transcludeFn(tab.$parent, function(contents) {
        angular.forEach(contents, function(node) {
          if (isTabHeading(node)) {
            //Let tabHeadingTransclude know.
            tab.headingElement = node;
          } else {
            elm.append(node);
          }
        });
      });
    }
  };
  function isTabHeading(node) {
    return node.tagName &&  (
      node.hasAttribute('tab-heading') ||
      node.hasAttribute('data-tab-heading') ||
      node.tagName.toLowerCase() === 'tab-heading' ||
      node.tagName.toLowerCase() === 'data-tab-heading'
    );
  }
})

;

angular.module('ui.bootstrap.timepicker', [])

.constant('timepickerConfig', {
  hourStep: 1,
  minuteStep: 1,
  showMeridian: true,
  meridians: null,
  readonlyInput: false,
  mousewheel: true
})

.controller('TimepickerController', ['$scope', '$attrs', '$parse', '$log', '$locale', 'timepickerConfig', function($scope, $attrs, $parse, $log, $locale, timepickerConfig) {
  var selected = new Date(),
      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
      meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS;

  this.init = function( ngModelCtrl_, inputs ) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    var hoursInputEl = inputs.eq(0),
        minutesInputEl = inputs.eq(1);

    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;
    if ( mousewheel ) {
      this.setupMousewheelEvents( hoursInputEl, minutesInputEl );
    }

    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
    this.setupInputEvents( hoursInputEl, minutesInputEl );
  };

  var hourStep = timepickerConfig.hourStep;
  if ($attrs.hourStep) {
    $scope.$parent.$watch($parse($attrs.hourStep), function(value) {
      hourStep = parseInt(value, 10);
    });
  }

  var minuteStep = timepickerConfig.minuteStep;
  if ($attrs.minuteStep) {
    $scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
      minuteStep = parseInt(value, 10);
    });
  }

  // 12H / 24H mode
  $scope.showMeridian = timepickerConfig.showMeridian;
  if ($attrs.showMeridian) {
    $scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
      $scope.showMeridian = !!value;

      if ( ngModelCtrl.$error.time ) {
        // Evaluate from template
        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
        if (angular.isDefined( hours ) && angular.isDefined( minutes )) {
          selected.setHours( hours );
          refresh();
        }
      } else {
        updateTemplate();
      }
    });
  }

  // Get $scope.hours in 24H mode if valid
  function getHoursFromTemplate ( ) {
    var hours = parseInt( $scope.hours, 10 );
    var valid = ( $scope.showMeridian ) ? (hours > 0 && hours < 13) : (hours >= 0 && hours < 24);
    if ( !valid ) {
      return undefined;
    }

    if ( $scope.showMeridian ) {
      if ( hours === 12 ) {
        hours = 0;
      }
      if ( $scope.meridian === meridians[1] ) {
        hours = hours + 12;
      }
    }
    return hours;
  }

  function getMinutesFromTemplate() {
    var minutes = parseInt($scope.minutes, 10);
    return ( minutes >= 0 && minutes < 60 ) ? minutes : undefined;
  }

  function pad( value ) {
    return ( angular.isDefined(value) && value.toString().length < 2 ) ? '0' + value : value;
  }

  // Respond on mousewheel spin
  this.setupMousewheelEvents = function( hoursInputEl, minutesInputEl ) {
    var isScrollingUp = function(e) {
      if (e.originalEvent) {
        e = e.originalEvent;
      }
      //pick correct delta variable depending on event
      var delta = (e.wheelDelta) ? e.wheelDelta : -e.deltaY;
      return (e.detail || delta > 0);
    };

    hoursInputEl.bind('mousewheel wheel', function(e) {
      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementHours() : $scope.decrementHours() );
      e.preventDefault();
    });

    minutesInputEl.bind('mousewheel wheel', function(e) {
      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementMinutes() : $scope.decrementMinutes() );
      e.preventDefault();
    });

  };

  this.setupInputEvents = function( hoursInputEl, minutesInputEl ) {
    if ( $scope.readonlyInput ) {
      $scope.updateHours = angular.noop;
      $scope.updateMinutes = angular.noop;
      return;
    }

    var invalidate = function(invalidHours, invalidMinutes) {
      ngModelCtrl.$setViewValue( null );
      ngModelCtrl.$setValidity('time', false);
      if (angular.isDefined(invalidHours)) {
        $scope.invalidHours = invalidHours;
      }
      if (angular.isDefined(invalidMinutes)) {
        $scope.invalidMinutes = invalidMinutes;
      }
    };

    $scope.updateHours = function() {
      var hours = getHoursFromTemplate();

      if ( angular.isDefined(hours) ) {
        selected.setHours( hours );
        refresh( 'h' );
      } else {
        invalidate(true);
      }
    };

    hoursInputEl.bind('blur', function(e) {
      if ( !$scope.invalidHours && $scope.hours < 10) {
        $scope.$apply( function() {
          $scope.hours = pad( $scope.hours );
        });
      }
    });

    $scope.updateMinutes = function() {
      var minutes = getMinutesFromTemplate();

      if ( angular.isDefined(minutes) ) {
        selected.setMinutes( minutes );
        refresh( 'm' );
      } else {
        invalidate(undefined, true);
      }
    };

    minutesInputEl.bind('blur', function(e) {
      if ( !$scope.invalidMinutes && $scope.minutes < 10 ) {
        $scope.$apply( function() {
          $scope.minutes = pad( $scope.minutes );
        });
      }
    });

  };

  this.render = function() {
    var date = ngModelCtrl.$modelValue ? new Date( ngModelCtrl.$modelValue ) : null;

    if ( isNaN(date) ) {
      ngModelCtrl.$setValidity('time', false);
      $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
    } else {
      if ( date ) {
        selected = date;
      }
      makeValid();
      updateTemplate();
    }
  };

  // Call internally when we know that model is valid.
  function refresh( keyboardChange ) {
    makeValid();
    ngModelCtrl.$setViewValue( new Date(selected) );
    updateTemplate( keyboardChange );
  }

  function makeValid() {
    ngModelCtrl.$setValidity('time', true);
    $scope.invalidHours = false;
    $scope.invalidMinutes = false;
  }

  function updateTemplate( keyboardChange ) {
    var hours = selected.getHours(), minutes = selected.getMinutes();

    if ( $scope.showMeridian ) {
      hours = ( hours === 0 || hours === 12 ) ? 12 : hours % 12; // Convert 24 to 12 hour system
    }

    $scope.hours = keyboardChange === 'h' ? hours : pad(hours);
    $scope.minutes = keyboardChange === 'm' ? minutes : pad(minutes);
    $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
  }

  function addMinutes( minutes ) {
    var dt = new Date( selected.getTime() + minutes * 60000 );
    selected.setHours( dt.getHours(), dt.getMinutes() );
    refresh();
  }

  $scope.incrementHours = function() {
    addMinutes( hourStep * 60 );
  };
  $scope.decrementHours = function() {
    addMinutes( - hourStep * 60 );
  };
  $scope.incrementMinutes = function() {
    addMinutes( minuteStep );
  };
  $scope.decrementMinutes = function() {
    addMinutes( - minuteStep );
  };
  $scope.toggleMeridian = function() {
    addMinutes( 12 * 60 * (( selected.getHours() < 12 ) ? 1 : -1) );
  };
}])

.directive('timepicker', function () {
  return {
    restrict: 'EA',
    require: ['timepicker', '?^ngModel'],
    controller:'TimepickerController',
    replace: true,
    scope: {},
    templateUrl: 'template/timepicker/timepicker.html',
    link: function(scope, element, attrs, ctrls) {
      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if ( ngModelCtrl ) {
        timepickerCtrl.init( ngModelCtrl, element.find('input') );
      }
    }
  };
});

angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.position', 'ui.bootstrap.bindHtml'])

/**
 * A helper service that can parse typeahead's syntax (string provided by users)
 * Extracted to a separate service for ease of unit testing
 */
  .factory('typeaheadParser', ['$parse', function ($parse) {

  //                      00000111000000000000022200000000000000003333333333333330000000000044000
  var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;

  return {
    parse:function (input) {

      var match = input.match(TYPEAHEAD_REGEXP);
      if (!match) {
        throw new Error(
          'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
            ' but got "' + input + '".');
      }

      return {
        itemName:match[3],
        source:$parse(match[4]),
        viewMapper:$parse(match[2] || match[1]),
        modelMapper:$parse(match[1])
      };
    }
  };
}])

  .directive('typeahead', ['$compile', '$parse', '$q', '$timeout', '$document', '$position', 'typeaheadParser',
    function ($compile, $parse, $q, $timeout, $document, $position, typeaheadParser) {

  var HOT_KEYS = [9, 13, 27, 38, 40];

  return {
    require:'ngModel',
    link:function (originalScope, element, attrs, modelCtrl) {

      //SUPPORTED ATTRIBUTES (OPTIONS)

      //minimal no of characters that needs to be entered before typeahead kicks-in
      var minSearch = originalScope.$eval(attrs.typeaheadMinLength) || 1;

      //minimal wait time after last character typed before typehead kicks-in
      var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

      //should it restrict model values to the ones selected from the popup only?
      var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;

      //binding to a variable that indicates if matches are being retrieved asynchronously
      var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

      //a callback executed when a match is selected
      var onSelectCallback = $parse(attrs.typeaheadOnSelect);

      var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

      var appendToBody =  attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

      var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

      //INTERNAL VARIABLES

      //model setter executed upon match selection
      var $setModelValue = $parse(attrs.ngModel).assign;

      //expressions used by typeahead
      var parserResult = typeaheadParser.parse(attrs.typeahead);

      var hasFocus;

      //create a child scope for the typeahead directive so we are not polluting original scope
      //with typeahead-specific data (matches, query etc.)
      var scope = originalScope.$new();
      originalScope.$on('$destroy', function(){
        scope.$destroy();
      });

      // WAI-ARIA
      var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
      element.attr({
        'aria-autocomplete': 'list',
        'aria-expanded': false,
        'aria-owns': popupId
      });

      //pop-up element used to display matches
      var popUpEl = angular.element('<div typeahead-popup></div>');
      popUpEl.attr({
        id: popupId,
        matches: 'matches',
        active: 'activeIdx',
        select: 'select(activeIdx)',
        query: 'query',
        position: 'position'
      });
      //custom item template
      if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
        popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
      }

      var resetMatches = function() {
        scope.matches = [];
        scope.activeIdx = -1;
        element.attr('aria-expanded', false);
      };

      var getMatchId = function(index) {
        return popupId + '-option-' + index;
      };

      // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
      // This attribute is added or removed automatically when the `activeIdx` changes.
      scope.$watch('activeIdx', function(index) {
        if (index < 0) {
          element.removeAttr('aria-activedescendant');
        } else {
          element.attr('aria-activedescendant', getMatchId(index));
        }
      });

      var getMatchesAsync = function(inputValue) {

        var locals = {$viewValue: inputValue};
        isLoadingSetter(originalScope, true);
        $q.when(parserResult.source(originalScope, locals)).then(function(matches) {

          //it might happen that several async queries were in progress if a user were typing fast
          //but we are interested only in responses that correspond to the current view value
          var onCurrentRequest = (inputValue === modelCtrl.$viewValue);
          if (onCurrentRequest && hasFocus) {
            if (matches.length > 0) {

              scope.activeIdx = focusFirst ? 0 : -1;
              scope.matches.length = 0;

              //transform labels
              for(var i=0; i<matches.length; i++) {
                locals[parserResult.itemName] = matches[i];
                scope.matches.push({
                  id: getMatchId(i),
                  label: parserResult.viewMapper(scope, locals),
                  model: matches[i]
                });
              }

              scope.query = inputValue;
              //position pop-up with matches - we need to re-calculate its position each time we are opening a window
              //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
              //due to other elements being rendered
              scope.position = appendToBody ? $position.offset(element) : $position.position(element);
              scope.position.top = scope.position.top + element.prop('offsetHeight');

              element.attr('aria-expanded', true);
            } else {
              resetMatches();
            }
          }
          if (onCurrentRequest) {
            isLoadingSetter(originalScope, false);
          }
        }, function(){
          resetMatches();
          isLoadingSetter(originalScope, false);
        });
      };

      resetMatches();

      //we need to propagate user's query so we can higlight matches
      scope.query = undefined;

      //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later 
      var timeoutPromise;

      var scheduleSearchWithTimeout = function(inputValue) {
        timeoutPromise = $timeout(function () {
          getMatchesAsync(inputValue);
        }, waitTime);
      };

      var cancelPreviousTimeout = function() {
        if (timeoutPromise) {
          $timeout.cancel(timeoutPromise);
        }
      };

      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
      modelCtrl.$parsers.unshift(function (inputValue) {

        hasFocus = true;

        if (inputValue && inputValue.length >= minSearch) {
          if (waitTime > 0) {
            cancelPreviousTimeout();
            scheduleSearchWithTimeout(inputValue);
          } else {
            getMatchesAsync(inputValue);
          }
        } else {
          isLoadingSetter(originalScope, false);
          cancelPreviousTimeout();
          resetMatches();
        }

        if (isEditable) {
          return inputValue;
        } else {
          if (!inputValue) {
            // Reset in case user had typed something previously.
            modelCtrl.$setValidity('editable', true);
            return inputValue;
          } else {
            modelCtrl.$setValidity('editable', false);
            return undefined;
          }
        }
      });

      modelCtrl.$formatters.push(function (modelValue) {

        var candidateViewValue, emptyViewValue;
        var locals = {};

        if (inputFormatter) {

          locals.$model = modelValue;
          return inputFormatter(originalScope, locals);

        } else {

          //it might happen that we don't have enough info to properly render input value
          //we need to check for this situation and simply return model value if we can't apply custom formatting
          locals[parserResult.itemName] = modelValue;
          candidateViewValue = parserResult.viewMapper(originalScope, locals);
          locals[parserResult.itemName] = undefined;
          emptyViewValue = parserResult.viewMapper(originalScope, locals);

          return candidateViewValue!== emptyViewValue ? candidateViewValue : modelValue;
        }
      });

      scope.select = function (activeIdx) {
        //called from within the $digest() cycle
        var locals = {};
        var model, item;

        locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
        model = parserResult.modelMapper(originalScope, locals);
        $setModelValue(originalScope, model);
        modelCtrl.$setValidity('editable', true);

        onSelectCallback(originalScope, {
          $item: item,
          $model: model,
          $label: parserResult.viewMapper(originalScope, locals)
        });

        resetMatches();

        //return focus to the input element if a match was selected via a mouse click event
        // use timeout to avoid $rootScope:inprog error
        $timeout(function() { element[0].focus(); }, 0, false);
      };

      //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
      element.bind('keydown', function (evt) {

        //typeahead is open and an "interesting" key was pressed
        if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
          return;
        }

        // if there's nothing selected (i.e. focusFirst) and enter is hit, don't do anything
        if (scope.activeIdx == -1 && (evt.which === 13 || evt.which === 9)) {
          return;
        }

        evt.preventDefault();

        if (evt.which === 40) {
          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
          scope.$digest();

        } else if (evt.which === 38) {
          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
          scope.$digest();

        } else if (evt.which === 13 || evt.which === 9) {
          scope.$apply(function () {
            scope.select(scope.activeIdx);
          });

        } else if (evt.which === 27) {
          evt.stopPropagation();

          resetMatches();
          scope.$digest();
        }
      });

      element.bind('blur', function (evt) {
        hasFocus = false;
      });

      // Keep reference to click handler to unbind it.
      var dismissClickHandler = function (evt) {
        if (element[0] !== evt.target) {
          resetMatches();
          scope.$digest();
        }
      };

      $document.bind('click', dismissClickHandler);

      originalScope.$on('$destroy', function(){
        $document.unbind('click', dismissClickHandler);
        if (appendToBody) {
          $popup.remove();
        }
      });

      var $popup = $compile(popUpEl)(scope);
      if (appendToBody) {
        $document.find('body').append($popup);
      } else {
        element.after($popup);
      }
    }
  };

}])

  .directive('typeaheadPopup', function () {
    return {
      restrict:'EA',
      scope:{
        matches:'=',
        query:'=',
        active:'=',
        position:'=',
        select:'&'
      },
      replace:true,
      templateUrl:'template/typeahead/typeahead-popup.html',
      link:function (scope, element, attrs) {

        scope.templateUrl = attrs.templateUrl;

        scope.isOpen = function () {
          return scope.matches.length > 0;
        };

        scope.isActive = function (matchIdx) {
          return scope.active == matchIdx;
        };

        scope.selectActive = function (matchIdx) {
          scope.active = matchIdx;
        };

        scope.selectMatch = function (activeIdx) {
          scope.select({activeIdx:activeIdx});
        };
      }
    };
  })

  .directive('typeaheadMatch', ['$http', '$templateCache', '$compile', '$parse', function ($http, $templateCache, $compile, $parse) {
    return {
      restrict:'EA',
      scope:{
        index:'=',
        match:'=',
        query:'='
      },
      link:function (scope, element, attrs) {
        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'template/typeahead/typeahead-match.html';
        $http.get(tplUrl, {cache: $templateCache}).success(function(tplContent){
           element.replaceWith($compile(tplContent.trim())(scope));
        });
      }
    };
  }])

  .filter('typeaheadHighlight', function() {

    function escapeRegexp(queryToEscape) {
      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }

    return function(matchItem, query) {
      return query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem;
    };
  });

angular.module("template/accordion/accordion-group.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/accordion/accordion-group.html",
    "<div class=\"panel panel-default\">\n" +
    "  <div class=\"panel-heading\">\n" +
    "    <h4 class=\"panel-title\">\n" +
    "      <a href class=\"accordion-toggle\" ng-click=\"toggleOpen()\" accordion-transclude=\"heading\"><span ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
    "    </h4>\n" +
    "  </div>\n" +
    "  <div class=\"panel-collapse\" collapse=\"!isOpen\">\n" +
    "	  <div class=\"panel-body\" ng-transclude></div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/accordion/accordion.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/accordion/accordion.html",
    "<div class=\"panel-group\" ng-transclude></div>");
}]);

angular.module("template/alert/alert.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/alert/alert.html",
    "<div class=\"alert\" ng-class=\"['alert-' + (type || 'warning'), closeable ? 'alert-dismissable' : null]\" role=\"alert\">\n" +
    "    <button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close()\">\n" +
    "        <span aria-hidden=\"true\">&times;</span>\n" +
    "        <span class=\"sr-only\">Close</span>\n" +
    "    </button>\n" +
    "    <div ng-transclude></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/carousel/carousel.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/carousel/carousel.html",
    "<div ng-mouseenter=\"pause()\" ng-mouseleave=\"play()\" class=\"carousel\" ng-swipe-right=\"prev()\" ng-swipe-left=\"next()\">\n" +
    "    <ol class=\"carousel-indicators\" ng-show=\"slides.length > 1\">\n" +
    "        <li ng-repeat=\"slide in slides track by $index\" ng-class=\"{active: isActive(slide)}\" ng-click=\"select(slide)\"></li>\n" +
    "    </ol>\n" +
    "    <div class=\"carousel-inner\" ng-transclude></div>\n" +
    "    <a class=\"left carousel-control\" ng-click=\"prev()\" ng-show=\"slides.length > 1\"><span class=\"glyphicon glyphicon-chevron-left\"></span></a>\n" +
    "    <a class=\"right carousel-control\" ng-click=\"next()\" ng-show=\"slides.length > 1\"><span class=\"glyphicon glyphicon-chevron-right\"></span></a>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/carousel/slide.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/carousel/slide.html",
    "<div ng-class=\"{\n" +
    "    'active': leaving || (active && !entering),\n" +
    "    'prev': (next || active) && direction=='prev',\n" +
    "    'next': (next || active) && direction=='next',\n" +
    "    'right': direction=='prev',\n" +
    "    'left': direction=='next'\n" +
    "  }\" class=\"item text-center\" ng-transclude></div>\n" +
    "");
}]);

angular.module("template/datepicker/datepicker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/datepicker.html",
    "<div ng-switch=\"datepickerMode\" role=\"application\" ng-keydown=\"keydown($event)\">\n" +
    "  <daypicker ng-switch-when=\"day\" tabindex=\"0\"></daypicker>\n" +
    "  <monthpicker ng-switch-when=\"month\" tabindex=\"0\"></monthpicker>\n" +
    "  <yearpicker ng-switch-when=\"year\" tabindex=\"0\"></yearpicker>\n" +
    "</div>");
}]);

angular.module("template/datepicker/day.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/day.html",
    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
    "      <th colspan=\"{{5 + showWeeks}}\"><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
    "    </tr>\n" +
    "    <tr>\n" +
    "      <th ng-show=\"showWeeks\" class=\"text-center\"></th>\n" +
    "      <th ng-repeat=\"label in labels track by $index\" class=\"text-center\"><small aria-label=\"{{label.full}}\">{{label.abbr}}</small></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
    "      <td ng-show=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default btn-sm\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-muted': dt.secondary, 'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/datepicker/month.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/month.html",
    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
    "      <th><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/datepicker/popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/popup.html",
    "<ul class=\"dropdown-menu\" ng-style=\"{display: (isOpen && 'block') || 'none', top: position.top+'px', left: position.left+'px'}\" ng-keydown=\"keydown($event)\">\n" +
    "	<li ng-transclude></li>\n" +
    "	<li ng-if=\"showButtonBar\" style=\"padding:10px 9px 2px\">\n" +
    "		<span class=\"btn-group pull-left\">\n" +
    "			<button type=\"button\" class=\"btn btn-sm btn-info\" ng-click=\"select('today')\">{{ getText('current') }}</button>\n" +
    "			<button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"select(null)\">{{ getText('clear') }}</button>\n" +
    "		</span>\n" +
    "		<button type=\"button\" class=\"btn btn-sm btn-success pull-right\" ng-click=\"close()\">{{ getText('close') }}</button>\n" +
    "	</li>\n" +
    "</ul>\n" +
    "");
}]);

angular.module("template/datepicker/year.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/year.html",
    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
    "      <th colspan=\"3\"><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/modal/backdrop.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/backdrop.html",
    "<div class=\"modal-backdrop fade {{ backdropClass }}\"\n" +
    "     ng-class=\"{in: animate}\"\n" +
    "     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" +
    "></div>\n" +
    "");
}]);

angular.module("template/modal/window.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/window.html",
    "<div tabindex=\"-1\" role=\"dialog\" class=\"modal fade\" ng-class=\"{in: animate}\" ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\" ng-click=\"close($event)\">\n" +
    "    <div class=\"modal-dialog\" ng-class=\"{'modal-sm': size == 'sm', 'modal-lg': size == 'lg'}\"><div class=\"modal-content\" modal-transclude></div></div>\n" +
    "</div>");
}]);

angular.module("template/pagination/pager.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/pagination/pager.html",
    "<ul class=\"pager\">\n" +
    "  <li ng-class=\"{disabled: noPrevious(), previous: align}\"><a href ng-click=\"selectPage(page - 1)\">{{getText('previous')}}</a></li>\n" +
    "  <li ng-class=\"{disabled: noNext(), next: align}\"><a href ng-click=\"selectPage(page + 1)\">{{getText('next')}}</a></li>\n" +
    "</ul>");
}]);

angular.module("template/pagination/pagination.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/pagination/pagination.html",
    "<ul class=\"pagination\">\n" +
    "  <li ng-if=\"boundaryLinks\" ng-class=\"{disabled: noPrevious()}\"><a href ng-click=\"selectPage(1)\">{{getText('first')}}</a></li>\n" +
    "  <li ng-if=\"directionLinks\" ng-class=\"{disabled: noPrevious()}\"><a href ng-click=\"selectPage(page - 1)\">{{getText('previous')}}</a></li>\n" +
    "  <li ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page.active}\"><a href ng-click=\"selectPage(page.number)\">{{page.text}}</a></li>\n" +
    "  <li ng-if=\"directionLinks\" ng-class=\"{disabled: noNext()}\"><a href ng-click=\"selectPage(page + 1)\">{{getText('next')}}</a></li>\n" +
    "  <li ng-if=\"boundaryLinks\" ng-class=\"{disabled: noNext()}\"><a href ng-click=\"selectPage(totalPages)\">{{getText('last')}}</a></li>\n" +
    "</ul>");
}]);

angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-html-unsafe-popup.html",
    "<div class=\"tooltip {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" bind-html-unsafe=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/tooltip/tooltip-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-popup.html",
    "<div class=\"tooltip {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/popover/popover.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/popover/popover.html",
    "<div class=\"popover {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"arrow\"></div>\n" +
    "\n" +
    "  <div class=\"popover-inner\">\n" +
    "      <h3 class=\"popover-title\" ng-bind=\"title\" ng-show=\"title\"></h3>\n" +
    "      <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/progressbar/bar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/bar.html",
    "<div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: percent + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" ng-transclude></div>");
}]);

angular.module("template/progressbar/progress.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/progress.html",
    "<div class=\"progress\" ng-transclude></div>");
}]);

angular.module("template/progressbar/progressbar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/progressbar.html",
    "<div class=\"progress\">\n" +
    "  <div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: percent + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" ng-transclude></div>\n" +
    "</div>");
}]);

angular.module("template/rating/rating.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/rating/rating.html",
    "<span ng-mouseleave=\"reset()\" ng-keydown=\"onKeydown($event)\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" aria-valuemax=\"{{range.length}}\" aria-valuenow=\"{{value}}\">\n" +
    "    <i ng-repeat=\"r in range track by $index\" ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" class=\"glyphicon\" ng-class=\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\">\n" +
    "        <span class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" +
    "    </i>\n" +
    "</span>");
}]);

angular.module("template/tabs/tab.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tab.html",
    "<li ng-class=\"{active: active, disabled: disabled}\">\n" +
    "  <a href ng-click=\"select()\" tab-heading-transclude>{{heading}}</a>\n" +
    "</li>\n" +
    "");
}]);

angular.module("template/tabs/tabset.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tabset.html",
    "<div>\n" +
    "  <ul class=\"nav nav-{{type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
    "  <div class=\"tab-content\">\n" +
    "    <div class=\"tab-pane\" \n" +
    "         ng-repeat=\"tab in tabs\" \n" +
    "         ng-class=\"{active: tab.active}\"\n" +
    "         tab-content-transclude=\"tab\">\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/timepicker/timepicker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/timepicker/timepicker.html",
    "<table>\n" +
    "	<tbody>\n" +
    "		<tr class=\"text-center\">\n" +
    "			<td><a ng-click=\"incrementHours()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
    "			<td>&nbsp;</td>\n" +
    "			<td><a ng-click=\"incrementMinutes()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
    "			<td ng-show=\"showMeridian\"></td>\n" +
    "		</tr>\n" +
    "		<tr>\n" +
    "			<td style=\"width:50px;\" class=\"form-group\" ng-class=\"{'has-error': invalidHours}\">\n" +
    "				<input type=\"text\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"form-control text-center\" ng-mousewheel=\"incrementHours()\" ng-readonly=\"readonlyInput\" maxlength=\"2\">\n" +
    "			</td>\n" +
    "			<td>:</td>\n" +
    "			<td style=\"width:50px;\" class=\"form-group\" ng-class=\"{'has-error': invalidMinutes}\">\n" +
    "				<input type=\"text\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"form-control text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\">\n" +
    "			</td>\n" +
    "			<td ng-show=\"showMeridian\"><button type=\"button\" class=\"btn btn-default text-center\" ng-click=\"toggleMeridian()\">{{meridian}}</button></td>\n" +
    "		</tr>\n" +
    "		<tr class=\"text-center\">\n" +
    "			<td><a ng-click=\"decrementHours()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
    "			<td>&nbsp;</td>\n" +
    "			<td><a ng-click=\"decrementMinutes()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
    "			<td ng-show=\"showMeridian\"></td>\n" +
    "		</tr>\n" +
    "	</tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/typeahead/typeahead-match.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/typeahead/typeahead-match.html",
    "<a tabindex=\"-1\" bind-html-unsafe=\"match.label | typeaheadHighlight:query\"></a>");
}]);

angular.module("template/typeahead/typeahead-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/typeahead/typeahead-popup.html",
    "<ul class=\"dropdown-menu\" ng-show=\"isOpen()\" ng-style=\"{top: position.top+'px', left: position.left+'px'}\" style=\"display: block;\" role=\"listbox\" aria-hidden=\"{{!isOpen()}}\">\n" +
    "    <li ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index)\" role=\"option\" id=\"{{match.id}}\">\n" +
    "        <div typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></div>\n" +
    "    </li>\n" +
    "</ul>\n" +
    "");
}]);

/**
 * oclazyload - Load modules on demand (lazy load) with angularJS
 * @version v0.5.2
 * @link https://github.com/ocombe/ocLazyLoad
 * @license MIT
 * @author Olivier Combe <olivier.combe@gmail.com>
 */
(function() {
  'use strict';
  var regModules = ['ng'],
    initModules = [],
    regInvokes = {},
    regConfigs = [],
    justLoaded = [],
    runBlocks = {},
    ocLazyLoad = angular.module('oc.lazyLoad', ['ng']),
    broadcast = angular.noop;

  ocLazyLoad.provider('$ocLazyLoad', ['$controllerProvider', '$provide', '$compileProvider', '$filterProvider', '$injector', '$animateProvider',
    function($controllerProvider, $provide, $compileProvider, $filterProvider, $injector, $animateProvider) {
      var modules = {},
        providers = {
          $controllerProvider: $controllerProvider,
          $compileProvider: $compileProvider,
          $filterProvider: $filterProvider,
          $provide: $provide, // other things
          $injector: $injector,
          $animateProvider: $animateProvider
        },
        anchor = document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0],
        jsLoader, cssLoader, templatesLoader,
        debug = false,
        events = false;

      // Let's get the list of loaded modules & components
      init(angular.element(window.document));

      this.$get = ['$log', '$q', '$templateCache', '$http', '$rootElement', '$rootScope', '$cacheFactory', '$interval', function($log, $q, $templateCache, $http, $rootElement, $rootScope, $cacheFactory, $interval) {
        var instanceInjector,
          filesCache = $cacheFactory('ocLazyLoad'),
          uaCssChecked = false,
          useCssLoadPatch = false;

        if(!debug) {
          $log = {};
          $log['error'] = angular.noop;
          $log['warn'] = angular.noop;
          $log['info'] = angular.noop;
        }

        // Make this lazy because at the moment that $get() is called the instance injector hasn't been assigned to the rootElement yet
        providers.getInstanceInjector = function() {
          return (instanceInjector) ? instanceInjector : (instanceInjector = ($rootElement.data('$injector') || angular.injector()));
        };

        broadcast = function broadcast(eventName, params) {
          if(events) {
            $rootScope.$broadcast(eventName, params);
          }
          if(debug) {
            $log.info(eventName, params);
          }
        }

        /**
         * Load a js/css file
         * @param type
         * @param path
         * @returns promise
         */
        var buildElement = function buildElement(type, path, params) {
          var deferred = $q.defer(),
            el, loaded,
            cacheBuster = function cacheBuster(url) {
              var dc = new Date().getTime();
              if(url.indexOf('?') >= 0) {
                if(url.substring(0, url.length - 1) === '&') {
                  return url + '_dc=' + dc;
                }
                return url + '&_dc=' + dc;
              } else {
                return url + '?_dc=' + dc;
              }
            };

          // Store the promise early so the file load can be detected by other parallel lazy loads
          // (ie: multiple routes on one page) a 'true' value isn't sufficient
          // as it causes false positive load results.
          if(angular.isUndefined(filesCache.get(path))) {
            filesCache.put(path, deferred.promise);
          }

          // Switch in case more content types are added later
          switch(type) {
            case 'css':
              el = document.createElement('link');
              el.type = 'text/css';
              el.rel = 'stylesheet';
              el.href = params.cache === false ? cacheBuster(path) : path;
              break;
            case 'js':
              el = document.createElement('script');
              el.src = params.cache === false ? cacheBuster(path) : path;
              break;
            default:
              deferred.reject(new Error('Requested type "' + type + '" is not known. Could not inject "' + path + '"'));
              break;
          }
          el.onload = el['onreadystatechange'] = function(e) {
            if((el['readyState'] && !(/^c|loade/.test(el['readyState']))) || loaded) return;
            el.onload = el['onreadystatechange'] = null
            loaded = 1;
            broadcast('ocLazyLoad.fileLoaded', path);
            deferred.resolve();
          }
          el.onerror = function(e) {
            deferred.reject(new Error('Unable to load ' + path));
          }
          el.async = params.serie ? 0 : 1;

          var insertBeforeElem = anchor.lastChild;
          if(params.insertBefore) {
            var element = angular.element(params.insertBefore);
            if(element && element.length > 0) {
              insertBeforeElem = element[0];
            }
          }
          anchor.insertBefore(el, insertBeforeElem);

          /*
           The event load or readystatechange doesn't fire in:
           - iOS < 6       (default mobile browser)
           - Android < 4.4 (default mobile browser)
           - Safari < 6    (desktop browser)
           */
          if(type == 'css') {
            if(!uaCssChecked) {
              var ua = navigator.userAgent.toLowerCase();

              // iOS < 6
              if(/iP(hone|od|ad)/.test(navigator.platform)) {
                var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
                var iOSVersion = parseFloat([parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)].join('.'));
                useCssLoadPatch = iOSVersion < 6;
              } else if(ua.indexOf("android") > -1) { // Android < 4.4
                var androidVersion = parseFloat(ua.slice(ua.indexOf("android") + 8));
                useCssLoadPatch = androidVersion < 4.4;
              } else if(ua.indexOf('safari') > -1 && ua.indexOf('chrome') == -1) {
                var safariVersion = parseFloat(ua.match(/version\/([\.\d]+)/i)[1]);
                useCssLoadPatch = safariVersion < 6;
              }
            }

            if(useCssLoadPatch) {
              var tries = 1000; // * 20 = 20000 miliseconds
              var interval = $interval(function() {
                try {
                  el.sheet.cssRules;
                  $interval.cancel(interval);
                  el.onload();
                } catch(e) {
                  if(--tries <= 0) {
                    el.onerror();
                  }
                }
              }, 20);
            }
          }

          return deferred.promise;
        }

        if(angular.isUndefined(jsLoader)) {
          /**
           * jsLoader function
           * @type Function
           * @param paths array list of js files to load
           * @param callback to call when everything is loaded. We use a callback and not a promise
           * @param params object config parameters
           * because the user can overwrite jsLoader and it will probably not use promises :(
           */
          jsLoader = function(paths, callback, params) {
            var promises = [];
            angular.forEach(paths, function loading(path) {
              promises.push(buildElement('js', path, params));
            });
            $q.all(promises).then(function success() {
              callback();
            }, function error(err) {
              callback(err);
            });
          }
          jsLoader.ocLazyLoadLoader = true;
        }

        if(angular.isUndefined(cssLoader)) {
          /**
           * cssLoader function
           * @type Function
           * @param paths array list of css files to load
           * @param callback to call when everything is loaded. We use a callback and not a promise
           * @param params object config parameters
           * because the user can overwrite cssLoader and it will probably not use promises :(
           */
          cssLoader = function(paths, callback, params) {
            var promises = [];
            angular.forEach(paths, function loading(path) {
              promises.push(buildElement('css', path, params));
            });
            $q.all(promises).then(function success() {
              callback();
            }, function error(err) {
              callback(err);
            });
          }
          cssLoader.ocLazyLoadLoader = true;
        }

        if(angular.isUndefined(templatesLoader)) {
          /**
           * templatesLoader function
           * @type Function
           * @param paths array list of css files to load
           * @param callback to call when everything is loaded. We use a callback and not a promise
           * @param params object config parameters for $http
           * because the user can overwrite templatesLoader and it will probably not use promises :(
           */
          templatesLoader = function(paths, callback, params) {
            var promises = [];
            angular.forEach(paths, function(url) {
              var deferred = $q.defer();
              promises.push(deferred.promise);
              $http.get(url, params).success(function(data) {
                if(angular.isString(data) && data.length > 0) {
                  angular.forEach(angular.element(data), function(node) {
                    if(node.nodeName === 'SCRIPT' && node.type === 'text/ng-template') {
                      $templateCache.put(node.id, node.innerHTML);
                    }
                  });
                }
                if(angular.isUndefined(filesCache.get(url))) {
                  filesCache.put(url, true);
                }
                deferred.resolve();
              }).error(function(err) {
                deferred.reject(new Error('Unable to load template file "' + url + '": ' + err));
              });
            });
            return $q.all(promises).then(function success() {
              callback();
            }, function error(err) {
              callback(err);
            });
          }
          templatesLoader.ocLazyLoadLoader = true;
        }

        var filesLoader = function(config, params) {
          var cssFiles = [],
            templatesFiles = [],
            jsFiles = [],
            promises = [],
            cachePromise = null;

          angular.extend(params || {}, config);

          var pushFile = function(path) {
            cachePromise = filesCache.get(path);
            if(angular.isUndefined(cachePromise) || params.cache === false) {
              if(/\.(css|less)[^\.]*$/.test(path) && cssFiles.indexOf(path) === -1) {
                cssFiles.push(path);
              } else if(/\.(htm|html)[^\.]*$/.test(path) && templatesFiles.indexOf(path) === -1) {
                templatesFiles.push(path);
              } else if(jsFiles.indexOf(path) === -1) {
                jsFiles.push(path);
              }
            } else if(cachePromise) {
              promises.push(cachePromise);
            }
          }

          if(params.serie) {
            pushFile(params.files.shift());
          } else {
            angular.forEach(params.files, function(path) {
              pushFile(path);
            });
          }

          if(cssFiles.length > 0) {
            var cssDeferred = $q.defer();
            cssLoader(cssFiles, function(err) {
              if(angular.isDefined(err) && cssLoader.hasOwnProperty('ocLazyLoadLoader')) {
                $log.error(err);
                cssDeferred.reject(err);
              } else {
                cssDeferred.resolve();
              }
            }, params);
            promises.push(cssDeferred.promise);
          }

          if(templatesFiles.length > 0) {
            var templatesDeferred = $q.defer();
            templatesLoader(templatesFiles, function(err) {
              if(angular.isDefined(err) && templatesLoader.hasOwnProperty('ocLazyLoadLoader')) {
                $log.error(err);
                templatesDeferred.reject(err);
              } else {
                templatesDeferred.resolve();
              }
            }, params);
            promises.push(templatesDeferred.promise);
          }

          if(jsFiles.length > 0) {
            var jsDeferred = $q.defer();
            jsLoader(jsFiles, function(err) {
              if(angular.isDefined(err) && jsLoader.hasOwnProperty('ocLazyLoadLoader')) {
                $log.error(err);
                jsDeferred.reject(err);
              } else {
                jsDeferred.resolve();
              }
            }, params);
            promises.push(jsDeferred.promise);
          }

          if(params.serie && params.files.length > 0) {
            return $q.all(promises).then(function success() {
              return filesLoader(config, params);
            });
          } else {
            return $q.all(promises);
          }
        }

        return {
          /**
           * Let you get a module config object
           * @param moduleName String the name of the module
           * @returns {*}
           */
          getModuleConfig: function(moduleName) {
            if(!angular.isString(moduleName)) {
              throw new Error('You need to give the name of the module to get');
            }
            if(!modules[moduleName]) {
              return null;
            }
            return modules[moduleName];
          },

          /**
           * Let you define a module config object
           * @param moduleConfig Object the module config object
           * @returns {*}
           */
          setModuleConfig: function(moduleConfig) {
            if(!angular.isObject(moduleConfig)) {
              throw new Error('You need to give the module config object to set');
            }
            modules[moduleConfig.name] = moduleConfig;
            return moduleConfig;
          },

          /**
           * Returns the list of loaded modules
           * @returns {string[]}
           */
          getModules: function() {
            return regModules;
          },

          /**
           * Let you check if a module has been loaded into Angular or not
           * @param modulesNames String/Object a module name, or a list of module names
           * @returns {boolean}
           */
          isLoaded: function(modulesNames) {
            var moduleLoaded = function(module) {
              var isLoaded = regModules.indexOf(module) > -1;
              if(!isLoaded) {
                isLoaded = !!moduleExists(module);
              }
              return isLoaded;
            }
            if(angular.isString(modulesNames)) {
              modulesNames = [modulesNames];
            }
            if(angular.isArray(modulesNames)) {
              var i, len;
              for(i = 0, len = modulesNames.length; i < len; i++) {
                if(!moduleLoaded(modulesNames[i])) {
                  return false;
                }
              }
              return true;
            } else {
              throw new Error('You need to define the module(s) name(s)');
            }
          },

          /**
           * Load a module or a list of modules into Angular
           * @param module Mixed the name of a predefined module config object, or a module config object, or an array of either
           * @param params Object optional parameters
           * @returns promise
           */
          load: function(module, params) {
            var self = this,
              config = null,
              moduleCache = [],
              deferredList = [],
              deferred = $q.defer(),
              moduleName,
              errText;

            if(angular.isUndefined(params)) {
              params = {};
            }

            // If module is an array, break it down
            if(angular.isArray(module)) {
              // Resubmit each entry as a single module
              angular.forEach(module, function(m) {
                if(m) {
                  deferredList.push(self.load(m, params));
                }
              });

              // Resolve the promise once everything has loaded
              $q.all(deferredList).then(function success() {
                deferred.resolve(module);
              }, function error(err) {
                deferred.reject(err);
              });

              return deferred.promise;
            }

            moduleName = getModuleName(module);

            // Get or Set a configuration depending on what was passed in
            if(typeof module === 'string') {
              config = self.getModuleConfig(module);
              if(!config) {
                config = {
                  files: [module]
                };
                moduleName = null;
              }
            } else if(typeof module === 'object') {
              config = self.setModuleConfig(module);
            }

            if(config === null) {
              errText = 'Module "' + moduleName + '" is not configured, cannot load.';
              $log.error(errText);
              deferred.reject(new Error(errText));
            } else {
              // deprecated
              if(angular.isDefined(config.template)) {
                if(angular.isUndefined(config.files)) {
                  config.files = [];
                }
                if(angular.isString(config.template)) {
                  config.files.push(config.template);
                } else if(angular.isArray(config.template)) {
                  config.files.concat(config.template);
                }
              }
            }

            moduleCache.push = function(value) {
              if(this.indexOf(value) === -1) {
                Array.prototype.push.apply(this, arguments);
              }
            };

            // If this module has been loaded before, re-use it.
            if(angular.isDefined(moduleName) && moduleExists(moduleName) && regModules.indexOf(moduleName) !== -1) {
              moduleCache.push(moduleName);

              // if we don't want to load new files, resolve here
              if(angular.isUndefined(config.files)) {
                deferred.resolve();
                return deferred.promise;
              }
            }

            var localParams = {};
            angular.extend(localParams, params, config);

            var loadDependencies = function loadDependencies(module) {
              var moduleName,
                loadedModule,
                requires,
                diff,
                promisesList = [];

              moduleName = getModuleName(module);
              if(moduleName === null) {
                return $q.when();
              } else {
                try {
                  loadedModule = getModule(moduleName);
                } catch(e) {
                  var deferred = $q.defer();
                  $log.error(e.message);
                  deferred.reject(e);
                  return deferred.promise;
                }
                requires = getRequires(loadedModule);
              }

              angular.forEach(requires, function(requireEntry) {
                // If no configuration is provided, try and find one from a previous load.
                // If there isn't one, bail and let the normal flow run
                if(typeof requireEntry === 'string') {
                  var config = self.getModuleConfig(requireEntry);
                  if(config === null) {
                    moduleCache.push(requireEntry); // We don't know about this module, but something else might, so push it anyway.
                    return;
                  }
                  requireEntry = config;
                }

                // Check if this dependency has been loaded previously
                if(moduleExists(requireEntry.name)) {
                  if(typeof module !== 'string') {
                    // compare against the already loaded module to see if the new definition adds any new files
                    diff = requireEntry.files.filter(function(n) {
                      return self.getModuleConfig(requireEntry.name).files.indexOf(n) < 0;
                    });

                    // If the module was redefined, advise via the console
                    if(diff.length !== 0) {
                      $log.warn('Module "', moduleName, '" attempted to redefine configuration for dependency. "', requireEntry.name, '"\n Additional Files Loaded:', diff);
                    }

                    // Push everything to the file loader, it will weed out the duplicates.
                    promisesList.push(filesLoader(requireEntry.files, localParams).then(function() {
                      return loadDependencies(requireEntry);
                    }));
                  }
                  return;
                } else if(typeof requireEntry === 'object') {
                  if(requireEntry.hasOwnProperty('name') && requireEntry['name']) {
                    // The dependency doesn't exist in the module cache and is a new configuration, so store and push it.
                    self.setModuleConfig(requireEntry);
                    moduleCache.push(requireEntry['name']);
                  }

                  // CSS Loading Handler
                  if(requireEntry.hasOwnProperty('css') && requireEntry['css'].length !== 0) {
                    // Locate the document insertion point
                    angular.forEach(requireEntry['css'], function(path) {
                      buildElement('css', path, localParams);
                    });
                  }
                  // CSS End.
                }

                // Check if the dependency has any files that need to be loaded. If there are, push a new promise to the promise list.
                if(requireEntry.hasOwnProperty('files') && requireEntry.files.length !== 0) {
                  if(requireEntry.files) {
                    promisesList.push(filesLoader(requireEntry, localParams).then(function() {
                      return loadDependencies(requireEntry);
                    }));
                  }
                }
              });

              // Create a wrapper promise to watch the promise list and resolve it once everything is done.
              return $q.all(promisesList);
            }

            filesLoader(config, localParams).then(function success() {
              if(moduleName === null) {
                deferred.resolve(module);
              } else {
                moduleCache.push(moduleName);
                loadDependencies(moduleName).then(function success() {
                  try {
                    justLoaded = [];
                    register(providers, moduleCache, localParams);
                  } catch(e) {
                    $log.error(e.message);
                    deferred.reject(e);
                    return;
                  }
                  deferred.resolve(module);
                }, function error(err) {
                  deferred.reject(err);
                });
              }
            }, function error(err) {
              deferred.reject(err);
            });

            return deferred.promise;
          }
        };
      }];

      this.config = function(config) {
        if(angular.isDefined(config.jsLoader) || angular.isDefined(config.asyncLoader)) {
          if(!angular.isFunction(config.jsLoader || config.asyncLoader)) {
            throw('The js loader needs to be a function');
          }
          jsLoader = config.jsLoader || config.asyncLoader;
        }

        if(angular.isDefined(config.cssLoader)) {
          if(!angular.isFunction(config.cssLoader)) {
            throw('The css loader needs to be a function');
          }
          cssLoader = config.cssLoader;
        }

        if(angular.isDefined(config.templatesLoader)) {
          if(!angular.isFunction(config.templatesLoader)) {
            throw('The template loader needs to be a function');
          }
          templatesLoader = config.templatesLoader;
        }

        // If we want to define modules configs
        if(angular.isDefined(config.modules)) {
          if(angular.isArray(config.modules)) {
            angular.forEach(config.modules, function(moduleConfig) {
              modules[moduleConfig.name] = moduleConfig;
            });
          } else {
            modules[config.modules.name] = config.modules;
          }
        }

        if(angular.isDefined(config.debug)) {
          debug = config.debug;
        }

        if(angular.isDefined(config.events)) {
          events = config.events;
        }
      };
    }]);

  ocLazyLoad.directive('ocLazyLoad', ['$ocLazyLoad', '$compile', '$animate', '$parse',
    function($ocLazyLoad, $compile, $animate, $parse) {
      return {
        restrict: 'A',
        terminal: true,
        priority: 1000,
        compile: function(element, attrs) {
          // we store the content and remove it before compilation
          var content = element[0].innerHTML;
          element.html('');

          return function($scope, $element, $attr) {
            var model = $parse($attr.ocLazyLoad);
            $scope.$watch(function() {
              // it can be a module name (string), an object, an array, or a scope reference to any of this
              return model($scope) || $attr.ocLazyLoad;
            }, function(moduleName) {
              if(angular.isDefined(moduleName)) {
                $ocLazyLoad.load(moduleName).then(function success(moduleConfig) {
                  $animate.enter($compile(content)($scope), null, $element);
                });
              }
            }, true);
          };
        }
      };
    }]);

  /**
   * Get the list of required modules/services/... for this module
   * @param module
   * @returns {Array}
   */
  function getRequires(module) {
    var requires = [];
    angular.forEach(module.requires, function(requireModule) {
      if(regModules.indexOf(requireModule) === -1) {
        requires.push(requireModule);
      }
    });
    return requires;
  }

  /**
   * Check if a module exists and returns it if it does
   * @param moduleName
   * @returns {boolean}
   */
  function moduleExists(moduleName) {
    try {
      return angular.module(moduleName);
    } catch(e) {
      if(/No module/.test(e) || (e.message.indexOf('$injector:nomod') > -1)) {
        return false;
      }
    }
  }

  function getModule(moduleName) {
    try {
      return angular.module(moduleName);
    } catch(e) {
      // this error message really suxx
      if(/No module/.test(e) || (e.message.indexOf('$injector:nomod') > -1)) {
        e.message = 'The module "' + moduleName + '" that you are trying to load does not exist. ' + e.message
      }
      throw e;
    }
  }

  function invokeQueue(providers, queue, moduleName, reconfig) {
    if(!queue) {
      return;
    }

    var i, len, args, provider;
    for(i = 0, len = queue.length; i < len; i++) {
      args = queue[i];
      if(angular.isArray(args)) {
        if(providers !== null) {
          if(providers.hasOwnProperty(args[0])) {
            provider = providers[args[0]];
          } else {
            throw new Error('unsupported provider ' + args[0]);
          }
        }
        var isNew = registerInvokeList(args, moduleName);
        if(args[1] !== 'invoke') {
          if(isNew && angular.isDefined(provider)) {
            provider[args[1]].apply(provider, args[2]);
          }
        } else { // config block
          var callInvoke = function(fct) {
            var invoked = regConfigs.indexOf(moduleName + '-' + fct);
            if(invoked === -1 || reconfig) {
              if(invoked === -1) {
                regConfigs.push(moduleName + '-' + fct);
              }
              if(angular.isDefined(provider)) {
                provider[args[1]].apply(provider, args[2]);
              }
            }
          }
          if(angular.isFunction(args[2][0])) {
            callInvoke(args[2][0]);
          } else if(angular.isArray(args[2][0])) {
            for(var j = 0, jlen = args[2][0].length; j < jlen; j++) {
              if(angular.isFunction(args[2][0][j])) {
                callInvoke(args[2][0][j]);
              }
            }
          }
        }
      }
    }
  }

  /**
   * Register a new module and load it
   * @param providers
   * @param registerModules
   * @returns {*}
   */
  function register(providers, registerModules, params) {
    if(registerModules) {
      var k, r, moduleName, moduleFn, tempRunBlocks = [];
      for(k = registerModules.length - 1; k >= 0; k--) {
        moduleName = registerModules[k];
        if(typeof moduleName !== 'string') {
          moduleName = getModuleName(moduleName);
        }
        if(!moduleName || justLoaded.indexOf(moduleName) !== -1) {
          continue;
        }
        var newModule = regModules.indexOf(moduleName) === -1;
        moduleFn = angular.module(moduleName);
        if(newModule) { // new module
          regModules.push(moduleName);
          register(providers, moduleFn.requires, params);
        }
        if(moduleFn._runBlocks.length > 0) {
          // new run blocks detected! Replace the old ones (if existing)
          runBlocks[moduleName] = [];
          while(moduleFn._runBlocks.length > 0) {
            runBlocks[moduleName].push(moduleFn._runBlocks.shift());
          }
        }
        if(angular.isDefined(runBlocks[moduleName]) && (newModule || params.rerun)) {
          tempRunBlocks = tempRunBlocks.concat(runBlocks[moduleName]);
        }
        invokeQueue(providers, moduleFn._invokeQueue, moduleName, params.reconfig);
        invokeQueue(providers, moduleFn._configBlocks, moduleName, params.reconfig); // angular 1.3+
        broadcast(newModule ? 'ocLazyLoad.moduleLoaded' : 'ocLazyLoad.moduleReloaded', moduleName);
        registerModules.pop();
        justLoaded.push(moduleName);
      }
      // execute the run blocks at the end
      var instanceInjector = providers.getInstanceInjector();
      angular.forEach(tempRunBlocks, function(fn) {
        instanceInjector.invoke(fn);
      });
    }
  }

  /**
   * Register an invoke
   * @param args
   * @returns {*}
   */
  function registerInvokeList(args, moduleName) {
    var invokeList = args[2][0],
      type = args[1],
      newInvoke = false;
    if(angular.isUndefined(regInvokes[moduleName])) {
      regInvokes[moduleName] = {};
    }
    if(angular.isUndefined(regInvokes[moduleName][type])) {
      regInvokes[moduleName][type] = [];
    }
    var onInvoke = function(invokeName) {
      newInvoke = true;
      regInvokes[moduleName][type].push(invokeName);
      broadcast('ocLazyLoad.componentLoaded', [moduleName, type, invokeName]);
    }
    if(angular.isString(invokeList) && regInvokes[moduleName][type].indexOf(invokeList) === -1) {
      onInvoke(invokeList);
    } else if(angular.isObject(invokeList)) {
      angular.forEach(invokeList, function(invoke) {
        if(angular.isString(invoke) && regInvokes[moduleName][type].indexOf(invoke) === -1) {
          onInvoke(invoke);
        }
      });
    } else {
      return false;
    }
    return newInvoke;
  }

  function getModuleName(module) {
    var moduleName = null;
    if(angular.isString(module)) {
      moduleName = module;
    } else if(angular.isObject(module) && module.hasOwnProperty('name') && angular.isString(module.name)) {
      moduleName = module.name;
    }
    return moduleName;
  }

  /**
   * Get the list of existing registered modules
   * @param element
   */
  function init(element) {
    if(initModules.length === 0) {
      var elements = [element],
        names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],
        NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/,
        append = function append(elm) {
          return (elm && elements.push(elm));
        };

      angular.forEach(names, function(name) {
        names[name] = true;
        append(document.getElementById(name));
        name = name.replace(':', '\\:');
        if(element[0].querySelectorAll) {
          angular.forEach(element[0].querySelectorAll('.' + name), append);
          angular.forEach(element[0].querySelectorAll('.' + name + '\\:'), append);
          angular.forEach(element[0].querySelectorAll('[' + name + ']'), append);
        }
      });

      angular.forEach(elements, function(elm) {
        if(initModules.length === 0) {
          var className = ' ' + element.className + ' ';
          var match = NG_APP_CLASS_REGEXP.exec(className);
          if(match) {
            initModules.push((match[2] || '').replace(/\s+/g, ','));
          } else {
            angular.forEach(elm.attributes, function(attr) {
              if(initModules.length === 0 && names[attr.name]) {
                initModules.push(attr.value);
              }
            });
          }
        }
      });
    }
    if(initModules.length === 0) {
      throw 'No module found during bootstrap, unable to init ocLazyLoad';
    }

    var addReg = function addReg(moduleName) {
      if(regModules.indexOf(moduleName) === -1) {
        // register existing modules
        regModules.push(moduleName);
        var mainModule = angular.module(moduleName);

        // register existing components (directives, services, ...)
        invokeQueue(null, mainModule._invokeQueue, moduleName);
        invokeQueue(null, mainModule._configBlocks, moduleName); // angular 1.3+

        angular.forEach(mainModule.requires, addReg);
      }
    };

    angular.forEach(initModules, function(moduleName) {
      addReg(moduleName);
    });
  }

  var bootstrap = angular.bootstrap;
  angular.bootstrap = function(element, modules, config) {
    initModules = modules.slice(); // make a clean copy
    return bootstrap(element, modules, config);
  };

  // Array.indexOf polyfill for IE8
  if(!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(searchElement, fromIndex) {

      var k;

      // 1. Let O be the result of calling ToObject passing
      //    the this value as the argument.
      if(this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var O = Object(this);

      // 2. Let lenValue be the result of calling the Get
      //    internal method of O with the argument "length".
      // 3. Let len be ToUint32(lenValue).
      var len = O.length >>> 0;

      // 4. If len is 0, return -1.
      if(len === 0) {
        return -1;
      }

      // 5. If argument fromIndex was passed let n be
      //    ToInteger(fromIndex); else let n be 0.
      var n = +fromIndex || 0;

      if(Math.abs(n) === Infinity) {
        n = 0;
      }

      // 6. If n >= len, return -1.
      if(n >= len) {
        return -1;
      }

      // 7. If n >= 0, then Let k be n.
      // 8. Else, n<0, Let k be len - abs(n).
      //    If k is less than 0, then let k be 0.
      k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

      // 9. Repeat, while k < len
      while(k < len) {
        // a. Let Pk be ToString(k).
        //   This is implicit for LHS operands of the in operator
        // b. Let kPresent be the result of calling the
        //    HasProperty internal method of O with argument Pk.
        //   This step can be combined with c
        // c. If kPresent is true, then
        //    i.  Let elementK be the result of calling the Get
        //        internal method of O with the argument ToString(k).
        //   ii.  Let same be the result of applying the
        //        Strict Equality Comparison Algorithm to
        //        searchElement and elementK.
        //  iii.  If same is true, return k.
        if(k in O && O[k] === searchElement) {
          return k;
        }
        k++;
      }
      return -1;
    };
  }
})();

/*!
 * angular-translate - v2.5.2 - 2014-12-10
 * http://github.com/angular-translate/angular-translate
 * Copyright (c) 2014 ; Licensed MIT
 */
/**
 * @ngdoc overview
 * @name pascalprecht.translate
 *
 * @description
 * The main module which holds everything together.
 */
angular.module('pascalprecht.translate', ['ng'])

.run(['$translate', function ($translate) {

  var key = $translate.storageKey(),
      storage = $translate.storage();

  var fallbackFromIncorrectStorageValue = function() {
    var preferred = $translate.preferredLanguage();
    if (angular.isString(preferred)) {
      $translate.use(preferred);
      // $translate.use() will also remember the language.
      // So, we don't need to call storage.put() here.
    } else {
      storage.put(key, $translate.use());
    }
  };

  if (storage) {
    if (!storage.get(key)) {
      fallbackFromIncorrectStorageValue();
    } else {
      $translate.use(storage.get(key))['catch'](fallbackFromIncorrectStorageValue);
    }
  } else if (angular.isString($translate.preferredLanguage())) {
    $translate.use($translate.preferredLanguage());
  }
}]);

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateProvider
 * @description
 *
 * $translateProvider allows developers to register translation-tables, asynchronous loaders
 * and similar to configure translation behavior directly inside of a module.
 *
 */
angular.module('pascalprecht.translate').provider('$translate', ['$STORAGE_KEY', function ($STORAGE_KEY) {

  var $translationTable = {},
      $preferredLanguage,
      $availableLanguageKeys = [],
      $languageKeyAliases,
      $fallbackLanguage,
      $fallbackWasString,
      $uses,
      $nextLang,
      $storageFactory,
      $storageKey = $STORAGE_KEY,
      $storagePrefix,
      $missingTranslationHandlerFactory,
      $interpolationFactory,
      $interpolatorFactories = [],
      $interpolationSanitizationStrategy = false,
      $loaderFactory,
      $cloakClassName = 'translate-cloak',
      $loaderOptions,
      $notFoundIndicatorLeft,
      $notFoundIndicatorRight,
      $postCompilingEnabled = false,
      NESTED_OBJECT_DELIMITER = '.',
      loaderCache;

  var version = '2.5.2';

  // tries to determine the browsers language
  var getFirstBrowserLanguage = function () {
    var nav = window.navigator,
        browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],
        i,
        language;

    // support for HTML 5.1 "navigator.languages"
    if (angular.isArray(nav.languages)) {
      for (i = 0; i < nav.languages.length; i++) {
        language = nav.languages[i];
        if (language && language.length) {
          return language;
        }
      }
    }

    // support for other well known properties in browsers
    for (i = 0; i < browserLanguagePropertyKeys.length; i++) {
      language = nav[browserLanguagePropertyKeys[i]];
      if (language && language.length) {
        return language;
      }
    }

    return null;
  };
  getFirstBrowserLanguage.displayName = 'angular-translate/service: getFirstBrowserLanguage';

  // tries to determine the browsers locale
  var getLocale = function () {
    return (getFirstBrowserLanguage() || '').split('-').join('_');
  };
  getLocale.displayName = 'angular-translate/service: getLocale';

  /**
   * @name indexOf
   * @private
   *
   * @description
   * indexOf polyfill. Kinda sorta.
   *
   * @param {array} array Array to search in.
   * @param {string} searchElement Element to search for.
   *
   * @returns {int} Index of search element.
   */
  var indexOf = function(array, searchElement) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (array[i] === searchElement) {
        return i;
      }
    }
    return -1;
  };

  /**
   * @name trim
   * @private
   *
   * @description
   * trim polyfill
   *
   * @returns {string} The string stripped of whitespace from both ends
   */
  var trim = function() {
    return this.replace(/^\s+|\s+$/g, '');
  };

  var negotiateLocale = function (preferred) {

    var avail = [],
        locale = angular.lowercase(preferred),
        i = 0,
        n = $availableLanguageKeys.length;

    for (; i < n; i++) {
      avail.push(angular.lowercase($availableLanguageKeys[i]));
    }

    if (indexOf(avail, locale) > -1) {
      return preferred;
    }

    if ($languageKeyAliases) {
      var alias;
      for (var langKeyAlias in $languageKeyAliases) {
        var hasWildcardKey = false;
        var hasExactKey = Object.prototype.hasOwnProperty.call($languageKeyAliases, langKeyAlias) &&
          angular.lowercase(langKeyAlias) === angular.lowercase(preferred);

        if (langKeyAlias.slice(-1) === '*') {
          hasWildcardKey = langKeyAlias.slice(0, -1) === preferred.slice(0, langKeyAlias.length-1);
        }
        if (hasExactKey || hasWildcardKey) {
          alias = $languageKeyAliases[langKeyAlias];
          if (indexOf(avail, angular.lowercase(alias)) > -1) {
            return alias;
          }
        }
      }
    }

    var parts = preferred.split('_');

    if (parts.length > 1 && indexOf(avail, angular.lowercase(parts[0])) > -1) {
      return parts[0];
    }

    // If everything fails, just return the preferred, unchanged.
    return preferred;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#translations
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Registers a new translation table for specific language key.
   *
   * To register a translation table for specific language, pass a defined language
   * key as first parameter.
   *
   * <pre>
   *  // register translation table for language: 'de_DE'
   *  $translateProvider.translations('de_DE', {
   *    'GREETING': 'Hallo Welt!'
   *  });
   *
   *  // register another one
   *  $translateProvider.translations('en_US', {
   *    'GREETING': 'Hello world!'
   *  });
   * </pre>
   *
   * When registering multiple translation tables for for the same language key,
   * the actual translation table gets extended. This allows you to define module
   * specific translation which only get added, once a specific module is loaded in
   * your app.
   *
   * Invoking this method with no arguments returns the translation table which was
   * registered with no language key. Invoking it with a language key returns the
   * related translation table.
   *
   * @param {string} key A language key.
   * @param {object} translationTable A plain old JavaScript object that represents a translation table.
   *
   */
  var translations = function (langKey, translationTable) {

    if (!langKey && !translationTable) {
      return $translationTable;
    }

    if (langKey && !translationTable) {
      if (angular.isString(langKey)) {
        return $translationTable[langKey];
      }
    } else {
      if (!angular.isObject($translationTable[langKey])) {
        $translationTable[langKey] = {};
      }
      angular.extend($translationTable[langKey], flatObject(translationTable));
    }
    return this;
  };

  this.translations = translations;

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#cloakClassName
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   *
   * Let's you change the class name for `translate-cloak` directive.
   * Default class name is `translate-cloak`.
   *
   * @param {string} name translate-cloak class name
   */
  this.cloakClassName = function (name) {
    if (!name) {
      return $cloakClassName;
    }
    $cloakClassName = name;
    return this;
  };

  /**
   * @name flatObject
   * @private
   *
   * @description
   * Flats an object. This function is used to flatten given translation data with
   * namespaces, so they are later accessible via dot notation.
   */
  var flatObject = function (data, path, result, prevKey) {
    var key, keyWithPath, keyWithShortPath, val;

    if (!path) {
      path = [];
    }
    if (!result) {
      result = {};
    }
    for (key in data) {
      if (!Object.prototype.hasOwnProperty.call(data, key)) {
        continue;
      }
      val = data[key];
      if (angular.isObject(val)) {
        flatObject(val, path.concat(key), result, key);
      } else {
        keyWithPath = path.length ? ('' + path.join(NESTED_OBJECT_DELIMITER) + NESTED_OBJECT_DELIMITER + key) : key;
        if(path.length && key === prevKey){
          // Create shortcut path (foo.bar == foo.bar.bar)
          keyWithShortPath = '' + path.join(NESTED_OBJECT_DELIMITER);
          // Link it to original path
          result[keyWithShortPath] = '@:' + keyWithPath;
        }
        result[keyWithPath] = val;
      }
    }
    return result;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#addInterpolation
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Adds interpolation services to angular-translate, so it can manage them.
   *
   * @param {object} factory Interpolation service factory
   */
  this.addInterpolation = function (factory) {
    $interpolatorFactories.push(factory);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useMessageFormatInterpolation
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use interpolation functionality of messageformat.js.
   * This is useful when having high level pluralization and gender selection.
   */
  this.useMessageFormatInterpolation = function () {
    return this.useInterpolation('$translateMessageFormatInterpolation');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useInterpolation
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate which interpolation style to use as default, application-wide.
   * Simply pass a factory/service name. The interpolation service has to implement
   * the correct interface.
   *
   * @param {string} factory Interpolation service name.
   */
  this.useInterpolation = function (factory) {
    $interpolationFactory = factory;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useSanitizeStrategy
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Simply sets a sanitation strategy type.
   *
   * @param {string} value Strategy type.
   */
  this.useSanitizeValueStrategy = function (value) {
    $interpolationSanitizationStrategy = value;
    return this;
  };

 /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#preferredLanguage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells the module which of the registered translation tables to use for translation
   * at initial startup by passing a language key. Similar to `$translateProvider#use`
   * only that it says which language to **prefer**.
   *
   * @param {string} langKey A language key.
   *
   */
  this.preferredLanguage = function(langKey) {
    setupPreferredLanguage(langKey);
    return this;

  };
  var setupPreferredLanguage = function (langKey) {
    if (langKey) {
      $preferredLanguage = langKey;
    }
    return $preferredLanguage;
  };
  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicator
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets an indicator which is used when a translation isn't found. E.g. when
   * setting the indicator as 'X' and one tries to translate a translation id
   * called `NOT_FOUND`, this will result in `X NOT_FOUND X`.
   *
   * Internally this methods sets a left indicator and a right indicator using
   * `$translateProvider.translationNotFoundIndicatorLeft()` and
   * `$translateProvider.translationNotFoundIndicatorRight()`.
   *
   * **Note**: These methods automatically add a whitespace between the indicators
   * and the translation id.
   *
   * @param {string} indicator An indicator, could be any string.
   */
  this.translationNotFoundIndicator = function (indicator) {
    this.translationNotFoundIndicatorLeft(indicator);
    this.translationNotFoundIndicatorRight(indicator);
    return this;
  };

  /**
   * ngdoc function
   * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets an indicator which is used when a translation isn't found left to the
   * translation id.
   *
   * @param {string} indicator An indicator.
   */
  this.translationNotFoundIndicatorLeft = function (indicator) {
    if (!indicator) {
      return $notFoundIndicatorLeft;
    }
    $notFoundIndicatorLeft = indicator;
    return this;
  };

  /**
   * ngdoc function
   * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets an indicator which is used when a translation isn't found right to the
   * translation id.
   *
   * @param {string} indicator An indicator.
   */
  this.translationNotFoundIndicatorRight = function (indicator) {
    if (!indicator) {
      return $notFoundIndicatorRight;
    }
    $notFoundIndicatorRight = indicator;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#fallbackLanguage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells the module which of the registered translation tables to use when missing translations
   * at initial startup by passing a language key. Similar to `$translateProvider#use`
   * only that it says which language to **fallback**.
   *
   * @param {string||array} langKey A language key.
   *
   */
  this.fallbackLanguage = function (langKey) {
    fallbackStack(langKey);
    return this;
  };

  var fallbackStack = function (langKey) {
    if (langKey) {
      if (angular.isString(langKey)) {
        $fallbackWasString = true;
        $fallbackLanguage = [ langKey ];
      } else if (angular.isArray(langKey)) {
        $fallbackWasString = false;
        $fallbackLanguage = langKey;
      }
      if (angular.isString($preferredLanguage)  && indexOf($fallbackLanguage, $preferredLanguage) < 0) {
        $fallbackLanguage.push($preferredLanguage);
      }

      return this;
    } else {
      if ($fallbackWasString) {
        return $fallbackLanguage[0];
      } else {
        return $fallbackLanguage;
      }
    }
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#use
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Set which translation table to use for translation by given language key. When
   * trying to 'use' a language which isn't provided, it'll throw an error.
   *
   * You actually don't have to use this method since `$translateProvider#preferredLanguage`
   * does the job too.
   *
   * @param {string} langKey A language key.
   */
  this.use = function (langKey) {
    if (langKey) {
      if (!$translationTable[langKey] && (!$loaderFactory)) {
        // only throw an error, when not loading translation data asynchronously
        throw new Error("$translateProvider couldn't find translationTable for langKey: '" + langKey + "'");
      }
      $uses = langKey;
      return this;
    }
    return $uses;
  };

 /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#storageKey
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells the module which key must represent the choosed language by a user in the storage.
   *
   * @param {string} key A key for the storage.
   */
  var storageKey = function(key) {
    if (!key) {
      if ($storagePrefix) {
        return $storagePrefix + $storageKey;
      }
      return $storageKey;
    }
    $storageKey = key;
  };

  this.storageKey = storageKey;

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useUrlLoader
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateUrlLoader` extension service as loader.
   *
   * @param {string} url Url
   * @param {Object=} options Optional configuration object
   */
  this.useUrlLoader = function (url, options) {
    return this.useLoader('$translateUrlLoader', angular.extend({ url: url }, options));
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useStaticFilesLoader
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateStaticFilesLoader` extension service as loader.
   *
   * @param {Object=} options Optional configuration object
   */
  this.useStaticFilesLoader = function (options) {
    return this.useLoader('$translateStaticFilesLoader', options);
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useLoader
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use any other service as loader.
   *
   * @param {string} loaderFactory Factory name to use
   * @param {Object=} options Optional configuration object
   */
  this.useLoader = function (loaderFactory, options) {
    $loaderFactory = loaderFactory;
    $loaderOptions = options || {};
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useLocalStorage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateLocalStorage` service as storage layer.
   *
   */
  this.useLocalStorage = function () {
    return this.useStorage('$translateLocalStorage');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useCookieStorage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateCookieStorage` service as storage layer.
   */
  this.useCookieStorage = function () {
    return this.useStorage('$translateCookieStorage');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useStorage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use custom service as storage layer.
   */
  this.useStorage = function (storageFactory) {
    $storageFactory = storageFactory;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#storagePrefix
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets prefix for storage key.
   *
   * @param {string} prefix Storage key prefix
   */
  this.storagePrefix = function (prefix) {
    if (!prefix) {
      return prefix;
    }
    $storagePrefix = prefix;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandlerLog
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use built-in log handler when trying to translate
   * a translation Id which doesn't exist.
   *
   * This is actually a shortcut method for `useMissingTranslationHandler()`.
   *
   */
  this.useMissingTranslationHandlerLog = function () {
    return this.useMissingTranslationHandler('$translateMissingTranslationHandlerLog');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandler
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Expects a factory name which later gets instantiated with `$injector`.
   * This method can be used to tell angular-translate to use a custom
   * missingTranslationHandler. Just build a factory which returns a function
   * and expects a translation id as argument.
   *
   * Example:
   * <pre>
   *  app.config(function ($translateProvider) {
   *    $translateProvider.useMissingTranslationHandler('customHandler');
   *  });
   *
   *  app.factory('customHandler', function (dep1, dep2) {
   *    return function (translationId) {
   *      // something with translationId and dep1 and dep2
   *    };
   *  });
   * </pre>
   *
   * @param {string} factory Factory name
   */
  this.useMissingTranslationHandler = function (factory) {
    $missingTranslationHandlerFactory = factory;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#usePostCompiling
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * If post compiling is enabled, all translated values will be processed
   * again with AngularJS' $compile.
   *
   * Example:
   * <pre>
   *  app.config(function ($translateProvider) {
   *    $translateProvider.usePostCompiling(true);
   *  });
   * </pre>
   *
   * @param {string} factory Factory name
   */
  this.usePostCompiling = function (value) {
    $postCompilingEnabled = !(!value);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#determinePreferredLanguage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to try to determine on its own which language key
   * to set as preferred language. When `fn` is given, angular-translate uses it
   * to determine a language key, otherwise it uses the built-in `getLocale()`
   * method.
   *
   * The `getLocale()` returns a language key in the format `[lang]_[country]` or
   * `[lang]` depending on what the browser provides.
   *
   * Use this method at your own risk, since not all browsers return a valid
   * locale.
   *
   * @param {object=} fn Function to determine a browser's locale
   */
  this.determinePreferredLanguage = function (fn) {

    var locale = (fn && angular.isFunction(fn)) ? fn() : getLocale();

    if (!$availableLanguageKeys.length) {
      $preferredLanguage = locale;
    } else {
      $preferredLanguage = negotiateLocale(locale);
    }

    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#registerAvailableLanguageKeys
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Registers a set of language keys the app will work with. Use this method in
   * combination with
   * {@link pascalprecht.translate.$translateProvider#determinePreferredLanguage determinePreferredLanguage}.
   * When available languages keys are registered, angular-translate
   * tries to find the best fitting language key depending on the browsers locale,
   * considering your language key convention.
   *
   * @param {object} languageKeys Array of language keys the your app will use
   * @param {object=} aliases Alias map.
   */
  this.registerAvailableLanguageKeys = function (languageKeys, aliases) {
    if (languageKeys) {
      $availableLanguageKeys = languageKeys;
      if (aliases) {
        $languageKeyAliases = aliases;
      }
      return this;
    }
    return $availableLanguageKeys;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useLoaderCache
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Registers a cache for internal $http based loaders.
   * {@link pascalprecht.translate.$translateProvider#determinePreferredLanguage determinePreferredLanguage}.
   * When false the cache will be disabled (default). When true or undefined
   * the cache will be a default (see $cacheFactory). When an object it will
   * be treat as a cache object itself: the usage is $http({cache: cache})
   *
   * @param {object} cache boolean, string or cache-object
   */
  this.useLoaderCache = function (cache) {
    if (cache === false) {
      // disable cache
      loaderCache = undefined;
    } else if (cache === true) {
      // enable cache using AJS defaults
      loaderCache = true;
    } else if (typeof(cache) === 'undefined') {
      // enable cache using default
      loaderCache = '$translationCache';
    } else if (cache) {
      // enable cache using given one (see $cacheFactory)
      loaderCache = cache;
    }
    return this;
  };

  /**
   * @ngdoc object
   * @name pascalprecht.translate.$translate
   * @requires $interpolate
   * @requires $log
   * @requires $rootScope
   * @requires $q
   *
   * @description
   * The `$translate` service is the actual core of angular-translate. It expects a translation id
   * and optional interpolate parameters to translate contents.
   *
   * <pre>
   *  $translate('HEADLINE_TEXT').then(function (translation) {
   *    $scope.translatedText = translation;
   *  });
   * </pre>
   *
   * @param {string|array} translationId A token which represents a translation id
   *                                     This can be optionally an array of translation ids which
   *                                     results that the function returns an object where each key
   *                                     is the translation id and the value the translation.
   * @param {object=} interpolateParams An object hash for dynamic values
   * @param {string} interpolationId The id of the interpolation to use
   * @returns {object} promise
   */
  this.$get = [
    '$log',
    '$injector',
    '$rootScope',
    '$q',
    function ($log, $injector, $rootScope, $q) {

      var Storage,
          defaultInterpolator = $injector.get($interpolationFactory || '$translateDefaultInterpolation'),
          pendingLoader = false,
          interpolatorHashMap = {},
          langPromises = {},
          fallbackIndex,
          startFallbackIteration;

      var $translate = function (translationId, interpolateParams, interpolationId) {

        // Duck detection: If the first argument is an array, a bunch of translations was requested.
        // The result is an object.
        if (angular.isArray(translationId)) {
          // Inspired by Q.allSettled by Kris Kowal
          // https://github.com/kriskowal/q/blob/b0fa72980717dc202ffc3cbf03b936e10ebbb9d7/q.js#L1553-1563
          // This transforms all promises regardless resolved or rejected
          var translateAll = function (translationIds) {
            var results = {}; // storing the actual results
            var promises = []; // promises to wait for
            // Wraps the promise a) being always resolved and b) storing the link id->value
            var translate = function (translationId) {
              var deferred = $q.defer();
              var regardless = function (value) {
                results[translationId] = value;
                deferred.resolve([translationId, value]);
              };
              // we don't care whether the promise was resolved or rejected; just store the values
              $translate(translationId, interpolateParams, interpolationId).then(regardless, regardless);
              return deferred.promise;
            };
            for (var i = 0, c = translationIds.length; i < c; i++) {
              promises.push(translate(translationIds[i]));
            }
            // wait for all (including storing to results)
            return $q.all(promises).then(function () {
              // return the results
              return results;
            });
          };
          return translateAll(translationId);
        }

        var deferred = $q.defer();

        // trim off any whitespace
        if (translationId) {
          translationId = trim.apply(translationId);
        }

        var promiseToWaitFor = (function () {
          var promise = $preferredLanguage ?
            langPromises[$preferredLanguage] :
            langPromises[$uses];

          fallbackIndex = 0;

          if ($storageFactory && !promise) {
            // looks like there's no pending promise for $preferredLanguage or
            // $uses. Maybe there's one pending for a language that comes from
            // storage.
            var langKey = Storage.get($storageKey);
            promise = langPromises[langKey];

            if ($fallbackLanguage && $fallbackLanguage.length) {
                var index = indexOf($fallbackLanguage, langKey);
                // maybe the language from storage is also defined as fallback language
                // we increase the fallback language index to not search in that language
                // as fallback, since it's probably the first used language
                // in that case the index starts after the first element
                fallbackIndex = (index === 0) ? 1 : 0;

                // but we can make sure to ALWAYS fallback to preferred language at least
                if (indexOf($fallbackLanguage, $preferredLanguage) < 0) {
                  $fallbackLanguage.push($preferredLanguage);
                }
            }
          }
          return promise;
        }());

        if (!promiseToWaitFor) {
          // no promise to wait for? okay. Then there's no loader registered
          // nor is a one pending for language that comes from storage.
          // We can just translate.
          determineTranslation(translationId, interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);
        } else {
          promiseToWaitFor.then(function () {
            determineTranslation(translationId, interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);
          }, deferred.reject);
        }
        return deferred.promise;
      };

      /**
       * @name applyNotFoundIndicators
       * @private
       *
       * @description
       * Applies not fount indicators to given translation id, if needed.
       * This function gets only executed, if a translation id doesn't exist,
       * which is why a translation id is expected as argument.
       *
       * @param {string} translationId Translation id.
       * @returns {string} Same as given translation id but applied with not found
       * indicators.
       */
      var applyNotFoundIndicators = function (translationId) {
        // applying notFoundIndicators
        if ($notFoundIndicatorLeft) {
          translationId = [$notFoundIndicatorLeft, translationId].join(' ');
        }
        if ($notFoundIndicatorRight) {
          translationId = [translationId, $notFoundIndicatorRight].join(' ');
        }
        return translationId;
      };

      /**
       * @name useLanguage
       * @private
       *
       * @description
       * Makes actual use of a language by setting a given language key as used
       * language and informs registered interpolators to also use the given
       * key as locale.
       *
       * @param {key} Locale key.
       */
      var useLanguage = function (key) {
        $uses = key;
        $rootScope.$emit('$translateChangeSuccess', {language: key});

        if ($storageFactory) {
          Storage.put($translate.storageKey(), $uses);
        }
        // inform default interpolator
        defaultInterpolator.setLocale($uses);
        // inform all others too!
        angular.forEach(interpolatorHashMap, function (interpolator, id) {
          interpolatorHashMap[id].setLocale($uses);
        });
        $rootScope.$emit('$translateChangeEnd', {language: key});
      };

      /**
       * @name loadAsync
       * @private
       *
       * @description
       * Kicks of registered async loader using `$injector` and applies existing
       * loader options. When resolved, it updates translation tables accordingly
       * or rejects with given language key.
       *
       * @param {string} key Language key.
       * @return {Promise} A promise.
       */
      var loadAsync = function (key) {
        if (!key) {
          throw 'No language key specified for loading.';
        }

        var deferred = $q.defer();

        $rootScope.$emit('$translateLoadingStart', {language: key});
        pendingLoader = true;

        var cache = loaderCache;
        if (typeof(cache) === 'string') {
          // getting on-demand instance of loader
          cache = $injector.get(cache);
        }

        var loaderOptions = angular.extend({}, $loaderOptions, {
          key: key,
          $http: angular.extend({}, {
            cache: cache
          }, $loaderOptions.$http)
        });

        $injector.get($loaderFactory)(loaderOptions).then(function (data) {
          var translationTable = {};
          $rootScope.$emit('$translateLoadingSuccess', {language: key});

          if (angular.isArray(data)) {
            angular.forEach(data, function (table) {
              angular.extend(translationTable, flatObject(table));
            });
          } else {
            angular.extend(translationTable, flatObject(data));
          }
          pendingLoader = false;
          deferred.resolve({
            key: key,
            table: translationTable
          });
          $rootScope.$emit('$translateLoadingEnd', {language: key});
        }, function (key) {
          $rootScope.$emit('$translateLoadingError', {language: key});
          deferred.reject(key);
          $rootScope.$emit('$translateLoadingEnd', {language: key});
        });
        return deferred.promise;
      };

      if ($storageFactory) {
        Storage = $injector.get($storageFactory);

        if (!Storage.get || !Storage.put) {
          throw new Error('Couldn\'t use storage \'' + $storageFactory + '\', missing get() or put() method!');
        }
      }

      // apply additional settings
      if (angular.isFunction(defaultInterpolator.useSanitizeValueStrategy)) {
        defaultInterpolator.useSanitizeValueStrategy($interpolationSanitizationStrategy);
      }

      // if we have additional interpolations that were added via
      // $translateProvider.addInterpolation(), we have to map'em
      if ($interpolatorFactories.length) {
        angular.forEach($interpolatorFactories, function (interpolatorFactory) {
          var interpolator = $injector.get(interpolatorFactory);
          // setting initial locale for each interpolation service
          interpolator.setLocale($preferredLanguage || $uses);
          // apply additional settings
          if (angular.isFunction(interpolator.useSanitizeValueStrategy)) {
            interpolator.useSanitizeValueStrategy($interpolationSanitizationStrategy);
          }
          // make'em recognizable through id
          interpolatorHashMap[interpolator.getInterpolationIdentifier()] = interpolator;
        });
      }

      /**
       * @name getTranslationTable
       * @private
       *
       * @description
       * Returns a promise that resolves to the translation table
       * or is rejected if an error occurred.
       *
       * @param langKey
       * @returns {Q.promise}
       */
      var getTranslationTable = function (langKey) {
        var deferred = $q.defer();
        if (Object.prototype.hasOwnProperty.call($translationTable, langKey)) {
          deferred.resolve($translationTable[langKey]);
        } else if (langPromises[langKey]) {
          langPromises[langKey].then(function (data) {
            translations(data.key, data.table);
            deferred.resolve(data.table);
          }, deferred.reject);
        } else {
          deferred.reject();
        }
        return deferred.promise;
      };

      /**
       * @name getFallbackTranslation
       * @private
       *
       * @description
       * Returns a promise that will resolve to the translation
       * or be rejected if no translation was found for the language.
       * This function is currently only used for fallback language translation.
       *
       * @param langKey The language to translate to.
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {Q.promise}
       */
      var getFallbackTranslation = function (langKey, translationId, interpolateParams, Interpolator) {
        var deferred = $q.defer();

        getTranslationTable(langKey).then(function (translationTable) {
          if (Object.prototype.hasOwnProperty.call(translationTable, translationId)) {
            Interpolator.setLocale(langKey);
            deferred.resolve(Interpolator.interpolate(translationTable[translationId], interpolateParams));
            Interpolator.setLocale($uses);
          } else {
            deferred.reject();
          }
        }, deferred.reject);

        return deferred.promise;
      };

      /**
       * @name getFallbackTranslationInstant
       * @private
       *
       * @description
       * Returns a translation
       * This function is currently only used for fallback language translation.
       *
       * @param langKey The language to translate to.
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {string} translation
       */
      var getFallbackTranslationInstant = function (langKey, translationId, interpolateParams, Interpolator) {
        var result, translationTable = $translationTable[langKey];

        if (translationTable && Object.prototype.hasOwnProperty.call(translationTable, translationId)) {
          Interpolator.setLocale(langKey);
          result = Interpolator.interpolate(translationTable[translationId], interpolateParams);
          Interpolator.setLocale($uses);
        }

        return result;
      };


      /**
       * @name translateByHandler
       * @private
       *
       * Translate by missing translation handler.
       *
       * @param translationId
       * @returns translation created by $missingTranslationHandler or translationId is $missingTranslationHandler is
       * absent
       */
      var translateByHandler = function (translationId) {
        // If we have a handler factory - we might also call it here to determine if it provides
        // a default text for a translationid that can't be found anywhere in our tables
        if ($missingTranslationHandlerFactory) {
          var resultString = $injector.get($missingTranslationHandlerFactory)(translationId, $uses);
          if (resultString !== undefined) {
            return resultString;
          } else {
            return translationId;
          }
        } else {
          return translationId;
        }
      };

      /**
       * @name resolveForFallbackLanguage
       * @private
       *
       * Recursive helper function for fallbackTranslation that will sequentially look
       * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
       *
       * @param fallbackLanguageIndex
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {Q.promise} Promise that will resolve to the translation.
       */
      var resolveForFallbackLanguage = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator) {
        var deferred = $q.defer();

        if (fallbackLanguageIndex < $fallbackLanguage.length) {
          var langKey = $fallbackLanguage[fallbackLanguageIndex];
          getFallbackTranslation(langKey, translationId, interpolateParams, Interpolator).then(
            deferred.resolve,
            function () {
              // Look in the next fallback language for a translation.
              // It delays the resolving by passing another promise to resolve.
              resolveForFallbackLanguage(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator).then(deferred.resolve);
            }
          );
        } else {
          // No translation found in any fallback language
          deferred.resolve(translateByHandler(translationId));
        }
        return deferred.promise;
      };

      /**
       * @name resolveForFallbackLanguageInstant
       * @private
       *
       * Recursive helper function for fallbackTranslation that will sequentially look
       * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
       *
       * @param fallbackLanguageIndex
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {string} translation
       */
      var resolveForFallbackLanguageInstant = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator) {
        var result;

        if (fallbackLanguageIndex < $fallbackLanguage.length) {
          var langKey = $fallbackLanguage[fallbackLanguageIndex];
          result = getFallbackTranslationInstant(langKey, translationId, interpolateParams, Interpolator);
          if (!result) {
            result = resolveForFallbackLanguageInstant(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator);
          }
        }
        return result;
      };

      /**
       * Translates with the usage of the fallback languages.
       *
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {Q.promise} Promise, that resolves to the translation.
       */
      var fallbackTranslation = function (translationId, interpolateParams, Interpolator) {
        // Start with the fallbackLanguage with index 0
        return resolveForFallbackLanguage((startFallbackIteration>0 ? startFallbackIteration : fallbackIndex), translationId, interpolateParams, Interpolator);
      };

      /**
       * Translates with the usage of the fallback languages.
       *
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {String} translation
       */
      var fallbackTranslationInstant = function (translationId, interpolateParams, Interpolator) {
        // Start with the fallbackLanguage with index 0
        return resolveForFallbackLanguageInstant((startFallbackIteration>0 ? startFallbackIteration : fallbackIndex), translationId, interpolateParams, Interpolator);
      };

      var determineTranslation = function (translationId, interpolateParams, interpolationId) {

        var deferred = $q.defer();

        var table = $uses ? $translationTable[$uses] : $translationTable,
            Interpolator = (interpolationId) ? interpolatorHashMap[interpolationId] : defaultInterpolator;

        // if the translation id exists, we can just interpolate it
        if (table && Object.prototype.hasOwnProperty.call(table, translationId)) {
          var translation = table[translationId];

          // If using link, rerun $translate with linked translationId and return it
          if (translation.substr(0, 2) === '@:') {

            $translate(translation.substr(2), interpolateParams, interpolationId)
              .then(deferred.resolve, deferred.reject);
          } else {
            deferred.resolve(Interpolator.interpolate(translation, interpolateParams));
          }
        } else {
          var missingTranslationHandlerTranslation;
          // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
          if ($missingTranslationHandlerFactory && !pendingLoader) {
            missingTranslationHandlerTranslation = translateByHandler(translationId);
          }

          // since we couldn't translate the inital requested translation id,
          // we try it now with one or more fallback languages, if fallback language(s) is
          // configured.
          if ($uses && $fallbackLanguage && $fallbackLanguage.length) {
            fallbackTranslation(translationId, interpolateParams, Interpolator)
                .then(function (translation) {
                  deferred.resolve(translation);
                }, function (_translationId) {
                  deferred.reject(applyNotFoundIndicators(_translationId));
                });
          } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
            // looks like the requested translation id doesn't exists.
            // Now, if there is a registered handler for missing translations and no
            // asyncLoader is pending, we execute the handler
            deferred.resolve(missingTranslationHandlerTranslation);
          } else {
            deferred.reject(applyNotFoundIndicators(translationId));
          }
        }
        return deferred.promise;
      };

      var determineTranslationInstant = function (translationId, interpolateParams, interpolationId) {

        var result, table = $uses ? $translationTable[$uses] : $translationTable,
            Interpolator = (interpolationId) ? interpolatorHashMap[interpolationId] : defaultInterpolator;

        // if the translation id exists, we can just interpolate it
        if (table && Object.prototype.hasOwnProperty.call(table, translationId)) {
          var translation = table[translationId];

          // If using link, rerun $translate with linked translationId and return it
          if (translation.substr(0, 2) === '@:') {
            result = determineTranslationInstant(translation.substr(2), interpolateParams, interpolationId);
          } else {
            result = Interpolator.interpolate(translation, interpolateParams);
          }
        } else {
          var missingTranslationHandlerTranslation;
          // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
          if ($missingTranslationHandlerFactory && !pendingLoader) {
            missingTranslationHandlerTranslation = translateByHandler(translationId);
          }

          // since we couldn't translate the inital requested translation id,
          // we try it now with one or more fallback languages, if fallback language(s) is
          // configured.
          if ($uses && $fallbackLanguage && $fallbackLanguage.length) {
            fallbackIndex = 0;
            result = fallbackTranslationInstant(translationId, interpolateParams, Interpolator);
          } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
            // looks like the requested translation id doesn't exists.
            // Now, if there is a registered handler for missing translations and no
            // asyncLoader is pending, we execute the handler
            result = missingTranslationHandlerTranslation;
          } else {
            result = applyNotFoundIndicators(translationId);
          }
        }

        return result;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#preferredLanguage
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the language key for the preferred language.
       *
       * @param {string} langKey language String or Array to be used as preferredLanguage (changing at runtime)
       *
       * @return {string} preferred language key
       */
      $translate.preferredLanguage = function (langKey) {
        if(langKey) {
          setupPreferredLanguage(langKey);
        }
        return $preferredLanguage;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#cloakClassName
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the configured class name for `translate-cloak` directive.
       *
       * @return {string} cloakClassName
       */
      $translate.cloakClassName = function () {
        return $cloakClassName;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#fallbackLanguage
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the language key for the fallback languages or sets a new fallback stack.
       *
       * @param {string=} langKey language String or Array of fallback languages to be used (to change stack at runtime)
       *
       * @return {string||array} fallback language key
       */
      $translate.fallbackLanguage = function (langKey) {
        if (langKey !== undefined && langKey !== null) {
          fallbackStack(langKey);

          // as we might have an async loader initiated and a new translation language might have been defined
          // we need to add the promise to the stack also. So - iterate.
          if ($loaderFactory) {
            if ($fallbackLanguage && $fallbackLanguage.length) {
              for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
                if (!langPromises[$fallbackLanguage[i]]) {
                  langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);
                }
              }
            }
          }
          $translate.use($translate.use());
        }
        if ($fallbackWasString) {
          return $fallbackLanguage[0];
        } else {
          return $fallbackLanguage;
        }

      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#useFallbackLanguage
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Sets the first key of the fallback language stack to be used for translation.
       * Therefore all languages in the fallback array BEFORE this key will be skipped!
       *
       * @param {string=} langKey Contains the langKey the iteration shall start with. Set to false if you want to
       * get back to the whole stack
       */
      $translate.useFallbackLanguage = function (langKey) {
        if (langKey !== undefined && langKey !== null) {
          if (!langKey) {
            startFallbackIteration = 0;
          } else {
            var langKeyPosition = indexOf($fallbackLanguage, langKey);
            if (langKeyPosition > -1) {
              startFallbackIteration = langKeyPosition;
            }
          }

        }

      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#proposedLanguage
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the language key of language that is currently loaded asynchronously.
       *
       * @return {string} language key
       */
      $translate.proposedLanguage = function () {
        return $nextLang;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#storage
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns registered storage.
       *
       * @return {object} Storage
       */
      $translate.storage = function () {
        return Storage;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#use
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Tells angular-translate which language to use by given language key. This method is
       * used to change language at runtime. It also takes care of storing the language
       * key in a configured store to let your app remember the choosed language.
       *
       * When trying to 'use' a language which isn't available it tries to load it
       * asynchronously with registered loaders.
       *
       * Returns promise object with loaded language file data
       * @example
       * $translate.use("en_US").then(function(data){
       *   $scope.text = $translate("HELLO");
       * });
       *
       * @param {string} key Language key
       * @return {string} Language key
       */
      $translate.use = function (key) {
        if (!key) {
          return $uses;
        }

        var deferred = $q.defer();

        $rootScope.$emit('$translateChangeStart', {language: key});

        // Try to get the aliased language key
        var aliasedKey = negotiateLocale(key);
        if (aliasedKey) {
          key = aliasedKey;
        }

        // if there isn't a translation table for the language we've requested,
        // we load it asynchronously
        if (!$translationTable[key] && $loaderFactory && !langPromises[key]) {
          $nextLang = key;
          langPromises[key] = loadAsync(key).then(function (translation) {
            translations(translation.key, translation.table);
            deferred.resolve(translation.key);

            useLanguage(translation.key);
            if ($nextLang === key) {
              $nextLang = undefined;
            }
            return translation;
          }, function (key) {
            if ($nextLang === key) {
              $nextLang = undefined;
            }
            $rootScope.$emit('$translateChangeError', {language: key});
            deferred.reject(key);
            $rootScope.$emit('$translateChangeEnd', {language: key});
          });
        } else {
          deferred.resolve(key);
          useLanguage(key);
        }

        return deferred.promise;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#storageKey
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the key for the storage.
       *
       * @return {string} storage key
       */
      $translate.storageKey = function () {
        return storageKey();
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#isPostCompilingEnabled
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns whether post compiling is enabled or not
       *
       * @return {bool} storage key
       */
      $translate.isPostCompilingEnabled = function () {
        return $postCompilingEnabled;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#refresh
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Refreshes a translation table pointed by the given langKey. If langKey is not specified,
       * the module will drop all existent translation tables and load new version of those which
       * are currently in use.
       *
       * Refresh means that the module will drop target translation table and try to load it again.
       *
       * In case there are no loaders registered the refresh() method will throw an Error.
       *
       * If the module is able to refresh translation tables refresh() method will broadcast
       * $translateRefreshStart and $translateRefreshEnd events.
       *
       * @example
       * // this will drop all currently existent translation tables and reload those which are
       * // currently in use
       * $translate.refresh();
       * // this will refresh a translation table for the en_US language
       * $translate.refresh('en_US');
       *
       * @param {string} langKey A language key of the table, which has to be refreshed
       *
       * @return {promise} Promise, which will be resolved in case a translation tables refreshing
       * process is finished successfully, and reject if not.
       */
      $translate.refresh = function (langKey) {
        if (!$loaderFactory) {
          throw new Error('Couldn\'t refresh translation table, no loader registered!');
        }

        var deferred = $q.defer();

        function resolve() {
          deferred.resolve();
          $rootScope.$emit('$translateRefreshEnd', {language: langKey});
        }

        function reject() {
          deferred.reject();
          $rootScope.$emit('$translateRefreshEnd', {language: langKey});
        }

        $rootScope.$emit('$translateRefreshStart', {language: langKey});

        if (!langKey) {
          // if there's no language key specified we refresh ALL THE THINGS!
          var tables = [], loadingKeys = {};

          // reload registered fallback languages
          if ($fallbackLanguage && $fallbackLanguage.length) {
            for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
              tables.push(loadAsync($fallbackLanguage[i]));
              loadingKeys[$fallbackLanguage[i]] = true;
            }
          }

          // reload currently used language
          if ($uses && !loadingKeys[$uses]) {
            tables.push(loadAsync($uses));
          }

          $q.all(tables).then(function (tableData) {
            angular.forEach(tableData, function (data) {
              if ($translationTable[data.key]) {
                delete $translationTable[data.key];
              }
              translations(data.key, data.table);
            });
            if ($uses) {
              useLanguage($uses);
            }
            resolve();
          });

        } else if ($translationTable[langKey]) {

          loadAsync(langKey).then(function (data) {
            translations(data.key, data.table);
            if (langKey === $uses) {
              useLanguage($uses);
            }
            resolve();
          }, reject);

        } else {
          reject();
        }
        return deferred.promise;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#instant
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns a translation instantly from the internal state of loaded translation. All rules
       * regarding the current language, the preferred language of even fallback languages will be
       * used except any promise handling. If a language was not found, an asynchronous loading
       * will be invoked in the background.
       *
       * @param {string|array} translationId A token which represents a translation id
       *                                     This can be optionally an array of translation ids which
       *                                     results that the function's promise returns an object where
       *                                     each key is the translation id and the value the translation.
       * @param {object} interpolateParams Params
       * @param {string} interpolationId The id of the interpolation to use
       *
       * @return {string} translation
       */
      $translate.instant = function (translationId, interpolateParams, interpolationId) {

        // Detect undefined and null values to shorten the execution and prevent exceptions
        if (translationId === null || angular.isUndefined(translationId)) {
          return translationId;
        }

        // Duck detection: If the first argument is an array, a bunch of translations was requested.
        // The result is an object.
        if (angular.isArray(translationId)) {
          var results = {};
          for (var i = 0, c = translationId.length; i < c; i++) {
            results[translationId[i]] = $translate.instant(translationId[i], interpolateParams, interpolationId);
          }
          return results;
        }

        // We discarded unacceptable values. So we just need to verify if translationId is empty String
        if (angular.isString(translationId) && translationId.length < 1) {
          return translationId;
        }

        // trim off any whitespace
        if (translationId) {
          translationId = trim.apply(translationId);
        }

        var result, possibleLangKeys = [];
        if ($preferredLanguage) {
          possibleLangKeys.push($preferredLanguage);
        }
        if ($uses) {
          possibleLangKeys.push($uses);
        }
        if ($fallbackLanguage && $fallbackLanguage.length) {
          possibleLangKeys = possibleLangKeys.concat($fallbackLanguage);
        }
        for (var j = 0, d = possibleLangKeys.length; j < d; j++) {
          var possibleLangKey = possibleLangKeys[j];
          if ($translationTable[possibleLangKey]) {
            if (typeof $translationTable[possibleLangKey][translationId] !== 'undefined') {
              result = determineTranslationInstant(translationId, interpolateParams, interpolationId);
            }
          }
          if (typeof result !== 'undefined') {
            break;
          }
        }

        if (!result && result !== '') {
          // Return translation of default interpolator if not found anything.
          result = defaultInterpolator.interpolate(translationId, interpolateParams);
          if ($missingTranslationHandlerFactory && !pendingLoader) {
            result = translateByHandler(translationId);
          }
        }

        return result;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#versionInfo
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the current version information for the angular-translate library
       *
       * @return {string} angular-translate version
       */
      $translate.versionInfo = function () {
        return version;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#loaderCache
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the defined loaderCache.
       *
       * @return {boolean|string|object} current value of loaderCache
       */
      $translate.loaderCache = function () {
        return loaderCache;
      };

      if ($loaderFactory) {

        // If at least one async loader is defined and there are no
        // (default) translations available we should try to load them.
        if (angular.equals($translationTable, {})) {
          $translate.use($translate.use());
        }

        // Also, if there are any fallback language registered, we start
        // loading them asynchronously as soon as we can.
        if ($fallbackLanguage && $fallbackLanguage.length) {
          var processAsyncResult = function (translation) {
            translations(translation.key, translation.table);
            $rootScope.$emit('$translateChangeEnd', { language: translation.key });
            return translation;
          };
          for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
            langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]).then(processAsyncResult);
          }
        }
      }

      return $translate;
    }
  ];
}]);

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateDefaultInterpolation
 * @requires $interpolate
 *
 * @description
 * Uses angular's `$interpolate` services to interpolate strings against some values.
 *
 * @return {object} $translateInterpolator Interpolator service
 */
angular.module('pascalprecht.translate').factory('$translateDefaultInterpolation', ['$interpolate', function ($interpolate) {

  var $translateInterpolator = {},
      $locale,
      $identifier = 'default',
      $sanitizeValueStrategy = null,
      // map of all sanitize strategies
      sanitizeValueStrategies = {
        escaped: function (params) {
          var result = {};
          for (var key in params) {
            if (Object.prototype.hasOwnProperty.call(params, key)) {
              result[key] = angular.element('<div></div>').text(params[key]).html();
            }
          }
          return result;
        }
      };

  var sanitizeParams = function (params) {
    var result;
    if (angular.isFunction(sanitizeValueStrategies[$sanitizeValueStrategy])) {
      result = sanitizeValueStrategies[$sanitizeValueStrategy](params);
    } else {
      result = params;
    }
    return result;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateDefaultInterpolation#setLocale
   * @methodOf pascalprecht.translate.$translateDefaultInterpolation
   *
   * @description
   * Sets current locale (this is currently not use in this interpolation).
   *
   * @param {string} locale Language key or locale.
   */
  $translateInterpolator.setLocale = function (locale) {
    $locale = locale;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateDefaultInterpolation#getInterpolationIdentifier
   * @methodOf pascalprecht.translate.$translateDefaultInterpolation
   *
   * @description
   * Returns an identifier for this interpolation service.
   *
   * @returns {string} $identifier
   */
  $translateInterpolator.getInterpolationIdentifier = function () {
    return $identifier;
  };

  $translateInterpolator.useSanitizeValueStrategy = function (value) {
    $sanitizeValueStrategy = value;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateDefaultInterpolation#interpolate
   * @methodOf pascalprecht.translate.$translateDefaultInterpolation
   *
   * @description
   * Interpolates given string agains given interpolate params using angulars
   * `$interpolate` service.
   *
   * @returns {string} interpolated string.
   */
  $translateInterpolator.interpolate = function (string, interpolateParams) {
    if ($sanitizeValueStrategy) {
      interpolateParams = sanitizeParams(interpolateParams);
    }
    return $interpolate(string)(interpolateParams || {});
  };

  return $translateInterpolator;
}]);

angular.module('pascalprecht.translate').constant('$STORAGE_KEY', 'NG_TRANSLATE_LANG_KEY');

angular.module('pascalprecht.translate')
/**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translate
 * @requires $compile
 * @requires $filter
 * @requires $interpolate
 * @restrict A
 *
 * @description
 * Translates given translation id either through attribute or DOM content.
 * Internally it uses `translate` filter to translate translation id. It possible to
 * pass an optional `translate-values` object literal as string into translation id.
 *
 * @param {string=} translate Translation id which could be either string or interpolated string.
 * @param {string=} translate-values Values to pass into translation id. Can be passed as object literal string or interpolated object.
 * @param {string=} translate-attr-ATTR translate Translation id and put it into ATTR attribute.
 * @param {string=} translate-default will be used unless translation was successful
 * @param {boolean=} translate-compile (default true if present) defines locally activation of {@link pascalprecht.translate.$translate#usePostCompiling}
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div ng-controller="TranslateCtrl">

        <pre translate="TRANSLATION_ID"></pre>
        <pre translate>TRANSLATION_ID</pre>
        <pre translate translate-attr-title="TRANSLATION_ID"></pre>
        <pre translate="{{translationId}}"></pre>
        <pre translate>{{translationId}}</pre>
        <pre translate="WITH_VALUES" translate-values="{value: 5}"></pre>
        <pre translate translate-values="{value: 5}">WITH_VALUES</pre>
        <pre translate="WITH_VALUES" translate-values="{{values}}"></pre>
        <pre translate translate-values="{{values}}">WITH_VALUES</pre>
        <pre translate translate-attr-title="WITH_VALUES" translate-values="{{values}}"></pre>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en',{
          'TRANSLATION_ID': 'Hello there!',
          'WITH_VALUES': 'The following value is dynamic: {{value}}'
        }).preferredLanguage('en');

      });

      angular.module('ngView').controller('TranslateCtrl', function ($scope) {
        $scope.translationId = 'TRANSLATION_ID';

        $scope.values = {
          value: 78
        };
      });
    </file>
    <file name="scenario.js">
      it('should translate', function () {
        inject(function ($rootScope, $compile) {
          $rootScope.translationId = 'TRANSLATION_ID';

          element = $compile('<p translate="TRANSLATION_ID"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate="{{translationId}}"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate>TRANSLATION_ID</p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate>{{translationId}}</p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate translate-attr-title="TRANSLATION_ID"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.attr('title')).toBe('Hello there!');
        });
      });
    </file>
   </example>
 */
.directive('translate', ['$translate', '$q', '$interpolate', '$compile', '$parse', '$rootScope', function ($translate, $q, $interpolate, $compile, $parse, $rootScope) {

  return {
    restrict: 'AE',
    scope: true,
    compile: function (tElement, tAttr) {

      var translateValuesExist = (tAttr.translateValues) ?
        tAttr.translateValues : undefined;

      var translateInterpolation = (tAttr.translateInterpolation) ?
        tAttr.translateInterpolation : undefined;

      var translateValueExist = tElement[0].outerHTML.match(/translate-value-+/i);

      var interpolateRegExp = "^(.*)(" + $interpolate.startSymbol() + ".*" + $interpolate.endSymbol() + ")(.*)",
          watcherRegExp = "^(.*)" + $interpolate.startSymbol() + "(.*)" + $interpolate.endSymbol() + "(.*)";

      return function linkFn(scope, iElement, iAttr) {

        scope.interpolateParams = {};
        scope.preText = "";
        scope.postText = "";
        var translationIds = {};

        // Ensures any change of the attribute "translate" containing the id will
        // be re-stored to the scope's "translationId".
        // If the attribute has no content, the element's text value (white spaces trimmed off) will be used.
        var observeElementTranslation = function (translationId) {
          if (angular.equals(translationId , '') || !angular.isDefined(translationId)) {
            // Resolve translation id by inner html if required
            var interpolateMatches = iElement.text().match(interpolateRegExp);
            // Interpolate translation id if required
            if (angular.isArray(interpolateMatches)) {
              scope.preText = interpolateMatches[1];
              scope.postText = interpolateMatches[3];
              translationIds.translate = $interpolate(interpolateMatches[2])(scope.$parent);
              watcherMatches = iElement.text().match(watcherRegExp);
              if (angular.isArray(watcherMatches) && watcherMatches[2] && watcherMatches[2].length) {
                scope.$watch(watcherMatches[2], function (newValue) {
                  translationIds.translate = newValue;
                  updateTranslations();
                });
              }
            } else {
              translationIds.translate = iElement.text().replace(/^\s+|\s+$/g,'');
            }
          } else {
            translationIds.translate = translationId;
          }
          updateTranslations();
        };

        var observeAttributeTranslation = function (translateAttr) {
          iAttr.$observe(translateAttr, function (translationId) {
            translationIds[translateAttr] = translationId;
            updateTranslations();
          });
        };

        iAttr.$observe('translate', function (translationId) {
          observeElementTranslation(translationId);
        });

        for (var translateAttr in iAttr) {
          if(iAttr.hasOwnProperty(translateAttr) && translateAttr.substr(0, 13) === 'translateAttr') {
            observeAttributeTranslation(translateAttr);
          }
        }

        iAttr.$observe('translateDefault', function (value) {
          scope.defaultText = value;
        });

        if (translateValuesExist) {
          iAttr.$observe('translateValues', function (interpolateParams) {
            if (interpolateParams) {
              scope.$parent.$watch(function () {
                angular.extend(scope.interpolateParams, $parse(interpolateParams)(scope.$parent));
              });
            }
          });
        }

        if (translateValueExist) {
          var observeValueAttribute = function (attrName) {
            iAttr.$observe(attrName, function (value) {
              var attributeName = angular.lowercase(attrName.substr(14, 1)) + attrName.substr(15);
              scope.interpolateParams[attributeName] = value;
            });
          };
          for (var attr in iAttr) {
            if (Object.prototype.hasOwnProperty.call(iAttr, attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
              observeValueAttribute(attr);
            }
          }
        }

        // Master update function
        var updateTranslations = function () {
          for (var key in translationIds) {
            if (translationIds.hasOwnProperty(key) && translationIds[key]) {
              updateTranslation(key, translationIds[key], scope, scope.interpolateParams);
            }
          }
        };

        // Put translation processing function outside loop
        var updateTranslation = function(translateAttr, translationId, scope, interpolateParams) {
          $translate(translationId, interpolateParams, translateInterpolation)
            .then(function (translation) {
              applyTranslation(translation, scope, true, translateAttr);
            }, function (translationId) {
              applyTranslation(translationId, scope, false, translateAttr);
            });
        };

        var applyTranslation = function (value, scope, successful, translateAttr) {
          if (translateAttr === 'translate') {
            // default translate into innerHTML
            if (!successful && typeof scope.defaultText !== 'undefined') {
              value = scope.defaultText;
            }
            iElement.html(scope.preText + value + scope.postText);
            var globallyEnabled = $translate.isPostCompilingEnabled();
            var locallyDefined = typeof tAttr.translateCompile !== 'undefined';
            var locallyEnabled = locallyDefined && tAttr.translateCompile !== 'false';
            if ((globallyEnabled && !locallyDefined) || locallyEnabled) {
              $compile(iElement.contents())(scope);
            }
          } else {
            // translate attribute
            if (!successful && typeof scope.defaultText !== 'undefined') {
              value = scope.defaultText;
            }
            var attributeName = iAttr.$attr[translateAttr].substr(15);
            iElement.attr(attributeName, value);
          }
        };

        scope.$watch('interpolateParams', updateTranslations, true);

        // Ensures the text will be refreshed after the current language was changed
        // w/ $translate.use(...)
        var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslations);

        // ensure translation will be looked up at least one
        if (iElement.text().length) {
          observeElementTranslation('');
        }
        updateTranslations();
        scope.$on('$destroy', unbind);
      };
    }
  };
}]);

angular.module('pascalprecht.translate')
/**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translateCloak
 * @requires $rootScope
 * @requires $translate
 * @restrict A
 *
 * $description
 * Adds a `translate-cloak` class name to the given element where this directive
 * is applied initially and removes it, once a loader has finished loading.
 *
 * This directive can be used to prevent initial flickering when loading translation
 * data asynchronously.
 *
 * The class name is defined in
 * {@link pascalprecht.translate.$translateProvider#cloakClassName $translate.cloakClassName()}.
 *
 * @param {string=} translate-cloak If a translationId is provided, it will be used for showing
 *                                  or hiding the cloak. Basically it relies on the translation
 *                                  resolve.
 */
.directive('translateCloak', ['$rootScope', '$translate', function ($rootScope, $translate) {

  return {
    compile: function (tElement) {
      var applyCloak = function () {
        tElement.addClass($translate.cloakClassName());
      },
      removeCloak = function () {
        tElement.removeClass($translate.cloakClassName());
      },
      removeListener = $rootScope.$on('$translateChangeEnd', function () {
        removeCloak();
        removeListener();
        removeListener = null;
      });
      applyCloak();

      return function linkFn(scope, iElement, iAttr) {
        // Register a watcher for the defined translation allowing a fine tuned cloak
        if (iAttr.translateCloak && iAttr.translateCloak.length) {
          iAttr.$observe('translateCloak', function (translationId) {
            $translate(translationId).then(removeCloak, applyCloak);
          });
        }
      };
    }
  };
}]);

angular.module('pascalprecht.translate')
/**
 * @ngdoc filter
 * @name pascalprecht.translate.filter:translate
 * @requires $parse
 * @requires pascalprecht.translate.$translate
 * @function
 *
 * @description
 * Uses `$translate` service to translate contents. Accepts interpolate parameters
 * to pass dynamized values though translation.
 *
 * @param {string} translationId A translation id to be translated.
 * @param {*=} interpolateParams Optional object literal (as hash or string) to pass values into translation.
 *
 * @returns {string} Translated text.
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div ng-controller="TranslateCtrl">

        <pre>{{ 'TRANSLATION_ID' | translate }}</pre>
        <pre>{{ translationId | translate }}</pre>
        <pre>{{ 'WITH_VALUES' | translate:'{value: 5}' }}</pre>
        <pre>{{ 'WITH_VALUES' | translate:values }}</pre>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en', {
          'TRANSLATION_ID': 'Hello there!',
          'WITH_VALUES': 'The following value is dynamic: {{value}}'
        });
        $translateProvider.preferredLanguage('en');

      });

      angular.module('ngView').controller('TranslateCtrl', function ($scope) {
        $scope.translationId = 'TRANSLATION_ID';

        $scope.values = {
          value: 78
        };
      });
    </file>
   </example>
 */
.filter('translate', ['$parse', '$translate', function ($parse, $translate) {
  var translateFilter = function (translationId, interpolateParams, interpolation) {

    if (!angular.isObject(interpolateParams)) {
      interpolateParams = $parse(interpolateParams)(this);
    }

    return $translate.instant(translationId, interpolateParams, interpolation);
  };

  // Since AngularJS 1.3, filters which are not stateless (depending at the scope)
  // have to explicit define this behavior.
  translateFilter.$stateful = true;

  return translateFilter;
}]);

/*!
 * angular-translate - v2.5.2 - 2014-12-10
 * http://github.com/angular-translate/angular-translate
 * Copyright (c) 2014 ; Licensed MIT
 */
angular.module('pascalprecht.translate')
/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateStaticFilesLoader
 * @requires $q
 * @requires $http
 *
 * @description
 * Creates a loading function for a typical static file url pattern:
 * "lang-en_US.json", "lang-de_DE.json", etc. Using this builder,
 * the response of these urls must be an object of key-value pairs.
 *
 * @param {object} options Options object, which gets prefix, suffix and key.
 */
.factory('$translateStaticFilesLoader', ['$q', '$http', function ($q, $http) {

  return function (options) {

    if (!options || (!angular.isString(options.prefix) || !angular.isString(options.suffix))) {
      throw new Error('Couldn\'t load static files, no prefix or suffix specified!');
    }

    var deferred = $q.defer();

    $http(angular.extend({
      url: [
        options.prefix,
        options.key,
        options.suffix
      ].join(''),
      method: 'GET',
      params: ''
    }, options.$http)).success(function (data) {
      deferred.resolve(data);
    }).error(function (data) {
      deferred.reject(options.key);
    });

    return deferred.promise;
  };
}]);

/*!
 * angular-translate - v2.5.2 - 2014-12-10
 * http://github.com/angular-translate/angular-translate
 * Copyright (c) 2014 ; Licensed MIT
 */
angular.module('pascalprecht.translate')

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateCookieStorage
 * @requires $cookieStore
 *
 * @description
 * Abstraction layer for cookieStore. This service is used when telling angular-translate
 * to use cookieStore as storage.
 *
 */
.factory('$translateCookieStorage', ['$cookieStore', function ($cookieStore) {

  var $translateCookieStorage = {

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateCookieStorage#get
     * @methodOf pascalprecht.translate.$translateCookieStorage
     *
     * @description
     * Returns an item from cookieStorage by given name.
     *
     * @param {string} name Item name
     * @return {string} Value of item name
     */
    get: function (name) {
      return $cookieStore.get(name);
    },

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateCookieStorage#set
     * @methodOf pascalprecht.translate.$translateCookieStorage
     *
     * @description
     * Sets an item in cookieStorage by given name.
     *
     * @deprecated use #put
     *
     * @param {string} name Item name
     * @param {string} value Item value
     */
    set: function (name, value) {
      $cookieStore.put(name, value);
    },

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateCookieStorage#put
     * @methodOf pascalprecht.translate.$translateCookieStorage
     *
     * @description
     * Sets an item in cookieStorage by given name.
     *
     * @param {string} name Item name
     * @param {string} value Item value
     */
    put: function (name, value) {
      $cookieStore.put(name, value);
    }
  };

  return $translateCookieStorage;
}]);

/*!
 * angular-translate - v2.5.2 - 2014-12-10
 * http://github.com/angular-translate/angular-translate
 * Copyright (c) 2014 ; Licensed MIT
 */
angular.module('pascalprecht.translate')

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateLocalStorage
 * @requires $window
 *
 * @description
 * Abstraction layer for localStorage. This service is used when telling angular-translate
 * to use localStorage as storage.
 *
 */
.factory('$translateLocalStorage', ['$window', '$translateCookieStorage', function ($window, $translateCookieStorage) {

  // Setup adapter
  var localStorageAdapter = (function(){
    var langKey;
    return {
      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translateLocalStorage#get
       * @methodOf pascalprecht.translate.$translateLocalStorage
       *
       * @description
       * Returns an item from localStorage by given name.
       *
       * @param {string} name Item name
       * @return {string} Value of item name
       */
      get: function (name) {
        if(!langKey) {
          langKey = $window.localStorage.getItem(name);
        }

        return langKey;
      },
      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translateLocalStorage#set
       * @methodOf pascalprecht.translate.$translateLocalStorage
       *
       * @description
       * Sets an item in localStorage by given name.
       *
       * @deprecated use #put
       *
       * @param {string} name Item name
       * @param {string} value Item value
       */
      set: function (name, value) {
        langKey=value;
        $window.localStorage.setItem(name, value);
      },
      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translateLocalStorage#put
       * @methodOf pascalprecht.translate.$translateLocalStorage
       *
       * @description
       * Sets an item in localStorage by given name.
       *
       * @param {string} name Item name
       * @param {string} value Item value
       */
      put: function (name, value) {
        langKey=value;
        $window.localStorage.setItem(name, value);
      }
    };
  }());

  var hasLocalStorageSupport = 'localStorage' in $window;
  if (hasLocalStorageSupport) {
    var testKey = 'pascalprecht.translate.storageTest';
    try {
      // this check have to be wrapped within a try/catch because on
      // a SecurityError: Dom Exception 18 on iOS
      if ($window.localStorage !== null) {
        $window.localStorage.setItem(testKey, 'foo');
        $window.localStorage.removeItem(testKey);
        hasLocalStorageSupport = true;
      } else {
        hasLocalStorageSupport = false;
      }
    } catch (e){
      hasLocalStorageSupport = false;
    }
  }
  var $translateLocalStorage = hasLocalStorageSupport ? localStorageAdapter : $translateCookieStorage;
  return $translateLocalStorage;
}]);

/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.10.1
 */
(function( window, angular, undefined ){
"use strict";

(function(){
"use strict";

angular.module('ngMaterial', ["ng","ngAnimate","ngAria","material.core","material.core.gestures","material.core.theming.palette","material.core.theming","material.components.autocomplete","material.components.bottomSheet","material.components.backdrop","material.components.card","material.components.checkbox","material.components.content","material.components.button","material.components.divider","material.components.chips","material.components.dialog","material.components.fabSpeedDial","material.components.fabActions","material.components.fabToolbar","material.components.fabTrigger","material.components.gridList","material.components.icon","material.components.input","material.components.list","material.components.menu","material.components.progressCircular","material.components.progressLinear","material.components.radioButton","material.components.select","material.components.sidenav","material.components.slider","material.components.sticky","material.components.subheader","material.components.swipe","material.components.switch","material.components.tabs","material.components.toast","material.components.toolbar","material.components.tooltip","material.components.virtualRepeat","material.components.whiteframe"]);
})();
(function(){
"use strict";


/**
 * Initialization function that validates environment
 * requirements.
 */
angular
  .module('material.core', [ 'material.core.gestures', 'material.core.theming' ])
  .config( MdCoreConfigure );


function MdCoreConfigure($provide, $mdThemingProvider) {

  $provide.decorator('$$rAF', ["$delegate", rAFDecorator]);

  $mdThemingProvider.theme('default')
    .primaryPalette('indigo')
    .accentPalette('pink')
    .warnPalette('red')
    .backgroundPalette('grey');
}
MdCoreConfigure.$inject = ["$provide", "$mdThemingProvider"];

function rAFDecorator( $delegate ) {
  /**
   * Use this to throttle events that come in often.
   * The throttled function will always use the *last* invocation before the
   * coming frame.
   *
   * For example, window resize events that fire many times a second:
   * If we set to use an raf-throttled callback on window resize, then
   * our callback will only be fired once per frame, with the last resize
   * event that happened before that frame.
   *
   * @param {function} callback function to debounce
   */
  $delegate.throttle = function(cb) {
    var queuedArgs, alreadyQueued, queueCb, context;
    return function debounced() {
      queuedArgs = arguments;
      context = this;
      queueCb = cb;
      if (!alreadyQueued) {
        alreadyQueued = true;
        $delegate(function() {
          queueCb.apply(context, Array.prototype.slice.call(queuedArgs));
          alreadyQueued = false;
        });
      }
    };
  };
  return $delegate;
}

})();
(function(){
"use strict";

angular
  .module('material.core')
  .factory('$$mdAnimate', ["$$rAF", "$q", "$timeout", "$mdConstant", function($$rAF, $q, $timeout, $mdConstant){

     // Since $$mdAnimate is injected into $mdUtil... use a wrapper function
     // to subsequently inject $mdUtil as an argument to the AnimateDomUtils

     return function($mdUtil) {
       return AnimateDomUtils( $mdUtil, $$rAF, $q, $timeout, $mdConstant);
     };
   }]);

/**
 * Factory function that requires special injections
 */
function AnimateDomUtils($mdUtil, $$rAF, $q, $timeout, $mdConstant) {
  var self;
  return self = {
    /**
     *
     */
    translate3d : function( target, from, to, options ) {
      // Set translate3d style to start at the `from` origin
      target.css(from);

      // Wait while CSS takes affect
      // Set the `to` styles and run the transition-in styles
      $$rAF(function () {
        target.css(to).addClass(options.transitionInClass);
      });

      return self
        .waitTransitionEnd(target)
        .then(function(){
            // Resolve with reverser function...
            return reverseTranslate;
        });

      /**
       * Specific reversal of the request translate animation above...
       */
      function reverseTranslate (newFrom) {
        target.removeClass(options.transitionInClass)
              .addClass(options.transitionOutClass)
              .css( newFrom || from );
        return self.waitTransitionEnd(target);
      }
  },

    /**
     * Listen for transitionEnd event (with optional timeout)
     * Announce completion or failure via promise handlers
     */
    waitTransitionEnd: function (element, opts) {
        var TIMEOUT = 3000; // fallback is 3 secs

        return $q(function(resolve, reject){
          opts = opts || { };

          var timer = $timeout(finished, opts.timeout || TIMEOUT);
          element.on($mdConstant.CSS.TRANSITIONEND, finished);

          /**
           * Upon timeout or transitionEnd, reject or resolve (respectively) this promise.
           * NOTE: Make sure this transitionEnd didn't bubble up from a child
           */
          function finished(ev) {
            if ( ev && ev.target !== element[0]) return;

            if ( ev  ) $timeout.cancel(timer);
            element.off($mdConstant.CSS.TRANSITIONEND, finished);

            // Never reject since ngAnimate may cause timeouts due missed transitionEnd events
            resolve();

          }

        });
      },

    /**
     * Calculate the zoom transform from dialog to origin.
     *
     * We use this to set the dialog position immediately;
     * then the md-transition-in actually translates back to
     * `translate3d(0,0,0) scale(1.0)`...
     *
     * NOTE: all values are rounded to the nearest integer
     */
    calculateZoomToOrigin: function (element, originator) {
      var origin = originator.element;
      var zoomTemplate = "translate3d( {centerX}px, {centerY}px, 0 ) scale( {scaleX}, {scaleY} )";
      var buildZoom = angular.bind(null, $mdUtil.supplant, zoomTemplate);
      var zoomStyle = buildZoom({centerX: 0, centerY: 0, scaleX: 0.5, scaleY: 0.5});

      if (origin) {
        var originBnds = self.clientRect(origin) || self.copyRect(originator.bounds);
        var dialogRect = self.copyRect(element[0].getBoundingClientRect());
        var dialogCenterPt = self.centerPointFor(dialogRect);
        var originCenterPt = self.centerPointFor(originBnds);

        // Build the transform to zoom from the dialog center to the origin center

        zoomStyle = buildZoom({
          centerX: originCenterPt.x - dialogCenterPt.x,
          centerY: originCenterPt.y - dialogCenterPt.y,
          scaleX: Math.min(0.5, originBnds.width / dialogRect.width),
          scaleY: Math.min(0.5, originBnds.height / dialogRect.height)
        });
      }

      return zoomStyle;
    },

    /**
     * Convert the translate CSS value to key/value pair(s).
     */
    toTransformCss: function (transform, addTransition) {
      var css = {};
      angular.forEach($mdConstant.CSS.TRANSFORM.split(' '), function (key) {
        css[key] = transform;
      });

      if (addTransition) css['transition'] = "all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important";

      return css;
    },

    /**
     *  Clone the Rect and calculate the height/width if needed
     */
    copyRect: function (source, destination) {
      if (!source) return null;

      destination = destination || {};

      angular.forEach('left top right bottom width height'.split(' '), function (key) {
        destination[key] = Math.round(source[key])
      });

      destination.width = destination.width || (destination.right - destination.left);
      destination.height = destination.height || (destination.bottom - destination.top);

      return destination;
    },

    /**
     * Calculate ClientRect of element; return null if hidden or zero size
     */
    clientRect: function (element) {
      var bounds = angular.element(element)[0].getBoundingClientRect();
      var isPositiveSizeClientRect = function (rect) {
        return rect && (rect.width > 0) && (rect.height > 0);
      };

      // If the event origin element has zero size, it has probably been hidden.
      return isPositiveSizeClientRect(bounds) ? self.copyRect(bounds) : null;
    },

    /**
     *  Calculate 'rounded' center point of Rect
     */
    centerPointFor: function (targetRect) {
      return {
        x: Math.round(targetRect.left + (targetRect.width / 2)),
        y: Math.round(targetRect.top + (targetRect.height / 2))
      }
    }

  };
};


})();
(function(){
"use strict";

angular.module('material.core')
.factory('$mdConstant', MdConstantFactory);

function MdConstantFactory($sniffer) {

  var webkit = /webkit/i.test($sniffer.vendorPrefix);
  function vendorProperty(name) {
    return webkit ?  ('webkit' + name.charAt(0).toUpperCase() + name.substring(1)) : name;
  }

  return {
    KEY_CODE: {
      ENTER: 13,
      ESCAPE: 27,
      SPACE: 32,
      LEFT_ARROW : 37,
      UP_ARROW : 38,
      RIGHT_ARROW : 39,
      DOWN_ARROW : 40,
      TAB : 9,
      BACKSPACE: 8,
      DELETE: 46
    },
    CSS: {
      /* Constants */
      TRANSITIONEND: 'transitionend' + (webkit ? ' webkitTransitionEnd' : ''),
      ANIMATIONEND: 'animationend' + (webkit ? ' webkitAnimationEnd' : ''),

      TRANSFORM: vendorProperty('transform'),
      TRANSFORM_ORIGIN: vendorProperty('transformOrigin'),
      TRANSITION: vendorProperty('transition'),
      TRANSITION_DURATION: vendorProperty('transitionDuration'),
      ANIMATION_PLAY_STATE: vendorProperty('animationPlayState'),
      ANIMATION_DURATION: vendorProperty('animationDuration'),
      ANIMATION_NAME: vendorProperty('animationName'),
      ANIMATION_TIMING: vendorProperty('animationTimingFunction'),
      ANIMATION_DIRECTION: vendorProperty('animationDirection')
    },
    MEDIA: {
      'sm': '(max-width: 599px)',
      'gt-sm': '(min-width: 600px)',
      'md': '(min-width: 600px) and (max-width: 959px)',
      'gt-md': '(min-width: 960px)',
      'lg': '(min-width: 960px) and (max-width: 1199px)',
      'gt-lg': '(min-width: 1200px)'
    },
    MEDIA_PRIORITY: [
      'gt-lg',
      'lg',
      'gt-md',
      'md',
      'gt-sm',
      'sm'
    ]
  };
}
MdConstantFactory.$inject = ["$sniffer"];

})();
(function(){
"use strict";

  angular
    .module('material.core')
    .config( ["$provide", function($provide){
       $provide.decorator('$mdUtil', ['$delegate', function ($delegate){
           /**
            * Inject the iterator facade to easily support iteration and accessors
            * @see iterator below
            */
           $delegate.iterator = MdIterator;

           return $delegate;
         }
       ]);
     }]);

  /**
   * iterator is a list facade to easily support iteration and accessors
   *
   * @param items Array list which this iterator will enumerate
   * @param reloop Boolean enables iterator to consider the list as an endless reloop
   */
  function MdIterator(items, reloop) {
    var trueFn = function() { return true; };

    if (items && !angular.isArray(items)) {
      items = Array.prototype.slice.call(items);
    }

    reloop = !!reloop;
    var _items = items || [ ];

    // Published API
    return {
      items: getItems,
      count: count,

      inRange: inRange,
      contains: contains,
      indexOf: indexOf,
      itemAt: itemAt,

      findBy: findBy,

      add: add,
      remove: remove,

      first: first,
      last: last,
      next: angular.bind(null, findSubsequentItem, false),
      previous: angular.bind(null, findSubsequentItem, true),

      hasPrevious: hasPrevious,
      hasNext: hasNext

    };

    /**
     * Publish copy of the enumerable set
     * @returns {Array|*}
     */
    function getItems() {
      return [].concat(_items);
    }

    /**
     * Determine length of the list
     * @returns {Array.length|*|number}
     */
    function count() {
      return _items.length;
    }

    /**
     * Is the index specified valid
     * @param index
     * @returns {Array.length|*|number|boolean}
     */
    function inRange(index) {
      return _items.length && ( index > -1 ) && (index < _items.length );
    }

    /**
     * Can the iterator proceed to the next item in the list; relative to
     * the specified item.
     *
     * @param item
     * @returns {Array.length|*|number|boolean}
     */
    function hasNext(item) {
      return item ? inRange(indexOf(item) + 1) : false;
    }

    /**
     * Can the iterator proceed to the previous item in the list; relative to
     * the specified item.
     *
     * @param item
     * @returns {Array.length|*|number|boolean}
     */
    function hasPrevious(item) {
      return item ? inRange(indexOf(item) - 1) : false;
    }

    /**
     * Get item at specified index/position
     * @param index
     * @returns {*}
     */
    function itemAt(index) {
      return inRange(index) ? _items[index] : null;
    }

    /**
     * Find all elements matching the key/value pair
     * otherwise return null
     *
     * @param val
     * @param key
     *
     * @return array
     */
    function findBy(key, val) {
      return _items.filter(function(item) {
        return item[key] === val;
      });
    }

    /**
     * Add item to list
     * @param item
     * @param index
     * @returns {*}
     */
    function add(item, index) {
      if ( !item ) return -1;

      if (!angular.isNumber(index)) {
        index = _items.length;
      }

      _items.splice(index, 0, item);

      return indexOf(item);
    }

    /**
     * Remove item from list...
     * @param item
     */
    function remove(item) {
      if ( contains(item) ){
        _items.splice(indexOf(item), 1);
      }
    }

    /**
     * Get the zero-based index of the target item
     * @param item
     * @returns {*}
     */
    function indexOf(item) {
      return _items.indexOf(item);
    }

    /**
     * Boolean existence check
     * @param item
     * @returns {boolean}
     */
    function contains(item) {
      return item && (indexOf(item) > -1);
    }

    /**
     * Return first item in the list
     * @returns {*}
     */
    function first() {
      return _items.length ? _items[0] : null;
    }

    /**
     * Return last item in the list...
     * @returns {*}
     */
    function last() {
      return _items.length ? _items[_items.length - 1] : null;
    }

    /**
     * Find the next item. If reloop is true and at the end of the list, it will go back to the
     * first item. If given, the `validate` callback will be used to determine whether the next item
     * is valid. If not valid, it will try to find the next item again.
     *
     * @param {boolean} backwards Specifies the direction of searching (forwards/backwards)
     * @param {*} item The item whose subsequent item we are looking for
     * @param {Function=} validate The `validate` function
     * @param {integer=} limit The recursion limit
     *
     * @returns {*} The subsequent item or null
     */
    function findSubsequentItem(backwards, item, validate, limit) {
      validate = validate || trueFn;

      var curIndex = indexOf(item);
      while (true) {
        if (!inRange(curIndex)) return null;

        var nextIndex = curIndex + (backwards ? -1 : 1);
        var foundItem = null;
        if (inRange(nextIndex)) {
          foundItem = _items[nextIndex];
        } else if (reloop) {
          foundItem = backwards ? last() : first();
          nextIndex = indexOf(foundItem);
        }

        if ((foundItem === null) || (nextIndex === limit)) return null;
        if (validate(foundItem)) return foundItem;

        if (angular.isUndefined(limit)) limit = nextIndex;

        curIndex = nextIndex;
      }
    }
  }


})();
(function(){
"use strict";

angular.module('material.core')
.factory('$mdMedia', mdMediaFactory);

/**
 * @ngdoc service
 * @name $mdMedia
 * @module material.core
 *
 * @description
 * `$mdMedia` is used to evaluate whether a given media query is true or false given the
 * current device's screen / window size. The media query will be re-evaluated on resize, allowing
 * you to register a watch.
 *
 * `$mdMedia` also has pre-programmed support for media queries that match the layout breakpoints.
 *  (`sm`, `gt-sm`, `md`, `gt-md`, `lg`, `gt-lg`).
 *
 * @returns {boolean} a boolean representing whether or not the given media query is true or false.
 *
 * @usage
 * <hljs lang="js">
 * app.controller('MyController', function($mdMedia, $scope) {
 *   $scope.$watch(function() { return $mdMedia('lg'); }, function(big) {
 *     $scope.bigScreen = big;
 *   });
 *
 *   $scope.screenIsSmall = $mdMedia('sm');
 *   $scope.customQuery = $mdMedia('(min-width: 1234px)');
 *   $scope.anotherCustom = $mdMedia('max-width: 300px');
 * });
 * </hljs>
 */

function mdMediaFactory($mdConstant, $rootScope, $window) {
  var queries = {};
  var mqls = {};
  var results = {};
  var normalizeCache = {};

  $mdMedia.getResponsiveAttribute = getResponsiveAttribute;
  $mdMedia.getQuery = getQuery;
  $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;

  return $mdMedia;

  function $mdMedia(query) {
    var validated = queries[query];
    if (angular.isUndefined(validated)) {
      validated = queries[query] = validate(query);
    }

    var result = results[validated];
    if (angular.isUndefined(result)) {
      result = add(validated);
    }

    return result;
  }

  function validate(query) {
    return $mdConstant.MEDIA[query] ||
           ((query.charAt(0) !== '(') ? ('(' + query + ')') : query);
  }

  function add(query) {
    var result = mqls[query] = $window.matchMedia(query);
    result.addListener(onQueryChange);
    return (results[result.media] = !!result.matches);
  }

  function onQueryChange(query) {
    $rootScope.$evalAsync(function() {
      results[query.media] = !!query.matches;
    });
  }

  function getQuery(name) {
    return mqls[name];
  }

  function getResponsiveAttribute(attrs, attrName) {
    for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {
      var mediaName = $mdConstant.MEDIA_PRIORITY[i];
      if (!mqls[queries[mediaName]].matches) {
        continue;
      }

      var normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);
      if (attrs[normalizedName]) {
        return attrs[normalizedName];
      }
    }

    // fallback on unprefixed
    return attrs[getNormalizedName(attrs, attrName)];
  }

  function watchResponsiveAttributes(attrNames, attrs, watchFn) {
    var unwatchFns = [];
    attrNames.forEach(function(attrName) {
      var normalizedName = getNormalizedName(attrs, attrName);
      if (attrs[normalizedName]) {
        unwatchFns.push(
            attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));
      }

      for (var mediaName in $mdConstant.MEDIA) {
        normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);
        if (!attrs[normalizedName]) {
          return;
        }

        unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));
      }
    });

    return function unwatch() {
      unwatchFns.forEach(function(fn) { fn(); })
    };
  }

  // Improves performance dramatically
  function getNormalizedName(attrs, attrName) {
    return normalizeCache[attrName] ||
        (normalizeCache[attrName] = attrs.$normalize(attrName));
  }
}
mdMediaFactory.$inject = ["$mdConstant", "$rootScope", "$window"];

})();
(function(){
"use strict";

/*
 * This var has to be outside the angular factory, otherwise when
 * there are multiple material apps on the same page, each app
 * will create its own instance of this array and the app's IDs
 * will not be unique.
 */
var nextUniqueId = 0;

angular.module('material.core')
  .factory('$mdUtil', ["$cacheFactory", "$document", "$timeout", "$q", "$compile", "$window", "$mdConstant", "$$rAF", "$rootScope", "$$mdAnimate", function ($cacheFactory, $document, $timeout, $q, $compile, $window, $mdConstant, $$rAF, $rootScope, $$mdAnimate) {
    var $mdUtil = {
          dom : { },
          now: window.performance ?
            angular.bind(window.performance, window.performance.now) :
            Date.now,

          clientRect: function (element, offsetParent, isOffsetRect) {
            var node = getNode(element);
            offsetParent = getNode(offsetParent || node.offsetParent || document.body);
            var nodeRect = node.getBoundingClientRect();

            // The user can ask for an offsetRect: a rect relative to the offsetParent,
            // or a clientRect: a rect relative to the page
            var offsetRect = isOffsetRect ?
              offsetParent.getBoundingClientRect() :
            {left: 0, top: 0, width: 0, height: 0};
            return {
              left: nodeRect.left - offsetRect.left,
              top: nodeRect.top - offsetRect.top,
              width: nodeRect.width,
              height: nodeRect.height
            };
          },
          offsetRect: function (element, offsetParent) {
            return $mdUtil.clientRect(element, offsetParent, true);
          },

          // Annoying method to copy nodes to an array, thanks to IE
          nodesToArray: function (nodes) {
            nodes = nodes || [ ];

            var results = [];
            for (var i = 0; i < nodes.length; ++i) {
              results.push(nodes.item(i));
            }
            return results;
          },

          /**
           * Calculate the positive scroll offset
           * TODO: Check with pinch-zoom in IE/Chrome;
           *       https://code.google.com/p/chromium/issues/detail?id=496285
           */
          scrollTop : function(element) {
            element = angular.element(element || $document[0].body);

            var body = (element[0] == $document[0].body) ? $document[0].body : undefined;
            var scrollTop = body ? body.scrollTop + body.parentElement.scrollTop : 0;

             // Calculate the positive scroll offset
            return scrollTop || Math.abs(element[0].getBoundingClientRect().top);
          },

          // Disables scroll around the passed element.
          disableScrollAround: function (element, parent) {
            $mdUtil.disableScrollAround._count = $mdUtil.disableScrollAround._count || 0;
            ++$mdUtil.disableScrollAround._count;
            if ($mdUtil.disableScrollAround._enableScrolling) return $mdUtil.disableScrollAround._enableScrolling;
            element = angular.element(element);
            var body = $document[0].body,
              restoreBody = disableBodyScroll(),
              restoreElement = disableElementScroll(parent);

            return $mdUtil.disableScrollAround._enableScrolling = function () {
              if (!--$mdUtil.disableScrollAround._count) {
                restoreBody();
                restoreElement();
                delete $mdUtil.disableScrollAround._enableScrolling;
              }
            };

            // Creates a virtual scrolling mask to absorb touchmove, keyboard, scrollbar clicking, and wheel events
            function disableElementScroll(element) {
              element = angular.element(element || body)[0];
              var zIndex = 50;
              var scrollMask = angular.element(
                '<div class="md-scroll-mask" style="z-index: ' + zIndex + '">' +
                '  <div class="md-scroll-mask-bar"></div>' +
                '</div>');
              element.appendChild(scrollMask[0]);

              scrollMask.on('wheel', preventDefault);
              scrollMask.on('touchmove', preventDefault);
              $document.on('keydown', disableKeyNav);

              return function restoreScroll() {
                scrollMask.off('wheel');
                scrollMask.off('touchmove');
                scrollMask[0].parentNode.removeChild(scrollMask[0]);
                $document.off('keydown', disableKeyNav);
                delete $mdUtil.disableScrollAround._enableScrolling;
              };

              // Prevent keypresses from elements inside the body
              // used to stop the keypresses that could cause the page to scroll
              // (arrow keys, spacebar, tab, etc).
              function disableKeyNav(e) {
                //-- temporarily removed this logic, will possibly re-add at a later date
                return;
                if (!element[0].contains(e.target)) {
                  e.preventDefault();
                  e.stopImmediatePropagation();
                }
              }

              function preventDefault(e) {
                e.preventDefault();
              }
            }

            // Converts the body to a position fixed block and translate it to the proper scroll
            // position
            function disableBodyScroll() {
              var htmlNode = body.parentNode;
              var restoreHtmlStyle = htmlNode.getAttribute('style') || '';
              var restoreBodyStyle = body.getAttribute('style') || '';
              var scrollOffset = $mdUtil.scrollTop(body);
              var clientWidth = body.clientWidth;

              if (body.scrollHeight > body.clientHeight) {
                applyStyles(body, {
                  position: 'fixed',
                  width: '100%',
                  top: -scrollOffset + 'px'
                });

                applyStyles(htmlNode, {
                  overflowY: 'scroll'
                });
              }


              if (body.clientWidth < clientWidth) applyStyles(body, {overflow: 'hidden'});

              return function restoreScroll() {
                body.setAttribute('style', restoreBodyStyle);
                htmlNode.setAttribute('style', restoreHtmlStyle);
                body.scrollTop = scrollOffset;
              };
            }

            function applyStyles(el, styles) {
              for (var key in styles) {
                el.style[key] = styles[key];
              }
            }
          },
          enableScrolling: function () {
            var method = this.disableScrollAround._enableScrolling;
            method && method();
          },
          floatingScrollbars: function () {
            if (this.floatingScrollbars.cached === undefined) {
              var tempNode = angular.element('<div style="width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll"><div style="height: 60;"></div></div>');
              $document[0].body.appendChild(tempNode[0]);
              this.floatingScrollbars.cached = (tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth);
              tempNode.remove();
            }
            return this.floatingScrollbars.cached;
          },

          // Mobile safari only allows you to set focus in click event listeners...
          forceFocus: function (element) {
            var node = element[0] || element;

            document.addEventListener('click', function focusOnClick(ev) {
              if (ev.target === node && ev.$focus) {
                node.focus();
                ev.stopImmediatePropagation();
                ev.preventDefault();
                node.removeEventListener('click', focusOnClick);
              }
            }, true);

            var newEvent = document.createEvent('MouseEvents');
            newEvent.initMouseEvent('click', false, true, window, {}, 0, 0, 0, 0,
              false, false, false, false, 0, null);
            newEvent.$material = true;
            newEvent.$focus = true;
            node.dispatchEvent(newEvent);
          },

          /**
           * facade to build md-backdrop element with desired styles
           * NOTE: Use $compile to trigger backdrop postLink function
           */
          createBackdrop : function(scope, addClass){
            return $compile( $mdUtil.supplant('<md-backdrop class="{0}">',[addClass]) )(scope);
          },

          /**
           * supplant() method from Crockford's `Remedial Javascript`
           * Equivalent to use of $interpolate; without dependency on
           * interpolation symbols and scope. Note: the '{<token>}' can
           * be property names, property chains, or array indices.
           */
          supplant : function( template, values, pattern ) {
              pattern = pattern || /\{([^\{\}]*)\}/g;
              return template.replace(pattern, function(a, b) {
                  var p = b.split('.'),
                      r = values;
                  try {
                      for (var s in p) { r = r[p[s]];  }
                  } catch(e){
                      r = a;
                  }
                  return (typeof r === 'string' || typeof r === 'number') ? r : a;
              });
          },

          fakeNgModel: function () {
            return {
              $fake: true,
              $setTouched: angular.noop,
              $setViewValue: function (value) {
                this.$viewValue = value;
                this.$render(value);
                this.$viewChangeListeners.forEach(function (cb) {
                  cb();
                });
              },
              $isEmpty: function (value) {
                return ('' + value).length === 0;
              },
              $parsers: [],
              $formatters: [],
              $viewChangeListeners: [],
              $render: angular.noop
            };
          },

          // Returns a function, that, as long as it continues to be invoked, will not
          // be triggered. The function will be called after it stops being called for
          // N milliseconds.
          // @param wait Integer value of msecs to delay (since last debounce reset); default value 10 msecs
          // @param invokeApply should the $timeout trigger $digest() dirty checking
          debounce: function (func, wait, scope, invokeApply) {
            var timer;

            return function debounced() {
              var context = scope,
                args = Array.prototype.slice.call(arguments);

              $timeout.cancel(timer);
              timer = $timeout(function () {

                timer = undefined;
                func.apply(context, args);

              }, wait || 10, invokeApply);
            };
          },

          // Returns a function that can only be triggered every `delay` milliseconds.
          // In other words, the function will not be called unless it has been more
          // than `delay` milliseconds since the last call.
          throttle: function throttle(func, delay) {
            var recent;
            return function throttled() {
              var context = this;
              var args = arguments;
              var now = $mdUtil.now();

              if (!recent || (now - recent > delay)) {
                func.apply(context, args);
                recent = now;
              }
            };
          },

          /**
           * Measures the number of milliseconds taken to run the provided callback
           * function. Uses a high-precision timer if available.
           */
          time: function time(cb) {
            var start = $mdUtil.now();
            cb();
            return $mdUtil.now() - start;
          },

          /**
           * Get a unique ID.
           *
           * @returns {string} an unique numeric string
           */
          nextUid: function () {
            return '' + nextUniqueId++;
          },

          // Stop watchers and events from firing on a scope without destroying it,
          // by disconnecting it from its parent and its siblings' linked lists.
          disconnectScope: function disconnectScope(scope) {
            if (!scope) return;

            // we can't destroy the root scope or a scope that has been already destroyed
            if (scope.$root === scope) return;
            if (scope.$$destroyed) return;

            var parent = scope.$parent;
            scope.$$disconnected = true;

            // See Scope.$destroy
            if (parent.$$childHead === scope) parent.$$childHead = scope.$$nextSibling;
            if (parent.$$childTail === scope) parent.$$childTail = scope.$$prevSibling;
            if (scope.$$prevSibling) scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;
            if (scope.$$nextSibling) scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;

            scope.$$nextSibling = scope.$$prevSibling = null;

          },

          // Undo the effects of disconnectScope above.
          reconnectScope: function reconnectScope(scope) {
            if (!scope) return;

            // we can't disconnect the root node or scope already disconnected
            if (scope.$root === scope) return;
            if (!scope.$$disconnected) return;

            var child = scope;

            var parent = child.$parent;
            child.$$disconnected = false;
            // See Scope.$new for this logic...
            child.$$prevSibling = parent.$$childTail;
            if (parent.$$childHead) {
              parent.$$childTail.$$nextSibling = child;
              parent.$$childTail = child;
            } else {
              parent.$$childHead = parent.$$childTail = child;
            }
          },

          /*
           * getClosest replicates jQuery.closest() to walk up the DOM tree until it finds a matching nodeName
           *
           * @param el Element to start walking the DOM from
           * @param tagName Tag name to find closest to el, such as 'form'
           */
          getClosest: function getClosest(el, tagName, onlyParent) {
            if (el instanceof angular.element) el = el[0];
            tagName = tagName.toUpperCase();
            if (onlyParent) el = el.parentNode;
            if (!el) return null;
            do {
              if (el.nodeName === tagName) {
                return el;
              }
            } while (el = el.parentNode);
            return null;
          },

          /**
           * Functional equivalent for $element.filter(‘md-bottom-sheet’)
           * useful with interimElements where the element and its container are important...
           */
          extractElementByName: function (element, nodeName) {
            for (var i = 0, len = element.length; i < len; i++) {
              if (element[i].nodeName.toLowerCase() === nodeName) {
                return angular.element(element[i]);
              }
            }
            return element;
          },

          /**
           * Give optional properties with no value a boolean true if attr provided or false otherwise
           */
          initOptionalProperties: function (scope, attr, defaults) {
            defaults = defaults || {};
            angular.forEach(scope.$$isolateBindings, function (binding, key) {
              if (binding.optional && angular.isUndefined(scope[key])) {
                var attrIsDefined = angular.isDefined(attr[binding.attrName]);
                scope[key] = angular.isDefined(defaults[key]) ? defaults[key] : attrIsDefined;
              }
            });
          },

          /**
           * Alternative to $timeout calls with 0 delay.
           * nextTick() coalesces all calls within a single frame
           * to minimize $digest thrashing
           *
           * @param callback
           * @param digest
           * @returns {*}
           */
          nextTick: function (callback, digest) {
            //-- grab function reference for storing state details
            var nextTick = $mdUtil.nextTick;
            var timeout = nextTick.timeout;
            var queue = nextTick.queue || [];

            //-- add callback to the queue
            queue.push(callback);

            //-- set default value for digest
            if (digest == null) digest = true;

            //-- store updated digest/queue values
            nextTick.digest = nextTick.digest || digest;
            nextTick.queue = queue;

            //-- either return existing timeout or create a new one
            return timeout || (nextTick.timeout = $timeout(processQueue, 0, false));

            /**
             * Grab a copy of the current queue
             * Clear the queue for future use
             * Process the existing queue
             * Trigger digest if necessary
             */
            function processQueue () {
              var queue = nextTick.queue;
              var digest = nextTick.digest;

              nextTick.queue = [];
              nextTick.timeout = null;
              nextTick.digest = false;

              queue.forEach(function (callback) { callback(); });

              if (digest) $rootScope.$digest();
            }
          }

        };

    // Instantiate other namespace utility methods

    $mdUtil.dom.animator = $$mdAnimate($mdUtil);

    return $mdUtil;

    function getNode(el) {
      return el[0] || el;
    }

  }]);

/*
 * Since removing jQuery from the demos, some code that uses `element.focus()` is broken.
 *
 * We need to add `element.focus()`, because it's testable unlike `element[0].focus`.
 *
 * TODO(ajoslin): This should be added in a better place later.
 */

angular.element.prototype.focus = angular.element.prototype.focus || function () {
    if (this.length) {
      this[0].focus();
    }
    return this;
  };
angular.element.prototype.blur = angular.element.prototype.blur || function () {
    if (this.length) {
      this[0].blur();
    }
    return this;
  };

})();
(function(){
"use strict";


angular.module('material.core')
  .service('$mdAria', AriaService);

/*
 * @ngInject
 */
function AriaService($$rAF, $log, $window) {

  return {
    expect: expect,
    expectAsync: expectAsync,
    expectWithText: expectWithText
  };

  /**
   * Check if expected attribute has been specified on the target element or child
   * @param element
   * @param attrName
   * @param {optional} defaultValue What to set the attr to if no value is found
   */
  function expect(element, attrName, defaultValue) {
    var node = element[0] || element;

    // if node exists and neither it nor its children have the attribute
    if (node &&
       ((!node.hasAttribute(attrName) ||
        node.getAttribute(attrName).length === 0) &&
        !childHasAttribute(node, attrName))) {

      defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : '';
      if (defaultValue.length) {
        element.attr(attrName, defaultValue);
      } else {
        $log.warn('ARIA: Attribute "', attrName, '", required for accessibility, is missing on node:', node);
      }

    }
  }

  function expectAsync(element, attrName, defaultValueGetter) {
    // Problem: when retrieving the element's contents synchronously to find the label,
    // the text may not be defined yet in the case of a binding.
    // There is a higher chance that a binding will be defined if we wait one frame.
    $$rAF(function() {
      expect(element, attrName, defaultValueGetter());
    });
  }

  function expectWithText(element, attrName) {
    expectAsync(element, attrName, function() {
      return getText(element);
    });
  }

  function getText(element) {
    return element.text().trim();
  }

  function childHasAttribute(node, attrName) {
    var hasChildren = node.hasChildNodes(),
        hasAttr = false;

    function isHidden(el) {
      var style = el.currentStyle ? el.currentStyle : $window.getComputedStyle(el);
      return (style.display === 'none');
    }

    if(hasChildren) {
      var children = node.childNodes;
      for(var i=0; i<children.length; i++){
        var child = children[i];
        if(child.nodeType === 1 && child.hasAttribute(attrName)) {
          if(!isHidden(child)){
            hasAttr = true;
          }
        }
      }
    }
    return hasAttr;
  }
}
AriaService.$inject = ["$$rAF", "$log", "$window"];

})();
(function(){
"use strict";

angular
  .module('material.core')
  .service('$mdCompiler', mdCompilerService);

function mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {
  /* jshint validthis: true */

  /*
   * @ngdoc service
   * @name $mdCompiler
   * @module material.core
   * @description
   * The $mdCompiler service is an abstraction of angular's compiler, that allows the developer
   * to easily compile an element with a templateUrl, controller, and locals.
   *
   * @usage
   * <hljs lang="js">
   * $mdCompiler.compile({
   *   templateUrl: 'modal.html',
   *   controller: 'ModalCtrl',
   *   locals: {
   *     modal: myModalInstance;
   *   }
   * }).then(function(compileData) {
   *   compileData.element; // modal.html's template in an element
   *   compileData.link(myScope); //attach controller & scope to element
   * });
   * </hljs>
   */

   /*
    * @ngdoc method
    * @name $mdCompiler#compile
    * @description A helper to compile an HTML template/templateUrl with a given controller,
    * locals, and scope.
    * @param {object} options An options object, with the following properties:
    *
    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with
    *      newly created scope or the name of a registered controller if passed as a string.
    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be
    *      published to scope under the `controllerAs` name.
    *    - `template` - `{string=}` An html template as a string.
    *    - `templateUrl` - `{string=}` A path to an html template.
    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after
    *      it is loaded. It will be given the template string as a parameter, and should
    *      return a a new string representing the transformed template.
    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should
    *      be injected into the controller. If any of these dependencies are promises, the compiler
    *      will wait for them all to be resolved, or if one is rejected before the controller is
    *      instantiated `compile()` will fail..
    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.
    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.
    *        Otherwise if function, then it is injected and the return value is treated as the
    *        dependency. If the result is a promise, it is resolved before its value is 
    *        injected into the controller.
    *
    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.
    * `compileData` has the following properties: 
    *
    *   - `element` - `{element}`: an uncompiled element matching the provided template.
    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile
    *     the element and instantiate the provided controller (if given).
    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is
    *     called. If `bindToController` is true, they will be coppied to the ctrl instead
    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.
    */
  this.compile = function(options) {
    var templateUrl = options.templateUrl;
    var template = options.template || '';
    var controller = options.controller;
    var controllerAs = options.controllerAs;
    var resolve = angular.extend({}, options.resolve || {});
    var locals = angular.extend({}, options.locals || {});
    var transformTemplate = options.transformTemplate || angular.identity;
    var bindToController = options.bindToController;

    // Take resolve values and invoke them.  
    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),
    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})
    angular.forEach(resolve, function(value, key) {
      if (angular.isString(value)) {
        resolve[key] = $injector.get(value);
      } else {
        resolve[key] = $injector.invoke(value);
      }
    });
    //Add the locals, which are just straight values to inject
    //eg locals: { three: 3 }, will inject three into the controller
    angular.extend(resolve, locals);

    if (templateUrl) {
      resolve.$template = $http.get(templateUrl, {cache: $templateCache})
        .then(function(response) {
          return response.data;
        });
    } else {
      resolve.$template = $q.when(template);
    }

    // Wait for all the resolves to finish if they are promises
    return $q.all(resolve).then(function(locals) {

      var template = transformTemplate(locals.$template);
      var element = options.element || angular.element('<div>').html(template.trim()).contents();
      var linkFn = $compile(element);

      //Return a linking function that can be used later when the element is ready
      return {
        locals: locals,
        element: element,
        link: function link(scope) {
          locals.$scope = scope;

          //Instantiate controller if it exists, because we have scope
          if (controller) {
            var invokeCtrl = $controller(controller, locals, true);
            if (bindToController) {
              angular.extend(invokeCtrl.instance, locals);
            }
            var ctrl = invokeCtrl();
            //See angular-route source for this logic
            element.data('$ngControllerController', ctrl);
            element.children().data('$ngControllerController', ctrl);

            if (controllerAs) {
              scope[controllerAs] = ctrl;
            }
          }
          return linkFn(scope);
        }
      };
    });

  };
}
mdCompilerService.$inject = ["$q", "$http", "$injector", "$compile", "$controller", "$templateCache"];

})();
(function(){
"use strict";

  var HANDLERS = {};
  /* The state of the current 'pointer'
   * The pointer represents the state of the current touch.
   * It contains normalized x and y coordinates from DOM events,
   * as well as other information abstracted from the DOM.
   */
  var pointer, lastPointer, forceSkipClickHijack = false;

  // Used to attach event listeners once when multiple ng-apps are running.
  var isInitialized = false;
  
  angular
    .module('material.core.gestures', [ ])
    .provider('$mdGesture', MdGestureProvider)
    .factory('$$MdGestureHandler', MdGestureHandler)
    .run( attachToDocument );

  /**
     * @ngdoc service
     * @name $mdGestureProvider
     * @module material.core.gestures
     *
     * @description
     * In some scenarios on Mobile devices (without jQuery), the click events should NOT be hijacked.
     * `$mdGestureProvider` is used to configure the Gesture module to ignore or skip click hijacking on mobile
     * devices.
     *
     * <hljs lang="js">
     *   app.config(function($mdGestureProvider) {
     *
     *     // For mobile devices without jQuery loaded, do not
     *     // intercept click events during the capture phase.
     *     $mdGestureProvider.skipClickHijack();
     *
     *   });
     * </hljs>
     *
     */
  function MdGestureProvider() { }

  MdGestureProvider.prototype = {

    // Publish access to setter to configure a variable  BEFORE the
    // $mdGesture service is instantiated...
    skipClickHijack: function() {
      return forceSkipClickHijack = true;
    },

    /**
     * $get is used to build an instance of $mdGesture
     * @ngInject
     */
    $get : ["$$MdGestureHandler", "$$rAF", "$timeout", function($$MdGestureHandler, $$rAF, $timeout) {
         return new MdGesture($$MdGestureHandler, $$rAF, $timeout);
    }]
  };



  /**
   * MdGesture factory construction function
   * @ngInject
   */
  function MdGesture($$MdGestureHandler, $$rAF, $timeout) {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;
    var isIos = userAgent.match(/ipad|iphone|ipod/i);
    var isAndroid = userAgent.match(/android/i);
    var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);

    var self = {
      handler: addHandler,
      register: register,
      // On mobile w/out jQuery, we normally intercept clicks. Should we skip that?
      isHijackingClicks: (isIos || isAndroid) && !hasJQuery && !forceSkipClickHijack
    };

    if (self.isHijackingClicks) {
      self.handler('click', {
        options: {
          maxDistance: 6
        },
        onEnd: function (ev, pointer) {
          if (pointer.distance < this.state.options.maxDistance) {
            this.dispatchEvent(ev, 'click');
          }
        }
      });
    }

    /*
     * Register an element to listen for a handler.
     * This allows an element to override the default options for a handler.
     * Additionally, some handlers like drag and hold only dispatch events if
     * the domEvent happens inside an element that's registered to listen for these events.
     *
     * @see GestureHandler for how overriding of default options works.
     * @example $mdGesture.register(myElement, 'drag', { minDistance: 20, horziontal: false })
     */
    function register(element, handlerName, options) {
      var handler = HANDLERS[handlerName.replace(/^\$md./, '')];
      if (!handler) {
        throw new Error('Failed to register element with handler ' + handlerName + '. ' +
        'Available handlers: ' + Object.keys(HANDLERS).join(', '));
      }
      return handler.registerElement(element, options);
    }

    /*
     * add a handler to $mdGesture. see below.
     */
    function addHandler(name, definition) {
      var handler = new $$MdGestureHandler(name);
      angular.extend(handler, definition);
      HANDLERS[name] = handler;

      return self;
    }

    /*
     * Register handlers. These listen to touch/start/move events, interpret them,
     * and dispatch gesture events depending on options & conditions. These are all
     * instances of GestureHandler.
     * @see GestureHandler 
     */
    return self
      /*
       * The press handler dispatches an event on touchdown/touchend.
       * It's a simple abstraction of touch/mouse/pointer start and end.
       */
      .handler('press', {
        onStart: function (ev, pointer) {
          this.dispatchEvent(ev, '$md.pressdown');
        },
        onEnd: function (ev, pointer) {
          this.dispatchEvent(ev, '$md.pressup');
        }
      })

      /*
       * The hold handler dispatches an event if the user keeps their finger within
       * the same <maxDistance> area for <delay> ms.
       * The hold handler will only run if a parent of the touch target is registered
       * to listen for hold events through $mdGesture.register()
       */
      .handler('hold', {
        options: {
          maxDistance: 6,
          delay: 500
        },
        onCancel: function () {
          $timeout.cancel(this.state.timeout);
        },
        onStart: function (ev, pointer) {
          // For hold, require a parent to be registered with $mdGesture.register()
          // Because we prevent scroll events, this is necessary.
          if (!this.state.registeredParent) return this.cancel();

          this.state.pos = {x: pointer.x, y: pointer.y};
          this.state.timeout = $timeout(angular.bind(this, function holdDelayFn() {
            this.dispatchEvent(ev, '$md.hold');
            this.cancel(); //we're done!
          }), this.state.options.delay, false);
        },
        onMove: function (ev, pointer) {
          // Don't scroll while waiting for hold.
          // If we don't preventDefault touchmove events here, Android will assume we don't
          // want to listen to anymore touch events. It will start scrolling and stop sending
          // touchmove events.
          ev.preventDefault();

          // If the user moves greater than <maxDistance> pixels, stop the hold timer
          // set in onStart
          var dx = this.state.pos.x - pointer.x;
          var dy = this.state.pos.y - pointer.y;
          if (Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance) {
            this.cancel();
          }
        },
        onEnd: function () {
          this.onCancel();
        }
      })

      /*
       * The drag handler dispatches a drag event if the user holds and moves his finger greater than
       * <minDistance> px in the x or y direction, depending on options.horizontal.
       * The drag will be cancelled if the user moves his finger greater than <minDistance>*<cancelMultiplier> in
       * the perpindicular direction. Eg if the drag is horizontal and the user moves his finger <minDistance>*<cancelMultiplier>
       * pixels vertically, this handler won't consider the move part of a drag.
       */
      .handler('drag', {
        options: {
          minDistance: 6,
          horizontal: true,
          cancelMultiplier: 1.5
        },
        onStart: function (ev) {
          // For drag, require a parent to be registered with $mdGesture.register()
          if (!this.state.registeredParent) this.cancel();
        },
        onMove: function (ev, pointer) {
          var shouldStartDrag, shouldCancel;
          // Don't scroll while deciding if this touchmove qualifies as a drag event.
          // If we don't preventDefault touchmove events here, Android will assume we don't
          // want to listen to anymore touch events. It will start scrolling and stop sending
          // touchmove events.
          ev.preventDefault();

          if (!this.state.dragPointer) {
            if (this.state.options.horizontal) {
              shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;
              shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * this.state.options.cancelMultiplier;
            } else {
              shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;
              shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * this.state.options.cancelMultiplier;
            }

            if (shouldStartDrag) {
              // Create a new pointer representing this drag, starting at this point where the drag started.
              this.state.dragPointer = makeStartPointer(ev);
              updatePointerState(ev, this.state.dragPointer);
              this.dispatchEvent(ev, '$md.dragstart', this.state.dragPointer);

            } else if (shouldCancel) {
              this.cancel();
            }
          } else {
            this.dispatchDragMove(ev);
          }
        },
        // Only dispatch dragmove events every frame; any more is unnecessray
        dispatchDragMove: $$rAF.throttle(function (ev) {
          // Make sure the drag didn't stop while waiting for the next frame
          if (this.state.isRunning) {
            updatePointerState(ev, this.state.dragPointer);
            this.dispatchEvent(ev, '$md.drag', this.state.dragPointer);
          }
        }),
        onEnd: function (ev, pointer) {
          if (this.state.dragPointer) {
            updatePointerState(ev, this.state.dragPointer);
            this.dispatchEvent(ev, '$md.dragend', this.state.dragPointer);
          }
        }
      })

      /*
       * The swipe handler will dispatch a swipe event if, on the end of a touch,
       * the velocity and distance were high enough.
       * TODO: add vertical swiping with a `horizontal` option similar to the drag handler.
       */
      .handler('swipe', {
        options: {
          minVelocity: 0.65,
          minDistance: 10
        },
        onEnd: function (ev, pointer) {
          if (Math.abs(pointer.velocityX) > this.state.options.minVelocity &&
            Math.abs(pointer.distanceX) > this.state.options.minDistance) {
            var eventType = pointer.directionX == 'left' ? '$md.swipeleft' : '$md.swiperight';
            this.dispatchEvent(ev, eventType);
          }
        }
      });

  }
  MdGesture.$inject = ["$$MdGestureHandler", "$$rAF", "$timeout"];

  /**
   * MdGestureHandler
   * A GestureHandler is an object which is able to dispatch custom dom events
   * based on native dom {touch,pointer,mouse}{start,move,end} events.
   *
   * A gesture will manage its lifecycle through the start,move,end, and cancel
   * functions, which are called by native dom events.
   *
   * A gesture has the concept of 'options' (eg a swipe's required velocity), which can be
   * overridden by elements registering through $mdGesture.register()
   */
  function GestureHandler (name) {
    this.name = name;
    this.state = {};
  }

  function MdGestureHandler() {
    var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);

    GestureHandler.prototype = {
      options: {},
      // jQuery listeners don't work with custom DOMEvents, so we have to dispatch events
      // differently when jQuery is loaded
      dispatchEvent: hasJQuery ?  jQueryDispatchEvent : nativeDispatchEvent,

      // These are overridden by the registered handler
      onStart: angular.noop,
      onMove: angular.noop,
      onEnd: angular.noop,
      onCancel: angular.noop,

      // onStart sets up a new state for the handler, which includes options from the
      // nearest registered parent element of ev.target.
      start: function (ev, pointer) {
        if (this.state.isRunning) return;
        var parentTarget = this.getNearestParent(ev.target);
        // Get the options from the nearest registered parent
        var parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};

        this.state = {
          isRunning: true,
          // Override the default options with the nearest registered parent's options
          options: angular.extend({}, this.options, parentTargetOptions),
          // Pass in the registered parent node to the state so the onStart listener can use
          registeredParent: parentTarget
        };
        this.onStart(ev, pointer);
      },
      move: function (ev, pointer) {
        if (!this.state.isRunning) return;
        this.onMove(ev, pointer);
      },
      end: function (ev, pointer) {
        if (!this.state.isRunning) return;
        this.onEnd(ev, pointer);
        this.state.isRunning = false;
      },
      cancel: function (ev, pointer) {
        this.onCancel(ev, pointer);
        this.state = {};
      },

      // Find and return the nearest parent element that has been registered to
      // listen for this handler via $mdGesture.register(element, 'handlerName').
      getNearestParent: function (node) {
        var current = node;
        while (current) {
          if ((current.$mdGesture || {})[this.name]) {
            return current;
          }
          current = current.parentNode;
        }
        return null;
      },

      // Called from $mdGesture.register when an element reigsters itself with a handler.
      // Store the options the user gave on the DOMElement itself. These options will
      // be retrieved with getNearestParent when the handler starts.
      registerElement: function (element, options) {
        var self = this;
        element[0].$mdGesture = element[0].$mdGesture || {};
        element[0].$mdGesture[this.name] = options || {};
        element.on('$destroy', onDestroy);

        return onDestroy;

        function onDestroy() {
          delete element[0].$mdGesture[self.name];
          element.off('$destroy', onDestroy);
        }
      }
    };

    return GestureHandler;

    /*
     * Dispatch an event with jQuery
     * TODO: Make sure this sends bubbling events
     *
     * @param srcEvent the original DOM touch event that started this.
     * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')
     * @param eventPointer the pointer object that matches this event.
     */
    function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {
      eventPointer = eventPointer || pointer;
      var eventObj = new angular.element.Event(eventType);

      eventObj.$material = true;
      eventObj.pointer = eventPointer;
      eventObj.srcEvent = srcEvent;

      angular.extend(eventObj, {
        clientX: eventPointer.x,
        clientY: eventPointer.y,
        screenX: eventPointer.x,
        screenY: eventPointer.y,
        pageX: eventPointer.x,
        pageY: eventPointer.y,
        ctrlKey: srcEvent.ctrlKey,
        altKey: srcEvent.altKey,
        shiftKey: srcEvent.shiftKey,
        metaKey: srcEvent.metaKey
      });
      angular.element(eventPointer.target).trigger(eventObj);
    }

    /*
     * NOTE: nativeDispatchEvent is very performance sensitive.
     * @param srcEvent the original DOM touch event that started this.
     * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')
     * @param eventPointer the pointer object that matches this event.
     */
    function nativeDispatchEvent(srcEvent, eventType, eventPointer) {
      eventPointer = eventPointer || pointer;
      var eventObj;

      if (eventType === 'click') {
        eventObj = document.createEvent('MouseEvents');
        eventObj.initMouseEvent(
          'click', true, true, window, srcEvent.detail,
          eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y,
          srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey,
          srcEvent.button, srcEvent.relatedTarget || null
        );

      } else {
        eventObj = document.createEvent('CustomEvent');
        eventObj.initCustomEvent(eventType, true, true, {});
      }
      eventObj.$material = true;
      eventObj.pointer = eventPointer;
      eventObj.srcEvent = srcEvent;
      eventPointer.target.dispatchEvent(eventObj);
    }

  }

  /**
   * Attach Gestures: hook document and check shouldHijack clicks
   * @ngInject
   */
  function attachToDocument( $mdGesture, $$MdGestureHandler ) {

    // Polyfill document.contains for IE11.
    // TODO: move to util
    document.contains || (document.contains = function (node) {
      return document.body.contains(node);
    });

    if (!isInitialized && $mdGesture.isHijackingClicks ) {
      /*
       * If hijack clicks is true, we preventDefault any click that wasn't
       * sent by ngMaterial. This is because on older Android & iOS, a false, or 'ghost',
       * click event will be sent ~400ms after a touchend event happens.
       * The only way to know if this click is real is to prevent any normal
       * click events, and add a flag to events sent by material so we know not to prevent those.
       * 
       * Two exceptions to click events that should be prevented are:
       *  - click events sent by the keyboard (eg form submit)
       *  - events that originate from an Ionic app
       */
      document.addEventListener('click', function clickHijacker(ev) {
        var isKeyClick = ev.clientX === 0 && ev.clientY === 0;
        if (!isKeyClick && !ev.$material && !ev.isIonicTap) {
          ev.preventDefault();
          ev.stopPropagation();
        }
      }, true);
      
      isInitialized = true;
    }

    // Listen to all events to cover all platforms.
    var START_EVENTS = 'mousedown touchstart pointerdown';
    var MOVE_EVENTS = 'mousemove touchmove pointermove';
    var END_EVENTS = 'mouseup mouseleave touchend touchcancel pointerup pointercancel';

    angular.element(document)
      .on(START_EVENTS, gestureStart)
      .on(MOVE_EVENTS, gestureMove)
      .on(END_EVENTS, gestureEnd)
      // For testing
      .on('$$mdGestureReset', function gestureClearCache () {
        lastPointer = pointer = null;
      });

    /*
     * When a DOM event happens, run all registered gesture handlers' lifecycle
     * methods which match the DOM event.
     * Eg when a 'touchstart' event happens, runHandlers('start') will call and
     * run `handler.cancel()` and `handler.start()` on all registered handlers.
     */
    function runHandlers(handlerEvent, event) {
      var handler;
      for (var name in HANDLERS) {
        handler = HANDLERS[name];
        if( handler instanceof $$MdGestureHandler ) {

          if (handlerEvent === 'start') {
            // Run cancel to reset any handlers' state
            handler.cancel();
          }
          handler[handlerEvent](event, pointer);

        }
      }
    }

    /*
     * gestureStart vets if a start event is legitimate (and not part of a 'ghost click' from iOS/Android)
     * If it is legitimate, we initiate the pointer state and mark the current pointer's type
     * For example, for a touchstart event, mark the current pointer as a 'touch' pointer, so mouse events
     * won't effect it.
     */
    function gestureStart(ev) {
      // If we're already touched down, abort
      if (pointer) return;

      var now = +Date.now();

      // iOS & old android bug: after a touch event, a click event is sent 350 ms later.
      // If <400ms have passed, don't allow an event of a different type than the previous event
      if (lastPointer && !typesMatch(ev, lastPointer) && (now - lastPointer.endTime < 1500)) {
        return;
      }

      pointer = makeStartPointer(ev);

      runHandlers('start', ev);
    }
    /*
     * If a move event happens of the right type, update the pointer and run all the move handlers.
     * "of the right type": if a mousemove happens but our pointer started with a touch event, do nothing.
     */
    function gestureMove(ev) {
      if (!pointer || !typesMatch(ev, pointer)) return;

      updatePointerState(ev, pointer);
      runHandlers('move', ev);
    }
    /*
     * If an end event happens of the right type, update the pointer, run endHandlers, and save the pointer as 'lastPointer'
     */
    function gestureEnd(ev) {
      if (!pointer || !typesMatch(ev, pointer)) return;

      updatePointerState(ev, pointer);
      pointer.endTime = +Date.now();

      runHandlers('end', ev);

      lastPointer = pointer;
      pointer = null;
    }

  }
  attachToDocument.$inject = ["$mdGesture", "$$MdGestureHandler"];

  // ********************
  // Module Functions
  // ********************

  /*
   * Initiate the pointer. x, y, and the pointer's type.
   */
  function makeStartPointer(ev) {
    var point = getEventPoint(ev);
    var startPointer = {
      startTime: +Date.now(),
      target: ev.target,
      // 'p' for pointer events, 'm' for mouse, 't' for touch
      type: ev.type.charAt(0)
    };
    startPointer.startX = startPointer.x = point.pageX;
    startPointer.startY = startPointer.y = point.pageY;
    return startPointer;
  }

  /*
   * return whether the pointer's type matches the event's type.
   * Eg if a touch event happens but the pointer has a mouse type, return false.
   */
  function typesMatch(ev, pointer) {
    return ev && pointer && ev.type.charAt(0) === pointer.type;
  }

  /*
   * Update the given pointer based upon the given DOMEvent.
   * Distance, velocity, direction, duration, etc
   */
  function updatePointerState(ev, pointer) {
    var point = getEventPoint(ev);
    var x = pointer.x = point.pageX;
    var y = pointer.y = point.pageY;

    pointer.distanceX = x - pointer.startX;
    pointer.distanceY = y - pointer.startY;
    pointer.distance = Math.sqrt(
      pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY
    );

    pointer.directionX = pointer.distanceX > 0 ? 'right' : pointer.distanceX < 0 ? 'left' : '';
    pointer.directionY = pointer.distanceY > 0 ? 'up' : pointer.distanceY < 0 ? 'down' : '';

    pointer.duration = +Date.now() - pointer.startTime;
    pointer.velocityX = pointer.distanceX / pointer.duration;
    pointer.velocityY = pointer.distanceY / pointer.duration;
  }

  /*
   * Normalize the point where the DOM event happened whether it's touch or mouse.
   * @returns point event obj with pageX and pageY on it.
   */
  function getEventPoint(ev) {
    ev = ev.originalEvent || ev; // support jQuery events
    return (ev.touches && ev.touches[0]) ||
      (ev.changedTouches && ev.changedTouches[0]) ||
      ev;
  }

})();
(function(){
"use strict";

angular.module('material.core')
  .provider('$$interimElement', InterimElementProvider);

/*
 * @ngdoc service
 * @name $$interimElement
 * @module material.core
 *
 * @description
 *
 * Factory that contructs `$$interimElement.$service` services.
 * Used internally in material design for elements that appear on screen temporarily.
 * The service provides a promise-like API for interacting with the temporary
 * elements.
 *
 * ```js
 * app.service('$mdToast', function($$interimElement) {
 *   var $mdToast = $$interimElement(toastDefaultOptions);
 *   return $mdToast;
 * });
 * ```
 * @param {object=} defaultOptions Options used by default for the `show` method on the service.
 *
 * @returns {$$interimElement.$service}
 *
 */

function InterimElementProvider() {
  createInterimElementProvider.$get = InterimElementFactory;
  InterimElementFactory.$inject = ["$document", "$q", "$rootScope", "$timeout", "$rootElement", "$animate", "$interpolate", "$mdCompiler", "$mdTheming", "$log"];
  return createInterimElementProvider;

  /**
   * Returns a new provider which allows configuration of a new interimElement
   * service. Allows configuration of default options & methods for options,
   * as well as configuration of 'preset' methods (eg dialog.basic(): basic is a preset method)
   */
  function createInterimElementProvider(interimFactoryName) {
    var EXPOSED_METHODS = ['onHide', 'onShow', 'onRemove'];

    var customMethods = {};
    var providerConfig = {
      presets: {}
    };

    var provider = {
      setDefaults: setDefaults,
      addPreset: addPreset,
      addMethod: addMethod,
      $get: factory
    };

    /**
     * all interim elements will come with the 'build' preset
     */
    provider.addPreset('build', {
      methods: ['controller', 'controllerAs', 'resolve',
        'template', 'templateUrl', 'themable', 'transformTemplate', 'parent']
    });

    factory.$inject = ["$$interimElement", "$injector"];
    return provider;

    /**
     * Save the configured defaults to be used when the factory is instantiated
     */
    function setDefaults(definition) {
      providerConfig.optionsFactory = definition.options;
      providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);
      return provider;
    }

    /**
     * Add a method to the factory that isn't specific to any interim element operations
     */

    function addMethod(name, fn) {
      customMethods[name] = fn;
      return provider;
    }

    /**
     * Save the configured preset to be used when the factory is instantiated
     */
    function addPreset(name, definition) {
      definition = definition || {};
      definition.methods = definition.methods || [];
      definition.options = definition.options || function() { return {}; };

      if (/^cancel|hide|show$/.test(name)) {
        throw new Error("Preset '" + name + "' in " + interimFactoryName + " is reserved!");
      }
      if (definition.methods.indexOf('_options') > -1) {
        throw new Error("Method '_options' in " + interimFactoryName + " is reserved!");
      }
      providerConfig.presets[name] = {
        methods: definition.methods.concat(EXPOSED_METHODS),
        optionsFactory: definition.options,
        argOption: definition.argOption
      };
      return provider;
    }

    /**
     * Create a factory that has the given methods & defaults implementing interimElement
     */
    /* @ngInject */
    function factory($$interimElement, $injector) {
      var defaultMethods;
      var defaultOptions;
      var interimElementService = $$interimElement();

      /*
       * publicService is what the developer will be using.
       * It has methods hide(), cancel(), show(), build(), and any other
       * presets which were set during the config phase.
       */
      var publicService = {
        hide: interimElementService.hide,
        cancel: interimElementService.cancel,
        show: showInterimElement
      };

      defaultMethods = providerConfig.methods || [];
      // This must be invoked after the publicService is initialized
      defaultOptions = invokeFactory(providerConfig.optionsFactory, {});

      // Copy over the simple custom methods
      angular.forEach(customMethods, function(fn, name) {
        publicService[name] = fn;
      });

      angular.forEach(providerConfig.presets, function(definition, name) {
        var presetDefaults = invokeFactory(definition.optionsFactory, {});
        var presetMethods = (definition.methods || []).concat(defaultMethods);

        // Every interimElement built with a preset has a field called `$type`,
        // which matches the name of the preset.
        // Eg in preset 'confirm', options.$type === 'confirm'
        angular.extend(presetDefaults, { $type: name });

        // This creates a preset class which has setter methods for every
        // method given in the `.addPreset()` function, as well as every
        // method given in the `.setDefaults()` function.
        //
        // @example
        // .setDefaults({
        //   methods: ['hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],
        //   options: dialogDefaultOptions
        // })
        // .addPreset('alert', {
        //   methods: ['title', 'ok'],
        //   options: alertDialogOptions
        // })
        //
        // Set values will be passed to the options when interimElement.show() is called.
        function Preset(opts) {
          this._options = angular.extend({}, presetDefaults, opts);
        }
        angular.forEach(presetMethods, function(name) {
          Preset.prototype[name] = function(value) {
            this._options[name] = value;
            return this;
          };
        });

        // Create shortcut method for one-linear methods
        if (definition.argOption) {
          var methodName = 'show' + name.charAt(0).toUpperCase() + name.slice(1);
          publicService[methodName] = function(arg) {
            var config = publicService[name](arg);
            return publicService.show(config);
          };
        }

        // eg $mdDialog.alert() will return a new alert preset
        publicService[name] = function(arg) {
          // If argOption is supplied, eg `argOption: 'content'`, then we assume
          // if the argument is not an options object then it is the `argOption` option.
          //
          // @example `$mdToast.simple('hello')` // sets options.content to hello
          //                                     // because argOption === 'content'
          if (arguments.length && definition.argOption && !angular.isObject(arg) &&
              !angular.isArray(arg)) {
            return (new Preset())[definition.argOption](arg);
          } else {
            return new Preset(arg);
          }

        };
      });

      return publicService;

      function showInterimElement(opts) {
        // opts is either a preset which stores its options on an _options field,
        // or just an object made up of options
        opts = opts || { };
        if (opts._options) opts = opts._options;

        return interimElementService.show(
          angular.extend({}, defaultOptions, opts)
        );
      }

      /**
       * Helper to call $injector.invoke with a local of the factory name for
       * this provider.
       * If an $mdDialog is providing options for a dialog and tries to inject
       * $mdDialog, a circular dependency error will happen.
       * We get around that by manually injecting $mdDialog as a local.
       */
      function invokeFactory(factory, defaultVal) {
        var locals = {};
        locals[interimFactoryName] = publicService;
        return $injector.invoke(factory || function() { return defaultVal; }, {}, locals);
      }

    }

  }

  /* @ngInject */
  function InterimElementFactory($document, $q, $rootScope, $timeout, $rootElement, $animate,
                                 $interpolate, $mdCompiler, $mdTheming, $log ) {
    var startSymbol = $interpolate.startSymbol(),
        endSymbol = $interpolate.endSymbol(),
        usesStandardSymbols = ((startSymbol === '{{') && (endSymbol === '}}')),
        processTemplate  = usesStandardSymbols ? angular.identity : replaceInterpolationSymbols;

    return function createInterimElementService() {
      var SHOW_CANCELLED = false;
      var SHOW_CLOSED = true;

      /*
       * @ngdoc service
       * @name $$interimElement.$service
       *
       * @description
       * A service used to control inserting and removing an element into the DOM.
       *
       */
      var service, stack = [];

      // Publish instance $$interimElement service;
      // ... used as $mdDialog, $mdToast, $mdMenu, and $mdSelect

      return service = {
        show: show,
        hide: hide,
        cancel: cancel
      };

      /*
       * @ngdoc method
       * @name $$interimElement.$service#show
       * @kind function
       *
       * @description
       * Adds the `$interimElement` to the DOM and returns a special promise that will be resolved or rejected
       * with hide or cancel, respectively. To external cancel/hide, developers should use the
       *
       * @param {*} options is hashMap of settings
       * @returns a Promise
       *
       */
      function show(options) {
        var interimElement = new InterimElement(options);
        var hideExisting = stack.length ? service.hide() : $q.when(true);

        // This hide()s only the current interim element before showing the next, new one
        // NOTE: this is not reversible (e.g. interim elements are not stackable)

        hideExisting.finally(function() {

          stack.push(interimElement);
          interimElement
            .show()
            .catch(function( reason ) {
              // $log.error("InterimElement.show() error: " + reason );
            });

        });

        // Return a promise that will be resolved when the interim
        // element is hidden or cancelled...

        return interimElement.deferred.promise;
      }

      /*
       * @ngdoc method
       * @name $$interimElement.$service#hide
       * @kind function
       *
       * @description
       * Removes the `$interimElement` from the DOM and resolves the promise returned from `show`
       *
       * @param {*} resolveParam Data to resolve the promise with
       * @returns a Promise that will be resolved after the element has been removed.
       *
       */
      function hide(reason) {
        var interim = stack.shift();
        if ( !interim ) return $q.when(reason);

        interim
          .remove(reason || SHOW_CLOSED, false)
          .catch(function( reason ) {
            // $log.error("InterimElement.hide() error: " + reason );
          });

        return interim.deferred.promise;
      }

      /*
       * @ngdoc method
       * @name $$interimElement.$service#cancel
       * @kind function
       *
       * @description
       * Removes the `$interimElement` from the DOM and rejects the promise returned from `show`
       *
       * @param {*} reason Data to reject the promise with
       * @returns Promise that will be resolved after the element has been removed.
       *
       */
      function cancel(reason) {
        var interim = stack.shift();
        if ( !interim ) return $q.when(reason);

        interim
          .remove(reason || SHOW_CANCELLED, true)
          .catch(function( reason ) {
            // $log.error("InterimElement.cancel() error: " + reason );
          });

        return interim.deferred.promise;
      }


      /*
       * Internal Interim Element Object
       * Used internally to manage the DOM element and related data
       */
      function InterimElement(options) {
        var self, element, showAction = $q.when(true);

        options = configureScopeAndTransitions(options);

        return self = {
          options : options,
          deferred: $q.defer(),
          show    : createAndTransitionIn,
          remove  : transitionOutAndRemove
        };

        /**
         * Compile, link, and show this interim element
         * Use optional autoHided and transition-in effects
         */
        function createAndTransitionIn() {
          return $q(function(resolve, reject){

            compileElement(options)
              .then(function( compiledData ) {
                element = linkElement( compiledData, options );

                showAction = showElement(element, options)
                  .then(resolve, rejectAll );

              });

            function rejectAll(fault) {
              // Force the '$md<xxx>.show()' promise to reject
              self.deferred.reject(fault);

              // Continue rejection propagation
              reject(fault);
            }
          });
        }

        /**
         * After the show process has finished/rejected:
         * - announce 'removing',
         * - perform the transition-out, and
         * - perform optional clean up scope.
         */
        function transitionOutAndRemove(response, isCancelled) {
          options.cancelAutoHide && options.cancelAutoHide();

          return $q(function(resolve, reject){

            $q.when(showAction).finally(function(){

              hideElement(options.element, options).then( function() {

                (isCancelled && rejectAll(response)) || resolveAll();

              }, rejectAll );

            });

            function resolveAll() {
              // The `show()` returns a promise that will be resolved when the interim
              // element is hidden or cancelled...
              self.deferred.resolve(response);

              // Now resolve the `.hide()` promise itself (optional)
              resolve(response);
            }

            function rejectAll(fault) {
              // Force the '$md<xxx>.show()' promise to reject
              self.deferred.reject(fault);

              // Continue rejection propagation
              reject(fault);
            }

          });
        }

        /**
         * Prepare optional isolated scope and prepare $animate with default enter and leave
         * transitions for the new element instance.
         */
        function configureScopeAndTransitions(options) {
          options = options || { };
          if ( options.template ) {
            options.template = processTemplate(options.template);
          }

          return angular.extend({
            preserveScope: false,
            cancelAutoHide : angular.noop,
            scope: options.scope || $rootScope.$new(options.isolateScope),

            /**
             * Default usage to enable $animate to transition-in; can be easily overridden via 'options'
             */
            onShow: function transitionIn(scope, element, options) {
              return $animate.enter(element, options.parent);
            },

            /**
             * Default usage to enable $animate to transition-out; can be easily overridden via 'options'
             */
            onRemove: function transitionOut(scope, element) {
              // Element could be undefined if a new element is shown before
              // the old one finishes compiling.
              return element && $animate.leave(element) || $q.when();
            }
          }, options );

        }

        /**
         * Compile an element with a templateUrl, controller, and locals
         */
        function compileElement(options) {

          var compiled = !options.skipCompile ? $mdCompiler.compile(options) : null;

          return compiled || $q(function (resolve) {
              resolve({
                locals: {},
                link: function () {
                  return options.element;
                }
              });
            });
        }

        /**
         *  Link an element with compiled configuration
         */
        function linkElement(compileData, options){
          angular.extend(compileData.locals, options);

          var element = compileData.link(options.scope);

          // Search for parent at insertion time, if not specified
          options.element = element;
          options.parent = findParent(element, options);
          if (options.themable) $mdTheming(element);

          return element;
        }

        /**
         * Search for parent at insertion time, if not specified
         */
        function findParent(element, options) {
          var parent = options.parent;

          // Search for parent at insertion time, if not specified
          if (angular.isFunction(parent)) {
            parent = parent(options.scope, element, options);
          } else if (angular.isString(parent)) {
            parent = angular.element($document[0].querySelector(parent));
          } else {
            parent = angular.element(parent);
          }

          // If parent querySelector/getter function fails, or it's just null,
          // find a default.
          if (!(parent || {}).length) {
            var el;
            if ($rootElement[0] && $rootElement[0].querySelector) {
              el = $rootElement[0].querySelector(':not(svg) > body');
            }
            if (!el) el = $rootElement[0];
            if (el.nodeName == '#comment') {
              el = $document[0].body;
            }
            return angular.element(el);
          }

          return parent;
        }

        /**
         * If auto-hide is enabled, start timer and prepare cancel function
         */
        function startAutoHide() {
          var autoHideTimer, cancelAutoHide = angular.noop;

          if (options.hideDelay) {
            autoHideTimer = $timeout(service.hide, options.hideDelay) ;
            cancelAutoHide = function() {
              $timeout.cancel(autoHideTimer);
            }
          }

          // Cache for subsequent use
          options.cancelAutoHide = function() {
            cancelAutoHide();
            options.cancelAutoHide = undefined;
          }
        }

        /**
         * Show the element ( with transitions), notify complete and start
         * optional auto-Hide
         */
        function showElement(element, options) {
          // Trigger onComplete callback when the `show()` finishes
          var notifyComplete = options.onComplete || angular.noop;

          return $q(function (resolve, reject) {
            try {

              // Start transitionIn
              $q.when(options.onShow(options.scope, element, options))
                .then(function () {

                  notifyComplete(options.scope, element, options);
                  startAutoHide();

                  resolve(element);

                }, reject );

            } catch(e) {
              reject(e.message);
            }
          });
        }

        function hideElement(element, options) {
          var announceRemoving = options.onRemoving || angular.noop;

          return $q(function (resolve, reject) {
            try {
              // Start transitionIn
              var action = $q.when(element ? options.onRemove(options.scope, element, options) : true);

              // Trigger callback *before* the remove operation starts
              announceRemoving(element, action);

              // Wait until transition-out is done
              action.then(function () {

                !options.preserveScope && options.scope.$destroy();
                resolve(element);

              }, reject );

            } catch(e) {
              reject(e.message);
            }
          });
        }

      }
    };

    /**
     * Replace `{{` and `}}` in a string (usually a template) with the actual start-/endSymbols used
     * for interpolation. This allows pre-defined templates (for components such as dialog, toast etc)
     * to continue to work in apps that use custom interpolation start-/endSymbols.
     *
     * @param {string} text The text in which to replace `{{` / `}}`
     * @returns {string} The modified string using the actual interpolation start-/endSymbols
     */
    function replaceInterpolationSymbols(text) {
      if (!text || !angular.isString(text)) return text;
      return text.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
    }

  }

}

})();
(function(){
"use strict";

  /**
   * @ngdoc module
   * @name material.core.componentRegistry
   *
   * @description
   * A component instance registration service.
   * Note: currently this as a private service in the SideNav component.
   */
  angular.module('material.core')
    .factory('$mdComponentRegistry', ComponentRegistry);

  /*
   * @private
   * @ngdoc factory
   * @name ComponentRegistry
   * @module material.core.componentRegistry
   *
   */
  function ComponentRegistry($log, $q) {

    var self;
    var instances = [ ];
    var pendings = { };

    return self = {
      /**
       * Used to print an error when an instance for a handle isn't found.
       */
      notFoundError: function(handle) {
        $log.error('No instance found for handle', handle);
      },
      /**
       * Return all registered instances as an array.
       */
      getInstances: function() {
        return instances;
      },

      /**
       * Get a registered instance.
       * @param handle the String handle to look up for a registered instance.
       */
      get: function(handle) {
        if ( !isValidID(handle) ) return null;

        var i, j, instance;
        for(i = 0, j = instances.length; i < j; i++) {
          instance = instances[i];
          if(instance.$$mdHandle === handle) {
            return instance;
          }
        }
        return null;
      },

      /**
       * Register an instance.
       * @param instance the instance to register
       * @param handle the handle to identify the instance under.
       */
      register: function(instance, handle) {
        if ( !handle ) return angular.noop;

        instance.$$mdHandle = handle;
        instances.push(instance);
        resolveWhen();

        return deregister;

        /**
         * Remove registration for an instance
         */
        function deregister() {
          var index = instances.indexOf(instance);
          if (index !== -1) {
            instances.splice(index, 1);
          }
        }

        /**
         * Resolve any pending promises for this instance
         */
        function resolveWhen() {
          var dfd = pendings[handle];
          if ( dfd ) {
            dfd.resolve( instance );
            delete pendings[handle];
          }
        }
      },

      /**
       * Async accessor to registered component instance
       * If not available then a promise is created to notify
       * all listeners when the instance is registered.
       */
      when : function(handle) {
        if ( isValidID(handle) ) {
          var deferred = $q.defer();
          var instance = self.get(handle);

          if ( instance )  {
            deferred.resolve( instance );
          } else {
            pendings[handle] = deferred;
          }

          return deferred.promise;
        }
        return $q.reject("Invalid `md-component-id` value.");
      }

    };

    function isValidID(handle){
      return handle && (handle !== "");
    }

  }
  ComponentRegistry.$inject = ["$log", "$q"];

})();
(function(){
"use strict";

(function() {
  'use strict';

  /**
   * @ngdoc service
   * @name $mdButtonInkRipple
   * @module material.core
   *
   * @description
   * Provides ripple effects for md-button.  See $mdInkRipple service for all possible configuration options.
   *
   * @param {object=} scope Scope within the current context
   * @param {object=} element The element the ripple effect should be applied to
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration
   */

  angular.module('material.core')
    .factory('$mdButtonInkRipple', MdButtonInkRipple);

  function MdButtonInkRipple($mdInkRipple) {
    return {
      attach: attach
    };

    function attach(scope, element, options) {
      var elementOptions = optionsForElement(element);
      return $mdInkRipple.attach(scope, element, angular.extend(elementOptions, options));
    };

    function optionsForElement(element) {
      if (element.hasClass('md-icon-button')) {
        return {
          isMenuItem: element.hasClass('md-menu-item'),
          fitRipple: true,
          center: true
        };
      } else {
        return {
          isMenuItem: element.hasClass('md-menu-item'),
          dimBackground: true
        }
      }
    };
  }
  MdButtonInkRipple.$inject = ["$mdInkRipple"];;
})();

})();
(function(){
"use strict";

(function() {
  'use strict';

    /**
   * @ngdoc service
   * @name $mdCheckboxInkRipple
   * @module material.core
   *
   * @description
   * Provides ripple effects for md-checkbox.  See $mdInkRipple service for all possible configuration options.
   *
   * @param {object=} scope Scope within the current context
   * @param {object=} element The element the ripple effect should be applied to
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration
   */

  angular.module('material.core')
    .factory('$mdCheckboxInkRipple', MdCheckboxInkRipple);

  function MdCheckboxInkRipple($mdInkRipple) {
    return {
      attach: attach
    };

    function attach(scope, element, options) {
      return $mdInkRipple.attach(scope, element, angular.extend({
        center: true,
        dimBackground: false,
        fitRipple: true
      }, options));
    };
  }
  MdCheckboxInkRipple.$inject = ["$mdInkRipple"];;
})();

})();
(function(){
"use strict";

(function() {
  'use strict';

  /**
   * @ngdoc service
   * @name $mdListInkRipple
   * @module material.core
   *
   * @description
   * Provides ripple effects for md-list.  See $mdInkRipple service for all possible configuration options.
   *
   * @param {object=} scope Scope within the current context
   * @param {object=} element The element the ripple effect should be applied to
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration
   */

  angular.module('material.core')
    .factory('$mdListInkRipple', MdListInkRipple);

  function MdListInkRipple($mdInkRipple) {
    return {
      attach: attach
    };

    function attach(scope, element, options) {
      return $mdInkRipple.attach(scope, element, angular.extend({
        center: false,
        dimBackground: true,
        outline: false,
        rippleSize: 'full'
      }, options));
    };
  }
  MdListInkRipple.$inject = ["$mdInkRipple"];;
})();

})();
(function(){
"use strict";

angular.module('material.core')
  .factory('$mdInkRipple', InkRippleService)
  .directive('mdInkRipple', InkRippleDirective)
  .directive('mdNoInk', attrNoDirective())
  .directive('mdNoBar', attrNoDirective())
  .directive('mdNoStretch', attrNoDirective());

function InkRippleDirective($mdButtonInkRipple, $mdCheckboxInkRipple) {
  return {
    controller: angular.noop,
    link: function (scope, element, attr) {
      if (attr.hasOwnProperty('mdInkRippleCheckbox')) {
        $mdCheckboxInkRipple.attach(scope, element);
      } else {
        $mdButtonInkRipple.attach(scope, element);
      }
    }
  };
}
InkRippleDirective.$inject = ["$mdButtonInkRipple", "$mdCheckboxInkRipple"];

function InkRippleService($window, $timeout, $mdUtil) {

  return {
    attach: attach
  };

  function attach(scope, element, options) {
    if (element.controller('mdNoInk')) return angular.noop;

    options = angular.extend({
      colorElement: element,
      mousedown: true,
      hover: true,
      focus: true,
      center: false,
      mousedownPauseTime: 150,
      dimBackground: false,
      outline: false,
      fullRipple: true,
      isMenuItem: false,
      fitRipple: false
    }, options);

    var rippleSize,
        controller = element.controller('mdInkRipple') || {},
        counter = 0,
        ripples = [],
        states = [],
        isActiveExpr = element.attr('md-highlight'),
        isActive = false,
        isHeld = false,
        node = element[0],
        rippleSizeSetting = element.attr('md-ripple-size'),
        color = parseColor(element.attr('md-ink-ripple')) || parseColor(options.colorElement.length && $window.getComputedStyle(options.colorElement[0]).color || 'rgb(0, 0, 0)');

    switch (rippleSizeSetting) {
      case 'full':
        options.fullRipple = true;
        break;
      case 'partial':
        options.fullRipple = false;
        break;
    }

    // expose onInput for ripple testing
    if (options.mousedown) {
      element.on('$md.pressdown', onPressDown)
        .on('$md.pressup', onPressUp);
    }

    controller.createRipple = createRipple;

    if (isActiveExpr) {
      scope.$watch(isActiveExpr, function watchActive(newValue) {
        isActive = newValue;
        if (isActive && !ripples.length) {
          $mdUtil.nextTick(function () { createRipple(0, 0); });
        }
        angular.forEach(ripples, updateElement);
      });
    }

    // Publish self-detach method if desired...
    return function detach() {
      element.off('$md.pressdown', onPressDown)
        .off('$md.pressup', onPressUp);
      getRippleContainer().remove();
    };

    /**
     * Gets the current ripple container
     * If there is no ripple container, it creates one and returns it
     *
     * @returns {angular.element} ripple container element
     */
    function getRippleContainer() {
      var container = element.data('$mdRippleContainer');
      if (container) return container;
      container = angular.element('<div class="md-ripple-container">');
      element.append(container);
      element.data('$mdRippleContainer', container);
      return container;
    }

    function parseColor(color) {
      if (!color) return;
      if (color.indexOf('rgba') === 0) return color.replace(/\d?\.?\d*\s*\)\s*$/, '0.1)');
      if (color.indexOf('rgb')  === 0) return rgbToRGBA(color);
      if (color.indexOf('#')    === 0) return hexToRGBA(color);

      /**
       * Converts a hex value to an rgba string
       *
       * @param {string} hex value (3 or 6 digits) to be converted
       *
       * @returns {string} rgba color with 0.1 alpha
       */
      function hexToRGBA(color) {
        var hex = color.charAt(0) === '#' ? color.substr(1) : color,
          dig = hex.length / 3,
          red = hex.substr(0, dig),
          grn = hex.substr(dig, dig),
          blu = hex.substr(dig * 2);
        if (dig === 1) {
          red += red;
          grn += grn;
          blu += blu;
        }
        return 'rgba(' + parseInt(red, 16) + ',' + parseInt(grn, 16) + ',' + parseInt(blu, 16) + ',0.1)';
      }

      /**
       * Converts rgb value to rgba string
       *
       * @param {string} rgb color string
       *
       * @returns {string} rgba color with 0.1 alpha
       */
      function rgbToRGBA(color) {
        return color.replace(')', ', 0.1)').replace('(', 'a(');
      }

    }

    function removeElement(elem, wait) {
      ripples.splice(ripples.indexOf(elem), 1);
      if (ripples.length === 0) {
        getRippleContainer().css({ backgroundColor: '' });
      }
      $timeout(function () { elem.remove(); }, wait, false);
    }

    function updateElement(elem) {
      var index = ripples.indexOf(elem),
          state = states[index] || {},
          elemIsActive = ripples.length > 1 ? false : isActive,
          elemIsHeld   = ripples.length > 1 ? false : isHeld;
      if (elemIsActive || state.animating || elemIsHeld) {
        elem.addClass('md-ripple-visible');
      } else if (elem) {
        elem.removeClass('md-ripple-visible');
        if (options.outline) {
          elem.css({
            width: rippleSize + 'px',
            height: rippleSize + 'px',
            marginLeft: (rippleSize * -1) + 'px',
            marginTop: (rippleSize * -1) + 'px'
          });
        }
        removeElement(elem, options.outline ? 450 : 650);
      }
    }

    /**
     * Creates a ripple at the provided coordinates
     *
     * @param {number} left cursor position
     * @param {number} top cursor position
     *
     * @returns {angular.element} the generated ripple element
     */
    function createRipple(left, top) {

      color = parseColor(element.attr('md-ink-ripple')) || parseColor($window.getComputedStyle(options.colorElement[0]).color || 'rgb(0, 0, 0)');

      var container = getRippleContainer(),
          size = getRippleSize(left, top),
          css = getRippleCss(size, left, top),
          elem = getRippleElement(css),
          index = ripples.indexOf(elem),
          state = states[index] || {};

      rippleSize = size;

      state.animating = true;

      $mdUtil.nextTick(function () {
        if (options.dimBackground) {
          container.css({ backgroundColor: color });
        }
        elem.addClass('md-ripple-placed md-ripple-scaled');
        if (options.outline) {
          elem.css({
            borderWidth: (size * 0.5) + 'px',
            marginLeft: (size * -0.5) + 'px',
            marginTop: (size * -0.5) + 'px'
          });
        } else {
          elem.css({ left: '50%', top: '50%' });
        }
        updateElement(elem);
        $timeout(function () {
          state.animating = false;
          updateElement(elem);
        }, (options.outline ? 450 : 225), false);
      });

      return elem;

      /**
       * Creates the ripple element with the provided css
       *
       * @param {object} css properties to be applied
       *
       * @returns {angular.element} the generated ripple element
       */
      function getRippleElement(css) {
        var elem = angular.element('<div class="md-ripple" data-counter="' + counter++ + '">');
        ripples.unshift(elem);
        states.unshift({ animating: true });
        container.append(elem);
        css && elem.css(css);
        return elem;
      }

      /**
       * Calculate the ripple size
       *
       * @returns {number} calculated ripple diameter
       */
      function getRippleSize(left, top) {
        var width = container.prop('offsetWidth'),
            height = container.prop('offsetHeight'),
            multiplier, size, rect;
        if (options.isMenuItem) {
          size = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
        } else if (options.outline) {
          rect = node.getBoundingClientRect();
          left -= rect.left;
          top -= rect.top;
          width = Math.max(left, width - left);
          height = Math.max(top, height - top);
          size = 2 * Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
        } else {
          multiplier = options.fullRipple ? 1.1 : 0.8;
          size = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2)) * multiplier;
          if (options.fitRipple) {
            size = Math.min(height, width, size);
          }
        }
        return size;
      }

      /**
       * Generates the ripple css
       *
       * @param {number} the diameter of the ripple
       * @param {number} the left cursor offset
       * @param {number} the top cursor offset
       *
       * @returns {{backgroundColor: string, borderColor: string, width: string, height: string}}
       */
      function getRippleCss(size, left, top) {
        var rect = node.getBoundingClientRect(),
            css  = {
              backgroundColor: rgbaToRGB(color),
              borderColor: rgbaToRGB(color),
              width: size + 'px',
              height: size + 'px'
            };

        if (options.outline) {
          css.width = 0;
          css.height = 0;
        } else {
          css.marginLeft = css.marginTop = (size * -0.5) + 'px';
        }

        if (options.center) {
          css.left = css.top = '50%';
        } else {
          css.left = Math.round((left - rect.left) / container.prop('offsetWidth') * 100) + '%';
          css.top = Math.round((top - rect.top) / container.prop('offsetHeight') * 100) + '%';
        }

        return css;

        /**
         * Converts rgba string to rgb, removing the alpha value
         *
         * @param {string} rgba color
         *
         * @returns {string} rgb color
         */
        function rgbaToRGB(color) {
          return color.replace('rgba', 'rgb').replace(/,[^\),]+\)/, ')');
        }
      }
    }

    /**
     * Handles user input start and stop events
     *
     */
    function onPressDown(ev) {
      if (!isRippleAllowed()) return;

      createRipple(ev.pointer.x, ev.pointer.y);
      isHeld = true;
    }
    function onPressUp() {
      isHeld = false;
      var ripple = ripples[ ripples.length - 1 ];
      $mdUtil.nextTick(function () { updateElement(ripple); });
    }

    /**
     * Determines if the ripple is allowed
     *
     * @returns {boolean} true if the ripple is allowed, false if not
     */
    function isRippleAllowed() {
      var parent = node.parentNode;
      var grandparent = parent && parent.parentNode;
      var ancestor = grandparent && grandparent.parentNode;
      return !isDisabled(node) && !isDisabled(parent) && !isDisabled(grandparent) && !isDisabled(ancestor);
      function isDisabled (elem) {
        return elem && elem.hasAttribute && elem.hasAttribute('disabled');
      }
    }

  }
}
InkRippleService.$inject = ["$window", "$timeout", "$mdUtil"];

/**
 * noink/nobar/nostretch directive: make any element that has one of
 * these attributes be given a controller, so that other directives can
 * `require:` these and see if there is a `no<xxx>` parent attribute.
 *
 * @usage
 * <hljs lang="html">
 * <parent md-no-ink>
 *   <child detect-no>
 *   </child>
 * </parent>
 * </hljs>
 *
 * <hljs lang="js">
 * myApp.directive('detectNo', function() {
 *   return {
 *     require: ['^?mdNoInk', ^?mdNoBar'],
 *     link: function(scope, element, attr, ctrls) {
 *       var noinkCtrl = ctrls[0];
 *       var nobarCtrl = ctrls[1];
 *       if (noInkCtrl) {
 *         alert("the md-no-ink flag has been specified on an ancestor!");
 *       }
 *       if (nobarCtrl) {
 *         alert("the md-no-bar flag has been specified on an ancestor!");
 *       }
 *     }
 *   };
 * });
 * </hljs>
 */
function attrNoDirective() {
  return function() {
    return {
      controller: angular.noop
    };
  };
}

})();
(function(){
"use strict";

(function() {
  'use strict';

    /**
   * @ngdoc service
   * @name $mdTabInkRipple
   * @module material.core
   *
   * @description
   * Provides ripple effects for md-tabs.  See $mdInkRipple service for all possible configuration options.
   *
   * @param {object=} scope Scope within the current context
   * @param {object=} element The element the ripple effect should be applied to
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration
   */

  angular.module('material.core')
    .factory('$mdTabInkRipple', MdTabInkRipple);

  function MdTabInkRipple($mdInkRipple) {
    return {
      attach: attach
    };

    function attach(scope, element, options) {
      return $mdInkRipple.attach(scope, element, angular.extend({
        center: false,
        dimBackground: true,
        outline: false,
        rippleSize: 'full'
      }, options));
    };
  }
  MdTabInkRipple.$inject = ["$mdInkRipple"];;
})();

})();
(function(){
"use strict";

angular.module('material.core.theming.palette', [])
.constant('$mdColorPalette', {
  'red': {
    '50': '#ffebee',
    '100': '#ffcdd2',
    '200': '#ef9a9a',
    '300': '#e57373',
    '400': '#ef5350',
    '500': '#f44336',
    '600': '#e53935',
    '700': '#d32f2f',
    '800': '#c62828',
    '900': '#b71c1c',
    'A100': '#ff8a80',
    'A200': '#ff5252',
    'A400': '#ff1744',
    'A700': '#d50000',
    'contrastDefaultColor': 'light',
    'contrastDarkColors': '50 100 200 300 400 A100',
    'contrastStrongLightColors': '500 600 700 A200 A400 A700'
  },
  'pink': {
    '50': '#fce4ec',
    '100': '#f8bbd0',
    '200': '#f48fb1',
    '300': '#f06292',
    '400': '#ec407a',
    '500': '#e91e63',
    '600': '#d81b60',
    '700': '#c2185b',
    '800': '#ad1457',
    '900': '#880e4f',
    'A100': '#ff80ab',
    'A200': '#ff4081',
    'A400': '#f50057',
    'A700': '#c51162',
    'contrastDefaultColor': 'light',
    'contrastDarkColors': '50 100 200 300 400 A100',
    'contrastStrongLightColors': '500 600 A200 A400 A700'
  },
  'purple': {
    '50': '#f3e5f5',
    '100': '#e1bee7',
    '200': '#ce93d8',
    '300': '#ba68c8',
    '400': '#ab47bc',
    '500': '#9c27b0',
    '600': '#8e24aa',
    '700': '#7b1fa2',
    '800': '#6a1b9a',
    '900': '#4a148c',
    'A100': '#ea80fc',
    'A200': '#e040fb',
    'A400': '#d500f9',
    'A700': '#aa00ff',
    'contrastDefaultColor': 'light',
    'contrastDarkColors': '50 100 200 A100',
    'contrastStrongLightColors': '300 400 A200 A400 A700'
  },
  'deep-purple': {
    '50': '#ede7f6',
    '100': '#d1c4e9',
    '200': '#b39ddb',
    '300': '#9575cd',
    '400': '#7e57c2',
    '500': '#673ab7',
    '600': '#5e35b1',
    '700': '#512da8',
    '800': '#4527a0',
    '900': '#311b92',
    'A100': '#b388ff',
    'A200': '#7c4dff',
    'A400': '#651fff',
    'A700': '#6200ea',
    'contrastDefaultColor': 'light',
    'contrastDarkColors': '50 100 200 A100',
    'contrastStrongLightColors': '300 400 A200'
  },
  'indigo': {
    '50': '#e8eaf6',
    '100': '#c5cae9',
    '200': '#9fa8da',
    '300': '#7986cb',
    '400': '#5c6bc0',
    '500': '#3f51b5',
    '600': '#3949ab',
    '700': '#303f9f',
    '800': '#283593',
    '900': '#1a237e',
    'A100': '#8c9eff',
    'A200': '#536dfe',
    'A400': '#3d5afe',
    'A700': '#304ffe',
    'contrastDefaultColor': 'light',
    'contrastDarkColors': '50 100 200 A100',
    'contrastStrongLightColors': '300 400 A200 A400'
  },
  'blue': {
    '50': '#e3f2fd',
    '100': '#bbdefb',
    '200': '#90caf9',
    '300': '#64b5f6',
    '400': '#42a5f5',
    '500': '#2196f3',
    '600': '#1e88e5',
    '700': '#1976d2',
    '800': '#1565c0',
    '900': '#0d47a1',
    'A100': '#82b1ff',
    'A200': '#448aff',
    'A400': '#2979ff',
    'A700': '#2962ff',
    'contrastDefaultColor': 'light',
    'contrastDarkColors': '100 200 300 400 A100',
    'contrastStrongLightColors': '500 600 700 A200 A400 A700'
  },
  'light-blue': {
    '50': '#e1f5fe',
    '100': '#b3e5fc',
    '200': '#81d4fa',
    '300': '#4fc3f7',
    '400': '#29b6f6',
    '500': '#03a9f4',
    '600': '#039be5',
    '700': '#0288d1',
    '800': '#0277bd',
    '900': '#01579b',
    'A100': '#80d8ff',
    'A200': '#40c4ff',
    'A400': '#00b0ff',
    'A700': '#0091ea',
    'contrastDefaultColor': 'dark',
    'contrastLightColors': '500 600 700 800 900 A700',
    'contrastStrongLightColors': '500 600 700 800 A700'
  },
  'cyan': {
    '50': '#e0f7fa',
    '100': '#b2ebf2',
    '200': '#80deea',
    '300': '#4dd0e1',
    '400': '#26c6da',
    '500': '#00bcd4',
    '600': '#00acc1',
    '700': '#0097a7',
    '800': '#00838f',
    '900': '#006064',
    'A100': '#84ffff',
    'A200': '#18ffff',
    'A400': '#00e5ff',
    'A700': '#00b8d4',
    'contrastDefaultColor': 'dark',
    'contrastLightColors': '500 600 700 800 900',
    'contrastStrongLightColors': '500 600 700 800'
  },
  'teal': {
    '50': '#e0f2f1',
    '100': '#b2dfdb',
    '200': '#80cbc4',
    '300': '#4db6ac',
    '400': '#26a69a',
    '500': '#009688',
    '600': '#00897b',
    '700': '#00796b',
    '800': '#00695c',
    '900': '#004d40',
    'A100': '#a7ffeb',
    'A200': '#64ffda',
    'A400': '#1de9b6',
    'A700': '#00bfa5',
    'contrastDefaultColor': 'dark',
    'contrastLightColors': '500 600 700 800 900',
    'contrastStrongLightColors': '500 600 700'
  },
  'green': {
    '50': '#e8f5e9',
    '100': '#c8e6c9',
    '200': '#a5d6a7',
    '300': '#81c784',
    '400': '#66bb6a',
    '500': '#4caf50',
    '600': '#43a047',
    '700': '#388e3c',
    '800': '#2e7d32',
    '900': '#1b5e20',
    'A100': '#b9f6ca',
    'A200': '#69f0ae',
    'A400': '#00e676',
    'A700': '#00c853',
    'contrastDefaultColor': 'dark',
    'contrastLightColors': '500 600 700 800 900',
    'contrastStrongLightColors': '500 600 700'
  },
  'light-green': {
    '50': '#f1f8e9',
    '100': '#dcedc8',
    '200': '#c5e1a5',
    '300': '#aed581',
    '400': '#9ccc65',
    '500': '#8bc34a',
    '600': '#7cb342',
    '700': '#689f38',
    '800': '#558b2f',
    '900': '#33691e',
    'A100': '#ccff90',
    'A200': '#b2ff59',
    'A400': '#76ff03',
    'A700': '#64dd17',
    'contrastDefaultColor': 'dark',
    'contrastLightColors': '800 900',
    'contrastStrongLightColors': '800 900'
  },
  'lime': {
    '50': '#f9fbe7',
    '100': '#f0f4c3',
    '200': '#e6ee9c',
    '300': '#dce775',
    '400': '#d4e157',
    '500': '#cddc39',
    '600': '#c0ca33',
    '700': '#afb42b',
    '800': '#9e9d24',
    '900': '#827717',
    'A100': '#f4ff81',
    'A200': '#eeff41',
    'A400': '#c6ff00',
    'A700': '#aeea00',
    'contrastDefaultColor': 'dark',
    'contrastLightColors': '900',
    'contrastStrongLightColors': '900'
  },
  'yellow': {
    '50': '#fffde7',
    '100': '#fff9c4',
    '200': '#fff59d',
    '300': '#fff176',
    '400': '#ffee58',
    '500': '#ffeb3b',
    '600': '#fdd835',
    '700': '#fbc02d',
    '800': '#f9a825',
    '900': '#f57f17',
    'A100': '#ffff8d',
    'A200': '#ffff00',
    'A400': '#ffea00',
    'A700': '#ffd600',
    'contrastDefaultColor': 'dark'
  },
  'amber': {
    '50': '#fff8e1',
    '100': '#ffecb3',
    '200': '#ffe082',
    '300': '#ffd54f',
    '400': '#ffca28',
    '500': '#ffc107',
    '600': '#ffb300',
    '700': '#ffa000',
    '800': '#ff8f00',
    '900': '#ff6f00',
    'A100': '#ffe57f',
    'A200': '#ffd740',
    'A400': '#ffc400',
    'A700': '#ffab00',
    'contrastDefaultColor': 'dark'
  },
  'orange': {
    '50': '#fff3e0',
    '100': '#ffe0b2',
    '200': '#ffcc80',
    '300': '#ffb74d',
    '400': '#ffa726',
    '500': '#ff9800',
    '600': '#fb8c00',
    '700': '#f57c00',
    '800': '#ef6c00',
    '900': '#e65100',
    'A100': '#ffd180',
    'A200': '#ffab40',
    'A400': '#ff9100',
    'A700': '#ff6d00',
    'contrastDefaultColor': 'dark',
    'contrastLightColors': '800 900',
    'contrastStrongLightColors': '800 900'
  },
  'deep-orange': {
    '50': '#fbe9e7',
    '100': '#ffccbc',
    '200': '#ffab91',
    '300': '#ff8a65',
    '400': '#ff7043',
    '500': '#ff5722',
    '600': '#f4511e',
    '700': '#e64a19',
    '800': '#d84315',
    '900': '#bf360c',
    'A100': '#ff9e80',
    'A200': '#ff6e40',
    'A400': '#ff3d00',
    'A700': '#dd2c00',
    'contrastDefaultColor': 'light',
    'contrastDarkColors': '50 100 200 300 400 A100 A200',
    'contrastStrongLightColors': '500 600 700 800 900 A400 A700'
  },
  'brown': {
    '50': '#efebe9',
    '100': '#d7ccc8',
    '200': '#bcaaa4',
    '300': '#a1887f',
    '400': '#8d6e63',
    '500': '#795548',
    '600': '#6d4c41',
    '700': '#5d4037',
    '800': '#4e342e',
    '900': '#3e2723',
    'A100': '#d7ccc8',
    'A200': '#bcaaa4',
    'A400': '#8d6e63',
    'A700': '#5d4037',
    'contrastDefaultColor': 'light',
    'contrastDarkColors': '50 100 200',
    'contrastStrongLightColors': '300 400'
  },
  'grey': {
    '50': '#fafafa',
    '100': '#f5f5f5',
    '200': '#eeeeee',
    '300': '#e0e0e0',
    '400': '#bdbdbd',
    '500': '#9e9e9e',
    '600': '#757575',
    '700': '#616161',
    '800': '#424242',
    '900': '#212121',
    '1000': '#000000',
    'A100': '#ffffff',
    'A200': '#eeeeee',
    'A400': '#bdbdbd',
    'A700': '#616161',
    'contrastDefaultColor': 'dark',
    'contrastLightColors': '600 700 800 900'
  },
  'blue-grey': {
    '50': '#eceff1',
    '100': '#cfd8dc',
    '200': '#b0bec5',
    '300': '#90a4ae',
    '400': '#78909c',
    '500': '#607d8b',
    '600': '#546e7a',
    '700': '#455a64',
    '800': '#37474f',
    '900': '#263238',
    'A100': '#cfd8dc',
    'A200': '#b0bec5',
    'A400': '#78909c',
    'A700': '#455a64',
    'contrastDefaultColor': 'light',
    'contrastDarkColors': '50 100 200 300',
    'contrastStrongLightColors': '400 500'
  }
});

})();
(function(){
"use strict";

angular.module('material.core.theming', ['material.core.theming.palette'])
  .directive('mdTheme', ThemingDirective)
  .directive('mdThemable', ThemableDirective)
  .provider('$mdTheming', ThemingProvider)
  .run(generateThemes);

/**
 * @ngdoc provider
 * @name $mdThemingProvider
 * @module material.core
 *
 * @description Provider to configure the `$mdTheming` service.
 */

/**
 * @ngdoc method
 * @name $mdThemingProvider#setDefaultTheme
 * @param {string} themeName Default theme name to be applied to elements. Default value is `default`.
 */

/**
 * @ngdoc method
 * @name $mdThemingProvider#alwaysWatchTheme
 * @param {boolean} watch Whether or not to always watch themes for changes and re-apply
 * classes when they change. Default is `false`. Enabling can reduce performance.
 */

/* Some Example Valid Theming Expressions
 * =======================================
 *
 * Intention group expansion: (valid for primary, accent, warn, background)
 *
 * {{primary-100}} - grab shade 100 from the primary palette
 * {{primary-100-0.7}} - grab shade 100, apply opacity of 0.7
 * {{primary-hue-1}} - grab the shade assigned to hue-1 from the primary palette
 * {{primary-hue-1-0.7}} - apply 0.7 opacity to primary-hue-1
 * {{primary-color}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured shades set for each hue
 * {{primary-color-0.7}} - Apply 0.7 opacity to each of the above rules
 * {{primary-contrast}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured contrast (ie. text) color shades set for each hue
 * {{primary-contrast-0.7}} - Apply 0.7 opacity to each of the above rules
 *
 * Foreground expansion: Applies rgba to black/white foreground text
 *
 * {{foreground-1}} - used for primary text
 * {{foreground-2}} - used for secondary text/divider
 * {{foreground-3}} - used for disabled text
 * {{foreground-4}} - used for dividers
 *
 */

// In memory generated CSS rules; registered by theme.name
var GENERATED = { };

// In memory storage of defined themes and color palettes (both loaded by CSS, and user specified)
var PALETTES;
var THEMES;

var DARK_FOREGROUND = {
  name: 'dark',
  '1': 'rgba(0,0,0,0.87)',
  '2': 'rgba(0,0,0,0.54)',
  '3': 'rgba(0,0,0,0.26)',
  '4': 'rgba(0,0,0,0.12)'
};
var LIGHT_FOREGROUND = {
  name: 'light',
  '1': 'rgba(255,255,255,1.0)',
  '2': 'rgba(255,255,255,0.7)',
  '3': 'rgba(255,255,255,0.3)',
  '4': 'rgba(255,255,255,0.12)'
};

var DARK_SHADOW = '1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)';
var LIGHT_SHADOW = '';

var DARK_CONTRAST_COLOR = colorToRgbaArray('rgba(0,0,0,0.87)');
var LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgba(255,255,255,0.87');
var STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgb(255,255,255)');

var THEME_COLOR_TYPES = ['primary', 'accent', 'warn', 'background'];
var DEFAULT_COLOR_TYPE = 'primary';

// A color in a theme will use these hues by default, if not specified by user.
var LIGHT_DEFAULT_HUES = {
  'accent': {
    'default': 'A200',
    'hue-1': 'A100',
    'hue-2': 'A400',
    'hue-3': 'A700'
  },
  'background': {
    'default': 'A100',
    'hue-1': '300',
    'hue-2': '800',
    'hue-3': '900'
  }
};

var DARK_DEFAULT_HUES = {
  'background': {
    'default': '800',
    'hue-1': '300',
    'hue-2': '600',
    'hue-3': '900'
  }
};
THEME_COLOR_TYPES.forEach(function(colorType) {
  // Color types with unspecified default hues will use these default hue values
  var defaultDefaultHues = {
    'default': '500',
    'hue-1': '300',
    'hue-2': '800',
    'hue-3': 'A100'
  };
  if (!LIGHT_DEFAULT_HUES[colorType]) LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues;
  if (!DARK_DEFAULT_HUES[colorType]) DARK_DEFAULT_HUES[colorType] = defaultDefaultHues;
});

var VALID_HUE_VALUES = [
  '50', '100', '200', '300', '400', '500', '600',
  '700', '800', '900', 'A100', 'A200', 'A400', 'A700'
];

function ThemingProvider($mdColorPalette) {
  PALETTES = { };
  THEMES = { };

  var themingProvider;
  var defaultTheme = 'default';
  var alwaysWatchTheme = false;

  // Load JS Defined Palettes
  angular.extend(PALETTES, $mdColorPalette);

  // Default theme defined in core.js

  ThemingService.$inject = ["$rootScope", "$log"];
  return themingProvider = {
    definePalette: definePalette,
    extendPalette: extendPalette,
    theme: registerTheme,

    setDefaultTheme: function(theme) {
      defaultTheme = theme;
    },
    alwaysWatchTheme: function(alwaysWatch) {
      alwaysWatchTheme = alwaysWatch;
    },
    $get: ThemingService,
    _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,
    _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,
    _PALETTES: PALETTES,
    _THEMES: THEMES,
    _parseRules: parseRules,
    _rgba: rgba
  };

  // Example: $mdThemingProvider.definePalette('neonRed', { 50: '#f5fafa', ... });
  function definePalette(name, map) {
    map = map || {};
    PALETTES[name] = checkPaletteValid(name, map);
    return themingProvider;
  }

  // Returns an new object which is a copy of a given palette `name` with variables from
  // `map` overwritten
  // Example: var neonRedMap = $mdThemingProvider.extendPalette('red', { 50: '#f5fafafa' });
  function extendPalette(name, map) {
    return checkPaletteValid(name,  angular.extend({}, PALETTES[name] || {}, map) );
  }

  // Make sure that palette has all required hues
  function checkPaletteValid(name, map) {
    var missingColors = VALID_HUE_VALUES.filter(function(field) {
      return !map[field];
    });
    if (missingColors.length) {
      throw new Error("Missing colors %1 in palette %2!"
                      .replace('%1', missingColors.join(', '))
                      .replace('%2', name));
    }

    return map;
  }

  // Register a theme (which is a collection of color palettes to use with various states
  // ie. warn, accent, primary )
  // Optionally inherit from an existing theme
  // $mdThemingProvider.theme('custom-theme').primaryPalette('red');
  function registerTheme(name, inheritFrom) {
    if (THEMES[name]) return THEMES[name];

    inheritFrom = inheritFrom || 'default';

    var parentTheme = typeof inheritFrom === 'string' ? THEMES[inheritFrom] : inheritFrom;
    var theme = new Theme(name);

    if (parentTheme) {
      angular.forEach(parentTheme.colors, function(color, colorType) {
        theme.colors[colorType] = {
          name: color.name,
          // Make sure a COPY of the hues is given to the child color,
          // not the same reference.
          hues: angular.extend({}, color.hues)
        };
      });
    }
    THEMES[name] = theme;

    return theme;
  }

  function Theme(name) {
    var self = this;
    self.name = name;
    self.colors = {};

    self.dark = setDark;
    setDark(false);

    function setDark(isDark) {
      isDark = arguments.length === 0 ? true : !!isDark;

      // If no change, abort
      if (isDark === self.isDark) return;

      self.isDark = isDark;

      self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;
      self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;

      // Light and dark themes have different default hues.
      // Go through each existing color type for this theme, and for every
      // hue value that is still the default hue value from the previous light/dark setting,
      // set it to the default hue value from the new light/dark setting.
      var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES;
      var oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;
      angular.forEach(newDefaultHues, function(newDefaults, colorType) {
        var color = self.colors[colorType];
        var oldDefaults = oldDefaultHues[colorType];
        if (color) {
          for (var hueName in color.hues) {
            if (color.hues[hueName] === oldDefaults[hueName]) {
              color.hues[hueName] = newDefaults[hueName];
            }
          }
        }
      });

      return self;
    }

    THEME_COLOR_TYPES.forEach(function(colorType) {
      var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];
      self[colorType + 'Palette'] = function setPaletteType(paletteName, hues) {
        var color = self.colors[colorType] = {
          name: paletteName,
          hues: angular.extend({}, defaultHues, hues)
        };

        Object.keys(color.hues).forEach(function(name) {
          if (!defaultHues[name]) {
            throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4"
              .replace('%1', name)
              .replace('%2', self.name)
              .replace('%3', paletteName)
              .replace('%4', Object.keys(defaultHues).join(', '))
            );
          }
        });
        Object.keys(color.hues).map(function(key) {
          return color.hues[key];
        }).forEach(function(hueValue) {
          if (VALID_HUE_VALUES.indexOf(hueValue) == -1) {
            throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5"
              .replace('%1', hueValue)
              .replace('%2', self.name)
              .replace('%3', colorType)
              .replace('%4', paletteName)
              .replace('%5', VALID_HUE_VALUES.join(', '))
            );
          }
        });
        return self;
      };

      self[colorType + 'Color'] = function() {
        var args = Array.prototype.slice.call(arguments);
        console.warn('$mdThemingProviderTheme.' + colorType + 'Color() has been deprecated. ' +
                     'Use $mdThemingProviderTheme.' + colorType + 'Palette() instead.');
        return self[colorType + 'Palette'].apply(self, args);
      };
    });
  }

  /**
   * @ngdoc service
   * @name $mdTheming
   *
   * @description
   *
   * Service that makes an element apply theming related classes to itself.
   *
   * ```js
   * app.directive('myFancyDirective', function($mdTheming) {
   *   return {
   *     restrict: 'e',
   *     link: function(scope, el, attrs) {
   *       $mdTheming(el);
   *     }
   *   };
   * });
   * ```
   * @param {el=} element to apply theming to
   */
  /* @ngInject */
  function ThemingService($rootScope, $log) {

    applyTheme.inherit = function(el, parent) {
      var ctrl = parent.controller('mdTheme');

      var attrThemeValue = el.attr('md-theme-watch');
      if ( (alwaysWatchTheme || angular.isDefined(attrThemeValue)) && attrThemeValue != 'false') {
        var deregisterWatch = $rootScope.$watch(function() {
          return ctrl && ctrl.$mdTheme || defaultTheme;
        }, changeTheme);
        el.on('$destroy', deregisterWatch);
      } else {
        var theme = ctrl && ctrl.$mdTheme || defaultTheme;
        changeTheme(theme);
      }

      function changeTheme(theme) {
        if (!registered(theme)) {
          $log.warn('Attempted to use unregistered theme \'' + theme + '\'. ' +
                    'Register it with $mdThemingProvider.theme().');
        }
        var oldTheme = el.data('$mdThemeName');
        if (oldTheme) el.removeClass('md-' + oldTheme +'-theme');
        el.addClass('md-' + theme + '-theme');
        el.data('$mdThemeName', theme);
        if (ctrl) {
          el.data('$mdThemeController', ctrl);
        }
      }
    };

    applyTheme.THEMES = angular.extend({}, THEMES);
    applyTheme.defaultTheme = function() { return defaultTheme; };
    applyTheme.registered = registered;

    return applyTheme;

    function registered(themeName) {
      if (themeName === undefined || themeName === '') return true;
      return applyTheme.THEMES[themeName] !== undefined;
    }

    function applyTheme(scope, el) {
      // Allow us to be invoked via a linking function signature.
      if (el === undefined) {
        el = scope;
        scope = undefined;
      }
      if (scope === undefined) {
        scope = $rootScope;
      }
      applyTheme.inherit(el, el);
    }
  }
}
ThemingProvider.$inject = ["$mdColorPalette"];

function ThemingDirective($mdTheming, $interpolate, $log) {
  return {
    priority: 100,
    link: {
      pre: function(scope, el, attrs) {
        var ctrl = {
          $setTheme: function(theme) {
            if (!$mdTheming.registered(theme)) {
              $log.warn('attempted to use unregistered theme \'' + theme + '\'');
            }
            ctrl.$mdTheme = theme;
          }
        };
        el.data('$mdThemeController', ctrl);
        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));
        attrs.$observe('mdTheme', ctrl.$setTheme);
      }
    }
  };
}
ThemingDirective.$inject = ["$mdTheming", "$interpolate", "$log"];

function ThemableDirective($mdTheming) {
  return $mdTheming;
}
ThemableDirective.$inject = ["$mdTheming"];

function parseRules(theme, colorType, rules) {
  checkValidPalette(theme, colorType);

  rules = rules.replace(/THEME_NAME/g, theme.name);
  var generatedRules = [];
  var color = theme.colors[colorType];

  var themeNameRegex = new RegExp('.md-' + theme.name + '-theme', 'g');
  // Matches '{{ primary-color }}', etc
  var hueRegex = new RegExp('(\'|")?{{\\s*(' + colorType + ')-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|\')?','g');
  var simpleVariableRegex = /'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?\s*\}\}'?"?/g;
  var palette = PALETTES[color.name];

  // find and replace simple variables where we use a specific hue, not an entire palette
  // eg. "{{primary-100}}"
  //\(' + THEME_COLOR_TYPES.join('\|') + '\)'
  rules = rules.replace(simpleVariableRegex, function(match, colorType, hue, opacity) {
    if (colorType === 'foreground') {
      if (hue == 'shadow') {
        return theme.foregroundShadow;
      } else {
        return theme.foregroundPalette[hue] || theme.foregroundPalette['1'];
      }
    }
    if (hue.indexOf('hue') === 0) {
      hue = theme.colors[colorType].hues[hue];
    }
    return rgba( (PALETTES[ theme.colors[colorType].name ][hue] || '').value, opacity );
  });

  // For each type, generate rules for each hue (ie. default, md-hue-1, md-hue-2, md-hue-3)
  angular.forEach(color.hues, function(hueValue, hueName) {
    var newRule = rules
      .replace(hueRegex, function(match, _, colorType, hueType, opacity) {
        return rgba(palette[hueValue][hueType === 'color' ? 'value' : 'contrast'], opacity);
      });
    if (hueName !== 'default') {
      newRule = newRule.replace(themeNameRegex, '.md-' + theme.name + '-theme.md-' + hueName);
    }

    // Don't apply a selector rule to the default theme, making it easier to override
    // styles of the base-component
    if (theme.name == 'default') {
      newRule = newRule.replace(/\.md-default-theme/g, '');
    }
    generatedRules.push(newRule);
  });

  return generatedRules;
}

// Generate our themes at run time given the state of THEMES and PALETTES
function generateThemes($injector) {

  var head = document.getElementsByTagName('head')[0];
  var firstChild = head ? head.firstElementChild : null;
  var themeCss = $injector.has('$MD_THEME_CSS') ? $injector.get('$MD_THEME_CSS') : '';

  if ( !firstChild ) return;
  if (themeCss.length === 0) return; // no rules, so no point in running this expensive task

  // Expose contrast colors for palettes to ensure that text is always readable
  angular.forEach(PALETTES, sanitizePalette);

  // MD_THEME_CSS is a string generated by the build process that includes all the themable
  // components as templates

  // Break the CSS into individual rules
  var rulesByType = {};
  var rules = themeCss
                  .split(/\}(?!(\}|'|"|;))/)
                  .filter(function(rule) { return rule && rule.length; })
                  .map(function(rule) { return rule.trim() + '}'; });


  var ruleMatchRegex = new RegExp('md-(' + THEME_COLOR_TYPES.join('|') + ')', 'g');

  THEME_COLOR_TYPES.forEach(function(type) {
    rulesByType[type] = '';
  });


  // Sort the rules based on type, allowing us to do color substitution on a per-type basis
  rules.forEach(function(rule) {
    var match = rule.match(ruleMatchRegex);
    // First: test that if the rule has '.md-accent', it goes into the accent set of rules
    for (var i = 0, type; type = THEME_COLOR_TYPES[i]; i++) {
      if (rule.indexOf('.md-' + type) > -1) {
        return rulesByType[type] += rule;
      }
    }

    // If no eg 'md-accent' class is found, try to just find 'accent' in the rule and guess from
    // there
    for (i = 0; type = THEME_COLOR_TYPES[i]; i++) {
      if (rule.indexOf(type) > -1) {
        return rulesByType[type] += rule;
      }
    }

    // Default to the primary array
    return rulesByType[DEFAULT_COLOR_TYPE] += rule;
  });

    // For each theme, use the color palettes specified for
    // `primary`, `warn` and `accent` to generate CSS rules.

    angular.forEach(THEMES, function(theme) {
      if ( !GENERATED[theme.name] ) {


        THEME_COLOR_TYPES.forEach(function(colorType) {
          var styleStrings = parseRules(theme, colorType, rulesByType[colorType]);
          while (styleStrings.length) {
            var style = document.createElement('style');
                style.setAttribute('type', 'text/css');
            style.appendChild(document.createTextNode(styleStrings.shift()));
            head.insertBefore(style, firstChild);
          }
        });


        if (theme.colors.primary.name == theme.colors.accent.name) {
          console.warn("$mdThemingProvider: Using the same palette for primary and" +
                       " accent. This violates the material design spec.");
        }

        GENERATED[theme.name] = true;
      }
    });


  // *************************
  // Internal functions
  // *************************

  // The user specifies a 'default' contrast color as either light or dark,
  // then explicitly lists which hues are the opposite contrast (eg. A100 has dark, A200 has light)
  function sanitizePalette(palette) {
    var defaultContrast = palette.contrastDefaultColor;
    var lightColors = palette.contrastLightColors || [];
    var strongLightColors = palette.contrastStrongLightColors || [];
    var darkColors = palette.contrastDarkColors || [];

    // These colors are provided as space-separated lists
    if (typeof lightColors === 'string') lightColors = lightColors.split(' ');
    if (typeof strongLightColors === 'string') strongLightColors = strongLightColors.split(' ');
    if (typeof darkColors === 'string') darkColors = darkColors.split(' ');

    // Cleanup after ourselves
    delete palette.contrastDefaultColor;
    delete palette.contrastLightColors;
    delete palette.contrastStrongLightColors;
    delete palette.contrastDarkColors;

    // Change { 'A100': '#fffeee' } to { 'A100': { value: '#fffeee', contrast:DARK_CONTRAST_COLOR }
    angular.forEach(palette, function(hueValue, hueName) {
      if (angular.isObject(hueValue)) return; // Already converted
      // Map everything to rgb colors
      var rgbValue = colorToRgbaArray(hueValue);
      if (!rgbValue) {
        throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected."
                        .replace('%1', hueValue)
                        .replace('%2', palette.name)
                        .replace('%3', hueName));
      }

      palette[hueName] = {
        value: rgbValue,
        contrast: getContrastColor()
      };
      function getContrastColor() {
        if (defaultContrast === 'light') {
          if (darkColors.indexOf(hueName) > -1) {
            return DARK_CONTRAST_COLOR;
          } else {
            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR
              : LIGHT_CONTRAST_COLOR;
          }
        } else {
          if (lightColors.indexOf(hueName) > -1) {
            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR
              : LIGHT_CONTRAST_COLOR;
          } else {
            return DARK_CONTRAST_COLOR;
          }
        }
      }
    });
  }


}
generateThemes.$inject = ["$injector"];

function checkValidPalette(theme, colorType) {
  // If theme attempts to use a palette that doesnt exist, throw error
  if (!PALETTES[ (theme.colors[colorType] || {}).name ]) {
    throw new Error(
      "You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3"
                    .replace('%1', theme.name)
                    .replace('%2', colorType)
                    .replace('%3', Object.keys(PALETTES).join(', '))
    );
  }
}

function colorToRgbaArray(clr) {
  if (angular.isArray(clr) && clr.length == 3) return clr;
  if (/^rgb/.test(clr)) {
    return clr.replace(/(^\s*rgba?\(|\)\s*$)/g, '').split(',').map(function(value, i) {
      return i == 3 ? parseFloat(value, 10) : parseInt(value, 10);
    });
  }
  if (clr.charAt(0) == '#') clr = clr.substring(1);
  if (!/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) return;

  var dig = clr.length / 3;
  var red = clr.substr(0, dig);
  var grn = clr.substr(dig, dig);
  var blu = clr.substr(dig * 2);
  if (dig === 1) {
    red += red;
    grn += grn;
    blu += blu;
  }
  return [parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16)];
}

function rgba(rgbArray, opacity) {
  if ( !rgbArray ) return "rgb('0,0,0')";

  if (rgbArray.length == 4) {
    rgbArray = angular.copy(rgbArray);
    opacity ? rgbArray.pop() : opacity = rgbArray.pop();
  }
  return opacity && (typeof opacity == 'number' || (typeof opacity == 'string' && opacity.length)) ?
    'rgba(' + rgbArray.join(',') + ',' + opacity + ')' :
    'rgb(' + rgbArray.join(',') + ')';
}


})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.autocomplete
 */
/*
 * @see js folder for autocomplete implementation
 */
angular.module('material.components.autocomplete', [
  'material.core',
  'material.components.icon'
]);

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.bottomSheet
 * @description
 * BottomSheet
 */
angular.module('material.components.bottomSheet', [
  'material.core',
  'material.components.backdrop'
])
  .directive('mdBottomSheet', MdBottomSheetDirective)
  .provider('$mdBottomSheet', MdBottomSheetProvider);

function MdBottomSheetDirective() {
  return {
    restrict: 'E'
  };
}

/**
 * @ngdoc service
 * @name $mdBottomSheet
 * @module material.components.bottomSheet
 *
 * @description
 * `$mdBottomSheet` opens a bottom sheet over the app and provides a simple promise API.
 *
 * ## Restrictions
 *
 * - The bottom sheet's template must have an outer `<md-bottom-sheet>` element.
 * - Add the `md-grid` class to the bottom sheet for a grid layout.
 * - Add the `md-list` class to the bottom sheet for a list layout.
 *
 * @usage
 * <hljs lang="html">
 * <div ng-controller="MyController">
 *   <md-button ng-click="openBottomSheet()">
 *     Open a Bottom Sheet!
 *   </md-button>
 * </div>
 * </hljs>
 * <hljs lang="js">
 * var app = angular.module('app', ['ngMaterial']);
 * app.controller('MyController', function($scope, $mdBottomSheet) {
 *   $scope.openBottomSheet = function() {
 *     $mdBottomSheet.show({
 *       template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'
 *     });
 *   };
 * });
 * </hljs>
 */

 /**
 * @ngdoc method
 * @name $mdBottomSheet#show
 *
 * @description
 * Show a bottom sheet with the specified options.
 *
 * @param {object} options An options object, with the following properties:
 *
 *   - `templateUrl` - `{string=}`: The url of an html template file that will
 *   be used as the content of the bottom sheet. Restrictions: the template must
 *   have an outer `md-bottom-sheet` element.
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual
 *   template string.
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
 *     This scope will be destroyed when the bottom sheet is removed unless `preserveScope` is set to true.
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false
 *   - `controller` - `{string=}`: The controller to associate with this bottom sheet.
 *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will
 *   be used as names of values to inject into the controller. For example,
 *   `locals: {three: 3}` would inject `three` into the controller with the value
 *   of 3.
 *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,
 *   the location of the click will be used as the starting point for the opening animation
 *   of the the dialog.
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values
 *   and the bottom sheet will not open until the promises resolve.
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
 *   - `parent` - `{element=}`: The element to append the bottom sheet to. The `parent` may be a `function`, `string`,
 *   `object`, or null. Defaults to appending to the body of the root element (or the root element) of the application.
 *   e.g. angular.element(document.getElementById('content')) or "#content"
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the bottom sheet is open.
 *     Default true.
 *
 * @returns {promise} A promise that can be resolved with `$mdBottomSheet.hide()` or
 * rejected with `$mdBottomSheet.cancel()`.
 */

/**
 * @ngdoc method
 * @name $mdBottomSheet#hide
 *
 * @description
 * Hide the existing bottom sheet and resolve the promise returned from
 * `$mdBottomSheet.show()`. This call will close the most recently opened/current bottomsheet (if any).
 *
 * @param {*=} response An argument for the resolved promise.
 *
 */

/**
 * @ngdoc method
 * @name $mdBottomSheet#cancel
 *
 * @description
 * Hide the existing bottom sheet and reject the promise returned from
 * `$mdBottomSheet.show()`.
 *
 * @param {*=} response An argument for the rejected promise.
 *
 */

function MdBottomSheetProvider($$interimElementProvider) {
  // how fast we need to flick down to close the sheet, pixels/ms
  var CLOSING_VELOCITY = 0.5;
  var PADDING = 80; // same as css

  bottomSheetDefaults.$inject = ["$animate", "$mdConstant", "$mdUtil", "$mdTheming", "$mdBottomSheet", "$rootElement", "$mdGesture"];
  return $$interimElementProvider('$mdBottomSheet')
    .setDefaults({
      methods: ['disableParentScroll', 'escapeToClose', 'targetEvent'],
      options: bottomSheetDefaults
    });

  /* @ngInject */
  function bottomSheetDefaults($animate, $mdConstant, $mdUtil, $mdTheming, $mdBottomSheet, $rootElement, $mdGesture) {
    var backdrop;

    return {
      themable: true,
      targetEvent: null,
      onShow: onShow,
      onRemove: onRemove,
      escapeToClose: true,
      disableParentScroll: true
    };


    function onShow(scope, element, options) {

      element = $mdUtil.extractElementByName(element, 'md-bottom-sheet');

      // Add a backdrop that will close on click
      backdrop = $mdUtil.createBackdrop(scope, "md-bottom-sheet-backdrop md-opaque");
      backdrop.on('click', function() {
        $mdUtil.nextTick($mdBottomSheet.cancel,true);
      });
      $mdTheming.inherit(backdrop, options.parent);

      $animate.enter(backdrop, options.parent, null);

      var bottomSheet = new BottomSheet(element, options.parent);
      options.bottomSheet = bottomSheet;

      // Give up focus on calling item
      options.targetEvent && angular.element(options.targetEvent.target).blur();
      $mdTheming.inherit(bottomSheet.element, options.parent);

      if (options.disableParentScroll) {
        options.lastOverflow = options.parent.css('overflow');
        options.parent.css('overflow', 'hidden');
      }

      return $animate.enter(bottomSheet.element, options.parent)
        .then(function() {
          var focusable = angular.element(
            element[0].querySelector('button') ||
            element[0].querySelector('a') ||
            element[0].querySelector('[ng-click]')
          );
          focusable.focus();

          if (options.escapeToClose) {
            options.rootElementKeyupCallback = function(e) {
              if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {
                $mdUtil.nextTick($mdBottomSheet.cancel,true);
              }
            };
            $rootElement.on('keyup', options.rootElementKeyupCallback);
          }
        });

    }

    function onRemove(scope, element, options) {

      var bottomSheet = options.bottomSheet;

      $animate.leave(backdrop);
      return $animate.leave(bottomSheet.element).then(function() {
        if (options.disableParentScroll) {
          options.parent.css('overflow', options.lastOverflow);
          delete options.lastOverflow;
        }

        bottomSheet.cleanup();

        // Restore focus
        options.targetEvent && angular.element(options.targetEvent.target).focus();
      });
    }

    /**
     * BottomSheet class to apply bottom-sheet behavior to an element
     */
    function BottomSheet(element, parent) {
      var deregister = $mdGesture.register(parent, 'drag', { horizontal: false });
      parent.on('$md.dragstart', onDragStart)
        .on('$md.drag', onDrag)
        .on('$md.dragend', onDragEnd);

      return {
        element: element,
        cleanup: function cleanup() {
          deregister();
          parent.off('$md.dragstart', onDragStart)
            .off('$md.drag', onDrag)
            .off('$md.dragend', onDragEnd);
        }
      };

      function onDragStart(ev) {
        // Disable transitions on transform so that it feels fast
        element.css($mdConstant.CSS.TRANSITION_DURATION, '0ms');
      }

      function onDrag(ev) {
        var transform = ev.pointer.distanceY;
        if (transform < 5) {
          // Slow down drag when trying to drag up, and stop after PADDING
          transform = Math.max(-PADDING, transform / 2);
        }
        element.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + (PADDING + transform) + 'px,0)');
      }

      function onDragEnd(ev) {
        if (ev.pointer.distanceY > 0 &&
            (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {
          var distanceRemaining = element.prop('offsetHeight') - ev.pointer.distanceY;
          var transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * 0.75, 500);
          element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + 'ms');
          $mdUtil.nextTick($mdBottomSheet.cancel,true);
        } else {
          element.css($mdConstant.CSS.TRANSITION_DURATION, '');
          element.css($mdConstant.CSS.TRANSFORM, '');
        }
      }
    }

  }

}
MdBottomSheetProvider.$inject = ["$$interimElementProvider"];

})();
(function(){
"use strict";

/*
 * @ngdoc module
 * @name material.components.backdrop
 * @description Backdrop
 */

/**
 * @ngdoc directive
 * @name mdBackdrop
 * @module material.components.backdrop
 *
 * @restrict E
 *
 * @description
 * `<md-backdrop>` is a backdrop element used by other components, such as dialog and bottom sheet.
 * Apply class `opaque` to make the backdrop use the theme backdrop color.
 *
 */

angular
  .module('material.components.backdrop', ['material.core'])
  .directive('mdBackdrop', ["$mdTheming", "$animate", "$rootElement", "$window", "$log", "$$rAF", "$document", function BackdropDirective($mdTheming, $animate, $rootElement, $window, $log, $$rAF, $document) {
    var ERROR_CSS_POSITION = "<md-backdrop> may not work properly in a scrolled, static-positioned parent container.";

    return {
      restrict: 'E',
      link: postLink
    };

    function postLink(scope, element, attrs) {

      // If body scrolling has been disabled using mdUtil.disableBodyScroll(),
      // adjust the 'backdrop' height to account for the fixed 'body' top offset
      var body = $window.getComputedStyle($document[0].body);
      if (body.position == 'fixed') {
        var hViewport = parseInt(body.height, 10) + Math.abs(parseInt(body.top, 10));
        element.css({
          height: hViewport + 'px'
        });
      }

      // backdrop may be outside the $rootElement, tell ngAnimate to animate regardless
      if ($animate.pin) $animate.pin(element, $rootElement);

      $$rAF(function () {

        // Often $animate.enter() is used to append the backDrop element
        // so let's wait until $animate is done...
        var parent = element.parent()[0];
        if (parent) {
          var styles = $window.getComputedStyle(parent);
          if (styles.position == 'static') {
            // backdrop uses position:absolute and will not work properly with parent position:static (default)
            $log.warn(ERROR_CSS_POSITION);
          }
        }

        $mdTheming.inherit(element, element.parent());
      });

    }

  }]);

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.card
 *
 * @description
 * Card components.
 */
angular.module('material.components.card', [
  'material.core'
])
  .directive('mdCard', mdCardDirective);



/**
 * @ngdoc directive
 * @name mdCard
 * @module material.components.card
 *
 * @restrict E
 *
 * @description
 * The `<md-card>` directive is a container element used within `<md-content>` containers.
 *
 * An image included as a direct descendant will fill the card's width, while the `<md-card-content>`
 * container will wrap text content and provide padding. An `<md-card-footer>` element can be
 * optionally included to put content flush against the bottom edge of the card.
 *
 * Action buttons can be included in an element with the `.md-actions` class, also used in `md-dialog`.
 * You can then position buttons using layout attributes.
 *
 * Cards have constant width and variable heights; where the maximum height is limited to what can
 * fit within a single view on a platform, but it can temporarily expand as needed.
 *
 * @usage
 * ###Card with optional footer
 * <hljs lang="html">
 * <md-card>
 *  <img src="card-image.png" class="md-card-image" alt="image caption">
 *  <md-card-content>
 *    <h2>Card headline</h2>
 *    <p>Card content</p>
 *  </md-card-content>
 *  <md-card-footer>
 *    Card footer
 *  </md-card-footer>
 * </md-card>
 * </hljs>
 *
 * ###Card with actions
 * <hljs lang="html">
 * <md-card>
 *  <img src="card-image.png" class="md-card-image" alt="image caption">
 *  <md-card-content>
 *    <h2>Card headline</h2>
 *    <p>Card content</p>
 *  </md-card-content>
 *  <div class="md-actions" layout="row" layout-align="end center">
 *    <md-button>Action 1</md-button>
 *    <md-button>Action 2</md-button>
 *  </div>
 * </md-card>
 * </hljs>
 *
 */
function mdCardDirective($mdTheming) {
  return {
    restrict: 'E',
    link: function($scope, $element, $attr) {
      $mdTheming($element);
    }
  };
}
mdCardDirective.$inject = ["$mdTheming"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.checkbox
 * @description Checkbox module!
 */
angular
  .module('material.components.checkbox', ['material.core'])
  .directive('mdCheckbox', MdCheckboxDirective);

/**
 * @ngdoc directive
 * @name mdCheckbox
 * @module material.components.checkbox
 * @restrict E
 *
 * @description
 * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the checkbox is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * @param {string} ng-model Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects
 * @param {string=} aria-label Adds label to checkbox for accessibility.
 * Defaults to checkbox's text. If no default text is found, a warning will be logged.
 *
 * @usage
 * <hljs lang="html">
 * <md-checkbox ng-model="isChecked" aria-label="Finished?">
 *   Finished ?
 * </md-checkbox>
 *
 * <md-checkbox md-no-ink ng-model="hasInk" aria-label="No Ink Effects">
 *   No Ink Effects
 * </md-checkbox>
 *
 * <md-checkbox ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">
 *   Disabled
 * </md-checkbox>
 *
 * </hljs>
 *
 */
function MdCheckboxDirective(inputDirective, $mdInkRipple, $mdAria, $mdConstant, $mdTheming, $mdUtil, $timeout) {
  inputDirective = inputDirective[0];
  var CHECKED_CSS = 'md-checked';

  return {
    restrict: 'E',
    transclude: true,
    require: '?ngModel',
    priority:210, // Run before ngAria
    template: 
      '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' +
        '<div class="md-icon"></div>' +
      '</div>' +
      '<div ng-transclude class="md-label"></div>',
    compile: compile
  };

  // **********************************************************
  // Private Methods
  // **********************************************************

  function compile (tElement, tAttrs) {

    tAttrs.type = 'checkbox';
    tAttrs.tabindex = tAttrs.tabindex || '0';
    tElement.attr('role', tAttrs.type);

    return function postLink(scope, element, attr, ngModelCtrl) {
      ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();
      $mdTheming(element);

      if (attr.ngChecked) {
        scope.$watch(
            scope.$eval.bind(scope, attr.ngChecked),
            ngModelCtrl.$setViewValue.bind(ngModelCtrl)
        );
      }
      $$watchExpr('ngDisabled', 'tabindex', {
        true: '-1',
        false: attr.tabindex
      });
      $mdAria.expectWithText(element, 'aria-label');

      // Reuse the original input[type=checkbox] directive from Angular core.
      // This is a bit hacky as we need our own event listener and own render
      // function.
      inputDirective.link.pre(scope, {
        on: angular.noop,
        0: {}
      }, attr, [ngModelCtrl]);

      scope.mouseActive = false;
      element.on('click', listener)
        .on('keypress', keypressHandler)
        .on('mousedown', function() {
          scope.mouseActive = true;
          $timeout(function(){
            scope.mouseActive = false;
          }, 100);
        })
        .on('focus', function() {
          if(scope.mouseActive === false) { element.addClass('md-focused'); }
        })
        .on('blur', function() { element.removeClass('md-focused'); });

      ngModelCtrl.$render = render;

      function $$watchExpr(expr, htmlAttr, valueOpts) {
        if (attr[expr]) {
          scope.$watch(attr[expr], function(val) {
            if (valueOpts[val]) {
              element.attr(htmlAttr, valueOpts[val]);
            }
          });
        }
      }

      function keypressHandler(ev) {
        var keyCode = ev.which || ev.keyCode;
        if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {
          ev.preventDefault();
          if (!element.hasClass('md-focused')) { element.addClass('md-focused'); }
          listener(ev);
        }
      }
      function listener(ev) {
        if (element[0].hasAttribute('disabled')) return;

        scope.$apply(function() {
          // Toggle the checkbox value...
          var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;

          ngModelCtrl.$setViewValue( viewValue, ev && ev.type);
          ngModelCtrl.$render();
        });
      }

      function render() {
        if(ngModelCtrl.$viewValue) {
          element.addClass(CHECKED_CSS);
        } else {
          element.removeClass(CHECKED_CSS);
        }
      }
    };
  }
}
MdCheckboxDirective.$inject = ["inputDirective", "$mdInkRipple", "$mdAria", "$mdConstant", "$mdTheming", "$mdUtil", "$timeout"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.content
 *
 * @description
 * Scrollable content
 */
angular.module('material.components.content', [
  'material.core'
])
  .directive('mdContent', mdContentDirective);

/**
 * @ngdoc directive
 * @name mdContent
 * @module material.components.content
 *
 * @restrict E
 *
 * @description
 * The `<md-content>` directive is a container element useful for scrollable content
 *
 * @usage
 *
 * - Add the `[layout-padding]` attribute to make the content padded.
 *
 * <hljs lang="html">
 *  <md-content layout-padding>
 *      Lorem ipsum dolor sit amet, ne quod novum mei.
 *  </md-content>
 * </hljs>
 *
 */

function mdContentDirective($mdTheming) {
  return {
    restrict: 'E',
    controller: ['$scope', '$element', ContentController],
    link: function(scope, element, attr) {
      var node = element[0];

      $mdTheming(element);
      scope.$broadcast('$mdContentLoaded', element);

      iosScrollFix(element[0]);
    }
  };

  function ContentController($scope, $element) {
    this.$scope = $scope;
    this.$element = $element;
  }
}
mdContentDirective.$inject = ["$mdTheming"];

function iosScrollFix(node) {
  // IOS FIX:
  // If we scroll where there is no more room for the webview to scroll,
  // by default the webview itself will scroll up and down, this looks really
  // bad.  So if we are scrolling to the very top or bottom, add/subtract one
  angular.element(node).on('$md.pressdown', function(ev) {
    // Only touch events
    if (ev.pointer.type !== 't') return;
    // Don't let a child content's touchstart ruin it for us.
    if (ev.$materialScrollFixed) return;
    ev.$materialScrollFixed = true;

    if (node.scrollTop === 0) {
      node.scrollTop = 1;
    } else if (node.scrollHeight === node.scrollTop + node.offsetHeight) {
      node.scrollTop -= 1;
    }
  });
}

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.button
 * @description
 *
 * Button
 */
angular
    .module('material.components.button', [ 'material.core' ])
    .directive('mdButton', MdButtonDirective);

/**
 * @ngdoc directive
 * @name mdButton
 * @module material.components.button
 *
 * @restrict E
 *
 * @description
 * `<md-button>` is a button directive with optional ink ripples (default enabled).
 *
 * If you supply a `href` or `ng-href` attribute, it will become an `<a>` element. Otherwise, it will
 * become a `<button>` element. As per the [Material Design specifications](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the FAB button background is filled with the accent color [by default]. The primary color palette may be used with
 * the `md-primary` class.
 *
 * @param {boolean=} md-no-ink If present, disable ripple ink effects.
 * @param {expression=} ng-disabled En/Disable based on the expression
 * @param {string=} md-ripple-size Overrides the default ripple size logic. Options: `full`, `partial`, `auto`
 * @param {string=} aria-label Adds alternative text to button for accessibility, useful for icon buttons.
 * If no default text is found, a warning will be logged.
 *
 * @usage
 *
 * Regular buttons:
 *
 * <hljs lang="html">
 *  <md-button> Flat Button </md-button>
 *  <md-button href="http://google.com"> Flat link </md-button>
 *  <md-button class="md-raised"> Raised Button </md-button>
 *  <md-button ng-disabled="true"> Disabled Button </md-button>
 *  <md-button>
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>
 *    Register Now
 *  </md-button>
 * </hljs>
 *
 * FAB buttons:
 *
 * <hljs lang="html">
 *  <md-button class="md-fab" aria-label="FAB">
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>
 *  </md-button>
 *  <!-- mini-FAB -->
 *  <md-button class="md-fab md-mini" aria-label="Mini FAB">
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>
 *  </md-button>
 *  <!-- Button with SVG Icon -->
 *  <md-button class="md-icon-button" aria-label="Custom Icon Button">
 *    <md-icon md-svg-icon="path/to/your.svg"></md-icon>
 *  </md-button>
 * </hljs>
 */
function MdButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $timeout) {

  return {
    restrict: 'EA',
    replace: true,
    transclude: true,
    template: getTemplate,
    link: postLink
  };

  function isAnchor(attr) {
    return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref) || angular.isDefined(attr.ngLink) || angular.isDefined(attr.uiSref);
  }

  function getTemplate(element, attr) {
    return isAnchor(attr) ?
           '<a class="md-button" ng-transclude></a>' :
           '<button class="md-button" ng-transclude></button>';
  }

  function postLink(scope, element, attr) {
    var node = element[0];
    $mdTheming(element);
    $mdButtonInkRipple.attach(scope, element);

    var elementHasText = node.textContent.trim();
    if (!elementHasText) {
      $mdAria.expect(element, 'aria-label');
    }

    // For anchor elements, we have to set tabindex manually when the
    // element is disabled
    if (isAnchor(attr) && angular.isDefined(attr.ngDisabled) ) {
      scope.$watch(attr.ngDisabled, function(isDisabled) {
        element.attr('tabindex', isDisabled ? -1 : 0);
      });
    }

    // disabling click event when disabled is true
    element.on('click', function(e){
      if (attr.disabled === true) {
        e.preventDefault();
        e.stopImmediatePropagation();
      }
    });

    // restrict focus styles to the keyboard
    scope.mouseActive = false;
    element.on('mousedown', function() {
        scope.mouseActive = true;
        $timeout(function(){
          scope.mouseActive = false;
        }, 100);
      })
      .on('focus', function() {
        if(scope.mouseActive === false) { element.addClass('md-focused'); }
      })
      .on('blur', function() { element.removeClass('md-focused'); });
  }

}
MdButtonDirective.$inject = ["$mdButtonInkRipple", "$mdTheming", "$mdAria", "$timeout"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.divider
 * @description Divider module!
 */
angular.module('material.components.divider', [
  'material.core'
])
  .directive('mdDivider', MdDividerDirective);

/**
 * @ngdoc directive
 * @name mdDivider
 * @module material.components.divider
 * @restrict E
 *
 * @description
 * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.
 *
 * @param {boolean=} md-inset Add this attribute to activate the inset divider style.
 * @usage
 * <hljs lang="html">
 * <md-divider></md-divider>
 *
 * <md-divider md-inset></md-divider>
 * </hljs>
 *
 */
function MdDividerDirective($mdTheming) {
  return {
    restrict: 'E',
    link: $mdTheming
  };
}
MdDividerDirective.$inject = ["$mdTheming"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.chips
 */
/*
 * @see js folder for chips implementation
 */
angular.module('material.components.chips', [
  'material.core',
  'material.components.autocomplete'
]);

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.dialog
 */
angular.module('material.components.dialog', [
  'material.core',
  'material.components.backdrop'
])
  .directive('mdDialog', MdDialogDirective)
  .provider('$mdDialog', MdDialogProvider);

function MdDialogDirective($$rAF, $mdTheming) {
  return {
    restrict: 'E',
    link: function (scope, element, attr) {
      $mdTheming(element);
      $$rAF(function () {
        var images;
        var content = element[0].querySelector('md-dialog-content');

        if (content) {
          images = content.getElementsByTagName('img');
          addOverflowClass();
          //-- delayed image loading may impact scroll height, check after images are loaded
          angular.element(images).on('load', addOverflowClass);
        }
        function addOverflowClass() {
          element.toggleClass('md-content-overflow', content.scrollHeight > content.clientHeight);
        }
      });
    }
  };
}
MdDialogDirective.$inject = ["$$rAF", "$mdTheming"];

/**
 * @ngdoc service
 * @name $mdDialog
 * @module material.components.dialog
 *
 * @description
 * `$mdDialog` opens a dialog over the app to inform users about critical information or require
 *  them to make decisions. There are two approaches for setup: a simple promise API
 *  and regular object syntax.
 *
 * ## Restrictions
 *
 * - The dialog is always given an isolate scope.
 * - The dialog's template must have an outer `<md-dialog>` element.
 *   Inside, use an `<md-dialog-content>` element for the dialog's content, and use
 *   an element with class `md-actions` for the dialog's actions.
 * - Dialogs must cover the entire application to keep interactions inside of them.
 * Use the `parent` option to change where dialogs are appended.
 *
 * ## Sizing
 * - Complex dialogs can be sized with `flex="percentage"`, i.e. `flex="66"`.
 * - Default max-width is 80% of the `rootElement` or `parent`.
 *
 * @usage
 * <hljs lang="html">
 * <div  ng-app="demoApp" ng-controller="EmployeeController">
 *   <div>
 *     <md-button ng-click="showAlert()" class="md-raised md-warn">
 *       Employee Alert!
 *       </md-button>
 *   </div>
 *   <div>
 *     <md-button ng-click="showDialog($event)" class="md-raised">
 *       Custom Dialog
 *       </md-button>
 *   </div>
 *   <div>
 *     <md-button ng-click="closeAlert()" ng-disabled="!hasAlert()" class="md-raised">
 *       Close Alert
 *     </md-button>
 *   </div>
 *   <div>
 *     <md-button ng-click="showGreeting($event)" class="md-raised md-primary" >
 *       Greet Employee
 *       </md-button>
 *   </div>
 * </div>
 * </hljs>
 *
 * ### JavaScript: object syntax
 * <hljs lang="js">
 * (function(angular, undefined){
 *   "use strict";
 *
 *   angular
 *    .module('demoApp', ['ngMaterial'])
 *    .controller('AppCtrl', AppController);
 *
 *   function AppController($scope, $mdDialog) {
 *     var alert;
 *     $scope.showAlert = showAlert;
 *     $scope.showDialog = showDialog;
 *     $scope.items = [1, 2, 3];
 *
 *     // Internal method
 *     function showAlert() {
 *       alert = $mdDialog.alert({
 *         title: 'Attention',
 *         content: 'This is an example of how easy dialogs can be!',
 *         ok: 'Close'
 *       });
 *
 *       $mdDialog
 *         .show( alert )
 *         .finally(function() {
 *           alert = undefined;
 *         });
 *     }
 *
 *     function showDialog($event) {
 *        var parentEl = angular.element(document.body);
 *        $mdDialog.show({
 *          parent: parentEl,
 *          targetEvent: $event,
 *          template:
 *            '<md-dialog aria-label="List dialog">' +
 *            '  <md-dialog-content>'+
 *            '    <md-list>'+
 *            '      <md-list-item ng-repeat="item in items">'+
 *            '       <p>Number {{item}}</p>' +
 *            '      </md-item>'+
 *            '    </md-list>'+
 *            '  </md-dialog-content>' +
 *            '  <div class="md-actions">' +
 *            '    <md-button ng-click="closeDialog()" class="md-primary">' +
 *            '      Close Dialog' +
 *            '    </md-button>' +
 *            '  </div>' +
 *            '</md-dialog>',
 *          locals: {
 *            items: $scope.items
 *          },
 *          controller: DialogController
 *       });
 *       function DialogController($scope, $mdDialog, items) {
 *         $scope.items = items;
 *         $scope.closeDialog = function() {
 *           $mdDialog.hide();
 *         }
 *       }
 *     }
 *   }
 * })(angular);
 * </hljs>
 *
 * ### JavaScript: promise API syntax, custom dialog template
 * <hljs lang="js">
 * (function(angular, undefined){
 *   "use strict";
 *
 *   angular
 *     .module('demoApp', ['ngMaterial'])
 *     .controller('EmployeeController', EmployeeEditor)
 *     .controller('GreetingController', GreetingController);
 *
 *   // Fictitious Employee Editor to show how to use simple and complex dialogs.
 *
 *   function EmployeeEditor($scope, $mdDialog) {
 *     var alert;
 *
 *     $scope.showAlert = showAlert;
 *     $scope.closeAlert = closeAlert;
 *     $scope.showGreeting = showCustomGreeting;
 *
 *     $scope.hasAlert = function() { return !!alert };
 *     $scope.userName = $scope.userName || 'Bobby';
 *
 *     // Dialog #1 - Show simple alert dialog and cache
 *     // reference to dialog instance
 *
 *     function showAlert() {
 *       alert = $mdDialog.alert()
 *         .title('Attention, ' + $scope.userName)
 *         .content('This is an example of how easy dialogs can be!')
 *         .ok('Close');
 *
 *       $mdDialog
 *           .show( alert )
 *           .finally(function() {
 *             alert = undefined;
 *           });
 *     }
 *
 *     // Close the specified dialog instance and resolve with 'finished' flag
 *     // Normally this is not needed, just use '$mdDialog.hide()' to close
 *     // the most recent dialog popup.
 *
 *     function closeAlert() {
 *       $mdDialog.hide( alert, "finished" );
 *       alert = undefined;
 *     }
 *
 *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.
 *
 *     function showCustomGreeting($event) {
 *         $mdDialog.show({
 *           targetEvent: $event,
 *           template:
 *             '<md-dialog>' +
 *
 *             '  <md-dialog-content>Hello {{ employee }}!</md-dialog-content>' +
 *
 *             '  <div class="md-actions">' +
 *             '    <md-button ng-click="closeDialog()" class="md-primary">' +
 *             '      Close Greeting' +
 *             '    </md-button>' +
 *             '  </div>' +
 *             '</md-dialog>',
 *           controller: 'GreetingController',
 *           onComplete: afterShowAnimation,
 *           locals: { employee: $scope.userName }
 *         });
 *
 *         // When the 'enter' animation finishes...
 *
 *         function afterShowAnimation(scope, element, options) {
 *            // post-show code here: DOM element focus, etc.
 *         }
 *     }
 *
 *     // Dialog #3 - Demonstrate use of ControllerAs and passing $scope to dialog
 *     //             Here we used ng-controller="GreetingController as vm" and
 *     //             $scope.vm === <controller instance>
 *
 *     function showCustomGreeting() {
 *
 *        $mdDialog.show({
 *           clickOutsideToClose: true,
 *
 *           scope: $scope,        // use parent scope in template
 *           preserveScope: true,  // do not forget this if use parent scope

 *           // Since GreetingController is instantiated with ControllerAs syntax
 *           // AND we are passing the parent '$scope' to the dialog, we MUST
 *           // use 'vm.<xxx>' in the template markup
 *
 *           template: '<md-dialog>' +
 *                     '  <md-dialog-content>' +
 *                     '     Hi There {{vm.employee}}' +
 *                     '  </md-dialog-content>' +
 *                     '</md-dialog>',
 *
 *           controller: function DialogController($scope, $mdDialog) {
 *             $scope.closeDialog = function() {
 *               $mdDialog.hide();
 *             }
 *           }
 *        });
 *     }
 *
 *   }
 *
 *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog
 *
 *   function GreetingController($scope, $mdDialog, employee) {
 *     // Assigned from construction <code>locals</code> options...
 *     $scope.employee = employee;
 *
 *     $scope.closeDialog = function() {
 *       // Easily hides most recent dialog shown...
 *       // no specific instance reference is needed.
 *       $mdDialog.hide();
 *     };
 *   }
 *
 * })(angular);
 * </hljs>
 */

/**
 * @ngdoc method
 * @name $mdDialog#alert
 *
 * @description
 * Builds a preconfigured dialog with the specified message.
 *
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:
 *
 * - $mdDialogPreset#title(string) - sets title to string
 * - $mdDialogPreset#content(string) - sets content / message to string
 * - $mdDialogPreset#ok(string) - sets okay button text to string
 * - $mdDialogPreset#theme(string) - sets the theme of the dialog
 *
 */

/**
 * @ngdoc method
 * @name $mdDialog#confirm
 *
 * @description
 * Builds a preconfigured dialog with the specified message. You can call show and the promise returned
 * will be resolved only if the user clicks the confirm action on the dialog.
 *
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:
 *
 * Additionally, it supports the following methods:
 *
 * - $mdDialogPreset#title(string) - sets title to string
 * - $mdDialogPreset#content(string) - sets content / message to string
 * - $mdDialogPreset#ok(string) - sets okay button text to string
 * - $mdDialogPreset#cancel(string) - sets cancel button text to string
 * - $mdDialogPreset#theme(string) - sets the theme of the dialog
 *
 */

/**
 * @ngdoc method
 * @name $mdDialog#show
 *
 * @description
 * Show a dialog with the specified options.
 *
 * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and
 * `confirm()`, or an options object with the following properties:
 *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content
 *   of the dialog.
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual template string.
 *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,
 *     the location of the click will be used as the starting point for the opening animation
 *     of the the dialog.
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified,
 *     it will create a new isolate scope.
 *     This scope will be destroyed when the dialog is removed unless `preserveScope` is set to true.
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.
 *     Default true.
 *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.
 *     Default true.
 *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to
 *     close it. Default false.
 *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.
 *     Default true.
 *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on open. Only disable if
 *     focusing some other way, as focus management is required for dialogs to be accessible.
 *     Defaults to true.
 *   - `controller` - `{string=}`: The controller to associate with the dialog. The controller
 *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.
 *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names
 *     of values to inject into the controller. For example, `locals: {three: 3}` would inject
 *     `three` into the controller, with the value 3. If `bindToController` is true, they will be
 *     copied to the controller instead.
 *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.
 *     These values will not be available until after initialization.
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the
 *     dialog will not open until all of the promises resolve.
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
 *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending
 *     to the root element of the application.
 *   - `onComplete` `{function=}`: Callback function used to announce when the show() action is
 *     finished.
 *   - `onRemoving` `{function=} Callback function used to announce the close/hide() action is
 *     starting. This allows developers to run custom animations in parallel the close animations.
 *
 * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or
 * rejected with `$mdDialog.cancel()`.
 */

/**
 * @ngdoc method
 * @name $mdDialog#hide
 *
 * @description
 * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.
 *
 * @param {*=} response An argument for the resolved promise.
 *
 * @returns {promise} A promise that is resolved when the dialog has been closed.
 */

/**
 * @ngdoc method
 * @name $mdDialog#cancel
 *
 * @description
 * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.
 *
 * @param {*=} response An argument for the rejected promise.
 *
 * @returns {promise} A promise that is resolved when the dialog has been closed.
 */

function MdDialogProvider($$interimElementProvider) {

  advancedDialogOptions.$inject = ["$mdDialog", "$mdTheming"];
  dialogDefaultOptions.$inject = ["$mdDialog", "$mdAria", "$mdUtil", "$mdConstant", "$animate", "$document", "$window", "$rootElement"];
  return $$interimElementProvider('$mdDialog')
    .setDefaults({
      methods: ['disableParentScroll', 'hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent', 'parent'],
      options: dialogDefaultOptions
    })
    .addPreset('alert', {
      methods: ['title', 'content', 'ariaLabel', 'ok', 'theme'],
      options: advancedDialogOptions
    })
    .addPreset('confirm', {
      methods: ['title', 'content', 'ariaLabel', 'ok', 'cancel', 'theme'],
      options: advancedDialogOptions
    });

  /* @ngInject */
  function advancedDialogOptions($mdDialog, $mdTheming) {
    return {
      template: [
        '<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}">',
        ' <md-dialog-content role="document" tabIndex="-1">',
        '   <h2 class="md-title">{{ dialog.title }}</h2>',
        '   <p>{{ dialog.content }}</p>',
        ' </md-dialog-content>',
        ' <div class="md-actions">',
        '   <md-button ng-if="dialog.$type == \'confirm\'"' +
        '     ng-click="dialog.abort()" class="md-primary">',
        '     {{ dialog.cancel }}',
        '   </md-button>',
        '   <md-button ng-click="dialog.hide()" class="md-primary">',
        '     {{ dialog.ok }}',
        '   </md-button>',
        ' </div>',
        '</md-dialog>'
      ].join('').replace(/\s\s+/g, ''),
      controller: function mdDialogCtrl() {
        this.hide = function () {
          $mdDialog.hide(true);
        };
        this.abort = function () {
          $mdDialog.cancel();
        };
      },
      controllerAs: 'dialog',
      bindToController: true,
      theme: $mdTheming.defaultTheme()
    };
  }

  /* @ngInject */
  function dialogDefaultOptions($mdDialog, $mdAria, $mdUtil, $mdConstant, $animate, $document, $window, $rootElement) {
    return {
      hasBackdrop: true,
      isolateScope: true,
      onShow: onShow,
      onRemove: onRemove,
      clickOutsideToClose: false,
      escapeToClose: true,
      targetEvent: null,
      focusOnOpen: true,
      disableParentScroll: true,
      transformTemplate: function (template) {
        return '<div class="md-dialog-container">' + template + '</div>';
      }
    };

    /**
     * Show method for dialogs
     */
    function onShow(scope, element, options) {
      element = $mdUtil.extractElementByName(element, 'md-dialog');
      angular.element($document[0].body).addClass('md-dialog-is-showing');

      captureSourceAndParent(element, options);
      configureAria(element.find('md-dialog'), options);
      showBackdrop(scope, element, options);

      return dialogPopIn(element, options)
        .then(function () {
          activateListeners(element, options);
          lockScreenReader(element, options);
          focusOnOpen();
        });

      /**
       * For alerts, focus on content... otherwise focus on
       * the close button (or equivalent)
       */
      function focusOnOpen() {
        if (options.focusOnOpen) {
          var target = (options.$type === 'alert') ? element.find('md-dialog-content') : findCloseButton();
          target.focus();
        }

        function findCloseButton() {
          //If no element with class dialog-close, try to find the last
          //button child in md-actions and assume it is a close button
          var closeButton = element[0].querySelector('.dialog-close');
          if (!closeButton) {
            var actionButtons = element[0].querySelectorAll('.md-actions button');
            closeButton = actionButtons[actionButtons.length - 1];
          }
          return angular.element(closeButton);
        }
      }

    }

    /**
     * Remove function for all dialogs
     */
    function onRemove(scope, element, options) {
      options.deactivateListeners();
      options.unlockScreenReader();

      options.hideBackdrop();

      return dialogPopOut(element, options)
        .finally(function () {
          angular.element($document[0].body).removeClass('md-dialog-is-showing');
          element.remove();

          options.origin.focus();
        });
    }

    /**
     * Capture originator/trigger element information (if available)
     * and the parent container for the dialog; defaults to the $rootElement
     * unless overridden in the options.parent
     */
    function captureSourceAndParent(element, options) {
      var origin = {element: null, bounds: null, focus: angular.noop};
      options.origin = angular.extend({}, origin, options.origin || {});

      var source = angular.element((options.targetEvent || {}).target);
      if (source && source.length) {
        // Compute and save the target element's bounding rect, so that if the
        // element is hidden when the dialog closes, we can shrink the dialog
        // back to the same position it expanded from.
        options.origin.element = source;
        options.origin.bounds = source[0].getBoundingClientRect();
        options.origin.focus = function () {
          source.focus();
        }
      }

      // In case the user provides a raw dom element, always wrap it in jqLite
      options.parent = angular.element(options.parent || $rootElement);

      if (options.disableParentScroll) {
        options.restoreScroll = $mdUtil.disableScrollAround(element, options.parent);
      }
    }

    /**
     * Listen for escape keys and outside clicks to auto close
     */
    function activateListeners(element, options) {
      var removeListeners = [];
      var smartClose = function () {
        // Only 'confirm' dialogs have a cancel button... escape/clickOutside will
        // cancel or fallback to hide.
        var closeFn = ( options.$type == 'alert' ) ? $mdDialog.hide : $mdDialog.cancel;

        $mdUtil.nextTick(closeFn, true);
      };

      if (options.escapeToClose) {
        var target = options.parent;
        var keyHandlerFn = function (ev) {
          if (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE) {
            ev.stopPropagation();
            ev.preventDefault();

            smartClose();
          }
        };

        // Add keyup listeners
        element.on('keyup', keyHandlerFn);
        target.on('keyup', keyHandlerFn);

        // Queue remove listeners function
        removeListeners.push(function () {
          element.off('keyup', keyHandlerFn);
          target.off('keyup', keyHandlerFn);
        });
      }
      if (options.clickOutsideToClose) {
        var target = element;
        var clickHandler = function (ev) {
          // Only close if we click the flex container outside on the backdrop
          if (ev.target === target[0]) {
            ev.stopPropagation();
            ev.preventDefault();

            smartClose();
          }
        };

        // Add click listeners
        target.on('click', clickHandler);

        // Queue remove listeners function
        removeListeners.push(function () {
          target.off('click', clickHandler);
        });
      }

      // Attach specific `remove` listener handler
      options.deactivateListeners = function () {
        removeListeners.forEach(function (removeFn) {
          removeFn();
        });
        options.deactivateListeners = null;
      };
    }

    /**
     * Show modal backdrop element...
     */
    function showBackdrop(scope, element, options) {

      if (options.hasBackdrop) {
        options.backdrop = $mdUtil.createBackdrop(scope, "md-dialog-backdrop md-opaque");
        $animate.enter(options.backdrop, options.parent);
      }

      /**
       * Hide modal backdrop element...
       */
      options.hideBackdrop = function hideBackdrop() {
        if (options.backdrop) {
          $animate.leave(options.backdrop);
        }
        if (options.disableParentScroll) {
          options.restoreScroll();
        }

        options.hideBackdrop = null;
      }
    }

    /**
     * Inject ARIA-specific attributes appropriate for Dialogs
     */
    function configureAria(element, options) {

      var role = (options.$type === 'alert') ? 'alertdialog' : 'dialog';
      var dialogContent = element.find('md-dialog-content');
      var dialogId = element.attr('id') || ('dialog_' + $mdUtil.nextUid());

      element.attr({
        'role': role,
        'tabIndex': '-1'
      });

      if (dialogContent.length === 0) {
        dialogContent = element;
      }

      dialogContent.attr('id', dialogId);
      element.attr('aria-describedby', dialogId);

      if (options.ariaLabel) {
        $mdAria.expect(element, 'aria-label', options.ariaLabel);
      }
      else {
        $mdAria.expectAsync(element, 'aria-label', function () {
          var words = dialogContent.text().split(/\s+/);
          if (words.length > 3) words = words.slice(0, 3).concat('...');
          return words.join(' ');
        });
      }
    }

    /**
     * Prevents screen reader interaction behind modal window
     * on swipe interfaces
     */
    function lockScreenReader(element, options) {
      var isHidden = true;

      // get raw DOM node
      walkDOM(element[0]);

      options.unlockScreenReader = function () {
        isHidden = false;
        walkDOM(element[0]);

        options.unlockScreenReader = null;
      };

      /**
       * Walk DOM to apply or remove aria-hidden on sibling nodes
       * and parent sibling nodes
       *
       */
      function walkDOM(element) {
        while (element.parentNode) {
          if (element === document.body) {
            return;
          }
          var children = element.parentNode.children;
          for (var i = 0; i < children.length; i++) {
            // skip over child if it is an ascendant of the dialog
            // or a script or style tag
            if (element !== children[i] && !isNodeOneOf(children[i], ['SCRIPT', 'STYLE'])) {
              children[i].setAttribute('aria-hidden', isHidden);
            }
          }

          walkDOM(element = element.parentNode);
        }
      }
    }

    /**
     * Ensure the dialog container fill-stretches to the viewport
     */
    function stretchDialogContainerToViewport(container, options) {

      var isFixed = $window.getComputedStyle($document[0].body).position == 'fixed';
      var backdrop = options.backdrop ? $window.getComputedStyle(options.backdrop[0]) : null;
      var height = backdrop ? Math.ceil(Math.abs(parseInt(backdrop.height, 10))) : 0;

      container.css({
        top: (isFixed ? $mdUtil.scrollTop(options.parent) / 2 : 0) + 'px',
        height: height ? height + 'px' : '100%'
      });

      return container;
    }

    /**
     *  Dialog open and pop-in animation
     */
    function dialogPopIn(container, options) {

      // Add the `md-dialog-container` to the DOM
      options.parent.append(container);
      stretchDialogContainerToViewport(container, options);

      var dialogEl = container.find('md-dialog');
      var animator = $mdUtil.dom.animator;
      var buildTranslateToOrigin = animator.calculateZoomToOrigin;
      var translateOptions = {transitionInClass: 'md-transition-in', transitionOutClass: 'md-transition-out'};
      var from = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.origin));
      var to = animator.toTransformCss("");  // defaults to center display (or parent or $rootElement)

      return animator
        .translate3d(dialogEl, from, to, translateOptions)
        .then(function (animateReversal) {
          // Build a reversal translate function synched to this translation...
          options.reverseAnimate = function () {

            delete options.reverseAnimate;
            return animateReversal(
              animator.toTransformCss(
                // in case the origin element has moved or is hidden,
                // let's recalculate the translateCSS
                buildTranslateToOrigin(dialogEl, options.origin)
              )
            );

          };
          return true;
        });
    }

    /**
     * Dialog close and pop-out animation
     */
    function dialogPopOut(container, options) {
      return options.reverseAnimate();
    }

    /**
     * Utility function to filter out raw DOM nodes
     */
    function isNodeOneOf(elem, nodeTypeArray) {
      if (nodeTypeArray.indexOf(elem.nodeName) !== -1) {
        return true;
      }
    }

  }
}
MdDialogProvider.$inject = ["$$interimElementProvider"];

})();
(function(){
"use strict";

(function() {
  'use strict';

  angular
    // Declare our module
    .module('material.components.fabSpeedDial', [
      'material.core',
      'material.components.fabTrigger',
      'material.components.fabActions'
    ])

    // Register our directive
    .directive('mdFabSpeedDial', MdFabSpeedDialDirective)

    // Register our custom animations
    .animation('.md-fling', MdFabSpeedDialFlingAnimation)
    .animation('.md-scale', MdFabSpeedDialScaleAnimation)

    // Register a service for each animation so that we can easily inject them into unit tests
    .service('mdFabSpeedDialFlingAnimation', MdFabSpeedDialFlingAnimation)
    .service('mdFabSpeedDialScaleAnimation', MdFabSpeedDialScaleAnimation);

  /**
   * @ngdoc directive
   * @name mdFabSpeedDial
   * @module material.components.fabSpeedDial
   *
   * @restrict E
   *
   * @description
   * The `<md-fab-speed-dial>` directive is used to present a series of popup elements (usually
   * `<md-button>`s) for quick access to common actions.
   *
   * There are currently two animations available by applying one of the following classes to
   * the component:
   *
   *  - `md-fling` - The speed dial items appear from underneath the trigger and move into their
   *    appropriate positions.
   *  - `md-scale` - The speed dial items appear in their proper places by scaling from 0% to 100%.
   *
   * @usage
   * <hljs lang="html">
   * <md-fab-speed-dial direction="up" class="md-fling">
   *   <md-fab-trigger>
   *     <md-button aria-label="Add..."><md-icon icon="/img/icons/plus.svg"></md-icon></md-button>
   *   </md-fab-trigger>
   *
   *   <md-fab-actions>
   *     <md-button aria-label="Add User">
   *       <md-icon icon="/img/icons/user.svg"></md-icon>
   *     </md-button>
   *
   *     <md-button aria-label="Add Group">
   *       <md-icon icon="/img/icons/group.svg"></md-icon>
   *     </md-button>
   *   </md-fab-actions>
   * </md-fab-speed-dial>
   * </hljs>
   *
   * @param {string=} md-direction From which direction you would like the speed dial to appear
   * relative to the trigger element.
   * @param {expression=} md-open Programmatically control whether or not the speed-dial is visible.
   */
  function MdFabSpeedDialDirective() {
    FabSpeedDialController.$inject = ["$scope", "$element", "$animate", "$mdUtil"];
    return {
      restrict: 'E',

      scope: {
        direction: '@?mdDirection',
        isOpen: '=?mdOpen'
      },

      bindToController: true,
      controller: FabSpeedDialController,
      controllerAs: 'vm',

      link: FabSpeedDialLink
    };

    function FabSpeedDialLink(scope, element) {
      // Prepend an element to hold our CSS variables so we can use them in the animations below
      element.prepend('<div class="md-css-variables"></div>');
    }

    function FabSpeedDialController($scope, $element, $animate, $mdUtil) {
      var vm = this;

      // Define our open/close functions
      // Note: Used by fabTrigger and fabActions directives
      vm.open = function() {
        // Async eval to avoid conflicts with existing digest loops
        $scope.$evalAsync("vm.isOpen = true");
      };

      vm.close = function() {
        // Async eval to avoid conflicts with existing digest loops
        // Only close if we do not currently have mouse focus (since child elements can call this)
        !vm.moused && $scope.$evalAsync("vm.isOpen = false");
      };

      vm.mouseenter = function() {
        vm.moused = true;
        vm.open();
      };

      vm.mouseleave = function() {
        vm.moused = false;
        vm.close();
      };

      setupDefaults();
      setupListeners();
      setupWatchers();

      // Fire the animations once in a separate digest loop to initialize them
      $mdUtil.nextTick(function() {
        $animate.addClass($element, 'md-noop');
      });

      // Set our default variables
      function setupDefaults() {
        // Set the default direction to 'down' if none is specified
        vm.direction = vm.direction || 'down';

        // Set the default to be closed
        vm.isOpen = vm.isOpen || false;
      }

      // Setup our event listeners
      function setupListeners() {
        $element.on('mouseenter', vm.mouseenter);
        $element.on('mouseleave', vm.mouseleave);
      }

      // Setup our watchers
      function setupWatchers() {
        // Watch for changes to the direction and update classes/attributes
        $scope.$watch('vm.direction', function(newDir, oldDir) {
          // Add the appropriate classes so we can target the direction in the CSS
          $animate.removeClass($element, 'md-' + oldDir);
          $animate.addClass($element, 'md-' + newDir);
        });


        // Watch for changes to md-open
        $scope.$watch('vm.isOpen', function(isOpen) {
          var toAdd = isOpen ? 'md-is-open' : '';
          var toRemove = isOpen ? '' : 'md-is-open';

          $animate.setClass($element, toAdd, toRemove);
        });
      }
    }
  }

  function MdFabSpeedDialFlingAnimation() {
    function runAnimation(element) {
      var el = element[0];
      var ctrl = element.controller('mdFabSpeedDial');
      var items = el.querySelectorAll('.md-fab-action-item');

      // Grab our element which stores CSS variables
      var variablesElement = el.querySelector('.md-css-variables');

      // Setup JS variables based on our CSS variables
      var startZIndex = variablesElement.style.zIndex;

      // Always reset the items to their natural position/state
      angular.forEach(items, function(item, index) {
        var styles = item.style;

        styles.transform = styles.webkitTransform = '';
        styles.transitionDelay = '';
        styles.opacity = 1;

        // Make the items closest to the trigger have the highest z-index
        styles.zIndex = (items.length - index) + startZIndex;
      });

      // If the control is closed, hide the items behind the trigger
      if (!ctrl.isOpen) {
        angular.forEach(items, function(item, index) {
          var newPosition, axis;
          var styles = item.style;

          switch (ctrl.direction) {
            case 'up':
              newPosition = item.scrollHeight * (index + 1);
              axis = 'Y';
              break;
            case 'down':
              newPosition = -item.scrollHeight * (index + 1);
              axis = 'Y';
              break;
            case 'left':
              newPosition = item.scrollWidth * (index + 1);
              axis = 'X';
              break;
            case 'right':
              newPosition = -item.scrollWidth * (index + 1);
              axis = 'X';
              break;
          }

          var newTranslate = 'translate' + axis + '(' + newPosition + 'px)';

          styles.transform = styles.webkitTransform = newTranslate;
        });
      }
    }

    return {
      addClass: function(element, className, done) {
        if (element.hasClass('md-fling')) {
          runAnimation(element);
          done();
        }
      },
      removeClass: function(element, className, done) {
        runAnimation(element);
        done();
      }
    }
  }

  function MdFabSpeedDialScaleAnimation() {
    var delay = 65;

    function runAnimation(element) {
      var el = element[0];
      var ctrl = element.controller('mdFabSpeedDial');
      var items = el.querySelectorAll('.md-fab-action-item');

      // Always reset the items to their natural position/state
      angular.forEach(items, function(item, index) {
        var styles = item.style,
          offsetDelay = index * delay;

        styles.opacity = ctrl.isOpen ? 1 : 0;
        styles.transform = styles.webkitTransform = ctrl.isOpen ? 'scale(1)' : 'scale(0)';
        styles.transitionDelay = (ctrl.isOpen ?  offsetDelay : (items.length - offsetDelay)) + 'ms';
      });
    }

    return {
      addClass: function(element, className, done) {
        runAnimation(element);
        done();
      },

      removeClass: function(element, className, done) {
        runAnimation(element);
        done();
      }
    }
  }
})();

})();
(function(){
"use strict";

(function() {
  'use strict';

  angular
    .module('material.components.fabActions', ['material.core'])
    .directive('mdFabActions', MdFabActionsDirective);

  /**
   * @ngdoc directive
   * @name mdFabActions
   * @module material.components.fabSpeedDial
   *
   * @restrict E
   *
   * @description
   * The `<md-fab-actions>` directive is used inside of a `<md-fab-speed-dial>` or
   * `<md-fab-toolbar>` directive to mark the an element (or elements) as the actions and setup the
   * proper event listeners.
   *
   * @usage
   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.
   */
  function MdFabActionsDirective() {
    return {
      restrict: 'E',

      require: ['^?mdFabSpeedDial', '^?mdFabToolbar'],

      compile: function(element, attributes) {
        var children = element.children();

        // Support both ng-repat and static content
        if (children.attr('ng-repeat')) {
          children.addClass('md-fab-action-item');
        } else {
          // Wrap every child in a new div and add a class that we can scale/fling independently
          children.wrap('<div class="md-fab-action-item">');
        }

        return function postLink(scope, element, attributes, controllers) {
          // Grab whichever parent controller is used
          var controller = controllers[0] || controllers[1];

          // Make the children open/close their parent directive
          if (controller) {
            angular.forEach(element.children(), function(child) {
              // Attach listeners to the `md-fab-action-item`
              child = angular.element(child).children()[0];

              angular.element(child).on('focus', controller.open);
              angular.element(child).on('blur', controller.close);
            });
          }
        }
      }
    }
  }

})();

})();
(function(){
"use strict";

(function() {
  'use strict';

  angular
    // Declare our module
    .module('material.components.fabToolbar', [
      'material.core',
      'material.components.fabTrigger',
      'material.components.fabActions'
    ])

    // Register our directive
    .directive('mdFabToolbar', MdFabToolbarDirective)

    // Register our custom animations
    .animation('.md-fab-toolbar', MdFabToolbarAnimation)

    // Register a service for the animation so that we can easily inject it into unit tests
    .service('mdFabToolbarAnimation', MdFabToolbarAnimation);

  /**
   * @ngdoc directive
   * @name mdFabToolbar
   * @module material.components.fabToolbar
   *
   * @restrict E
   *
   * @description
   *
   * The `<md-fab-toolbar>` directive is used present a toolbar of elements (usually `<md-button>`s)
   * for quick access to common actions when a floating action button is activated (via hover or
   * keyboard navigation).
   *
   * @usage
   *
   * <hljs lang="html">
   * <md-fab-toolbar>
   *   <md-fab-trigger>
   *     <md-button aria-label="Add..."><md-icon icon="/img/icons/plus.svg"></md-icon></md-button>
   *   </md-fab-trigger>
   *
   *   <md-fab-actions>
   *     <md-button aria-label="Add User">
   *       <md-icon icon="/img/icons/user.svg"></md-icon>
   *     </md-button>
   *
   *     <md-button aria-label="Add Group">
   *       <md-icon icon="/img/icons/group.svg"></md-icon>
   *     </md-button>
   *   </md-fab-actions>
   * </md-fab-toolbar>
   * </hljs>
   *
   * @param {expression=} md-open Programmatically control whether or not the toolbar is visible.
   */
  function MdFabToolbarDirective() {
    FabToolbarController.$inject = ["$scope", "$element", "$animate"];
    return {
      restrict: 'E',
      transclude: true,
      template:
        '<div class="md-fab-toolbar-wrapper">' +
        '  <div class="md-fab-toolbar-content" ng-transclude></div>' +
        '</div>',

      scope: {
        isOpen: '=?mdOpen'
      },

      bindToController: true,
      controller: FabToolbarController,
      controllerAs: 'vm',

      link: link
    };

    function FabToolbarController($scope, $element, $animate) {
      var vm = this;

      // Set the default to be closed
      vm.isOpen = vm.isOpen || false;

      vm.open = function() {
        vm.isOpen = true;
        $scope.$apply();
      };

      vm.close = function() {
        vm.isOpen = false;
        $scope.$apply();
      };

      // Add our class so we can trigger the animation on start
      $element.addClass('md-fab-toolbar');

      // Setup some mouse events so the hover effect can be triggered
      // anywhere over the toolbar
      $element.on('mouseenter', vm.open);
      $element.on('mouseleave', vm.close);

      // Watch for changes to md-open and toggle our class
      $scope.$watch('vm.isOpen', function(isOpen) {
        var toAdd = isOpen ? 'md-is-open' : '';
        var toRemove = isOpen ? '' : 'md-is-open';

        $animate.setClass($element, toAdd, toRemove);
      });
    }

    function link(scope, element, attributes) {
      // Don't allow focus on the trigger
      element.find('md-fab-trigger').find('button').attr('tabindex', '-1');

      // Prepend the background element to the trigger's button
      element.find('md-fab-trigger').find('button')
        .prepend('<div class="md-fab-toolbar-background"></div>');
    }
  }

  function MdFabToolbarAnimation() {
    var originalIconDelay;

    function runAnimation(element, className, done) {
      var el = element[0];
      var ctrl = element.controller('mdFabToolbar');

      // Grab the relevant child elements
      var backgroundElement = el.querySelector('.md-fab-toolbar-background');
      var triggerElement = el.querySelector('md-fab-trigger button');
      var iconElement = el.querySelector('md-fab-trigger button md-icon');
      var actions = element.find('md-fab-actions').children();

      // If we have both elements, use them to position the new background
      if (triggerElement && backgroundElement) {
        // Get our variables
        var color = window.getComputedStyle(triggerElement).getPropertyValue('background-color');
        var width = el.offsetWidth;
        var height = el.offsetHeight;

        // Make a square
        var scale = width * 2;

        // Set some basic styles no matter what animation we're doing
        backgroundElement.style.backgroundColor = color;
        backgroundElement.style.borderRadius = width + 'px';

        // If we're open
        if (ctrl.isOpen) {

          // Set the width/height to take up the full toolbar width
          backgroundElement.style.width = scale + 'px';
          backgroundElement.style.height = scale + 'px';

          // Set the top/left to move up/left (or right) by the scale width/height
          backgroundElement.style.top = -(scale / 2) + 'px';

          if (element.hasClass('md-left')) {
            backgroundElement.style.left = -(scale / 2) + 'px';
            backgroundElement.style.right = null;
          }

          if (element.hasClass('md-right')) {
            backgroundElement.style.right = -(scale / 2) + 'px';
            backgroundElement.style.left = null;
          }

          // Set the next close animation to have the proper delays
          backgroundElement.style.transitionDelay = '0ms';
          iconElement && (iconElement.style.transitionDelay = '.3s');

          // Apply a transition delay to actions
          angular.forEach(actions, function(action, index) {
            action.style.transitionDelay = (actions.length - index) * 25 + 'ms';
          });
        } else {
          // Otherwise, set the width/height to the trigger's width/height
          backgroundElement.style.width = triggerElement.offsetWidth + 'px';
          backgroundElement.style.height = triggerElement.offsetHeight + 'px';

          // Reset the position
          backgroundElement.style.top = '0px';

          if (element.hasClass('md-left')) {
            backgroundElement.style.left = '0px';
            backgroundElement.style.right = null;
          }

          if (element.hasClass('md-right')) {
            backgroundElement.style.right = '0px';
            backgroundElement.style.left = null;
          }

          // Set the next open animation to have the proper delays
          backgroundElement.style.transitionDelay = '200ms';
          iconElement && (iconElement.style.transitionDelay = '0ms');

          // Apply a transition delay to actions
          angular.forEach(actions, function(action, index) {
            action.style.transitionDelay = (index * 25) + 'ms';
          });
        }
      }
    }

    return {
      addClass: function(element, className, done) {
        runAnimation(element, className, done);
        done();
      },

      removeClass: function(element, className, done) {
        runAnimation(element, className, done);
        done();
      }
    }
  }
})();
})();
(function(){
"use strict";

(function() {
  'use strict';

  angular
    .module('material.components.fabTrigger', [ 'material.core' ])
    .directive('mdFabTrigger', MdFabTriggerDirective);

  /**
   * @ngdoc directive
   * @name mdFabTrigger
   * @module material.components.fabSpeedDial
   *
   * @restrict E
   *
   * @description
   * The `<md-fab-trigger>` directive is used inside of a `<md-fab-speed-dial>` or
   * `<md-fab-toolbar>` directive to mark the an element (or elements) as the trigger and setup the
   * proper event listeners.
   *
   * @usage
   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.
   */
  function MdFabTriggerDirective() {
    return {
      restrict: 'E',

      require: ['^?mdFabSpeedDial', '^?mdFabToolbar'],

      link: function(scope, element, attributes, controllers) {
        // Grab whichever parent controller is used
        var controller = controllers[0] || controllers[1];

        // Make the children open/close their parent directive
        if (controller) {
          angular.forEach(element.children(), function(child) {
            angular.element(child).on('focus', controller.open);
            angular.element(child).on('blur', controller.close);
          });
        }
      }
    }
  }
})();


})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.gridList
 */
angular.module('material.components.gridList', ['material.core'])
       .directive('mdGridList', GridListDirective)
       .directive('mdGridTile', GridTileDirective)
       .directive('mdGridTileFooter', GridTileCaptionDirective)
       .directive('mdGridTileHeader', GridTileCaptionDirective)
       .factory('$mdGridLayout', GridLayoutFactory);

/**
 * @ngdoc directive
 * @name mdGridList
 * @module material.components.gridList
 * @restrict E
 * @description
 * Grid lists are an alternative to standard list views. Grid lists are distinct
 * from grids used for layouts and other visual presentations.
 *
 * A grid list is best suited to presenting a homogenous data type, typically
 * images, and is optimized for visual comprehension and differentiating between
 * like data types.
 *
 * A grid list is a continuous element consisting of tessellated, regular
 * subdivisions called cells that contain tiles (`md-grid-tile`).
 *
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7OVlEaXZ5YmU1Xzg/components_grids_usage2.png"
 *    style="width: 300px; height: auto; margin-right: 16px;" alt="Concept of grid explained visually">
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VGhsOE5idWlJWXM/components_grids_usage3.png"
 *    style="width: 300px; height: auto;" alt="Grid concepts legend">
 *
 * Cells are arrayed vertically and horizontally within the grid.
 *
 * Tiles hold content and can span one or more cells vertically or horizontally.
 *
 * ### Responsive Attributes
 *
 * The `md-grid-list` directive supports "responsive" attributes, which allow
 * different `md-cols`, `md-gutter` and `md-row-height` values depending on the
 * currently matching media query (as defined in `$mdConstant.MEDIA`).
 *
 * In order to set a responsive attribute, first define the fallback value with
 * the standard attribute name, then add additional attributes with the
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`
 * (ie. `md-cols-lg="8"`)
 *
 * @param {number} md-cols Number of columns in the grid.
 * @param {string} md-row-height One of
 * <ul>
 *   <li>CSS length - Fixed height rows (eg. `8px` or `1rem`)</li>
 *   <li>`{width}:{height}` - Ratio of width to height (eg.
 *   `md-row-height="16:9"`)</li>
 *   <li>`"fit"` - Height will be determined by subdividing the available
 *   height by the number of rows</li>
 * </ul>
 * @param {string=} md-gutter The amount of space between tiles in CSS units
 *     (default 1px)
 * @param {expression=} md-on-layout Expression to evaluate after layout. Event
 *     object is available as `$event`, and contains performance information.
 *
 * @usage
 * Basic:
 * <hljs lang="html">
 * <md-grid-list md-cols="5" md-gutter="1em" md-row-height="4:3">
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 *
 * Fixed-height rows:
 * <hljs lang="html">
 * <md-grid-list md-cols="4" md-row-height="200px" ...>
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 *
 * Fit rows:
 * <hljs lang="html">
 * <md-grid-list md-cols="4" md-row-height="fit" style="height: 400px;" ...>
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 *
 * Using responsive attributes:
 * <hljs lang="html">
 * <md-grid-list
 *     md-cols-sm="2"
 *     md-cols-md="4"
 *     md-cols-lg="8"
 *     md-cols-gt-lg="12"
 *     ...>
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 */
function GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia) {
  return {
    restrict: 'E',
    controller: GridListController,
    scope: {
      mdOnLayout: '&'
    },
    link: postLink
  };

  function postLink(scope, element, attrs, ctrl) {
    // Apply semantics
    element.attr('role', 'list');

    // Provide the controller with a way to trigger layouts.
    ctrl.layoutDelegate = layoutDelegate;

    var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout),
        unwatchAttrs = watchMedia();
      scope.$on('$destroy', unwatchMedia);

    /**
     * Watches for changes in media, invalidating layout as necessary.
     */
    function watchMedia() {
      for (var mediaName in $mdConstant.MEDIA) {
        $mdMedia(mediaName); // initialize
        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])
            .addListener(invalidateLayout);
      }
      return $mdMedia.watchResponsiveAttributes(
          ['md-cols', 'md-row-height'], attrs, layoutIfMediaMatch);
    }

    function unwatchMedia() {
      ctrl.layoutDelegate = angular.noop;

      unwatchAttrs();
      for (var mediaName in $mdConstant.MEDIA) {
        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])
            .removeListener(invalidateLayout);
      }
    }

    /**
     * Performs grid layout if the provided mediaName matches the currently
     * active media type.
     */
    function layoutIfMediaMatch(mediaName) {
      if (mediaName == null) {
        // TODO(shyndman): It would be nice to only layout if we have
        // instances of attributes using this media type
        ctrl.invalidateLayout();
      } else if ($mdMedia(mediaName)) {
        ctrl.invalidateLayout();
      }
    }

    var lastLayoutProps;

    /**
     * Invokes the layout engine, and uses its results to lay out our
     * tile elements.
     *
     * @param {boolean} tilesInvalidated Whether tiles have been
     *    added/removed/moved since the last layout. This is to avoid situations
     *    where tiles are replaced with properties identical to their removed
     *    counterparts.
     */
    function layoutDelegate(tilesInvalidated) {
      var tiles = getTileElements();
      var props = {
        tileSpans: getTileSpans(tiles),
        colCount: getColumnCount(),
        rowMode: getRowMode(),
        rowHeight: getRowHeight(),
        gutter: getGutter()
      };

      if (!tilesInvalidated && angular.equals(props, lastLayoutProps)) {
        return;
      }

      var performance =
        $mdGridLayout(props.colCount, props.tileSpans, tiles)
          .map(function(tilePositions, rowCount) {
            return {
              grid: {
                element: element,
                style: getGridStyle(props.colCount, rowCount,
                    props.gutter, props.rowMode, props.rowHeight)
              },
              tiles: tilePositions.map(function(ps, i) {
                return {
                  element: angular.element(tiles[i]),
                  style: getTileStyle(ps.position, ps.spans,
                      props.colCount, props.rowCount,
                      props.gutter, props.rowMode, props.rowHeight)
                }
              })
            }
          })
          .reflow()
          .performance();

      // Report layout
      scope.mdOnLayout({
        $event: {
          performance: performance
        }
      });

      lastLayoutProps = props;
    }

    // Use $interpolate to do some simple string interpolation as a convenience.

    var startSymbol = $interpolate.startSymbol();
    var endSymbol = $interpolate.endSymbol();

    // Returns an expression wrapped in the interpolator's start and end symbols.
    function expr(exprStr) {
      return startSymbol + exprStr + endSymbol;
    }

    // The amount of space a single 1x1 tile would take up (either width or height), used as
    // a basis for other calculations. This consists of taking the base size percent (as would be
    // if evenly dividing the size between cells), and then subtracting the size of one gutter.
    // However, since there are no gutters on the edges, each tile only uses a fration
    // (gutterShare = numGutters / numCells) of the gutter size. (Imagine having one gutter per
    // tile, and then breaking up the extra gutter on the edge evenly among the cells).
    var UNIT = $interpolate(expr('share') + '% - (' + expr('gutter') + ' * ' + expr('gutterShare') + ')');

    // The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.
    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the
    // row/column (offset).
    var POSITION  = $interpolate('calc((' + expr('unit') + ' + ' + expr('gutter') + ') * ' + expr('offset') + ')');

    // The actual size of a tile, e.g., width or height, taking rowSpan or colSpan into account.
    // This is computed by multiplying the base unit by the rowSpan/colSpan, and then adding back
    // in the space that the gutter would normally have used (which was already accounted for in
    // the base unit calculation).
    var DIMENSION = $interpolate('calc((' + expr('unit') + ') * ' + expr('span') + ' + (' + expr('span') + ' - 1) * ' + expr('gutter') + ')');

    /**
     * Gets the styles applied to a tile element described by the given parameters.
     * @param {{row: number, col: number}} position The row and column indices of the tile.
     * @param {{row: number, col: number}} spans The rowSpan and colSpan of the tile.
     * @param {number} colCount The number of columns.
     * @param {number} rowCount The number of rows.
     * @param {string} gutter The amount of space between tiles. This will be something like
     *     '5px' or '2em'.
     * @param {string} rowMode The row height mode. Can be one of:
     *     'fixed': all rows have a fixed size, given by rowHeight,
     *     'ratio': row height defined as a ratio to width, or
     *     'fit': fit to the grid-list element height, divinding evenly among rows.
     * @param {string|number} rowHeight The height of a row. This is only used for 'fixed' mode and
     *     for 'ratio' mode. For 'ratio' mode, this is the *ratio* of width-to-height (e.g., 0.75).
     * @returns {Object} Map of CSS properties to be applied to the style element. Will define
     *     values for top, left, width, height, marginTop, and paddingTop.
     */
    function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {
      // TODO(shyndman): There are style caching opportunities here.

      // Percent of the available horizontal space that one column takes up.
      var hShare = (1 / colCount) * 100;

      // Fraction of the gutter size that each column takes up.
      var hGutterShare = (colCount - 1) / colCount;

      // Base horizontal size of a column.
      var hUnit = UNIT({share: hShare, gutterShare: hGutterShare, gutter: gutter});

      // The width and horizontal position of each tile is always calculated the same way, but the
      // height and vertical position depends on the rowMode.
      var style = {
        left: POSITION({ unit: hUnit, offset: position.col, gutter: gutter }),
        width: DIMENSION({ unit: hUnit, span: spans.col, gutter: gutter }),
        // resets
        paddingTop: '',
        marginTop: '',
        top: '',
        height: ''
      };

      switch (rowMode) {
        case 'fixed':
          // In fixed mode, simply use the given rowHeight.
          style.top = POSITION({ unit: rowHeight, offset: position.row, gutter: gutter });
          style.height = DIMENSION({ unit: rowHeight, span: spans.row, gutter: gutter });
          break;

        case 'ratio':
          // Percent of the available vertical space that one row takes up. Here, rowHeight holds
          // the ratio value. For example, if the width:height ratio is 4:3, rowHeight = 1.333.
          var vShare = hShare / rowHeight;

          // Base veritcal size of a row.
          var vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });

          // padidngTop and marginTop are used to maintain the given aspect ratio, as
          // a percentage-based value for these properties is applied to the *width* of the
          // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties
          style.paddingTop = DIMENSION({ unit: vUnit, span: spans.row, gutter: gutter});
          style.marginTop = POSITION({ unit: vUnit, offset: position.row, gutter: gutter });
          break;

        case 'fit':
          // Fraction of the gutter size that each column takes up.
          var vGutterShare = (rowCount - 1) / rowCount;

          // Percent of the available vertical space that one row takes up.
          var vShare = (1 / rowCount) * 100;

          // Base vertical size of a row.
          var vUnit = UNIT({share: vShare, gutterShare: vGutterShare, gutter: gutter});

          style.top = POSITION({unit: vUnit, offset: position.row, gutter: gutter});
          style.height = DIMENSION({unit: vUnit, span: spans.row, gutter: gutter});
          break;
      }

      return style;
    }

    function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {
      var style = {
        height: '',
        paddingBottom: ''
      };

      switch(rowMode) {
        case 'fixed':
          style.height = DIMENSION({ unit: rowHeight, span: rowCount, gutter: gutter });
          break;

        case 'ratio':
          // rowHeight is width / height
          var hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount,
              hShare = (1 / colCount) * 100,
              vShare = hShare * (1 / rowHeight),
              vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });

          style.paddingBottom = DIMENSION({ unit: vUnit, span: rowCount, gutter: gutter});
          break;

        case 'fit':
          // noop, as the height is user set
          break;
      }

      return style;
    }

    function getTileElements() {
      return [].filter.call(element.children(), function(ele) {
        return ele.tagName == 'MD-GRID-TILE';
      });
    }

    /**
     * Gets an array of objects containing the rowspan and colspan for each tile.
     * @returns {Array<{row: number, col: number}>}
     */
    function getTileSpans(tileElements) {
      return [].map.call(tileElements, function(ele) {
        var ctrl = angular.element(ele).controller('mdGridTile');
        return {
          row: parseInt(
              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-rowspan'), 10) || 1,
          col: parseInt(
              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-colspan'), 10) || 1
        };
      });
    }

    function getColumnCount() {
      var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, 'md-cols'), 10);
      if (isNaN(colCount)) {
        throw 'md-grid-list: md-cols attribute was not found, or contained a non-numeric value';
      }
      return colCount;
    }

    function getGutter() {
      return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, 'md-gutter') || 1);
    }

    function getRowHeight() {
      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');
      switch (getRowMode()) {
        case 'fixed':
          return applyDefaultUnit(rowHeight);
        case 'ratio':
          var whRatio = rowHeight.split(':');
          return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);
        case 'fit':
          return 0; // N/A
      }
    }

    function getRowMode() {
      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');
      if (rowHeight == 'fit') {
        return 'fit';
      } else if (rowHeight.indexOf(':') !== -1) {
        return 'ratio';
      } else {
        return 'fixed';
      }
    }

    function applyDefaultUnit(val) {
      return /\D$/.test(val) ? val : val + 'px';
    }
  }
}
GridListDirective.$inject = ["$interpolate", "$mdConstant", "$mdGridLayout", "$mdMedia"];

/* @ngInject */
function GridListController($mdUtil) {
  this.layoutInvalidated = false;
  this.tilesInvalidated = false;
  this.$timeout_ = $mdUtil.nextTick;
  this.layoutDelegate = angular.noop;
}
GridListController.$inject = ["$mdUtil"];

GridListController.prototype = {
  invalidateTiles: function() {
    this.tilesInvalidated = true;
    this.invalidateLayout();
  },

  invalidateLayout: function() {
    if (this.layoutInvalidated) {
      return;
    }
    this.layoutInvalidated = true;
    this.$timeout_(angular.bind(this, this.layout));
  },

  layout: function() {
    try {
      this.layoutDelegate(this.tilesInvalidated);
    } finally {
      this.layoutInvalidated = false;
      this.tilesInvalidated = false;
    }
  }
};


/* @ngInject */
function GridLayoutFactory($mdUtil) {
  var defaultAnimator = GridTileAnimator;

  /**
   * Set the reflow animator callback
   */
  GridLayout.animateWith = function(customAnimator) {
    defaultAnimator = !angular.isFunction(customAnimator) ? GridTileAnimator : customAnimator;
  };

  return GridLayout;

  /**
   * Publish layout function
   */
  function GridLayout(colCount, tileSpans) {
      var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime;

      layoutTime = $mdUtil.time(function() {
        layoutInfo = calculateGridFor(colCount, tileSpans);
      });

      return self = {

        /**
         * An array of objects describing each tile's position in the grid.
         */
        layoutInfo: function() {
          return layoutInfo;
        },

        /**
         * Maps grid positioning to an element and a set of styles using the
         * provided updateFn.
         */
        map: function(updateFn) {
          mapTime = $mdUtil.time(function() {
            var info = self.layoutInfo();
            gridStyles = updateFn(info.positioning, info.rowCount);
          });
          return self;
        },

        /**
         * Default animator simply sets the element.css( <styles> ). An alternate
         * animator can be provided as an argument. The function has the following
         * signature:
         *
         *    function({grid: {element: JQLite, style: Object}, tiles: Array<{element: JQLite, style: Object}>)
         */
        reflow: function(animatorFn) {
          reflowTime = $mdUtil.time(function() {
            var animator = animatorFn || defaultAnimator;
            animator(gridStyles.grid, gridStyles.tiles);
          });
          return self;
        },

        /**
         * Timing for the most recent layout run.
         */
        performance: function() {
          return {
            tileCount: tileSpans.length,
            layoutTime: layoutTime,
            mapTime: mapTime,
            reflowTime: reflowTime,
            totalTime: layoutTime + mapTime + reflowTime
          };
        }
      };
    }

  /**
   * Default Gridlist animator simple sets the css for each element;
   * NOTE: any transitions effects must be manually set in the CSS.
   * e.g.
   *
   *  md-grid-tile {
   *    transition: all 700ms ease-out 50ms;
   *  }
   *
   */
  function GridTileAnimator(grid, tiles) {
    grid.element.css(grid.style);
    tiles.forEach(function(t) {
      t.element.css(t.style);
    })
  }

  /**
   * Calculates the positions of tiles.
   *
   * The algorithm works as follows:
   *    An Array<Number> with length colCount (spaceTracker) keeps track of
   *    available tiling positions, where elements of value 0 represents an
   *    empty position. Space for a tile is reserved by finding a sequence of
   *    0s with length <= than the tile's colspan. When such a space has been
   *    found, the occupied tile positions are incremented by the tile's
   *    rowspan value, as these positions have become unavailable for that
   *    many rows.
   *
   *    If the end of a row has been reached without finding space for the
   *    tile, spaceTracker's elements are each decremented by 1 to a minimum
   *    of 0. Rows are searched in this fashion until space is found.
   */
  function calculateGridFor(colCount, tileSpans) {
    var curCol = 0,
        curRow = 0,
        spaceTracker = newSpaceTracker();

    return {
      positioning: tileSpans.map(function(spans, i) {
        return {
          spans: spans,
          position: reserveSpace(spans, i)
        };
      }),
      rowCount: curRow + Math.max.apply(Math, spaceTracker)
    };

    function reserveSpace(spans, i) {
      if (spans.col > colCount) {
        throw 'md-grid-list: Tile at position ' + i + ' has a colspan ' +
            '(' + spans.col + ') that exceeds the column count ' +
            '(' + colCount + ')';
      }

      var start = 0,
          end = 0;

      // TODO(shyndman): This loop isn't strictly necessary if you can
      // determine the minimum number of rows before a space opens up. To do
      // this, recognize that you've iterated across an entire row looking for
      // space, and if so fast-forward by the minimum rowSpan count. Repeat
      // until the required space opens up.
      while (end - start < spans.col) {
        if (curCol >= colCount) {
          nextRow();
          continue;
        }

        start = spaceTracker.indexOf(0, curCol);
        if (start === -1 || (end = findEnd(start + 1)) === -1) {
          start = end = 0;
          nextRow();
          continue;
        }

        curCol = end + 1;
      }

      adjustRow(start, spans.col, spans.row);
      curCol = start + spans.col;

      return {
        col: start,
        row: curRow
      };
    }

    function nextRow() {
      curCol = 0;
      curRow++;
      adjustRow(0, colCount, -1); // Decrement row spans by one
    }

    function adjustRow(from, cols, by) {
      for (var i = from; i < from + cols; i++) {
        spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);
      }
    }

    function findEnd(start) {
      var i;
      for (i = start; i < spaceTracker.length; i++) {
        if (spaceTracker[i] !== 0) {
          return i;
        }
      }

      if (i === spaceTracker.length) {
        return i;
      }
    }

    function newSpaceTracker() {
      var tracker = [];
      for (var i = 0; i < colCount; i++) {
        tracker.push(0);
      }
      return tracker;
    }
  }
}
GridLayoutFactory.$inject = ["$mdUtil"];

/**
 * @ngdoc directive
 * @name mdGridTile
 * @module material.components.gridList
 * @restrict E
 * @description
 * Tiles contain the content of an `md-grid-list`. They span one or more grid
 * cells vertically or horizontally, and use `md-grid-tile-{footer,header}` to
 * display secondary content.
 *
 * ### Responsive Attributes
 *
 * The `md-grid-tile` directive supports "responsive" attributes, which allow
 * different `md-rowspan` and `md-colspan` values depending on the currently
 * matching media query (as defined in `$mdConstant.MEDIA`).
 *
 * In order to set a responsive attribute, first define the fallback value with
 * the standard attribute name, then add additional attributes with the
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`
 * (ie. `md-colspan-sm="4"`)
 *
 * @param {number=} md-colspan The number of columns to span (default 1). Cannot
 *    exceed the number of columns in the grid. Supports interpolation.
 * @param {number=} md-rowspan The number of rows to span (default 1). Supports
 *     interpolation.
 *
 * @usage
 * With header:
 * <hljs lang="html">
 * <md-grid-tile>
 *   <md-grid-tile-header>
 *     <h3>This is a header</h3>
 *   </md-grid-tile-header>
 * </md-grid-tile>
 * </hljs>
 *
 * With footer:
 * <hljs lang="html">
 * <md-grid-tile>
 *   <md-grid-tile-footer>
 *     <h3>This is a footer</h3>
 *   </md-grid-tile-footer>
 * </md-grid-tile>
 * </hljs>
 *
 * Spanning multiple rows/columns:
 * <hljs lang="html">
 * <md-grid-tile md-colspan="2" md-rowspan="3">
 * </md-grid-tile>
 * </hljs>
 *
 * Responsive attributes:
 * <hljs lang="html">
 * <md-grid-tile md-colspan="1" md-colspan-sm="3" md-colspan-md="5">
 * </md-grid-tile>
 * </hljs>
 */
function GridTileDirective($mdMedia) {
  return {
    restrict: 'E',
    require: '^mdGridList',
    template: '<figure ng-transclude></figure>',
    transclude: true,
    scope: {},
    // Simple controller that exposes attributes to the grid directive
    controller: ["$attrs", function($attrs) {
      this.$attrs = $attrs;
    }],
    link: postLink
  };

  function postLink(scope, element, attrs, gridCtrl) {
    // Apply semantics
    element.attr('role', 'listitem');

    // If our colspan or rowspan changes, trigger a layout
    var unwatchAttrs = $mdMedia.watchResponsiveAttributes(['md-colspan', 'md-rowspan'],
        attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));

    // Tile registration/deregistration
    gridCtrl.invalidateTiles();
    scope.$on('$destroy', function() {
      unwatchAttrs();
      gridCtrl.invalidateLayout();
    });

    if (angular.isDefined(scope.$parent.$index)) {
      scope.$watch(function() { return scope.$parent.$index; },
        function indexChanged(newIdx, oldIdx) {
          if (newIdx === oldIdx) {
            return;
          }
          gridCtrl.invalidateTiles();
        });
    }
  }
}
GridTileDirective.$inject = ["$mdMedia"];


function GridTileCaptionDirective() {
  return {
    template: '<figcaption ng-transclude></figcaption>',
    transclude: true
  };
}

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.icon
 * @description
 * Icon
 */
angular.module('material.components.icon', [
    'material.core'
  ])
  .directive('mdIcon', mdIconDirective);

/**
 * @ngdoc directive
 * @name mdIcon
 * @module material.components.icon
 *
 * @restrict E
 *
 * @description
 * The `md-icon` directive makes it easier to use vector-based icons in your app (as opposed to
 * raster-based icons types like PNG). The directive supports both icon fonts and SVG icons.
 *
 * Icons should be consider view-only elements that should not be used directly as buttons; instead nest a `<md-icon>`
 * inside a `md-button` to add hover and click features.
 *
 * ### Icon fonts
 * Icon fonts are a technique in which you use a font where the glyphs in the font are
 * your icons instead of text. Benefits include a straightforward way to bundle everything into a
 * single HTTP request, simple scaling, easy color changing, and more.
 *
 * `md-icon` let's you consume an icon font by letting you reference specific icons in that font
 * by name rather than character code.
 *
 * ### SVG
 * For SVGs, the problem with using `<img>` or a CSS `background-image` is that you can't take
 * advantage of some SVG features, such as styling specific parts of the icon with CSS or SVG
 * animation.
 *
 * `md-icon` makes it easier to use SVG icons by *inlining* the SVG into an `<svg>` element in the
 * document. The most straightforward way of referencing an SVG icon is via URL, just like a
 * traditional `<img>`. `$mdIconProvider`, as a convenience, let's you _name_ an icon so you can
 * reference it by name instead of URL throughout your templates.
 *
 * Additionally, you may not want to make separate HTTP requests for every icon, so you can bundle
 * your SVG icons together and pre-load them with $mdIconProvider as an icon set. An icon set can
 * also be given a name, which acts as a namespace for individual icons, so you can reference them
 * like `"social:cake"`.
 *
 * When using SVGs, both external SVGs (via URLs) or sets of SVGs [from icon sets] can be
 * easily loaded and used.When use font-icons, developers must following three (3) simple steps:
 *
 * <ol>
 * <li>Load the font library. e.g.<br/>
 *    &lt;link href="https://fonts.googleapis.com/icon?family=Material+Icons"
 *    rel="stylesheet"&gt;
 * </li>
 * <li> Use either (a) font-icon class names or (b) font ligatures to render the font glyph by using its textual name</li>
 * <li> Use &lt;md-icon md-font-icon="classname" /&gt; or <br/>
 *     use &lt;md-icon md-font-set="font library classname or alias"&gt; textual_name &lt;/md-icon&gt; or <br/>
 *     use &lt;md-icon md-font-set="font library classname or alias"&gt; numerical_character_reference &lt;/md-icon&gt;
 * </li>
 * </ol>
 *
 * Full details for these steps can be found:
 *
 * <ul>
 * <li>http://google.github.io/material-design-icons/</li>
 * <li>http://google.github.io/material-design-icons/#icon-font-for-the-web</li>
 * </ul>
 *
 * The Material Design icon style <code>.material-icons</code> and the icon font references are published in
 * Material Design Icons:
 *
 * <ul>
 * <li>http://www.google.com/design/icons/</li>
 * <li>https://www.google.com/design/icons/#ic_accessibility</li>
 * </ul>
 *
 * <h2 id="material_design_icons">Material Design Icons</h2>
 * Using the Material Design Icon-Selector, developers can easily and quickly search for a Material Design font-icon and
 * determine its textual name and character reference code. Click on any icon to see the slide-up information
 * panel with details regarding a SVG download or information on the font-icon usage.
 *
 * <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank" style="border-bottom:none;">
 * <img src="https://cloud.githubusercontent.com/assets/210413/7902490/fe8dd14c-0780-11e5-98fb-c821cc6475e6.png"
 *      aria-label="Material Design Icon-Selector" style="max-width:75%;padding-left:10%">
 * </a>
 *
 * <span class="image_caption">
 *  Click on the image above to link to the
 *  <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank">Material Design Icon-Selector</a>.
 * </span>
 *
 * @param {string} md-font-icon String name of CSS icon associated with the font-face will be used
 * to render the icon. Requires the fonts and the named CSS styles to be preloaded.
 * @param {string} md-font-set CSS style name associated with the font library; which will be assigned as
 * the class for the font-icon ligature. This value may also be an alias that is used to lookup the classname;
 * internally use `$mdIconProvider.fontSet(<alias>)` to determine the style name.
 * @param {string} md-svg-src String URL (or expression) used to load, cache, and display an
 *     external SVG.
 * @param {string} md-svg-icon md-svg-icon String name used for lookup of the icon from the internal cache;
 *     interpolated strings or expressions may also be used. Specific set names can be used with
 *     the syntax `<set name>:<icon name>`.<br/><br/>
 * To use icon sets, developers are required to pre-register the sets using the `$mdIconProvider` service.
 * @param {string=} aria-label Labels icon for accessibility. If an empty string is provided, icon
 * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no aria-label on the icon
 * nor a label on the parent element, a warning will be logged to the console.
 * @param {string=} alt Labels icon for accessibility. If an empty string is provided, icon
 * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no alt on the icon
 * nor a label on the parent element, a warning will be logged to the console. *
 * @usage
 * When using SVGs:
 * <hljs lang="html">
 *
 *  <!-- Icon ID; may contain optional icon set prefix; icons must registered using $mdIconProvider -->
 *  <md-icon md-svg-icon="social:android"    aria-label="android " ></md-icon>
 *
 *  <!-- Icon urls; may be preloaded in templateCache -->
 *  <md-icon md-svg-src="/android.svg"       aria-label="android " ></md-icon>
 *  <md-icon md-svg-src="{{ getAndroid() }}" aria-label="android " ></md-icon>
 *
 * </hljs>
 *
 * Use the <code>$mdIconProvider</code> to configure your application with
 * svg iconsets.
 *
 * <hljs lang="js">
 *  angular.module('appSvgIconSets', ['ngMaterial'])
 *    .controller('DemoCtrl', function($scope) {})
 *    .config(function($mdIconProvider) {
 *      $mdIconProvider
 *         .iconSet('social', 'img/icons/sets/social-icons.svg', 24)
 *         .defaultIconSet('img/icons/sets/core-icons.svg', 24);
 *     });
 * </hljs>
 *
 *
 * When using Font Icons with classnames:
 * <hljs lang="html">
 *
 *  <md-icon md-font-icon="android" aria-label="android" ></md-icon>
 *  <md-icon class="icon_home"      aria-label="Home"    ></md-icon>
 *
 * </hljs>
 *
 * When using Material Font Icons with ligatures:
 * <hljs lang="html">
 *  <!-- For Material Design Icons -->
 *  <!-- The class '.material-icons' is auto-added if a style has NOT been specified -->
 *  <md-icon> face </md-icon>
 *  <md-icon md-font-set="material-icons"> face </md-icon>
 *  <md-icon> #xE87C; </md-icon>
 *  <!-- The class '.material-icons' must be manually added if other styles are also specified-->
 *  <md-icon class="material-icons md-light md-48"> face </md-icon>
 * </hljs>
 *
 * When using other Font-Icon libraries:
 *
 * <hljs lang="js">
 *  // Specify a font-icon style alias
 *  angular.config(function($mdIconProvider) {
 *    $mdIconProvider.fontSet('fa', 'fontawesome');
 *  });
 * </hljs>
 *
 * <hljs lang="html">
 *  <md-icon md-font-set="fa">email</md-icon>
 * </hljs>
 *
 */
function mdIconDirective($mdIcon, $mdTheming, $mdAria ) {

  return {
    scope: {
      fontSet : '@mdFontSet',
      fontIcon: '@mdFontIcon',
      svgIcon : '@mdSvgIcon',
      svgSrc  : '@mdSvgSrc'
    },
    restrict: 'E',
    link : postLink
  };


  /**
   * Directive postLink
   * Supports embedded SVGs, font-icons, & external SVGs
   */
  function postLink(scope, element, attr) {
    $mdTheming(element);

    prepareForFontIcon();

    // If using a font-icon, then the textual name of the icon itself
    // provides the aria-label.

    var label = attr.alt || scope.fontIcon || scope.svgIcon || element.text();
    var attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || '');

    if ( !attr['aria-label'] ) {

      if (label != '' && !parentsHaveText() ) {

        $mdAria.expect(element, 'aria-label', label);
        $mdAria.expect(element, 'role', 'img');

      } else if ( !element.text() ) {
        // If not a font-icon with ligature, then
        // hide from the accessibility layer.

        $mdAria.expect(element, 'aria-hidden', 'true');
      }
    }

    if (attrName) {
      // Use either pre-configured SVG or URL source, respectively.
      attr.$observe(attrName, function(attrVal) {

        element.empty();
        if (attrVal) {
          $mdIcon(attrVal).then(function(svg) {
            element.append(svg);
          });
        }

      });
    }

    function parentsHaveText() {
      var parent = element.parent();
      if (parent.attr('aria-label') || parent.text()) {
        return true;
      }
      else if(parent.parent().attr('aria-label') || parent.parent().text()) {
        return true;
      }
      return false;
    }

    function prepareForFontIcon () {
      if (!scope.svgIcon && !scope.svgSrc) {

        if (scope.fontIcon) {
          element.addClass('md-font ' + scope.fontIcon);
        }

        if (scope.fontSet) {
          element.addClass($mdIcon.fontSet(scope.fontSet));
        }

        if (shouldUseDefaultFontSet()) {
          element.addClass($mdIcon.fontSet());
        }

      }

      function shouldUseDefaultFontSet() {
        return !scope.fontIcon && !scope.fontSet && !attr.hasOwnProperty('class');
      }
    }
  }
}
mdIconDirective.$inject = ["$mdIcon", "$mdTheming", "$mdAria"];

})();
(function(){
"use strict";

  angular
    .module('material.components.icon' )
    .provider('$mdIcon', MdIconProvider);

  /**
    * @ngdoc service
    * @name $mdIconProvider
    * @module material.components.icon
    *
    * @description
    * `$mdIconProvider` is used only to register icon IDs with URLs. These configuration features allow
    * icons and icon sets to be pre-registered and associated with source URLs **before** the `<md-icon />`
    * directives are compiled.
    *
    * If using font-icons, the developer is repsonsible for loading the fonts.
    *
    * If using SVGs, loading of the actual svg files are deferred to on-demand requests and are loaded
    * internally by the `$mdIcon` service using the `$http` service. When an SVG is requested by name/ID,
    * the `$mdIcon` service searches its registry for the associated source URL;
    * that URL is used to on-demand load and parse the SVG dynamically.
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .defaultFontSet( 'fontawesome' )
    *          .defaultIconSet('my/app/icons.svg')       // Register a default set of SVG icons
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set of SVGs
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set
    *   });
    * </hljs>
    *
    * SVG icons and icon sets can be easily pre-loaded and cached using either (a) a build process or (b) a runtime
    * **startup** process (shown below):
    *
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Register a default set of SVG icon definitions
    *     $mdIconProvider.defaultIconSet('my/app/icons.svg')
    *
    *   })
    *   .run(function($http, $templateCache){
    *
    *     // Pre-fetch icons sources by URL and cache in the $templateCache...
    *     // subsequent $http calls will look there first.
    *
    *     var urls = [ 'imy/app/icons.svg', 'img/icons/android.svg'];
    *
    *     angular.forEach(urls, function(url) {
    *       $http.get(url, {cache: $templateCache});
    *     });
    *
    *   });
    *
    * </hljs>
    *
    * NOTE: the loaded SVG data is subsequently cached internally for future requests.
    *
    */

   /**
    * @ngdoc method
    * @name $mdIconProvider#icon
    *
    * @description
    * Register a source URL for a specific icon name; the name may include optional 'icon set' name prefix.
    * These icons  will later be retrieved from the cache using `$mdIcon( <icon name> )`
    *
    * @param {string} id Icon name/id used to register the icon
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.
    * @param {number=} viewBoxSize Sets the width and height the icon's viewBox.
    * It is ignored for icons with an existing viewBox. Default size is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set
    *   });
    * </hljs>
    *
    */
   /**
    * @ngdoc method
    * @name $mdIconProvider#iconSet
    *
    * @description
    * Register a source URL for a 'named' set of icons; group of SVG definitions where each definition
    * has an icon id. Individual icons can be subsequently retrieved from this cached set using
    * `$mdIcon(<icon set name>:<icon name>)`
    *
    * @param {string} id Icon name/id used to register the iconset
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.
    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set. 
    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.
    * Default value is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set
    *   });
    * </hljs>
    *
    */
   /**
    * @ngdoc method
    * @name $mdIconProvider#defaultIconSet
    *
    * @description
    * Register a source URL for the default 'named' set of icons. Unless explicitly registered,
    * subsequent lookups of icons will failover to search this 'default' icon set.
    * Icon can be retrieved from this cached, default set using `$mdIcon(<name>)`
    *
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.
    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set. 
    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.
    * Default value is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .defaultIconSet( 'my/app/social.svg' )   // Register a default icon set
    *   });
    * </hljs>
    *
    */
  /**
   * @ngdoc method
   * @name $mdIconProvider#defaultFontSet
   *
   * @description
   * When using Font-Icons, Angular Material assumes the the Material Design icons will be used and automatically
   * configures the default font-set == 'material-icons'. Note that the font-set references the font-icon library
   * class style that should be applied to the `<md-icon>`.
   *
   * Configuring the default means that the attributes
   * `md-font-set="material-icons"` or `class="material-icons"` do not need to be explicitly declared on the
   * `<md-icon>` markup. For example:
   *
   *  `<md-icon> face </md-icon>`
   *  will render as
   *  `<span class="material-icons"> face </span>`, and
   *
   *  `<md-icon md-font-set="fa"> face </md-icon>`
   *  will render as
   *  `<span class="fa"> face </span>`
   *
   * @param {string} name of the font-library style that should be applied to the md-icon DOM element
   *
   * @usage
   * <hljs lang="js">
   *   app.config(function($mdIconProvider) {
   *     $mdIconProvider.defaultFontSet( 'fontawesome' );
   *   });
   * </hljs>
   *
   */

   /**
    * @ngdoc method
    * @name $mdIconProvider#defaultViewBoxSize
    *
    * @description
    * While `<md-icon />` markup can also be style with sizing CSS, this method configures
    * the default width **and** height used for all icons; unless overridden by specific CSS.
    * The default sizing is (24px, 24px).
    * @param {number=} viewBoxSize Sets the width and height of the viewBox for an icon or an icon set.
    * All icons in a set should be the same size. The default value is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .defaultViewBoxSize(36)   // Register a default icon size (width == height)
    *   });
    * </hljs>
    *
    */

 var config = {
   defaultViewBoxSize: 24,
   defaultFontSet: 'material-icons',
   fontSets : [ ]
 };

 function MdIconProvider() { }

 MdIconProvider.prototype = {
   icon : function (id, url, viewBoxSize) {
     if ( id.indexOf(':') == -1 ) id = '$default:' + id;

     config[id] = new ConfigurationItem(url, viewBoxSize );
     return this;
   },

   iconSet : function (id, url, viewBoxSize) {
     config[id] = new ConfigurationItem(url, viewBoxSize );
     return this;
   },

   defaultIconSet : function (url, viewBoxSize) {
     var setName = '$default';

     if ( !config[setName] ) {
       config[setName] = new ConfigurationItem(url, viewBoxSize );
     }

     config[setName].viewBoxSize = viewBoxSize || config.defaultViewBoxSize;

     return this;
   },

   defaultViewBoxSize : function (viewBoxSize) {
     config.defaultViewBoxSize = viewBoxSize;
     return this;
   },
   
   /**
    * Register an alias name associated with a font-icon library style ;
    */
   fontSet : function fontSet(alias, className) {
    config.fontSets.push({
      alias : alias,
      fontSet : className || alias
    });
    return this;
   },

   /**
    * Specify a default style name associated with a font-icon library
    * fallback to Material Icons.
    *
    */
   defaultFontSet : function defaultFontSet(className) {
    config.defaultFontSet = !className ? '' : className;
    return this;
   },

   defaultIconSize : function defaultIconSize(iconSize) {
     config.defaultIconSize = iconSize;
     return this;
   },

   preloadIcons: function ($templateCache) {
     var iconProvider = this;
     var svgRegistry = [
       {
         id : 'md-tabs-arrow',
         url: 'md-tabs-arrow.svg',
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'
       },
       {
         id : 'md-close',
         url: 'md-close.svg',
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'
       },
       {
         id:  'md-cancel',
         url: 'md-cancel.svg',
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'
       },
       {
         id:  'md-menu',
         url: 'md-menu.svg',
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><path d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z" /></svg>'
       },
       {
         id:  'md-toggle-arrow',
         url: 'md-toggle-arrow-svg',
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'
       }
     ];

     svgRegistry.forEach(function(asset){
       iconProvider.icon(asset.id,  asset.url);
       $templateCache.put(asset.url, asset.svg);
     });

   },

   $get : ['$http', '$q', '$log', '$templateCache', function($http, $q, $log, $templateCache) {
     this.preloadIcons($templateCache);
     return MdIconService(config, $http, $q, $log, $templateCache);
   }]
 };

   /**
    *  Configuration item stored in the Icon registry; used for lookups
    *  to load if not already cached in the `loaded` cache
    */
   function ConfigurationItem(url, viewBoxSize) {
     this.url = url;
     this.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;
   }

 /**
  * @ngdoc service
  * @name $mdIcon
  * @module material.components.icon
  *
  * @description
  * The `$mdIcon` service is a function used to lookup SVG icons.
  *
  * @param {string} id Query value for a unique Id or URL. If the argument is a URL, then the service will retrieve the icon element
  * from its internal cache or load the icon and cache it first. If the value is not a URL-type string, then an ID lookup is
  * performed. The Id may be a unique icon ID or may include an iconSet ID prefix.
  *
  * For the **id** query to work properly, this means that all id-to-URL mappings must have been previously configured
  * using the `$mdIconProvider`.
  *
  * @returns {obj} Clone of the initial SVG DOM element; which was created from the SVG markup in the SVG data file.
  *
  * @usage
  * <hljs lang="js">
  * function SomeDirective($mdIcon) {
  *
  *   // See if the icon has already been loaded, if not
  *   // then lookup the icon from the registry cache, load and cache
  *   // it for future requests.
  *   // NOTE: ID queries require configuration with $mdIconProvider
  *
  *   $mdIcon('android').then(function(iconEl)    { element.append(iconEl); });
  *   $mdIcon('work:chair').then(function(iconEl) { element.append(iconEl); });
  *
  *   // Load and cache the external SVG using a URL
  *
  *   $mdIcon('img/icons/android.svg').then(function(iconEl) {
  *     element.append(iconEl);
  *   });
  * };
  * </hljs>
  *
  * NOTE: The `<md-icon />  ` directive internally uses the `$mdIcon` service to query, loaded, and instantiate
  * SVG DOM elements.
  */
 function MdIconService(config, $http, $q, $log, $templateCache) {
   var iconCache = {};
   var urlRegex = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/i;

   Icon.prototype = { clone : cloneSVG, prepare: prepareAndStyle };
   getIcon.fontSet = findRegisteredFontSet;

   // Publish service...
   return getIcon;

   /**
    * Actual $mdIcon service is essentially a lookup function
    */
   function getIcon(id) {
     id = id || '';

     // If already loaded and cached, use a clone of the cached icon.
     // Otherwise either load by URL, or lookup in the registry and then load by URL, and cache.

     if ( iconCache[id]         ) return $q.when( iconCache[id].clone() );
     if ( urlRegex.test(id)     ) return loadByURL(id).then( cacheIcon(id) );
     if ( id.indexOf(':') == -1 ) id = '$default:' + id;

     return loadByID(id)
         .catch(loadFromIconSet)
         .catch(announceIdNotFound)
         .catch(announceNotFound)
         .then( cacheIcon(id) );
   }

   /**
    * Lookup registered fontSet style using its alias...
    * If not found,
    */
   function findRegisteredFontSet(alias) {
      var useDefault = angular.isUndefined(alias) || !(alias && alias.length);
      if ( useDefault ) return config.defaultFontSet;

      var result = alias;
      angular.forEach(config.fontSets, function(it){
        if ( it.alias == alias ) result = it.fontSet || result;
      });

      return result;
   }

   /**
    * Prepare and cache the loaded icon for the specified `id`
    */
   function cacheIcon( id ) {

     return function updateCache( icon ) {
       iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);

       return iconCache[id].clone();
     };
   }

   /**
    * Lookup the configuration in the registry, if !registered throw an error
    * otherwise load the icon [on-demand] using the registered URL.
    *
    */
   function loadByID(id) {
     var iconConfig = config[id];

     return !iconConfig ? $q.reject(id) : loadByURL(iconConfig.url).then(function(icon) {
       return new Icon(icon, iconConfig);
     });
   }

   /**
    *    Loads the file as XML and uses querySelector( <id> ) to find
    *    the desired node...
    */
   function loadFromIconSet(id) {
     var setName = id.substring(0, id.lastIndexOf(':')) || '$default';
     var iconSetConfig = config[setName];

     return !iconSetConfig ? $q.reject(id) : loadByURL(iconSetConfig.url).then(extractFromSet);

     function extractFromSet(set) {
       var iconName = id.slice(id.lastIndexOf(':') + 1);
       var icon = set.querySelector('#' + iconName);
       return !icon ? $q.reject(id) : new Icon(icon, iconSetConfig);
     }
   }

   /**
    * Load the icon by URL (may use the $templateCache).
    * Extract the data for later conversion to Icon
    */
   function loadByURL(url) {
     return $http
       .get(url, { cache: $templateCache })
       .then(function(response) {
         return angular.element('<div>').append(response.data).find('svg')[0];
       });
   }

   /**
    * User did not specify a URL and the ID has not been registered with the $mdIcon
    * registry
    */
   function announceIdNotFound(id) {
     var msg;

     if (angular.isString(id)) {
       msg = 'icon ' + id + ' not found';
       $log.warn(msg);
     }

     return $q.reject(msg || id);
   }

   /**
    * Catch HTTP or generic errors not related to incorrect icon IDs.
    */
   function announceNotFound(err) {
     var msg = angular.isString(err) ? err : (err.message || err.data || err.statusText);
     $log.warn(msg);

     return $q.reject(msg);
   }

   /**
    * Check target signature to see if it is an Icon instance.
    */
   function isIcon(target) {
     return angular.isDefined(target.element) && angular.isDefined(target.config);
   }

   /**
    *  Define the Icon class
    */
   function Icon(el, config) {
     if (el.tagName != 'svg') {
       el = angular.element('<svg xmlns="http://www.w3.org/2000/svg">').append(el)[0];
     }

     // Inject the namespace if not available...
     if ( !el.getAttribute('xmlns') ) {
       el.setAttribute('xmlns', "http://www.w3.org/2000/svg");
     }

     this.element = el;
     this.config = config;
     this.prepare();
   }

   /**
    *  Prepare the DOM element that will be cached in the
    *  loaded iconCache store.
    */
   function prepareAndStyle() {
     var viewBoxSize = this.config ? this.config.viewBoxSize : config.defaultViewBoxSize;
         angular.forEach({
           'fit'   : '',
           'height': '100%',
           'width' : '100%',
           'preserveAspectRatio': 'xMidYMid meet',
           'viewBox' : this.element.getAttribute('viewBox') || ('0 0 ' + viewBoxSize + ' ' + viewBoxSize)
         }, function(val, attr) {
           this.element.setAttribute(attr, val);
         }, this);

         angular.forEach({
           'pointer-events' : 'none',
           'display' : 'block'
         }, function(val, style) {
           this.element.style[style] = val;
         }, this);
   }

   /**
    * Clone the Icon DOM element.
    */
   function cloneSVG(){
     return this.element.cloneNode(true);
   }

 }

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.input
 */

angular.module('material.components.input', [
  'material.core'
])
  .directive('mdInputContainer', mdInputContainerDirective)
  .directive('label', labelDirective)
  .directive('input', inputTextareaDirective)
  .directive('textarea', inputTextareaDirective)
  .directive('mdMaxlength', mdMaxlengthDirective)
  .directive('placeholder', placeholderDirective);

/**
 * @ngdoc directive
 * @name mdInputContainer
 * @module material.components.input
 *
 * @restrict E
 *
 * @description
 * `<md-input-container>` is the parent of any input or textarea element.
 *
 * Input and textarea elements will not behave properly unless the md-input-container
 * parent is provided.
 *
 * @param md-is-error {expression=} When the given expression evaluates to true, the input container will go into error state. Defaults to erroring if the input has been touched and is invalid.
 * @param md-no-float {boolean=} When present, placeholders will not be converted to floating labels
 *
 * @usage
 * <hljs lang="html">
 *
 * <md-input-container>
 *   <label>Username</label>
 *   <input type="text" ng-model="user.name">
 * </md-input-container>
 *
 * <md-input-container>
 *   <label>Description</label>
 *   <textarea ng-model="user.description"></textarea>
 * </md-input-container>
 *
 * </hljs>
 */
function mdInputContainerDirective($mdTheming, $parse) {
  ContainerCtrl.$inject = ["$scope", "$element", "$attrs"];
  return {
    restrict: 'E',
    link: postLink,
    controller: ContainerCtrl
  };

  function postLink(scope, element, attr) {
    $mdTheming(element);
  }
  function ContainerCtrl($scope, $element, $attrs) {
    var self = this;

    self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);

    self.delegateClick = function() {
      self.input.focus();
    };
    self.element = $element;
    self.setFocused = function(isFocused) {
      $element.toggleClass('md-input-focused', !!isFocused);
    };
    self.setHasValue = function(hasValue) {
      $element.toggleClass('md-input-has-value', !!hasValue);
    };
    self.setInvalid = function(isInvalid) {
      $element.toggleClass('md-input-invalid', !!isInvalid);
    };
    $scope.$watch(function() {
      return self.label && self.input;
    }, function(hasLabelAndInput) {
      if (hasLabelAndInput && !self.label.attr('for')) {
        self.label.attr('for', self.input.attr('id'));
      }
    });
  }
}
mdInputContainerDirective.$inject = ["$mdTheming", "$parse"];

function labelDirective() {
  return {
    restrict: 'E',
    require: '^?mdInputContainer',
    link: function(scope, element, attr, containerCtrl) {
      if (!containerCtrl || attr.mdNoFloat) return;

      containerCtrl.label = element;
      scope.$on('$destroy', function() {
        containerCtrl.label = null;
      });
    }
  };
}

/**
 * @ngdoc directive
 * @name mdInput
 * @restrict E
 * @module material.components.input
 *
 * @description
 * Use the `<input>` or the  `<textarea>` as a child of an `<md-input-container>`.
 *
 * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is specified, a character counter will be shown underneath the input.<br/><br/>
 * The purpose of **`md-maxlength`** is exactly to show the max length counter text. If you don't want the counter text and only need "plain" validation, you can use the "simple" `ng-maxlength` or maxlength attributes.
 * @param {string=} aria-label Aria-label is required when no label is present.  A warning message will be logged in the console if not present.
 * @param {string=} placeholder An alternative approach to using aria-label when the label is not present.  The placeholder text is copied to the aria-label attribute.
 * @param md-no-autogrow {boolean=} When present, textareas will not grow automatically.
 *
 * @usage
 * <hljs lang="html">
 * <md-input-container>
 *   <label>Color</label>
 *   <input type="text" ng-model="color" required md-maxlength="10">
 * </md-input-container>
 * </hljs>
 * <h3>With Errors</h3>
 *
 * <hljs lang="html">
 * <form name="userForm">
 *   <md-input-container>
 *     <label>Last Name</label>
 *     <input name="lastName" ng-model="lastName" required md-maxlength="10" minlength="4">
 *     <div ng-messages="userForm.lastName.$error" ng-show="userForm.lastName.$dirty">
 *       <div ng-message="required">This is required!</div>
 *       <div ng-message="md-maxlength">That's too long!</div>
 *       <div ng-message="minlength">That's too short!</div>
 *     </div>
 *   </md-input-container>
 *   <md-input-container>
 *     <label>Biography</label>
 *     <textarea name="bio" ng-model="biography" required md-maxlength="150"></textarea>
 *     <div ng-messages="userForm.bio.$error" ng-show="userForm.bio.$dirty">
 *       <div ng-message="required">This is required!</div>
 *       <div ng-message="md-maxlength">That's too long!</div>
 *     </div>
 *   </md-input-container>
 *   <md-input-container>
 *     <input aria-label='title' ng-model='title'>
 *   </md-input-container>
 *   <md-input-container>
 *     <input placeholder='title' ng-model='title'>
 *   </md-input-container>
 * </form>
 * </hljs>
 *
 * Requires [ngMessages](https://docs.angularjs.org/api/ngMessages).
 * Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).
 *
 */

function inputTextareaDirective($mdUtil, $window, $mdAria) {
  return {
    restrict: 'E',
    require: ['^?mdInputContainer', '?ngModel'],
    link: postLink
  };

  function postLink(scope, element, attr, ctrls) {

    var containerCtrl = ctrls[0];
    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();
    var isReadonly = angular.isDefined(attr.readonly);

    if ( !containerCtrl ) return;
    if (containerCtrl.input) {
      throw new Error("<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!");
    }
    containerCtrl.input = element;

    if(!containerCtrl.label) {
      $mdAria.expect(element, 'aria-label', element.attr('placeholder'));
    }

    element.addClass('md-input');
    if (!element.attr('id')) {
      element.attr('id', 'input_' + $mdUtil.nextUid());
    }

    if (element[0].tagName.toLowerCase() === 'textarea') {
      setupTextarea();
    }

    var isErrorGetter = containerCtrl.isErrorGetter || function() {
      return ngModelCtrl.$invalid && ngModelCtrl.$touched;
    };
    scope.$watch(isErrorGetter, containerCtrl.setInvalid);

    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);
    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);

    element.on('input', inputCheckValue);

    if (!isReadonly) {
      element
        .on('focus', function(ev) {
          containerCtrl.setFocused(true);
        })
        .on('blur', function(ev) {
          containerCtrl.setFocused(false);
          inputCheckValue();
        });

    }

    //ngModelCtrl.$setTouched();
    //if( ngModelCtrl.$invalid ) containerCtrl.setInvalid();

    scope.$on('$destroy', function() {
      containerCtrl.setFocused(false);
      containerCtrl.setHasValue(false);
      containerCtrl.input = null;
    });

    /**
     *
     */
    function ngModelPipelineCheckValue(arg) {
      containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));
      return arg;
    }
    function inputCheckValue() {
      // An input's value counts if its length > 0,
      // or if the input's validity state says it has bad input (eg string in a number input)
      containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity||{}).badInput);
    }

    function setupTextarea() {
      if(angular.isDefined(element.attr('md-no-autogrow'))) {
        return;
      }

      var node = element[0];
      var container = containerCtrl.element[0];

      var min_rows = NaN;
      var lineHeight = null;
      // can't check if height was or not explicity set,
      // so rows attribute will take precedence if present
      if(node.hasAttribute('rows')) {
        min_rows = parseInt(node.getAttribute('rows'));
      }

      var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);

      function pipelineListener(value) {
        onChangeTextarea();
        return value;
      }

      if (ngModelCtrl) {
        ngModelCtrl.$formatters.push(pipelineListener);
        ngModelCtrl.$viewChangeListeners.push(pipelineListener);
      } else {
        onChangeTextarea();
      }
      element.on('keydown input', onChangeTextarea);

      if(isNaN(min_rows)) {
        element.attr('rows', '1');

        element.on('scroll', onScroll);
      }

      angular.element($window).on('resize', onChangeTextarea);

      scope.$on('$destroy', function() {
        angular.element($window).off('resize', onChangeTextarea);
      });

      function growTextarea() {
        // sets the md-input-container height to avoid jumping around
        container.style.height = container.offsetHeight + 'px';

        // temporarily disables element's flex so its height 'runs free'
        element.addClass('md-no-flex');

        if(isNaN(min_rows)) {
          node.style.height = "auto";
          node.scrollTop = 0;
          var height = getHeight();
          if (height) node.style.height = height + 'px';
        } else {
          node.setAttribute("rows", 1);

          if(!lineHeight) {
            node.style.minHeight = '0';

            lineHeight = element.prop('clientHeight');

            node.style.minHeight = null;
          }

          var rows = Math.max(min_rows, Math.round(node.scrollHeight / lineHeight));
          node.setAttribute("rows", rows);
        }

        // reset everything back to normal
        element.removeClass('md-no-flex');
        container.style.height = 'auto';
      }

      function getHeight () {
        var line = node.scrollHeight - node.offsetHeight;
        return node.offsetHeight + (line > 0 ? line : 0);
      }

      function onScroll(e) {
        node.scrollTop = 0;
        // for smooth new line adding
        var line = node.scrollHeight - node.offsetHeight;
        var height = node.offsetHeight + line;
        node.style.height = height + 'px';
      }
    }
  }
}
inputTextareaDirective.$inject = ["$mdUtil", "$window", "$mdAria"];

function mdMaxlengthDirective($animate) {
  return {
    restrict: 'A',
    require: ['ngModel', '^mdInputContainer'],
    link: postLink
  };

  function postLink(scope, element, attr, ctrls) {
    var maxlength;
    var ngModelCtrl = ctrls[0];
    var containerCtrl = ctrls[1];
    var charCountEl = angular.element('<div class="md-char-counter">');

    // Stop model from trimming. This makes it so whitespace
    // over the maxlength still counts as invalid.
    attr.$set('ngTrim', 'false');
    containerCtrl.element.append(charCountEl);

    ngModelCtrl.$formatters.push(renderCharCount);
    ngModelCtrl.$viewChangeListeners.push(renderCharCount);
    element.on('input keydown', function() {
      renderCharCount(); //make sure it's called with no args
    });

    scope.$watch(attr.mdMaxlength, function(value) {
      maxlength = value;
      if (angular.isNumber(value) && value > 0) {
        if (!charCountEl.parent().length) {
          $animate.enter(charCountEl, containerCtrl.element,
                         angular.element(containerCtrl.element[0].lastElementChild));
        }
        renderCharCount();
      } else {
        $animate.leave(charCountEl);
      }
    });

    ngModelCtrl.$validators['md-maxlength'] = function(modelValue, viewValue) {
      if (!angular.isNumber(maxlength) || maxlength < 0) {
        return true;
      }
      return ( modelValue || element.val() || viewValue || '' ).length <= maxlength;
    };

    function renderCharCount(value) {
      charCountEl.text( ( element.val() || value || '' ).length + '/' + maxlength );
      return value;
    }
  }
}
mdMaxlengthDirective.$inject = ["$animate"];

function placeholderDirective($log) {
  return {
    restrict: 'A',
    require: '^^?mdInputContainer',
    priority: 200,
    link: postLink
  };

  function postLink(scope, element, attr, inputContainer) {
    if (!inputContainer) return;
    if (angular.isDefined(inputContainer.element.attr('md-no-float'))) return;

    var placeholderText = attr.placeholder;
    element.removeAttr('placeholder');

    if ( inputContainer.element.find('label').length == 0 ) {
      if (inputContainer.input && inputContainer.input[0].nodeName != 'MD-SELECT') {
        var placeholder = '<label ng-click="delegateClick()">' + placeholderText + '</label>';

        inputContainer.element.addClass('md-icon-float');
        inputContainer.element.prepend(placeholder);
      }
    } else if (element[0].nodeName != 'MD-SELECT') {
      $log.warn("The placeholder='" + placeholderText + "' will be ignored since this md-input-container has a child label element.");
    }

  }
}
placeholderDirective.$inject = ["$log"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.list
 * @description
 * List module
 */
angular.module('material.components.list', [
  'material.core'
])
  .controller('MdListController', MdListController)
  .directive('mdList', mdListDirective)
  .directive('mdListItem', mdListItemDirective);

/**
 * @ngdoc directive
 * @name mdList
 * @module material.components.list
 *
 * @restrict E
 *
 * @description
 * The `<md-list>` directive is a list container for 1..n `<md-list-item>` tags.
 *
 * @usage
 * <hljs lang="html">
 * <md-list>
 *   <md-list-item class="md-2-line" ng-repeat="item in todos">
 *     <md-checkbox ng-model="item.done"></md-checkbox>
 *     <div class="md-list-item-text">
 *       <h3>{{item.title}}</h3>
 *       <p>{{item.description}}</p>
 *     </div>
 *   </md-list-item>
 * </md-list>
 * </hljs>
 */

function mdListDirective($mdTheming) {
  return {
    restrict: 'E',
    compile: function(tEl) {
      tEl[0].setAttribute('role', 'list');
      return $mdTheming;
    }
  };
}
mdListDirective.$inject = ["$mdTheming"];
/**
 * @ngdoc directive
 * @name mdListItem
 * @module material.components.list
 *
 * @restrict E
 *
 * @description
 * The `<md-list-item>` directive is a container intended for row items in a `<md-list>` container.
 *
 * @usage
 * <hljs lang="html">
 *  <md-list>
 *    <md-list-item>
 *            Item content in list
 *    </md-list-item>
 *  </md-list>
 * </hljs>
 *
 */
function mdListItemDirective($mdAria, $mdConstant, $timeout) {
  var proxiedTypes = ['md-checkbox', 'md-switch'];
  return {
    restrict: 'E',
    controller: 'MdListController',
    compile: function(tEl, tAttrs) {
      // Check for proxy controls (no ng-click on parent, and a control inside)
      var secondaryItem = tEl[0].querySelector('.md-secondary');
      var hasProxiedElement;
      var proxyElement;

      tEl[0].setAttribute('role', 'listitem');

      if (!tAttrs.ngClick) {
        for (var i = 0, type; type = proxiedTypes[i]; ++i) {
          if (proxyElement = tEl[0].querySelector(type)) {
            hasProxiedElement = true;
            break;
          }
        }
        if (hasProxiedElement) {
          wrapIn('div');
        } else if (!tEl[0].querySelector('md-button')) {
          tEl.addClass('md-no-proxy');
        }
      } else {
        wrapIn('button');
      }
      setupToggleAria();


      function setupToggleAria() {
        var toggleTypes = ['md-switch', 'md-checkbox'];
        var toggle;

        for (var i = 0, toggleType; toggleType = toggleTypes[i]; ++i) {
          if (toggle = tEl.find(toggleType)[0]) {
            if (!toggle.hasAttribute('aria-label')) {
              var p = tEl.find('p')[0];
              if (!p) return;
              toggle.setAttribute('aria-label', 'Toggle ' + p.textContent);
            }
          }
        }
      }

      function wrapIn(type) {
        var container;
        if (type == 'div') {
          container = angular.element('<div class="md-no-style md-list-item-inner">');
          container.append(tEl.contents());
          tEl.addClass('md-proxy-focus');
        } else {
          container = angular.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>');
          var copiedAttrs = ['ng-click', 'aria-label', 'ng-disabled'];
          angular.forEach(copiedAttrs, function(attr) {
            if (tEl[0].hasAttribute(attr)) {
              container[0].setAttribute(attr, tEl[0].getAttribute(attr));
              tEl[0].removeAttribute(attr);
            }
          });
          container.children().eq(0).append(tEl.contents());
        }

        tEl[0].setAttribute('tabindex', '-1');
        tEl.append(container);

        if (secondaryItem && secondaryItem.hasAttribute('ng-click')) {
          $mdAria.expect(secondaryItem, 'aria-label');
          var buttonWrapper = angular.element('<md-button class="md-secondary-container md-icon-button">');
          buttonWrapper.attr('ng-click', secondaryItem.getAttribute('ng-click'));
          secondaryItem.removeAttribute('ng-click');
          secondaryItem.setAttribute('tabindex', '-1');
          secondaryItem.classList.remove('md-secondary');
          buttonWrapper.append(secondaryItem);
          secondaryItem = buttonWrapper[0];
        }

        // Check for a secondary item and move it outside
        if ( secondaryItem && (
          secondaryItem.hasAttribute('ng-click') ||
            ( tAttrs.ngClick &&
             isProxiedElement(secondaryItem) )
        )) {
          tEl.addClass('md-with-secondary');
          tEl.append(secondaryItem);
        }
      }

      function isProxiedElement(el) {
        return proxiedTypes.indexOf(el.nodeName.toLowerCase()) != -1;
      }

      return postLink;

      function postLink($scope, $element, $attr, ctrl) {

        var proxies    = [],
            firstChild = $element[0].firstElementChild,
            hasClick   = firstChild && firstChild.hasAttribute('ng-click');

        computeProxies();
        computeClickable();

        if ($element.hasClass('md-proxy-focus') && proxies.length) {
          angular.forEach(proxies, function(proxy) {
            proxy = angular.element(proxy);

            $scope.mouseActive = false;
            proxy.on('mousedown', function() {
              $scope.mouseActive = true;
              $timeout(function(){
                $scope.mouseActive = false;
              }, 100);
            })
            .on('focus', function() {
              if ($scope.mouseActive === false) { $element.addClass('md-focused'); }
              proxy.on('blur', function proxyOnBlur() {
                $element.removeClass('md-focused');
                proxy.off('blur', proxyOnBlur);
              });
            });
          });
        }

        function computeProxies() {
          var children = $element.children();
          if (children.length && !children[0].hasAttribute('ng-click')) {
            angular.forEach(proxiedTypes, function(type) {
              angular.forEach(firstChild.querySelectorAll(type), function(child) {
                proxies.push(child);
              });
            });
          }
        }
        function computeClickable() {
          if (proxies.length || hasClick) {
            $element.addClass('md-clickable');

            ctrl.attachRipple($scope, angular.element($element[0].querySelector('.md-no-style')));
          }
        }

        if (!hasClick && !proxies.length) {
          firstChild && firstChild.addEventListener('keypress', function(e) {
            if (e.target.nodeName != 'INPUT' && e.target.nodeName != 'TEXTAREA') {
              var keyCode = e.which || e.keyCode;
              if (keyCode == $mdConstant.KEY_CODE.SPACE) {
                if (firstChild) {
                  firstChild.click();
                  e.preventDefault();
                  e.stopPropagation();
                }
              }
            }
          });
        }

        $element.off('click');
        $element.off('keypress');

        if (proxies.length && firstChild) {
          $element.children().eq(0).on('click', function(e) {
            if (firstChild.contains(e.target)) {
              angular.forEach(proxies, function(proxy) {
                if (e.target !== proxy && !proxy.contains(e.target)) {
                  angular.element(proxy).triggerHandler('click');
                }
              });
            }
          });
        }
      }
    }
  };
}
mdListItemDirective.$inject = ["$mdAria", "$mdConstant", "$timeout"];

/*
 * @private
 * @ngdoc controller
 * @name MdListController
 * @module material.components.list
 *
 */
function MdListController($scope, $element, $mdListInkRipple) {
  var ctrl = this;
  ctrl.attachRipple = attachRipple;

  function attachRipple (scope, element) {
    var options = {};
    $mdListInkRipple.attach(scope, element, options);
  }
}
MdListController.$inject = ["$scope", "$element", "$mdListInkRipple"];


})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.menu
 */

angular.module('material.components.menu', [
  'material.core',
  'material.components.backdrop'
])
.directive('mdMenu', MenuDirective)
.controller('mdMenuCtrl', MenuController);

/**
 * @ngdoc directive
 * @name mdMenu
 * @module material.components.menu
 * @restrict E
 * @description
 *
 * Menus are elements that open when clicked. They are useful for displaying
 * additional options within the context of an action.
 *
 * Every `md-menu` must specify exactly two child elements. The first element is what is
 * left in the DOM and is used to open the menu. This element is called the trigger element.
 * The trigger element's scope has access to `$mdOpenMenu($event)`
 * which it may call to open the menu. By passing $event as argument, the
 * corresponding event is stopped from propagating up the DOM-tree.
 *
 * The second element is the `md-menu-content` element which represents the
 * contents of the menu when it is open. Typically this will contain `md-menu-item`s,
 * but you can do custom content as well.
 *
 * <hljs lang="html">
 * <md-menu>
 *  <!-- Trigger element is a md-button with an icon -->
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu">
 *    <md-icon md-svg-icon="call:phone"></md-icon>
 *  </md-button>
 *  <md-menu-content>
 *    <md-menu-item><md-button ng-click="doSomething()">Do Something</md-button></md-menu-item>
 *  </md-menu-content>
 * </md-menu>
 * </hljs>

 * ## Sizing Menus
 *
 * The width of the menu when it is open may be specified by specifying a `width`
 * attribute on the `md-menu-content` element.
 * See the [Material Design Spec](http://www.google.com/design/spec/components/menus.html#menus-specs)
 * for more information.
 *
 *
 * ## Aligning Menus
 *
 * When a menu opens, it is important that the content aligns with the trigger element.
 * Failure to align menus can result in jarring experiences for users as content
 * suddenly shifts. To help with this, `md-menu` provides serveral APIs to help
 * with alignment.
 *
 * ### Target Mode
 *
 * By default, `md-menu` will attempt to align the `md-menu-content` by aligning
 * designated child elements in both the trigger and the menu content.
 *
 * To specify the alignment element in the `trigger` you can use the `md-menu-origin`
 * attribute on a child element. If no `md-menu-origin` is specified, the `md-menu`
 * will be used as the origin element.
 *
 * Similarly, the `md-menu-content` may specify a `md-menu-align-target` for a
 * `md-menu-item` to specify the node that it should try and align with.
 *
 * In this example code, we specify an icon to be our origin element, and an
 * icon in our menu content to be our alignment target. This ensures that both
 * icons are aligned when the menu opens.
 *
 * <hljs lang="html">
 * <md-menu>
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open some menu">
 *    <md-icon md-menu-origin md-svg-icon="call:phone"></md-icon>
 *  </md-button>
 *  <md-menu-content>
 *    <md-menu-item>
 *      <md-button ng-click="doSomething()" aria-label="Do something">
 *        <md-icon md-menu-align-target md-svg-icon="call:phone"></md-icon>
 *        Do Something
 *      </md-button>
 *    </md-menu-item>
 *  </md-menu-content>
 * </md-menu>
 * </hljs>
 *
 * Sometimes we want to specify alignment on the right side of an element, for example
 * if we have a menu on the right side a toolbar, we want to right align our menu content.
 *
 * We can specify the origin by using the `md-position-mode` attribute on both
 * the `x` and `y` axis. Right now only the `x-axis` has more than one option.
 * You may specify the default mode of `target target` or
 * `target-right target` to specify a right-oriented alignment target. See the
 * position section of the demos for more examples.
 *
 * ### Menu Offsets
 *
 * It is sometimes unavoidable to need to have a deeper level of control for
 * the positioning of a menu to ensure perfect alignment. `md-menu` provides
 * the `md-offset` attribute to allow pixel level specificty of adjusting the
 * exact positioning.
 *
 * This offset is provided in the format of `x y` or `n` where `n` will be used
 * in both the `x` and `y` axis.
 *
 * For example, to move a menu by `2px` from the top, we can use:
 * <hljs lang="html">
 * <md-menu md-offset="2 0">
 *   <!-- menu-content -->
 * </md-menu>
 * </hljs>
 *
 * @usage
 * <hljs lang="html">
 * <md-menu>
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button">
 *    <md-icon md-svg-icon="call:phone"></md-icon>
 *  </md-button>
 *  <md-menu-content>
 *    <md-menu-item><md-button ng-click="doSomething()">Do Something</md-button></md-menu-item>
 *  </md-menu-content>
 * </md-menu>
 * </hljs>
 *
 * @param {string} md-position-mode The position mode in the form of
             `x`, `y`. Default value is `target`,`target`. Right now the `x` axis
             also suppports `target-right`.
 * @param {string} md-offset An offset to apply to the dropdown after positioning
             `x`, `y`. Default value is `0`,`0`.
 *
 */

function MenuDirective($mdMenu) {
  return {
    restrict: 'E',
    require: 'mdMenu',
    controller: 'mdMenuCtrl', // empty function to be built by link
    scope: true,
    compile: compile
  };

  function compile(templateElement) {
    templateElement.addClass('md-menu');
    var triggerElement = templateElement.children()[0];
    if (!triggerElement.hasAttribute('ng-click')) {
      triggerElement = triggerElement.querySelector('[ng-click]');
    }
    triggerElement && triggerElement.setAttribute('aria-haspopup', 'true');
    if (templateElement.children().length != 2) {
      throw Error('Invalid HTML for md-menu. Expected two children elements.');
    }
    return link;
  }

  function link(scope, element, attrs, mdMenuCtrl) {
    // Move everything into a md-menu-container and pass it to the controller
    var menuContainer = angular.element(
      '<div class="md-open-menu-container md-whiteframe-z2"></div>'
    );
    var menuContents = element.children()[1];
    menuContainer.append(menuContents);
    mdMenuCtrl.init(menuContainer);

    scope.$on('$destroy', function() {
      menuContainer.remove();
      mdMenuCtrl.close();
    });

  }
}
MenuDirective.$inject = ["$mdMenu"];

function MenuController($mdMenu, $attrs, $element, $scope) {

  var menuContainer;
  var ctrl = this;
  var triggerElement;

  // Called by our linking fn to provide access to the menu-content
  // element removed during link
  this.init = function(setMenuContainer) {
    menuContainer = setMenuContainer;
    triggerElement = $element[0].querySelector('[ng-click]');
  };

  // Uses the $mdMenu interim element service to open the menu contents
  this.open = function openMenu(ev) {
    ev && ev.stopPropagation();

    ctrl.isOpen = true;
    triggerElement.setAttribute('aria-expanded', 'true');
    $mdMenu.show({
      scope: $scope,
      mdMenuCtrl: ctrl,
      element: menuContainer,
      target: $element[0]
    });
  };
  // Expose a open function to the child scope for html to use
  $scope.$mdOpenMenu = this.open;

  // Use the $mdMenu interim element service to close the menu contents
  this.close = function closeMenu(skipFocus) {
    if ( !ctrl.isOpen ) return;

    ctrl.isOpen = false;
    triggerElement.setAttribute('aria-expanded', 'false');
    $mdMenu.hide();

    if (!skipFocus) {
      $element.children()[0].focus();
    }
  };

  // Build a nice object out of our string attribute which specifies the
  // target mode for left and top positioning
  this.positionMode = function() {
    var attachment = ($attrs.mdPositionMode || 'target').split(' ');

    // If attachment is a single item, duplicate it for our second value.
    // ie. 'target' -> 'target target'
    if (attachment.length == 1) {
      attachment.push(attachment[0]);
    }

    return {
      left: attachment[0],
      top: attachment[1]
    };
  };

  // Build a nice object out of our string attribute which specifies
  // the offset of top and left in pixels.
  this.offsets = function() {
    var offsets = ($attrs.mdOffset || '0 0').split(' ').map(parseFloat);
    if (offsets.length == 2) {
      return {
        left: offsets[0],
        top: offsets[1]
      };
    } else if (offsets.length == 1) {
      return {
        top: offsets[0],
        left: offsets[0]
      };
    } else {
      throw Error('Invalid offsets specified. Please follow format <x, y> or <n>');
    }
  };
}
MenuController.$inject = ["$mdMenu", "$attrs", "$element", "$scope"];

})();
(function(){
"use strict";

angular.module('material.components.menu')
.provider('$mdMenu', MenuProvider);

/*
 * Interim element provider for the menu.
 * Handles behavior for a menu while it is open, including:
 *    - handling animating the menu opening/closing
 *    - handling key/mouse events on the menu element
 *    - handling enabling/disabling scroll while the menu is open
 *    - handling redrawing during resizes and orientation changes
 *
 */

function MenuProvider($$interimElementProvider) {
  var MENU_EDGE_MARGIN = 8;

  menuDefaultOptions.$inject = ["$$rAF", "$window", "$mdUtil", "$mdTheming", "$mdConstant", "$document"];
  return $$interimElementProvider('$mdMenu')
    .setDefaults({
      methods: ['target'],
      options: menuDefaultOptions
    });

  /* @ngInject */
  function menuDefaultOptions($$rAF, $window, $mdUtil, $mdTheming, $mdConstant, $document) {
    var animator = $mdUtil.dom.animator;

    return {
      parent: 'body',
      onShow: onShow,
      onRemove: onRemove,
      hasBackdrop: true,
      disableParentScroll: true,
      skipCompile: true,
      preserveScope: true,
      themable: true
    };

    /**
     * Boilerplate interimElement onShow function
     * Handles inserting the menu into the DOM, positioning it, and wiring up
     * various interaction events
     */
    function onShow(scope, element, opts) {

      // Sanitize and set defaults on opts
      buildOpts(opts);

      // Wire up theming on our menu element
      $mdTheming.inherit(opts.menuContentEl, opts.target);

      // Register various listeners to move menu on resize/orientation change
      handleResizing();

      // Disable scrolling
      if (opts.disableParentScroll) {
        opts.restoreScroll = $mdUtil.disableScrollAround(opts.element);
      }

      if (opts.backdrop) {
        $mdTheming.inherit(opts.backdrop, opts.parent);
        opts.parent.append(opts.backdrop);
      }
      showMenu();

      // Return the promise for when our menu is done animating in
      return animator
          .waitTransitionEnd(element, {timeout: 370})
          .finally( function(response) {
            opts.cleanupInteraction = activateInteraction();
            return response;
          });

      /** Check for valid opts and set some sane defaults */
      function buildOpts() {
        if (!opts.target) {
          throw Error(
            '$mdMenu.show() expected a target to animate from in options.target'
          );
        }
        angular.extend(opts, {
          alreadyOpen: false,
          isRemoved: false,
          target: angular.element(opts.target), //make sure it's not a naked dom node
          parent: angular.element(opts.parent),
          menuContentEl: angular.element(element[0].querySelector('md-menu-content')),
          backdrop: opts.hasBackdrop && $mdUtil.createBackdrop(scope, "md-menu-backdrop md-click-catcher")
        });
      }

      /** Wireup various resize listeners for screen changes */
      function handleResizing() {
        opts.resizeFn = function() {
          positionMenu(element, opts);
        };
        angular.element($window).on('resize', opts.resizeFn);
        angular.element($window).on('orientationchange', opts.resizeFn);
      }

      /**
       * Place the menu into the DOM and call positioning related functions
       */
      function showMenu() {
        opts.parent.append(element);

        element.removeClass('md-leave');
        // Kick off our animation/positioning but first, wait a few frames
        // so all of our computed positions/sizes are accurate
        $$rAF(function() {
          $$rAF(function() {
            positionMenu(element, opts);
            // Wait a frame before fading in menu (md-active) so that we don't trigger
            // transitions on the menu position changing
            $$rAF(function() {
              element.addClass('md-active');
              opts.alreadyOpen = true;
              element[0].style[$mdConstant.CSS.TRANSFORM] = '';
            });
          });
        });
      }


      /**
       * Activate interaction on the menu. Wire up keyboard listerns for
       * clicks, keypresses, backdrop closing, etc.
       */
      function activateInteraction() {
        element.addClass('md-clickable');

        // close on backdrop click
        opts.backdrop && opts.backdrop.on('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          scope.$apply(function() {
            opts.mdMenuCtrl.close(true);
          });
        });

        // Wire up keyboard listeners.
        // Close on escape, focus next item on down arrow, focus prev item on up
        opts.menuContentEl.on('keydown', function(ev) {
          scope.$apply(function() {
            switch (ev.keyCode) {
              case $mdConstant.KEY_CODE.ESCAPE: opts.mdMenuCtrl.close(); break;
              case $mdConstant.KEY_CODE.UP_ARROW: focusMenuItem(ev, opts.menuContentEl, opts, -1); break;
              case $mdConstant.KEY_CODE.DOWN_ARROW: focusMenuItem(ev, opts.menuContentEl, opts, 1); break;
            }
          });
        });

        // Close menu on menu item click, if said menu-item is not disabled
        var captureClickListener = function(e) {
          var target = e.target;
          // Traverse up the event until we get to the menuContentEl to see if
          // there is an ng-click and that the ng-click is not disabled
          do {
            if (target == opts.menuContentEl[0]) return;
            if (hasAnyAttribute(target, ['ng-click', 'ng-href', 'ui-sref'])) {
              if (!target.hasAttribute('disabled')) {
                close();
              }
              break;
            }
          } while (target = target.parentNode)

          function close() {
            scope.$apply(function() {
              opts.mdMenuCtrl.close();
            });
          }

          function hasAnyAttribute(target, attrs) {
            if (!target) return false;
            for (var i = 0, attr; attr = attrs[i]; ++i) {
              var altForms = [attr, 'data-' + attr, 'x-' + attr];
              for (var j = 0, rawAttr; rawAttr = altForms[j]; ++j) {
                if (target.hasAttribute(rawAttr)) {
                  return true;
                }
              }
            }
            return false;
          }
        };
        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);

        // kick off initial focus in the menu on the first element
        var focusTarget = opts.menuContentEl[0].querySelector('[md-menu-focus-target]');
        if (!focusTarget) focusTarget = opts.menuContentEl[0].firstElementChild.firstElementChild;
        focusTarget.focus();

        return function cleanupInteraction() {
          element.removeClass('md-clickable');
          opts.backdrop.off('click');
          opts.menuContentEl.off('keydown');
          opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);
        };
      }
    }

    /**
      * Takes a keypress event and focuses the next/previous menu
      * item from the emitting element
      * @param {event} e - The origin keypress event
      * @param {angular.element} menuEl - The menu element
      * @param {object} opts - The interim element options for the mdMenu
      * @param {number} direction - The direction to move in (+1 = next, -1 = prev)
      */
    function focusMenuItem(e, menuEl, opts, direction) {
      var currentItem = $mdUtil.getClosest(e.target, 'MD-MENU-ITEM');

      var items = $mdUtil.nodesToArray(menuEl[0].children);
      var currentIndex = items.indexOf(currentItem);

      // Traverse through our elements in the specified direction (+/-1) and try to
      // focus them until we find one that accepts focus
      for (var i = currentIndex + direction; i >= 0 && i < items.length; i = i + direction) {
        var focusTarget = items[i].firstElementChild || items[i];
        var didFocus = attemptFocus(focusTarget);
        if (didFocus) {
          break;
        }
      }
    }

    /**
     * Attempts to focus an element. Checks whether that element is the currently
     * focused element after attempting.
     * @param {HTMLElement} el - the element to attempt focus on
     * @returns {bool} - whether the element was successfully focused
     */
    function attemptFocus(el) {
      if (el && el.getAttribute('tabindex') != -1) {
        el.focus();
        if ($document[0].activeElement == el) {
          return true;
        } else {
          return false;
        }
      }
    }

    /**
     * Boilerplate interimElement onRemove function
     * Handles removing the menu from the DOM, cleaning up the element
     * and removing various listeners
     */
    function onRemove(scope, element, opts) {
      opts.isRemoved = true;
      element.addClass('md-leave');

      opts.cleanupInteraction();

      // Disable resizing handlers
      angular.element($window).off('resize', opts.resizeFn);
      angular.element($window).off('orientationchange', opts.resizeFn);
      opts.resizeFn = undefined;

      // Wait for animate out, then remove from the DOM
      return animator
        .waitTransitionEnd(element, { timeout: 370 })
        .finally(function() {
          element.removeClass('md-active');

          opts.backdrop && opts.backdrop.remove();
          if (element[0].parentNode === opts.parent[0]) {
            opts.parent[0].removeChild(element[0]);
          }
          opts.restoreScroll && opts.restoreScroll();
        });
    }

    /**
     * Computes menu position and sets the style on the menu container
     * @param {HTMLElement} el - the menu container element
     * @param {object} opts - the interim element options object
     */
    function positionMenu(el, opts) {
      if (opts.isRemoved) return;

      var containerNode = el[0],
          openMenuNode = el[0].firstElementChild,
          openMenuNodeRect = openMenuNode.getBoundingClientRect(),
          boundryNode = opts.parent[0],
          boundryNodeRect = boundryNode.getBoundingClientRect();

      var originNode = opts.target[0].querySelector('[md-menu-origin]') || opts.target[0],
          originNodeRect = originNode.getBoundingClientRect();


      var bounds = {
        left: boundryNodeRect.left + MENU_EDGE_MARGIN,
        top: Math.max(boundryNodeRect.top, 0) + MENU_EDGE_MARGIN,
        bottom: Math.max(boundryNodeRect.bottom, Math.max(boundryNodeRect.top, 0) + boundryNodeRect.height) - MENU_EDGE_MARGIN,
        right: boundryNodeRect.right - MENU_EDGE_MARGIN
      };


      var alignTarget, alignTargetRect, existingOffsets;
      var positionMode = opts.mdMenuCtrl.positionMode();

      if (positionMode.top == 'target' || positionMode.left == 'target' || positionMode.left == 'target-right') {
        // TODO: Allow centering on an arbitrary node, for now center on first menu-item's child
        alignTarget = firstVisibleChild();
        if (!alignTarget) {
          throw Error('Error positioning menu. No visible children.');
        }

        alignTarget = alignTarget.firstElementChild || alignTarget;
        alignTarget = alignTarget.querySelector('[md-menu-align-target]') || alignTarget;
        alignTargetRect = alignTarget.getBoundingClientRect();

        existingOffsets = {
          top: parseFloat(containerNode.style.top || 0),
          left: parseFloat(containerNode.style.left || 0)
        };
      }

      var position = { };
      var transformOrigin = 'top ';

      switch (positionMode.top) {
        case 'target':
          position.top = existingOffsets.top + originNodeRect.top - alignTargetRect.top;
          break;
        // Future support for mdMenuBar
        // case 'top':
        //   position.top = originNodeRect.top;
        //   break;
        // case 'bottom':
        //   position.top = originNodeRect.top + originNodeRect.height;
        //   break;
        default:
          throw new Error('Invalid target mode "' + positionMode.top + '" specified for md-menu on Y axis.');
      }

      switch (positionMode.left) {
        case 'target':
          position.left = existingOffsets.left + originNodeRect.left - alignTargetRect.left;
          transformOrigin += 'left';
          break;
        case 'target-right':
          position.left = originNodeRect.right - openMenuNodeRect.width + (openMenuNodeRect.right - alignTargetRect.right);
          transformOrigin += 'right';
          break;
        // Future support for mdMenuBar
        // case 'left':
        //   position.left = originNodeRect.left;
        //   transformOrigin += 'left';
        //   break;
        // case 'right':
        //   position.left = originNodeRect.right - containerNode.offsetWidth;
        //   transformOrigin += 'right';
        //   break;
        default:
          throw new Error('Invalid target mode "' + positionMode.left + '" specified for md-menu on X axis.');
      }

      var offsets = opts.mdMenuCtrl.offsets();
      position.top += offsets.top;
      position.left += offsets.left;

      clamp(position);

      el.css({
        top: position.top + 'px',
        left: position.left + 'px'
      });

      containerNode.style[$mdConstant.CSS.TRANSFORM_ORIGIN] = transformOrigin;

      // Animate a scale out if we aren't just repositioning
      if (!opts.alreadyOpen) {
        containerNode.style[$mdConstant.CSS.TRANSFORM] = 'scale(' +
          Math.min(originNodeRect.width / containerNode.offsetWidth, 1.0) + ',' +
          Math.min(originNodeRect.height / containerNode.offsetHeight, 1.0) +
        ')';
      }

      /**
       * Clamps the repositioning of the menu within the confines of
       * bounding element (often the screen/body)
       */
      function clamp(pos) {
        pos.top = Math.max(Math.min(pos.top, bounds.bottom - containerNode.offsetHeight), bounds.top);
        pos.left = Math.max(Math.min(pos.left, bounds.right - containerNode.offsetWidth), bounds.left);
      }

      /**
        * Gets the first visible child in the openMenuNode
        * Necessary incase menu nodes are being dynamically hidden
        */
      function firstVisibleChild() {
        for (var i = 0; i < openMenuNode.children.length; ++i) {
          if (window.getComputedStyle(openMenuNode.children[i]).display != 'none') {
            return openMenuNode.children[i];
          }
        }
      }
    }
  }
}
MenuProvider.$inject = ["$$interimElementProvider"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.progressCircular
 * @description Circular Progress module!
 */
angular.module('material.components.progressCircular', [
  'material.core'
])
  .directive('mdProgressCircular', MdProgressCircularDirective);

/**
 * @ngdoc directive
 * @name mdProgressCircular
 * @module material.components.progressCircular
 * @restrict E
 *
* @description
 * The circular progress directive is used to make loading content in your app as delightful and
 * painless as possible by minimizing the amount of visual change a user sees before they can view
 * and interact with content.
 *
 * For operations where the percentage of the operation completed can be determined, use a
 * determinate indicator. They give users a quick sense of how long an operation will take.
 *
 * For operations where the user is asked to wait a moment while something finishes up, and it’s
 * not necessary to expose what's happening behind the scenes and how long it will take, use an
 * indeterminate indicator.
 *
 * @param {string} md-mode Select from one of two modes: determinate and indeterminate.
 * @param {number=} value In determinate mode, this number represents the percentage of the
 *     circular progress. Default: 0
 * @param {number=} md-diameter This specifies the diamter of the circular progress. Default: 48
 *
 * @usage
 * <hljs lang="html">
 * <md-progress-circular md-mode="determinate" value="..."></md-progress-circular>
 *
 * <md-progress-circular md-mode="determinate" ng-value="..."></md-progress-circular>
 *
 * <md-progress-circular md-mode="determinate" value="..." md-diameter="100"></md-progress-circular>
 *
 * <md-progress-circular md-mode="indeterminate"></md-progress-circular>
 * </hljs>
 */
function MdProgressCircularDirective($mdConstant, $mdTheming) {
  return {
    restrict: 'E',
    template:
        // The progress 'circle' is composed of two half-circles: the left side and the right
        // side. Each side has CSS applied to 'fill-in' the half-circle to the appropriate progress.
        '<div class="md-spinner-wrapper">' +
          '<div class="md-inner">' +
            '<div class="md-gap"></div>' +
            '<div class="md-left">' +
              '<div class="md-half-circle"></div>' +
            '</div>' +
            '<div class="md-right">' +
              '<div class="md-half-circle"></div>' +
            '</div>' +
          '</div>' +
        '</div>',
    compile: compile
  };

  function compile(tElement) {
    // The javascript in this file is mainly responsible for setting the correct aria attributes.
    // The animation of the progress spinner is done entirely with just CSS.
    tElement.attr('aria-valuemin', 0);
    tElement.attr('aria-valuemax', 100);
    tElement.attr('role', 'progressbar');

    return postLink;
  }

  function postLink(scope, element, attr) {
    $mdTheming(element);
    var circle = element[0];

    // Scale the progress circle based on the default diameter.
    var diameter = attr.mdDiameter || 48;
    var scale = diameter / 48;
    circle.style[$mdConstant.CSS.TRANSFORM] = 'scale(' + scale + ')';

    attr.$observe('value', function(value) {
      var percentValue = clamp(value);
      element.attr('aria-valuenow', percentValue);
    });
  }

  /**
   * Clamps the value to be between 0 and 100.
   * @param {number} value The value to clamp.
   * @returns {number}
   */
  function clamp(value) {
    return Math.max(0, Math.min(value || 0, 100));
  }
}
MdProgressCircularDirective.$inject = ["$mdConstant", "$mdTheming"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.progressLinear
 * @description Linear Progress module!
 */
angular.module('material.components.progressLinear', [
  'material.core'
])
  .directive('mdProgressLinear', MdProgressLinearDirective);

/**
 * @ngdoc directive
 * @name mdProgressLinear
 * @module material.components.progressLinear
 * @restrict E
 *
 * @description
 * The linear progress directive is used to make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content. Each operation should only be represented by one activity indicator—for example, one refresh operation should not display both a refresh bar and an activity circle.
 *
 * For operations where the percentage of the operation completed can be determined, use a determinate indicator. They give users a quick sense of how long an operation will take.
 *
 * For operations where the user is asked to wait a moment while something finishes up, and it’s not necessary to expose what's happening behind the scenes and how long it will take, use an indeterminate indicator.
 *
 * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.
 * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0
 * @param {number=} md-buffer-value In the buffer mode, this number represents the precentage of the secondary progress bar. Default: 0
 *
 * @usage
 * <hljs lang="html">
 * <md-progress-linear md-mode="determinate" value="..."></md-progress-linear>
 *
 * <md-progress-linear md-mode="determinate" ng-value="..."></md-progress-linear>
 *
 * <md-progress-linear md-mode="indeterminate"></md-progress-linear>
 *
 * <md-progress-linear md-mode="buffer" value="..." md-buffer-value="..."></md-progress-linear>
 *
 * <md-progress-linear md-mode="query"></md-progress-linear>
 * </hljs>
 */
function MdProgressLinearDirective($$rAF, $mdConstant, $mdTheming) {

  return {
    restrict: 'E',
    template: '<div class="md-container">' +
      '<div class="md-dashed"></div>' +
      '<div class="md-bar md-bar1"></div>' +
      '<div class="md-bar md-bar2"></div>' +
      '</div>',
    compile: compile
  };
  
  function compile(tElement, tAttrs, transclude) {
    tElement.attr('aria-valuemin', 0);
    tElement.attr('aria-valuemax', 100);
    tElement.attr('role', 'progressbar');

    return postLink;
  }
  function postLink(scope, element, attr) {
    $mdTheming(element);
    var bar1Style = element[0].querySelector('.md-bar1').style,
      bar2Style = element[0].querySelector('.md-bar2').style,
      container = angular.element(element[0].querySelector('.md-container'));

    attr.$observe('value', function(value) {
      if (attr.mdMode == 'query') {
        return;
      }

      var clamped = clamp(value);
      element.attr('aria-valuenow', clamped);
      bar2Style[$mdConstant.CSS.TRANSFORM] = transforms[clamped];
    });

    attr.$observe('mdBufferValue', function(value) {
      bar1Style[$mdConstant.CSS.TRANSFORM] = transforms[clamp(value)];
    });

    $$rAF(function() {
      container.addClass('md-ready');
    });
  }

  function clamp(value) {
    if (value > 100) {
      return 100;
    }

    if (value < 0) {
      return 0;
    }

    return Math.ceil(value || 0);
  }
}
MdProgressLinearDirective.$inject = ["$$rAF", "$mdConstant", "$mdTheming"];


// **********************************************************
// Private Methods
// **********************************************************
var transforms = (function() {
  var values = new Array(101);
  for(var i = 0; i < 101; i++){
    values[i] = makeTransform(i);
  }

  return values;

  function makeTransform(value){
    var scale = value/100;
    var translateX = (value-100)/2;
    return 'translateX(' + translateX.toString() + '%) scale(' + scale.toString() + ', 1)';
  }
})();

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.radioButton
 * @description radioButton module!
 */
angular.module('material.components.radioButton', [
  'material.core'
])
  .directive('mdRadioGroup', mdRadioGroupDirective)
  .directive('mdRadioButton', mdRadioButtonDirective);

/**
 * @ngdoc directive
 * @module material.components.radioButton
 * @name mdRadioGroup
 *
 * @restrict E
 *
 * @description
 * The `<md-radio-group>` directive identifies a grouping
 * container for the 1..n grouped radio buttons; specified using nested
 * `<md-radio-button>` tags.
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the radio button is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently
 * than the native `<input type='radio'>` controls. Whereas the native controls
 * force the user to tab through all the radio buttons, `<md-radio-group>`
 * is focusable, and by default the `<md-radio-button>`s are not.
 *
 * @param {string} ng-model Assignable angular expression to data-bind to.
 * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.
 *
 * @usage
 * <hljs lang="html">
 * <md-radio-group ng-model="selected">
 *
 *   <md-radio-button
 *        ng-repeat="d in colorOptions"
 *        ng-value="d.value" aria-label="{{ d.label }}">
 *
 *          {{ d.label }}
 *
 *   </md-radio-button>
 *
 * </md-radio-group>
 * </hljs>
 *
 */
function mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {
  RadioGroupController.prototype = createRadioGroupControllerProto();

  return {
    restrict: 'E',
    controller: ['$element', RadioGroupController],
    require: ['mdRadioGroup', '?ngModel'],
    link: { pre: linkRadioGroup }
  };

  function linkRadioGroup(scope, element, attr, ctrls) {
    $mdTheming(element);
    var rgCtrl = ctrls[0];
    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();

    function setFocus() {
      if (!element.hasClass('md-focused')) { element.addClass('md-focused'); }
    }

    function keydownListener(ev) {
      var keyCode = ev.which || ev.keyCode;
      switch(keyCode) {
        case $mdConstant.KEY_CODE.LEFT_ARROW:
        case $mdConstant.KEY_CODE.UP_ARROW:
          ev.preventDefault();
          rgCtrl.selectPrevious();
          setFocus();
          break;

        case $mdConstant.KEY_CODE.RIGHT_ARROW:
        case $mdConstant.KEY_CODE.DOWN_ARROW:
          ev.preventDefault();
          rgCtrl.selectNext();
          setFocus();
          break;

        case $mdConstant.KEY_CODE.ENTER:
          var form = angular.element($mdUtil.getClosest(element[0], 'form'));
          if (form.length > 0) {
            form.triggerHandler('submit');
          }
          break;
      }
    }

    rgCtrl.init(ngModelCtrl);

    scope.mouseActive = false;
    element.attr({
              'role': 'radiogroup',
              'tabIndex': element.attr('tabindex') || '0'
            })
            .on('keydown', keydownListener)
            .on('mousedown', function(event) {
              scope.mouseActive = true;
              $timeout(function() {
                scope.mouseActive = false;
              }, 100);
            })
            .on('focus', function() {
              if(scope.mouseActive === false) { rgCtrl.$element.addClass('md-focused'); }
            })
            .on('blur', function() { rgCtrl.$element.removeClass('md-focused'); });
  }

  function RadioGroupController($element) {
    this._radioButtonRenderFns = [];
    this.$element = $element;
  }

  function createRadioGroupControllerProto() {
    return {
      init: function(ngModelCtrl) {
        this._ngModelCtrl = ngModelCtrl;
        this._ngModelCtrl.$render = angular.bind(this, this.render);
      },
      add: function(rbRender) {
        this._radioButtonRenderFns.push(rbRender);
      },
      remove: function(rbRender) {
        var index = this._radioButtonRenderFns.indexOf(rbRender);
        if (index !== -1) {
          this._radioButtonRenderFns.splice(index, 1);
        }
      },
      render: function() {
        this._radioButtonRenderFns.forEach(function(rbRender) {
          rbRender();
        });
      },
      setViewValue: function(value, eventType) {
        this._ngModelCtrl.$setViewValue(value, eventType);
        // update the other radio buttons as well
        this.render();
      },
      getViewValue: function() {
        return this._ngModelCtrl.$viewValue;
      },
      selectNext: function() {
        return changeSelectedButton(this.$element, 1);
      },
      selectPrevious: function() {
        return changeSelectedButton(this.$element, -1);
      },
      setActiveDescendant: function (radioId) {
        this.$element.attr('aria-activedescendant', radioId);
      }
    };
  }
  /**
   * Change the radio group's selected button by a given increment.
   * If no button is selected, select the first button.
   */
  function changeSelectedButton(parent, increment) {
    // Coerce all child radio buttons into an array, then wrap then in an iterator
    var buttons = $mdUtil.iterator(parent[0].querySelectorAll('md-radio-button'), true);

    if (buttons.count()) {
      var validate = function (button) {
        // If disabled, then NOT valid
        return !angular.element(button).attr("disabled");
      };
      var selected = parent[0].querySelector('md-radio-button.md-checked');
      var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();
      // Activate radioButton's click listener (triggerHandler won't create a real click event)
      angular.element(target).triggerHandler('click');


    }
  }

}
mdRadioGroupDirective.$inject = ["$mdUtil", "$mdConstant", "$mdTheming", "$timeout"];

/**
 * @ngdoc directive
 * @module material.components.radioButton
 * @name mdRadioButton
 *
 * @restrict E
 *
 * @description
 * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.
 *
 * While similar to the `<input type="radio" ng-model="" value="">` directive,
 * the `<md-radio-button>` directive provides ink effects, ARIA support, and
 * supports use within named radio groups.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {string} ngValue Angular expression which sets the value to which the expression should
 *    be set when selected.*
 * @param {string} value The value to which the expression should be set when selected.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} aria-label Adds label to radio button for accessibility.
 * Defaults to radio button's text. If no text content is available, a warning will be logged.
 *
 * @usage
 * <hljs lang="html">
 *
 * <md-radio-button value="1" aria-label="Label 1">
 *   Label 1
 * </md-radio-button>
 *
 * <md-radio-button ng-model="color" ng-value="specialValue" aria-label="Green">
 *   Green
 * </md-radio-button>
 *
 * </hljs>
 *
 */
function mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {

  var CHECKED_CSS = 'md-checked';

  return {
    restrict: 'E',
    require: '^mdRadioGroup',
    transclude: true,
    template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' +
                '<div class="md-off"></div>' +
                '<div class="md-on"></div>' +
              '</div>' +
              '<div ng-transclude class="md-label"></div>',
    link: link
  };

  function link(scope, element, attr, rgCtrl) {
    var lastChecked;

    $mdTheming(element);
    configureAria(element, scope);

    rgCtrl.add(render);
    attr.$observe('value', render);

    element
      .on('click', listener)
      .on('$destroy', function() {
        rgCtrl.remove(render);
      });

    function listener(ev) {
      if (element[0].hasAttribute('disabled')) return;

      scope.$apply(function() {
        rgCtrl.setViewValue(attr.value, ev && ev.type);
      });
    }

    function render() {
      var checked = (rgCtrl.getViewValue() == attr.value);
      if (checked === lastChecked) {
        return;
      }
      lastChecked = checked;
      element.attr('aria-checked', checked);
      if (checked) {
        element.addClass(CHECKED_CSS);
        rgCtrl.setActiveDescendant(element.attr('id'));
      } else {
        element.removeClass(CHECKED_CSS);
      }
    }
    /**
     * Inject ARIA-specific attributes appropriate for each radio button
     */
    function configureAria( element, scope ){
      scope.ariaId = buildAriaID();

      element.attr({
        'id' :  scope.ariaId,
        'role' : 'radio',
        'aria-checked' : 'false'
      });

      $mdAria.expectWithText(element, 'aria-label');

      /**
       * Build a unique ID for each radio button that will be used with aria-activedescendant.
       * Preserve existing ID if already specified.
       * @returns {*|string}
       */
      function buildAriaID() {
        return attr.id || ( 'radio' + "_" + $mdUtil.nextUid() );
      }
    }
  }
}
mdRadioButtonDirective.$inject = ["$mdAria", "$mdUtil", "$mdTheming"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.select
 */

/***************************************************

### TODO ###
**DOCUMENTATION AND DEMOS**

- [ ] ng-model with child mdOptions (basic)
- [ ] ng-model="foo" ng-model-options="{ trackBy: '$value.id' }" for objects
- [ ] mdOption with value
- [ ] Usage with input inside

### TODO - POST RC1 ###
- [ ] Abstract placement logic in $mdSelect service to $mdMenu service

***************************************************/

var SELECT_EDGE_MARGIN = 8;
var selectNextId = 0;

angular.module('material.components.select', [
  'material.core',
  'material.components.backdrop'
])
.directive('mdSelect', SelectDirective)
.directive('mdSelectMenu', SelectMenuDirective)
.directive('mdOption', OptionDirective)
.directive('mdOptgroup', OptgroupDirective)
.provider('$mdSelect', SelectProvider);


/**
 * @ngdoc directive
 * @name mdSelect
 * @restrict E
 * @module material.components.select
 *
 * @description Displays a select box, bound to an ng-model.
 *
 * @param {expression} ng-model The model!
 * @param {boolean=} multiple Whether it's multiple.
 * @param {expression=} md-on-close expression to be evaluated when the select is closed
 * @param {string=} placeholder Placeholder hint text.
 * @param {string=} aria-label Optional label for accessibility. Only necessary if no placeholder or
 * @param {string=} md-container-class class list to get applied to the .md-select-menu-container element (for custom styling)
 * explicit label is present.
 *
 * @usage
 * With a placeholder (label and aria-label are added dynamically)
 * <hljs lang="html">
 *   <md-input-container>
 *     <md-select
 *       ng-model="someModel"
 *       placeholder="Select a state">
 *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>
 *     </md-select>
 *   </md-input-container>
 * </hljs>
 *
 * With an explicit label
 * <hljs lang="html">
 *   <md-input-container>
 *     <label>State</label>
 *     <md-select
 *       ng-model="someModel">
 *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>
 *     </md-select>
 *   </md-input-container>
 * </hljs>
 */
function SelectDirective($mdSelect, $mdUtil, $mdTheming, $mdAria, $interpolate, $compile, $parse) {
  return {
    restrict: 'E',
    require: ['^?mdInputContainer', 'mdSelect', 'ngModel', '?^form'],
    compile: compile,
    controller: function() { } // empty placeholder controller to be initialized in link
  };

  function compile(element, attr) {
    // add the select value that will hold our placeholder or selected option value
    var valueEl = angular.element('<md-select-value><span></span></md-select-value>');
    valueEl.append('<span class="md-select-icon" aria-hidden="true"></span>');
    valueEl.addClass('md-select-value');
    if (!valueEl[0].hasAttribute('id')) {
      valueEl.attr('id', 'select_value_label_' + $mdUtil.nextUid());
    }

    // There's got to be an md-content inside. If there's not one, let's add it.
    if (!element.find('md-content').length) {
      element.append( angular.element('<md-content>').append(element.contents()) );
    }

    // Add progress spinner for md-options-loading
    if (attr.mdOnOpen) {
      element.find('md-content').prepend(
        angular.element('<md-progress-circular>')
               .attr('md-mode', 'indeterminate')
               .attr('ng-hide', '$$loadingAsyncDone')
               .wrap('<div>')
               .parent()
      );
    }

    if (attr.name) {
      var autofillClone = angular.element('<select class="md-visually-hidden">');
      autofillClone.attr({
        'name': '.' + attr.name,
        'ng-model': attr.ngModel,
        'aria-hidden': 'true',
        'tabindex': '-1'
      });
      var opts = element.find('md-option');
      angular.forEach(opts, function(el) {
        var newEl = angular.element('<option>' + el.innerHTML + '</option>');
        if (el.hasAttribute('ng-value')) newEl.attr('ng-value', el.getAttribute('ng-value'));
        else if (el.hasAttribute('value')) newEl.attr('value', el.getAttribute('value'));
        autofillClone.append(newEl);
      });

      element.parent().append(autofillClone);
    }

    // Use everything that's left inside element.contents() as the contents of the menu
    var selectTemplate = '<div class="md-select-menu-container">' +
        '<md-select-menu ' +
        (angular.isDefined(attr.multiple) ? 'multiple' : '') + '>' +
          element.html() +
        '</md-select-menu></div>';

    element.empty().append(valueEl);

    attr.tabindex = attr.tabindex || '0';

    return function postLink(scope, element, attr, ctrls) {
      var isOpen;
      var isDisabled;

      var containerCtrl = ctrls[0];
      var mdSelectCtrl = ctrls[1];
      var ngModelCtrl = ctrls[2];
      var formCtrl = ctrls[3];
      // grab a reference to the select menu value label
      var valueEl = element.find('md-select-value');
      var isReadonly = angular.isDefined(attr.readonly);

      if (containerCtrl) {
        if (containerCtrl.input) {
          throw new Error("<md-input-container> can only have *one* child <input>, <textarea> or <select> element!");
        }
        containerCtrl.input = element;
        if (!containerCtrl.label) {
          $mdAria.expect(element, 'aria-label', element.attr('placeholder'));
        }

        var isErrorGetter = containerCtrl && containerCtrl.isErrorGetter || function() {
          return ngModelCtrl.$invalid && ngModelCtrl.$touched;
        };
        scope.$watch(isErrorGetter, containerCtrl.setInvalid);
      }


      var selectContainer, selectScope, selectMenuCtrl;
      createSelect();

      $mdTheming(element);

      if (attr.name && formCtrl) {
        var selectEl = element.parent()[0].querySelector('select[name=".' + attr.name + '"]');
        var controller = angular.element(selectEl).controller();
        if (controller) {
          formCtrl.$removeControl(controller);
        }
      }


      var originalRender = ngModelCtrl.$render;
      ngModelCtrl.$render = function() {
        originalRender();
        syncLabelText();
        inputCheckValue();
      };

      mdSelectCtrl.setLabelText = function(text) {
        mdSelectCtrl.setIsPlaceholder(!text);
        // Use placeholder attribute, otherwise fallback to the md-input-container label
        var tmpPlaceholder = attr.placeholder || (containerCtrl && containerCtrl.label ? containerCtrl.label.text() : '');
        text = text || tmpPlaceholder || '';
        var target = valueEl.children().eq(0);
        target.text(text);
      };

      mdSelectCtrl.setIsPlaceholder = function(isPlaceholder) {
        if (isPlaceholder) {
          valueEl.addClass('md-select-placeholder');
          if (containerCtrl && containerCtrl.label) {
            containerCtrl.label.addClass('md-placeholder md-static');
          }
        } else {
          valueEl.removeClass('md-select-placeholder');
          if (containerCtrl && containerCtrl.label) {
            containerCtrl.label.removeClass('md-placeholder');
          }
        }
      };

      if (!isReadonly) {
        element
          .on('focus', function(ev) {
            // only set focus on if we don't currently have a selected value. This avoids the "bounce"
            // on the label transition because the focus will immediately switch to the open menu.
            if (containerCtrl && containerCtrl.element.hasClass('md-input-has-value')) {
              containerCtrl.setFocused(true);
            }
          })
          .on('blur', function(ev) {
            containerCtrl && containerCtrl.setFocused(false);
            inputCheckValue();
          });
      }

      mdSelectCtrl.triggerClose = function() {
        $parse(attr.mdOnClose)(scope);
      };

      scope.$$postDigest(function() {
        setAriaLabel();
        syncLabelText();
      });

      function setAriaLabel() {
        var labelText = element.attr('placeholder');
        if (!labelText && containerCtrl && containerCtrl.label) {
          labelText = containerCtrl.label.text();
        }
        $mdAria.expect(element, 'aria-label', labelText);
      }

      function syncLabelText() {
        if (selectContainer) {
          selectMenuCtrl = selectMenuCtrl || selectContainer.find('md-select-menu').controller('mdSelectMenu');
          mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());
        }
      }

      var deregisterWatcher;
      attr.$observe('ngMultiple', function(val) {
        if (deregisterWatcher) deregisterWatcher();
        var parser = $parse(val);
        deregisterWatcher = scope.$watch(function() { return parser(scope); }, function(multiple, prevVal) {
          if (multiple === undefined && prevVal === undefined) return; // assume compiler did a good job
          if (multiple) {
            element.attr('multiple', 'multiple');
          } else {
            element.removeAttr('multiple');
          }
          if (selectContainer) {
            selectMenuCtrl.setMultiple(multiple);
            originalRender = ngModelCtrl.$render;
            ngModelCtrl.$render = function() {
              originalRender();
              syncLabelText();
            };
            selectMenuCtrl.refreshViewValue();
            ngModelCtrl.$render();
          }
        });
      });

      attr.$observe('disabled', function(disabled) {
        if (typeof disabled == "string") {
          disabled = true;
        }
        // Prevent click event being registered twice
        if (isDisabled !== undefined && isDisabled === disabled) {
          return;
        }
        isDisabled = disabled;
        if (disabled) {
          element.attr({'tabindex': -1, 'aria-disabled': 'true'});
          element.off('click', openSelect);
          element.off('keydown', handleKeypress);
        } else {
          element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});
          element.on('click', openSelect);
          element.on('keydown', handleKeypress);
        }
      });

      if (!attr.disabled && !attr.ngDisabled) {
        element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});
        element.on('click', openSelect);
        element.on('keydown', handleKeypress);
      }

      var ariaAttrs = {
        role: 'combobox',
        'aria-expanded': 'false'
      };
      if (!element[0].hasAttribute('id')) {
        ariaAttrs.id = 'select_' + $mdUtil.nextUid();
      }
      element.attr(ariaAttrs);

      scope.$on('$destroy', function() {
        if (isOpen) {
          $mdSelect.hide().finally(function() {
            selectContainer.remove();
          });
        } else {
          selectContainer.remove();
        }
        if (containerCtrl) {
          containerCtrl.setFocused(false);
          containerCtrl.setHasValue(false);
          containerCtrl.input = null;
        }
      });

      function inputCheckValue() {
        // The select counts as having a value if one or more options are selected,
        // or if the input's validity state says it has bad input (eg string in a number input)
        containerCtrl && containerCtrl.setHasValue(selectMenuCtrl.selectedLabels().length > 0 || (element[0].validity || {}).badInput);
      }

      // Create a fake select to find out the label value
      function createSelect() {
        selectContainer = angular.element(selectTemplate);
        var selectEl = selectContainer.find('md-select-menu');
        selectEl.data('$ngModelController', ngModelCtrl);
        selectEl.data('$mdSelectController', mdSelectCtrl);
        selectScope = scope.$new();
        $mdTheming.inherit(selectContainer, element);
        selectContainer[0].setAttribute('class', selectContainer[0].getAttribute('class') + ' ' + element.attr('md-container-class'));
        selectContainer = $compile(selectContainer)(selectScope);
        selectMenuCtrl = selectContainer.find('md-select-menu').controller('mdSelectMenu');
      }

      function handleKeypress(e) {
        var allowedCodes = [32, 13, 38, 40];
        if (allowedCodes.indexOf(e.keyCode) != -1 ) {
          // prevent page scrolling on interaction
          e.preventDefault();
          openSelect(e);
        } else {
          if (e.keyCode <= 90 && e.keyCode >= 31) {
            e.preventDefault();
            var node = selectMenuCtrl.optNodeForKeyboardSearch(e);
            if (!node) return;
            var optionCtrl = angular.element(node).controller('mdOption');
            if (!selectMenuCtrl.isMultiple) {
              selectMenuCtrl.deselect( Object.keys(selectMenuCtrl.selected)[0] );
            }
            selectMenuCtrl.select(optionCtrl.hashKey, optionCtrl.value);
            selectMenuCtrl.refreshViewValue();
            ngModelCtrl.$render();
          }
        }
      }

      function openSelect() {
        scope.$apply('isOpen = true');

        $mdSelect.show({
          scope: selectScope,
          preserveScope: true,
          skipCompile: true,
          element: selectContainer,
          target: element[0],
          hasBackdrop: true,
          loadingAsync: attr.mdOnOpen ? scope.$eval(attr.mdOnOpen) || true : false
        }).then(function() {
          isOpen = false;
        });
      }
    };
  }
}
SelectDirective.$inject = ["$mdSelect", "$mdUtil", "$mdTheming", "$mdAria", "$interpolate", "$compile", "$parse"];

function SelectMenuDirective($parse, $mdUtil, $mdTheming) {

  SelectMenuController.$inject = ["$scope", "$attrs", "$element"];
  return {
    restrict: 'E',
    require: ['mdSelectMenu', '?ngModel'],
    controller: SelectMenuController,
    link: { pre: preLink }
  };

  // We use preLink instead of postLink to ensure that the select is initialized before
  // its child options run postLink.
  function preLink(scope, element, attr, ctrls) {
    var selectCtrl = ctrls[0];
    var ngModel = ctrls[1];

    $mdTheming(element);
    element.on('click', clickListener);
    element.on('keypress', keyListener);
    if (ngModel) selectCtrl.init(ngModel);
    configureAria();

    function configureAria() {
      element.attr({
        'id': 'select_menu_' + $mdUtil.nextUid(),
        'role': 'listbox',
        'aria-multiselectable': (selectCtrl.isMultiple ? 'true' : 'false')
      });
    }

    function keyListener(e) {
      if (e.keyCode == 13 || e.keyCode == 32) {
        clickListener(e);
      }
    }

    function clickListener(ev) {
      var option = $mdUtil.getClosest(ev.target, 'md-option');
      var optionCtrl = option && angular.element(option).data('$mdOptionController');
      if (!option || !optionCtrl) return;
      if (option.hasAttribute('disabled')) {
        ev.stopImmediatePropagation();
        return false;
      }

      var optionHashKey = selectCtrl.hashGetter(optionCtrl.value);
      var isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);

      scope.$apply(function() {
        if (selectCtrl.isMultiple) {
          if (isSelected) {
            selectCtrl.deselect(optionHashKey);
          } else {
            selectCtrl.select(optionHashKey, optionCtrl.value);
          }
        } else {
          if (!isSelected) {
            selectCtrl.deselect( Object.keys(selectCtrl.selected)[0] );
            selectCtrl.select( optionHashKey, optionCtrl.value );
          }
        }
        selectCtrl.refreshViewValue();
      });
    }
  }



  function SelectMenuController($scope, $attrs, $element) {
    var self = this;
    self.isMultiple = angular.isDefined($attrs.multiple);
    // selected is an object with keys matching all of the selected options' hashed values
    self.selected = {};
    // options is an object with keys matching every option's hash value,
    // and values matching every option's controller.
    self.options = {};

    $scope.$watch(function() { return self.options; }, function() {
      self.ngModel.$render();
    }, true);

    var deregisterCollectionWatch;
    self.setMultiple = function(isMultiple) {
      var ngModel = self.ngModel;
      self.isMultiple = isMultiple;
      if (deregisterCollectionWatch) deregisterCollectionWatch();

      if (self.isMultiple) {
        ngModel.$validators['md-multiple'] = validateArray;
        ngModel.$render = renderMultiple;

        // watchCollection on the model because by default ngModel only watches the model's
        // reference. This allowed the developer to also push and pop from their array.
        $scope.$watchCollection($attrs.ngModel, function(value) {
          if (validateArray(value)) renderMultiple(value);
        });
      } else {
        delete ngModel.$validators['md-multiple'];
        ngModel.$render = renderSingular;
      }

      function validateArray(modelValue, viewValue) {
        // If a value is truthy but not an array, reject it.
        // If value is undefined/falsy, accept that it's an empty array.
        return angular.isArray(modelValue || viewValue || []);
      }
    };

    var searchStr = '';
    var clearSearchTimeout, optNodes, optText;
    var CLEAR_SEARCH_AFTER = 300;
    self.optNodeForKeyboardSearch = function(e) {
      clearSearchTimeout && clearTimeout(clearSearchTimeout);
      clearSearchTimeout = setTimeout(function() {
        clearSearchTimeout = undefined;
        searchStr = '';
        optText = undefined;
        optNodes = undefined;
      }, CLEAR_SEARCH_AFTER);
      searchStr += String.fromCharCode(e.keyCode);
      var search = new RegExp('^' + searchStr, 'i');
      if (!optNodes) {
        optNodes = $element.find('md-option');
        optText = new Array(optNodes.length);
        angular.forEach(optNodes, function(el, i) {
          optText[i] = el.textContent.trim();
        });
      }
      for (var i = 0; i < optText.length; ++i) {
        if (search.test(optText[i])) {
          return optNodes[i];
        }
      }
    };


    self.init = function(ngModel) {
      self.ngModel = ngModel;

      // Allow users to provide `ng-model="foo" ng-model-options="{trackBy: 'foo.id'}"` so
      // that we can properly compare objects set on the model to the available options
      if (ngModel.$options && ngModel.$options.trackBy) {
        var trackByLocals = {};
        var trackByParsed = $parse(ngModel.$options.trackBy);
        self.hashGetter = function(value, valueScope) {
          trackByLocals.$value = value;
          return trackByParsed(valueScope || $scope, trackByLocals);
        };
      // If the user doesn't provide a trackBy, we automatically generate an id for every
      // value passed in
      } else {
        self.hashGetter = function getHashValue(value) {
          if (angular.isObject(value)) {
            return 'object_' + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId));
          }
          return value;
        };
      }
      self.setMultiple(self.isMultiple);
    };

    self.selectedLabels = function() {
      var selectedOptionEls = $mdUtil.nodesToArray($element[0].querySelectorAll('md-option[selected]'));
      if (selectedOptionEls.length) {
        return selectedOptionEls.map(function(el) { return el.textContent; }).join(', ');
      } else {
        return '';
      }
    };

    self.select = function(hashKey, hashedValue) {
      var option = self.options[hashKey];
      option && option.setSelected(true);
      self.selected[hashKey] = hashedValue;
    };
    self.deselect = function(hashKey) {
      var option = self.options[hashKey];
      option && option.setSelected(false);
      delete self.selected[hashKey];
    };

    self.addOption = function(hashKey, optionCtrl) {
      if (angular.isDefined(self.options[hashKey])) {
        throw new Error('Duplicate md-option values are not allowed in a select. ' +
                        'Duplicate value "' + optionCtrl.value + '" found.');
      }
      self.options[hashKey] = optionCtrl;

      // If this option's value was already in our ngModel, go ahead and select it.
      if (angular.isDefined(self.selected[hashKey])) {
        self.select(hashKey, optionCtrl.value);
        self.refreshViewValue();
      }
    };
    self.removeOption = function(hashKey) {
      delete self.options[hashKey];
      // Don't deselect an option when it's removed - the user's ngModel should be allowed
      // to have values that do not match a currently available option.
    };

    self.refreshViewValue = function() {
      var values = [];
      var option;
      for (var hashKey in self.selected) {
         // If this hashKey has an associated option, push that option's value to the model.
         if ((option = self.options[hashKey])) {
           values.push(option.value);
         } else {
           // Otherwise, the given hashKey has no associated option, and we got it
           // from an ngModel value at an earlier time. Push the unhashed value of
           // this hashKey to the model.
           // This allows the developer to put a value in the model that doesn't yet have
           // an associated option.
           values.push(self.selected[hashKey]);
         }
      }
      self.ngModel.$setViewValue(self.isMultiple ? values : values[0]);
    };

    function renderMultiple() {
      var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue;
      if (!angular.isArray(newSelectedValues)) return;

      var oldSelected = Object.keys(self.selected);

      var newSelectedHashes = newSelectedValues.map(self.hashGetter);
      var deselected = oldSelected.filter(function(hash) {
        return newSelectedHashes.indexOf(hash) === -1;
      });

      deselected.forEach(self.deselect);
      newSelectedHashes.forEach(function(hashKey, i) {
        self.select(hashKey, newSelectedValues[i]);
      });
    }
    function renderSingular() {
      var value = self.ngModel.$viewValue || self.ngModel.$modelValue;
      Object.keys(self.selected).forEach(self.deselect);
      self.select( self.hashGetter(value), value );
    }
  }

}
SelectMenuDirective.$inject = ["$parse", "$mdUtil", "$mdTheming"];

function OptionDirective($mdButtonInkRipple, $mdUtil) {

  OptionController.$inject = ["$element"];
  return {
    restrict: 'E',
    require: ['mdOption', '^^mdSelectMenu'],
    controller: OptionController,
    compile: compile
  };

  function compile(element, attr) {
    // Manual transclusion to avoid the extra inner <span> that ng-transclude generates
    element.append( angular.element('<div class="md-text">').append(element.contents()) );

    element.attr('tabindex', attr.tabindex || '0');
    return postLink;
  }

  function postLink(scope, element, attr, ctrls) {
    var optionCtrl = ctrls[0];
    var selectCtrl = ctrls[1];

    if (angular.isDefined(attr.ngValue)) {
      scope.$watch(attr.ngValue, setOptionValue);
    } else if (angular.isDefined(attr.value)) {
      setOptionValue(attr.value);
    } else {
      scope.$watch(function() { return element.text(); }, setOptionValue);
    }

    attr.$observe('disabled', function(disabled) {
      if (disabled) {
        element.attr('tabindex', '-1');
      } else {
        element.attr('tabindex', '0');
      }
    });

    scope.$$postDigest(function() {
      attr.$observe('selected', function(selected) {
        if (!angular.isDefined(selected)) return;
        if (typeof selected == 'string') selected = true;
        if (selected) {
          if (!selectCtrl.isMultiple) {
            selectCtrl.deselect( Object.keys(selectCtrl.selected)[0] );
          }
          selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);
        } else {
          selectCtrl.deselect(optionCtrl.hashKey);
        }
        selectCtrl.refreshViewValue();
        selectCtrl.ngModel.$render();
      });
    });

    $mdButtonInkRipple.attach(scope, element);
    configureAria();

    function setOptionValue(newValue, oldValue) {
      var oldHashKey = selectCtrl.hashGetter(oldValue, scope);
      var newHashKey = selectCtrl.hashGetter(newValue, scope);

      optionCtrl.hashKey = newHashKey;
      optionCtrl.value = newValue;

      selectCtrl.removeOption(oldHashKey, optionCtrl);
      selectCtrl.addOption(newHashKey, optionCtrl);
    }

    scope.$on('$destroy', function() {
      selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);
    });

    function configureAria() {
      var ariaAttrs = {
        'role': 'option',
        'aria-selected': 'false'
      };

      if (!element[0].hasAttribute('id')) {
        ariaAttrs.id = 'select_option_' + $mdUtil.nextUid();
      }
      element.attr(ariaAttrs);
    }
  }

  function OptionController($element) {
    this.selected = false;
    this.setSelected = function(isSelected) {
      if (isSelected && !this.selected) {
        $element.attr({
          'selected': 'selected',
          'aria-selected': 'true'
        });
      } else if (!isSelected && this.selected) {
        $element.removeAttr('selected');
        $element.attr('aria-selected', 'false');
      }
      this.selected = isSelected;
    };
  }

}
OptionDirective.$inject = ["$mdButtonInkRipple", "$mdUtil"];

function OptgroupDirective() {
  return {
    restrict: 'E',
    compile: compile
  };
  function compile(el, attrs) {
    var labelElement = el.find('label');
    if (!labelElement.length) {
      labelElement = angular.element('<label>');
      el.prepend(labelElement);
    }
    if (attrs.label) labelElement.text(attrs.label);
  }
}

function SelectProvider($$interimElementProvider) {
  selectDefaultOptions.$inject = ["$mdSelect", "$mdConstant", "$$rAF", "$mdUtil", "$mdTheming", "$window", "$q", "$compile"];
  return $$interimElementProvider('$mdSelect')
    .setDefaults({
      methods: ['target'],
      options: selectDefaultOptions
    });

  /* @ngInject */
  function selectDefaultOptions($mdSelect, $mdConstant, $$rAF, $mdUtil, $mdTheming, $window, $q, $compile ) {
    var animator = $mdUtil.dom.animator;

    return {
      parent: 'body',
      onShow: onShow,
      onRemove: onRemove,
      hasBackdrop: true,
      disableParentScroll: true,
      themable: true
    };

    function onShow(scope, element, opts) {


      if (!opts.target) {
        throw new Error('$mdSelect.show() expected a target element in options.target but got ' +
                        '"' + opts.target + '"!');
      }

      angular.extend(opts, {
        isRemoved: false,
        target: angular.element(opts.target), //make sure it's not a naked dom node
        parent: angular.element(opts.parent),
        selectEl: element.find('md-select-menu'),
        contentEl: element.find('md-content'),
        backdrop: opts.hasBackdrop && $mdUtil.createBackdrop(scope, "md-select-backdrop md-click-catcher")
      });

      opts.resizeFn = function() {
        $$rAF(function() {
          $$rAF(function() {
            animateSelect(scope, element, opts);
          });
        });
      };

      angular.element($window).on('resize', opts.resizeFn);
      angular.element($window).on('orientationchange', opts.resizeFn);


      configureAria();

      element.removeClass('md-leave');

      var optionNodes = opts.selectEl[0].getElementsByTagName('md-option');

      if (opts.loadingAsync && opts.loadingAsync.then) {
        opts.loadingAsync.then(function() {
          scope.$$loadingAsyncDone = true;
          // Give ourselves two frames for the progress loader to clear out.
          $$rAF(function() {
            $$rAF(function() {
              // Don't go forward if the select has been removed in this time...
              if (opts.isRemoved) return;
              animateSelect(scope, element, opts);
            });
          });
        });
      } else if (opts.loadingAsync) {
        scope.$$loadingAsyncDone = true;
      }

      if (opts.disableParentScroll && !$mdUtil.getClosest(opts.target, 'MD-DIALOG')) {
        opts.restoreScroll = $mdUtil.disableScrollAround(opts.element);
      } else {
        opts.disableParentScroll = false;
      }
      if (opts.backdrop) {
        $mdTheming.inherit(opts.backdrop, opts.target);
        opts.parent.append(opts.backdrop);
      }
      opts.parent.append(element);

      // Give the select a frame to 'initialize' in the DOM,
      // so we can read its height/width/position
      $$rAF(function() {
        $$rAF(function() {
          if (opts.isRemoved) return;
          animateSelect(scope, element, opts);
        });
      });

      return opts.isRemoved ? $q.reject(true) : animator
        .waitTransitionEnd(opts.selectEl, {timeout: 470})
        .finally(function() {
          activateInteraction();
        });

      function configureAria() {
        opts.target.attr('aria-expanded', 'true');
      }

      function activateInteraction() {
        if (opts.isRemoved) return;
        var selectCtrl = opts.selectEl.controller('mdSelectMenu') || {};
        element.addClass('md-clickable');

        opts.backdrop && opts.backdrop.on('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          opts.restoreFocus = false;
          $mdUtil.nextTick($mdSelect.hide,true);
        });

        // Escape to close
        opts.selectEl.on('keydown', function(ev) {
          switch (ev.keyCode) {
            case $mdConstant.KEY_CODE.SPACE:
            case $mdConstant.KEY_CODE.ENTER:
              var option = $mdUtil.getClosest(ev.target, 'md-option');
              if (option) {
                opts.selectEl.triggerHandler({
                  type: 'click',
                  target: option
                });
                ev.preventDefault();
              }
              break;
            case $mdConstant.KEY_CODE.TAB:
            case $mdConstant.KEY_CODE.ESCAPE:
              ev.preventDefault();
              opts.restoreFocus = true;
              $mdUtil.nextTick($mdSelect.hide,true);
          }
        });

        // Cycling of options, and closing on enter
        opts.selectEl.on('keydown', function(ev) {
          switch (ev.keyCode) {
            case $mdConstant.KEY_CODE.UP_ARROW: return focusPrevOption();
            case $mdConstant.KEY_CODE.DOWN_ARROW: return focusNextOption();
            default:
              if (ev.keyCode >= 31 && ev.keyCode <= 90) {
                var optNode = opts.selectEl.controller('mdSelectMenu').optNodeForKeyboardSearch(ev);
                opts.focusedNode = optNode || opts.focusedNode;
                optNode && optNode.focus();
              }
          }
        });


        function focusOption(direction) {
          optionNodes = opts.selectEl[0].getElementsByTagName('md-option');

          var optionsArray = $mdUtil.nodesToArray(optionNodes);
          var index = optionsArray.indexOf(opts.focusedNode);

          var newOption;

          do {
            if (index === -1) {
              // We lost the previously focused element, reset to first option
              index = 0;
            } else if (direction === 'next' && index < optionsArray.length - 1) {
              index++;
            } else if (direction === 'prev' && index > 0) {
              index--;
            }
            newOption = optionsArray[index];
            if (newOption.hasAttribute('disabled')) newOption = undefined;
          } while (!newOption && index < optionsArray.length - 1 && index > 0)
          newOption && newOption.focus();
          opts.focusedNode = newOption;
        }
        function focusNextOption() {
          focusOption('next');
        }
        function focusPrevOption() {
          focusOption('prev');
        }

        opts.selectEl.on('click', checkCloseMenu);
        opts.selectEl.on('keydown', function(e) {
          if (e.keyCode == 32 || e.keyCode == 13) {
            checkCloseMenu();
          }
        });

        function checkCloseMenu() {
          if (!selectCtrl.isMultiple) {
            opts.restoreFocus = true;

            $mdUtil.nextTick(function() {
              $mdSelect.hide(selectCtrl.ngModel.$viewValue);
            },true);
          }
        }
      }

    }

    function onRemove(scope, element, opts) {
      opts.isRemoved = true;

      opts.target.attr('aria-expanded', 'false');
      opts.selectEl.off('keydown');

      angular.element($window).off('resize', opts.resizeFn);
      angular.element($window).off('orientationchange', opts.resizefn);
      opts.resizeFn = undefined;

      element
        .addClass('md-leave')
        .removeClass('md-clickable');

      var mdSelect = opts.selectEl.controller('mdSelect');
      if (mdSelect) {
        mdSelect.setLabelText(opts.selectEl
          .controller('mdSelectMenu')
          .selectedLabels()
        );
      }

      opts.backdrop && opts.backdrop.remove();

      return animator
        .waitTransitionEnd(element, { timeout: 370 })
        .finally(function() {
          mdSelect && mdSelect.triggerClose();

          element.removeClass('md-active');
          if (element[0].parentNode === opts.parent[0]) {
            opts.parent[0].removeChild(element[0]); // use browser to avoid $destroy event
          }
          if (opts.disableParentScroll) {
            opts.restoreScroll();
          }
          if (opts.restoreFocus) opts.target.focus();
        });
    }

    function animateSelect(scope, element, opts) {
      var containerNode = element[0],
          targetNode = opts.target[0].firstElementChild, // target the label
          parentNode = opts.parent[0],
          selectNode = opts.selectEl[0],
          contentNode = opts.contentEl[0],
          parentRect = parentNode.getBoundingClientRect(),
          targetRect = targetNode.getBoundingClientRect(),
          shouldOpenAroundTarget = false,
          bounds = {
            left: parentRect.left + SELECT_EDGE_MARGIN,
            top: SELECT_EDGE_MARGIN,
            bottom: parentRect.height - SELECT_EDGE_MARGIN,
            right: parentRect.width - SELECT_EDGE_MARGIN - ($mdUtil.floatingScrollbars() ? 16 : 0)
          },
          spaceAvailable = {
            top: targetRect.top - bounds.top,
            left: targetRect.left - bounds.left,
            right: bounds.right - (targetRect.left + targetRect.width),
            bottom: bounds.bottom - (targetRect.top + targetRect.height)
          },
          maxWidth = parentRect.width - SELECT_EDGE_MARGIN * 2,
          isScrollable = contentNode.scrollHeight > contentNode.offsetHeight,
          selectedNode = selectNode.querySelector('md-option[selected]'),
          optionNodes = selectNode.getElementsByTagName('md-option'),
          optgroupNodes = selectNode.getElementsByTagName('md-optgroup');


      var centeredNode;
      // If a selected node, center around that
      if (selectedNode) {
        centeredNode = selectedNode;
      // If there are option groups, center around the first option group
      } else if (optgroupNodes.length) {
        centeredNode = optgroupNodes[0];
      // Otherwise, center around the first optionNode
      } else if (optionNodes.length){
        centeredNode = optionNodes[0];
      // In case there are no options, center on whatever's in there... (eg progress indicator)
      } else {
        centeredNode = contentNode.firstElementChild || contentNode;
      }

      if (contentNode.offsetWidth > maxWidth) {
        contentNode.style['max-width'] = maxWidth + 'px';
      }
      if (shouldOpenAroundTarget) {
        contentNode.style['min-width'] = targetRect.width + 'px';
      }

      // Remove padding before we compute the position of the menu
      if (isScrollable) {
        selectNode.classList.add('md-overflow');
      }

      var focusedNode = centeredNode;
      if ((focusedNode.tagName || '').toUpperCase() === 'MD-OPTGROUP') {
        focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode;
        centeredNode = focusedNode;
      }

      // Get the selectMenuRect *after* max-width is possibly set above
      var selectMenuRect = selectNode.getBoundingClientRect();
      var centeredRect = getOffsetRect(centeredNode);


      if (centeredNode) {
        var centeredStyle = $window.getComputedStyle(centeredNode);
        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;
        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;
      }


      if (isScrollable) {
        var scrollBuffer = contentNode.offsetHeight / 2;
        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;

        if (spaceAvailable.top < scrollBuffer) {
          contentNode.scrollTop = Math.min(
            centeredRect.top,
            contentNode.scrollTop + scrollBuffer - spaceAvailable.top
          );
        } else if (spaceAvailable.bottom < scrollBuffer) {
          contentNode.scrollTop = Math.max(
            centeredRect.top + centeredRect.height - selectMenuRect.height,
            contentNode.scrollTop - scrollBuffer + spaceAvailable.bottom
          );
        }
      }

      var left, top, transformOrigin;
      if (shouldOpenAroundTarget) {
        left = targetRect.left;
        top = targetRect.top + targetRect.height;
        transformOrigin = '50% 0';
        if (top + selectMenuRect.height > bounds.bottom) {
          top = targetRect.top - selectMenuRect.height;
          transformOrigin = '50% 100%';
        }
      } else {
        left = (targetRect.left + centeredRect.left - centeredRect.paddingLeft) + 2;
        top = Math.floor(targetRect.top + targetRect.height / 2 - centeredRect.height / 2 -
          centeredRect.top + contentNode.scrollTop) + 2;


        transformOrigin = (centeredRect.left + targetRect.width / 2) + 'px ' +
        (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + 'px 0px';

        containerNode.style.minWidth = targetRect.width + centeredRect.paddingLeft +
          centeredRect.paddingRight + 'px';
      }

      // Keep left and top within the window
      var containerRect = containerNode.getBoundingClientRect();
      containerNode.style.left = clamp(bounds.left, left, bounds.right - containerRect.width) + 'px';
      containerNode.style.top = clamp(bounds.top, top, bounds.bottom - containerRect.height) + 'px';
      selectNode.style[$mdConstant.CSS.TRANSFORM_ORIGIN] = transformOrigin;

      selectNode.style[$mdConstant.CSS.TRANSFORM] = 'scale(' +
        Math.min(targetRect.width / selectMenuRect.width, 1.0) + ',' +
        Math.min(targetRect.height / selectMenuRect.height, 1.0) +
      ')';


      $$rAF(function() {
        element.addClass('md-active');
        selectNode.style[$mdConstant.CSS.TRANSFORM] = '';
        if (focusedNode && !focusedNode.hasAttribute('disabled')) {
          opts.focusedNode = focusedNode;
          focusedNode.focus();
        }
      });
    }

  }

  function clamp(min, n, max) {
    return Math.max(min, Math.min(n, max));
  }

  function getOffsetRect(node) {
    return node ? {
      left: node.offsetLeft,
      top: node.offsetTop,
      width: node.offsetWidth,
      height: node.offsetHeight
    } : { left: 0, top: 0, width: 0, height: 0 };
  }
}
SelectProvider.$inject = ["$$interimElementProvider"];


})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.sidenav
 *
 * @description
 * A Sidenav QP component.
 */
angular.module('material.components.sidenav', [
    'material.core',
    'material.components.backdrop'
  ])
  .factory('$mdSidenav', SidenavService )
  .directive('mdSidenav', SidenavDirective)
  .directive('mdSidenavFocus', SidenavFocusDirective)
  .controller('$mdSidenavController', SidenavController);


/**
 * @private
 * @ngdoc service
 * @name $mdSidenav
 * @module material.components.sidenav
 *
 * @description
 * `$mdSidenav` makes it easy to interact with multiple sidenavs
 * in an app.
 *
 * @usage
 * <hljs lang="js">
 * // Async lookup for sidenav instance; will resolve when the instance is available
 * $mdSidenav(componentId).then(function(instance) {
 *   $log.debug( componentId + "is now ready" );
 * });
 * // Async toggle the given sidenav;
 * // when instance is known ready and lazy lookup is not needed.
 * $mdSidenav(componentId)
 *    .toggle()
 *    .then(function(){
 *      $log.debug('toggled');
 *    });
 * // Async open the given sidenav
 * $mdSidenav(componentId)
 *    .open()
 *    .then(function(){
 *      $log.debug('opened');
 *    });
 * // Async close the given sidenav
 * $mdSidenav(componentId)
 *    .close()
 *    .then(function(){
 *      $log.debug('closed');
 *    });
 * // Sync check to see if the specified sidenav is set to be open
 * $mdSidenav(componentId).isOpen();
 * // Sync check to whether given sidenav is locked open
 * // If this is true, the sidenav will be open regardless of close()
 * $mdSidenav(componentId).isLockedOpen();
 * </hljs>
 */
function SidenavService($mdComponentRegistry, $q) {
  return function(handle) {

    // Lookup the controller instance for the specified sidNav instance
    var self;
    var errorMsg = "SideNav '" + handle + "' is not available!";
    var instance = $mdComponentRegistry.get(handle);

    if(!instance) {
      $mdComponentRegistry.notFoundError(handle);
    }

    return self = {
      // -----------------
      // Sync methods
      // -----------------
      isOpen: function() {
        return instance && instance.isOpen();
      },
      isLockedOpen: function() {
        return instance && instance.isLockedOpen();
      },
      // -----------------
      // Async methods
      // -----------------
      toggle: function() {
        return instance ? instance.toggle() : $q.reject(errorMsg);
      },
      open: function() {
        return instance ? instance.open() : $q.reject(errorMsg);
      },
      close: function() {
        return instance ? instance.close() : $q.reject(errorMsg);
      },
      then : function( callbackFn ) {
        var promise = instance ? $q.when(instance) : waitForInstance();
        return promise.then( callbackFn || angular.noop );
      }
    };

    /**
     * Deferred lookup of component instance using $component registry
     */
    function waitForInstance() {
      return $mdComponentRegistry
                .when(handle)
                .then(function( it ){
                  instance = it;
                  return it;
                });
    }
  };
}
SidenavService.$inject = ["$mdComponentRegistry", "$q"];
/**
 * @ngdoc directive
 * @name mdSidenavFocus
 * @module material.components.sidenav
 *
 * @restrict A
 *
 * @description
 * `$mdSidenavFocus` provides a way to specify the focused element when a sidenav opens.
 * This is completely optional, as the sidenav itself is focused by default.
 *
 * @usage
 * <hljs lang="html">
 * <md-sidenav>
 *   <form>
 *     <md-input-container>
 *       <label for="testInput">Label</label>
 *       <input id="testInput" type="text" md-sidenav-focus>
 *     </md-input-container>
 *   </form>
 * </md-sidenav>
 * </hljs>
 **/
function SidenavFocusDirective() {
  return {
    restrict: 'A',
    require: '^mdSidenav',
    link: function(scope, element, attr, sidenavCtrl) {
      sidenavCtrl.focusElement(element);
    }
  };
}
/**
 * @ngdoc directive
 * @name mdSidenav
 * @module material.components.sidenav
 * @restrict E
 *
 * @description
 *
 * A Sidenav component that can be opened and closed programatically.
 *
 * By default, upon opening it will slide out on top of the main content area.
 *
 * For keyboard and screen reader accessibility, focus is sent to the sidenav wrapper by default.
 * It can be overridden with the `md-sidenav-focus` directive on the child element you want focused.
 *
 * @usage
 * <hljs lang="html">
 * <div layout="row" ng-controller="MyController">
 *   <md-sidenav md-component-id="left" class="md-sidenav-left">
 *     Left Nav!
 *   </md-sidenav>
 *
 *   <md-content>
 *     Center Content
 *     <md-button ng-click="openLeftMenu()">
 *       Open Left Menu
 *     </md-button>
 *   </md-content>
 *
 *   <md-sidenav md-component-id="right"
 *     md-is-locked-open="$mdMedia('min-width: 333px')"
 *     class="md-sidenav-right">
 *     <form>
 *       <md-input-container>
 *         <label for="testInput">Test input</label>
 *         <input id="testInput" type="text"
 *                ng-model="data" md-sidenav-focus>
 *       </md-input-container>
 *     </form>
 *   </md-sidenav>
 * </div>
 * </hljs>
 *
 * <hljs lang="js">
 * var app = angular.module('myApp', ['ngMaterial']);
 * app.controller('MyController', function($scope, $mdSidenav) {
 *   $scope.openLeftMenu = function() {
 *     $mdSidenav('left').toggle();
 *   };
 * });
 * </hljs>
 *
 * @param {expression=} md-is-open A model bound to whether the sidenav is opened.
 * @param {string=} md-component-id componentId to use with $mdSidenav service.
 * @param {expression=} md-is-locked-open When this expression evalutes to true,
 * the sidenav 'locks open': it falls into the content's flow instead
 * of appearing over it. This overrides the `is-open` attribute.
 *
 * The $mdMedia() service is exposed to the is-locked-open attribute, which
 * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.
 * Examples:
 *
 *   - `<md-sidenav md-is-locked-open="shouldLockOpen"></md-sidenav>`
 *   - `<md-sidenav md-is-locked-open="$mdMedia('min-width: 1000px')"></md-sidenav>`
 *   - `<md-sidenav md-is-locked-open="$mdMedia('sm')"></md-sidenav>` (locks open on small screens)
 */
function SidenavDirective($mdMedia, $mdUtil, $mdConstant, $mdTheming, $animate, $compile, $parse, $log, $q, $document) {
  return {
    restrict: 'E',
    scope: {
      isOpen: '=?mdIsOpen'
    },
    controller: '$mdSidenavController',
    compile: function(element) {
      element.addClass('md-closed');
      element.attr('tabIndex', '-1');
      return postLink;
    }
  };

  /**
   * Directive Post Link function...
   */
  function postLink(scope, element, attr, sidenavCtrl) {
    var lastParentOverFlow;
    var triggeringElement = null;
    var promise = $q.when(true);

    var isLockedOpenParsed = $parse(attr.mdIsLockedOpen);
    var isLocked = function() {
      return isLockedOpenParsed(scope.$parent, {
        $media: function(arg) {
          $log.warn("$media is deprecated for is-locked-open. Use $mdMedia instead.");
          return $mdMedia(arg);
        },
        $mdMedia: $mdMedia
      });
    };
    var backdrop = $mdUtil.createBackdrop(scope, "md-sidenav-backdrop md-opaque ng-enter");

    element.on('$destroy', sidenavCtrl.destroy);
    $mdTheming.inherit(backdrop, element);

    scope.$watch(isLocked, updateIsLocked);
    scope.$watch('isOpen', updateIsOpen);


    // Publish special accessor for the Controller instance
    sidenavCtrl.$toggleOpen = toggleOpen;
    sidenavCtrl.focusElement( sidenavCtrl.focusElement() || element );

    /**
     * Toggle the DOM classes to indicate `locked`
     * @param isLocked
     */
    function updateIsLocked(isLocked, oldValue) {
      scope.isLockedOpen = isLocked;
      if (isLocked === oldValue) {
        element.toggleClass('md-locked-open', !!isLocked);
      } else {
        $animate[isLocked ? 'addClass' : 'removeClass'](element, 'md-locked-open');
      }
      backdrop.toggleClass('md-locked-open', !!isLocked);
    }

    /**
     * Toggle the SideNav view and attach/detach listeners
     * @param isOpen
     */
    function updateIsOpen(isOpen) {
      var parent = element.parent();
      var focusEl = sidenavCtrl.focusElement();

      parent[isOpen ? 'on' : 'off']('keydown', onKeyDown);
      backdrop[isOpen ? 'on' : 'off']('click', close);

      if ( isOpen ) {
        // Capture upon opening..
        triggeringElement = $document[0].activeElement;
      }

      disableParentScroll(isOpen);

      return promise = $q.all([
                isOpen ? $animate.enter(backdrop, parent) : $animate.leave(backdrop),
                $animate[isOpen ? 'removeClass' : 'addClass'](element, 'md-closed')
              ])
              .then(function() {
                // Perform focus when animations are ALL done...
                if (scope.isOpen) {
                  focusEl && focusEl.focus();
                }
              });
    }

    /**
     * Prevent parent scrolling (when the SideNav is open)
     */
    function disableParentScroll(disabled) {
      var parent = element.parent();
      if ( disabled && !lastParentOverFlow ) {

        lastParentOverFlow = parent.css('overflow');
        parent.css('overflow', 'hidden');

      } else if (angular.isDefined(lastParentOverFlow)) {

        parent.css('overflow', lastParentOverFlow);
        lastParentOverFlow = undefined;

      }
    }

    /**
     * Toggle the sideNav view and publish a promise to be resolved when
     * the view animation finishes.
     *
     * @param isOpen
     * @returns {*}
     */
    function toggleOpen( isOpen ) {
      if (scope.isOpen == isOpen ) {

        return $q.when(true);

      } else {
        var deferred = $q.defer();

        // Toggle value to force an async `updateIsOpen()` to run
        scope.isOpen = isOpen;

        $mdUtil.nextTick(function() {

          // When the current `updateIsOpen()` animation finishes
          promise.then(function(result) {

            if ( !scope.isOpen ) {
              // reset focus to originating element (if available) upon close
              triggeringElement && triggeringElement.focus();
              triggeringElement = null;
            }

            deferred.resolve(result);
          });

        });

        return deferred.promise;
      }
    }

    /**
     * Auto-close sideNav when the `escape` key is pressed.
     * @param evt
     */
    function onKeyDown(ev) {
      var isEscape = (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE);
      return isEscape ? close(ev) : $q.when(true);
    }

    /**
     * With backdrop `clicks` or `escape` key-press, immediately
     * apply the CSS close transition... Then notify the controller
     * to close() and perform its own actions.
     */
    function close(ev) {
      ev.preventDefault();
      ev.stopPropagation();

      return sidenavCtrl.close();
    }

  }
}
SidenavDirective.$inject = ["$mdMedia", "$mdUtil", "$mdConstant", "$mdTheming", "$animate", "$compile", "$parse", "$log", "$q", "$document"];

/*
 * @private
 * @ngdoc controller
 * @name SidenavController
 * @module material.components.sidenav
 *
 */
function SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {

  var self = this,
      focusElement;

  // Use Default internal method until overridden by directive postLink

  // Synchronous getters
  self.isOpen = function() { return !!$scope.isOpen; };
  self.isLockedOpen = function() { return !!$scope.isLockedOpen; };

  // Async actions
  self.open   = function() { return self.$toggleOpen( true );  };
  self.close  = function() { return self.$toggleOpen( false ); };
  self.toggle = function() { return self.$toggleOpen( !$scope.isOpen );  };
  self.focusElement = function(el) {
    if ( angular.isDefined(el) ) {
      focusElement = el;
    }
    return focusElement;
  };

  self.$toggleOpen = function(value) { return $q.when($scope.isOpen = value); };

  self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);
}
SidenavController.$inject = ["$scope", "$element", "$attrs", "$mdComponentRegistry", "$q"];

})();
(function(){
"use strict";

  /**
   * @ngdoc module
   * @name material.components.slider
   */
  angular.module('material.components.slider', [
    'material.core'
  ])
  .directive('mdSlider', SliderDirective);

/**
 * @ngdoc directive
 * @name mdSlider
 * @module material.components.slider
 * @restrict E
 * @description
 * The `<md-slider>` component allows the user to choose from a range of
 * values.
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the slider is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * It has two modes: 'normal' mode, where the user slides between a wide range
 * of values, and 'discrete' mode, where the user slides between only a few
 * select values.
 *
 * To enable discrete mode, add the `md-discrete` attribute to a slider,
 * and use the `step` attribute to change the distance between
 * values the user is allowed to pick.
 *
 * @usage
 * <h4>Normal Mode</h4>
 * <hljs lang="html">
 * <md-slider ng-model="myValue" min="5" max="500">
 * </md-slider>
 * </hljs>
 * <h4>Discrete Mode</h4>
 * <hljs lang="html">
 * <md-slider md-discrete ng-model="myDiscreteValue" step="10" min="10" max="130">
 * </md-slider>
 * </hljs>
 *
 * @param {boolean=} md-discrete Whether to enable discrete mode.
 * @param {number=} step The distance between values the user is allowed to pick. Default 1.
 * @param {number=} min The minimum value the user is allowed to pick. Default 0.
 * @param {number=} max The maximum value the user is allowed to pick. Default 100.
 */
function SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse, $log) {
  return {
    scope: {},
    require: '?ngModel',
    template:
      '<div class="md-slider-wrapper">\
        <div class="md-track-container">\
          <div class="md-track"></div>\
          <div class="md-track md-track-fill"></div>\
          <div class="md-track-ticks"></div>\
        </div>\
        <div class="md-thumb-container">\
          <div class="md-thumb"></div>\
          <div class="md-focus-thumb"></div>\
          <div class="md-focus-ring"></div>\
          <div class="md-sign">\
            <span class="md-thumb-text"></span>\
          </div>\
          <div class="md-disabled-thumb"></div>\
        </div>\
      </div>',
    compile: compile
  };

  // **********************************************************
  // Private Methods
  // **********************************************************

  function compile (tElement, tAttrs) {
    tElement.attr({
      tabIndex: 0,
      role: 'slider'
    });

    $mdAria.expect(tElement, 'aria-label');

    return postLink;
  }

  function postLink(scope, element, attr, ngModelCtrl) {
    $mdTheming(element);
    ngModelCtrl = ngModelCtrl || {
      // Mock ngModelController if it doesn't exist to give us
      // the minimum functionality needed
      $setViewValue: function(val) {
        this.$viewValue = val;
        this.$viewChangeListeners.forEach(function(cb) { cb(); });
      },
      $parsers: [],
      $formatters: [],
      $viewChangeListeners: []
    };

    var isDisabledParsed = attr.ngDisabled && $parse(attr.ngDisabled);
    var isDisabledGetter = isDisabledParsed ?
      function() { return isDisabledParsed(scope.$parent); } :
      angular.noop;
    var thumb = angular.element(element[0].querySelector('.md-thumb'));
    var thumbText = angular.element(element[0].querySelector('.md-thumb-text'));
    var thumbContainer = thumb.parent();
    var trackContainer = angular.element(element[0].querySelector('.md-track-container'));
    var activeTrack = angular.element(element[0].querySelector('.md-track-fill'));
    var tickContainer = angular.element(element[0].querySelector('.md-track-ticks'));
    var throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5000);

    // Default values, overridable by attrs
    angular.isDefined(attr.min) ? attr.$observe('min', updateMin) : updateMin(0);
    angular.isDefined(attr.max) ? attr.$observe('max', updateMax) : updateMax(100);
    angular.isDefined(attr.step)? attr.$observe('step', updateStep) : updateStep(1);

    // We have to manually stop the $watch on ngDisabled because it exists
    // on the parent scope, and won't be automatically destroyed when
    // the component is destroyed.
    var stopDisabledWatch = angular.noop;
    if (attr.ngDisabled) {
      stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, updateAriaDisabled);
    }

    $mdGesture.register(element, 'drag');

    element
      .on('keydown', keydownListener)
      .on('$md.pressdown', onPressDown)
      .on('$md.pressup', onPressUp)
      .on('$md.dragstart', onDragStart)
      .on('$md.drag', onDrag)
      .on('$md.dragend', onDragEnd);

    // On resize, recalculate the slider's dimensions and re-render
    function updateAll() {
      refreshSliderDimensions();
      ngModelRender();
      redrawTicks();
    }
    setTimeout(updateAll);

    var debouncedUpdateAll = $$rAF.throttle(updateAll);
    angular.element($window).on('resize', debouncedUpdateAll);

    scope.$on('$destroy', function() {
      angular.element($window).off('resize', debouncedUpdateAll);
      stopDisabledWatch();
    });

    ngModelCtrl.$render = ngModelRender;
    ngModelCtrl.$viewChangeListeners.push(ngModelRender);
    ngModelCtrl.$formatters.push(minMaxValidator);
    ngModelCtrl.$formatters.push(stepValidator);

    /**
     * Attributes
     */
    var min;
    var max;
    var step;
    function updateMin(value) {
      min = parseFloat(value);
      element.attr('aria-valuemin', value);
      updateAll();
    }
    function updateMax(value) {
      max = parseFloat(value);
      element.attr('aria-valuemax', value);
      updateAll();
    }
    function updateStep(value) {
      step = parseFloat(value);
      redrawTicks();
    }
    function updateAriaDisabled(isDisabled) {
      element.attr('aria-disabled', !!isDisabled);
    }

    // Draw the ticks with canvas.
    // The alternative to drawing ticks with canvas is to draw one element for each tick,
    // which could quickly become a performance bottleneck.
    var tickCanvas, tickCtx;
    function redrawTicks() {
      if (!angular.isDefined(attr.mdDiscrete)) return;
      if ( angular.isUndefined(step) )         return;

      if ( step <= 0 ) {
        var msg = 'Slider step value must be greater than zero when in discrete mode';
        $log.error(msg);
        throw new Error(msg);
      }

      var numSteps = Math.floor( (max - min) / step );
      if (!tickCanvas) {
        tickCanvas = angular.element('<canvas style="position:absolute;">');
        tickContainer.append(tickCanvas);

        var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);
        tickCtx = tickCanvas[0].getContext('2d');
        tickCtx.fillStyle = trackTicksStyle.backgroundColor || 'black';
      }

      var dimensions = getSliderDimensions();
      tickCanvas[0].width = dimensions.width;
      tickCanvas[0].height = dimensions.height;

      var distance;
      for (var i = 0; i <= numSteps; i++) {
        distance = Math.floor(dimensions.width * (i / numSteps));
        tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);
      }
    }


    /**
     * Refreshing Dimensions
     */
    var sliderDimensions = {};
    refreshSliderDimensions();
    function refreshSliderDimensions() {
      sliderDimensions = trackContainer[0].getBoundingClientRect();
    }
    function getSliderDimensions() {
      throttledRefreshDimensions();
      return sliderDimensions;
    }

    /**
     * left/right arrow listener
     */
    function keydownListener(ev) {
      if(element[0].hasAttribute('disabled')) {
        return;
      }

      var changeAmount;
      if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {
        changeAmount = -step;
      } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {
        changeAmount = step;
      }
      if (changeAmount) {
        if (ev.metaKey || ev.ctrlKey || ev.altKey) {
          changeAmount *= 4;
        }
        ev.preventDefault();
        ev.stopPropagation();
        scope.$evalAsync(function() {
          setModelValue(ngModelCtrl.$viewValue + changeAmount);
        });
      }
    }

    /**
     * ngModel setters and validators
     */
    function setModelValue(value) {
      ngModelCtrl.$setViewValue( minMaxValidator(stepValidator(value)) );
    }
    function ngModelRender() {
      if (isNaN(ngModelCtrl.$viewValue)) {
        ngModelCtrl.$viewValue = ngModelCtrl.$modelValue;
      }

      var percent = (ngModelCtrl.$viewValue - min) / (max - min);
      scope.modelValue = ngModelCtrl.$viewValue;
      element.attr('aria-valuenow', ngModelCtrl.$viewValue);
      setSliderPercent(percent);
      thumbText.text( ngModelCtrl.$viewValue );
    }

    function minMaxValidator(value) {
      if (angular.isNumber(value)) {
        return Math.max(min, Math.min(max, value));
      }
    }
    function stepValidator(value) {
      if (angular.isNumber(value)) {
        var formattedValue = (Math.round(value / step) * step);
        // Format to 3 digits after the decimal point - fixes #2015.
        return (Math.round(formattedValue * 1000) / 1000);
      }
    }

    /**
     * @param percent 0-1
     */
    function setSliderPercent(percent) {
      activeTrack.css('width', (percent * 100) + '%');
      thumbContainer.css(
        'left',
        (percent * 100) + '%'
      );
      element.toggleClass('md-min', percent === 0);
    }


    /**
     * Slide listeners
     */
    var isDragging = false;
    var isDiscrete = angular.isDefined(attr.mdDiscrete);

    function onPressDown(ev) {
      if (isDisabledGetter()) return;

      element.addClass('active');
      element[0].focus();
      refreshSliderDimensions();

      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));
      var closestVal = minMaxValidator( stepValidator(exactVal) );
      scope.$apply(function() {
        setModelValue( closestVal );
        setSliderPercent( valueToPercent(closestVal));
      });
    }
    function onPressUp(ev) {
      if (isDisabledGetter()) return;

      element.removeClass('dragging active');

      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));
      var closestVal = minMaxValidator( stepValidator(exactVal) );
      scope.$apply(function() {
        setModelValue(closestVal);
        ngModelRender();
      });
    }
    function onDragStart(ev) {
      if (isDisabledGetter()) return;
      isDragging = true;
      ev.stopPropagation();

      element.addClass('dragging');
      setSliderFromEvent(ev);
    }
    function onDrag(ev) {
      if (!isDragging) return;
      ev.stopPropagation();
      setSliderFromEvent(ev);
    }
    function onDragEnd(ev) {
      if (!isDragging) return;
      ev.stopPropagation();
      isDragging = false;
    }

    function setSliderFromEvent(ev) {
      // While panning discrete, update only the
      // visual positioning but not the model value.
      if ( isDiscrete ) adjustThumbPosition( ev.pointer.x );
      else              doSlide( ev.pointer.x );
    }

    /**
     * Slide the UI by changing the model value
     * @param x
     */
    function doSlide( x ) {
      scope.$evalAsync( function() {
        setModelValue( percentToValue( positionToPercent(x) ));
      });
    }

    /**
     * Slide the UI without changing the model (while dragging/panning)
     * @param x
     */
    function adjustThumbPosition( x ) {
      var exactVal = percentToValue( positionToPercent( x ));
      var closestVal = minMaxValidator( stepValidator(exactVal) );
      setSliderPercent( positionToPercent(x) );
      thumbText.text( closestVal );
    }

    /**
     * Convert horizontal position on slider to percentage value of offset from beginning...
     * @param x
     * @returns {number}
     */
    function positionToPercent( x ) {
      return Math.max(0, Math.min(1, (x - sliderDimensions.left) / (sliderDimensions.width)));
    }

    /**
     * Convert percentage offset on slide to equivalent model value
     * @param percent
     * @returns {*}
     */
    function percentToValue( percent ) {
      return (min + percent * (max - min));
    }

    function valueToPercent( val ) {
      return (val - min)/(max - min);
    }
  }
}
SliderDirective.$inject = ["$$rAF", "$window", "$mdAria", "$mdUtil", "$mdConstant", "$mdTheming", "$mdGesture", "$parse", "$log"];

})();
(function(){
"use strict";

/*
 * @ngdoc module
 * @name material.components.sticky
 * @description
 *
 * Sticky effects for md
 */

angular.module('material.components.sticky', [
  'material.core',
  'material.components.content'
])
  .factory('$mdSticky', MdSticky);

/*
 * @ngdoc service
 * @name $mdSticky
 * @module material.components.sticky
 *
 * @description
 * The `$mdSticky`service provides a mixin to make elements sticky.
 *
 * @returns A `$mdSticky` function that takes three arguments:
 *   - `scope`
 *   - `element`: The element that will be 'sticky'
 *   - `elementClone`: A clone of the element, that will be shown
 *     when the user starts scrolling past the original element.
 *     If not provided, it will use the result of `element.clone()`.
 */

function MdSticky($document, $mdConstant, $compile, $$rAF, $mdUtil) {

  var browserStickySupport = checkStickySupport();

  /**
   * Registers an element as sticky, used internally by directives to register themselves
   */
  return function registerStickyElement(scope, element, stickyClone) {
    var contentCtrl = element.controller('mdContent');
    if (!contentCtrl) return;

    if (browserStickySupport) {
      element.css({
        position: browserStickySupport,
        top: 0,
        'z-index': 2
      });
    } else {
      var $$sticky = contentCtrl.$element.data('$$sticky');
      if (!$$sticky) {
        $$sticky = setupSticky(contentCtrl);
        contentCtrl.$element.data('$$sticky', $$sticky);
      }

      var deregister = $$sticky.add(element, stickyClone || element.clone());
      scope.$on('$destroy', deregister);
    }
  };

  function setupSticky(contentCtrl) {
    var contentEl = contentCtrl.$element;

    // Refresh elements is very expensive, so we use the debounced
    // version when possible.
    var debouncedRefreshElements = $$rAF.throttle(refreshElements);

    // setupAugmentedScrollEvents gives us `$scrollstart` and `$scroll`,
    // more reliable than `scroll` on android.
    setupAugmentedScrollEvents(contentEl);
    contentEl.on('$scrollstart', debouncedRefreshElements);
    contentEl.on('$scroll', onScroll);

    var self;
    var stickyBaseoffset = contentEl.prop('offsetTop');
    return self = {
      prev: null,
      current: null, //the currently stickied item
      next: null,
      items: [],
      add: add,
      refreshElements: refreshElements
    };

    /***************
     * Public
     ***************/
    // Add an element and its sticky clone to this content's sticky collection
    function add(element, stickyClone) {
      stickyClone.addClass('md-sticky-clone');
      stickyClone.css('top', stickyBaseoffset + 'px');

      var item = {
        element: element,
        clone: stickyClone
      };
      self.items.push(item);

      contentEl.parent().prepend(item.clone);

      debouncedRefreshElements();

      return function remove() {
        self.items.forEach(function(item, index) {
          if (item.element[0] === element[0]) {
            self.items.splice(index, 1);
            item.clone.remove();
          }
        });
        debouncedRefreshElements();
      };
    }

    function refreshElements() {
      // Sort our collection of elements by their current position in the DOM.
      // We need to do this because our elements' order of being added may not
      // be the same as their order of display.
      self.items.forEach(refreshPosition);
      self.items = self.items.sort(function(a, b) {
        return a.top < b.top ? -1 : 1;
      });

      // Find which item in the list should be active, 
      // based upon the content's current scroll position
      var item;
      var currentScrollTop = contentEl.prop('scrollTop');
      for (var i = self.items.length - 1; i >= 0; i--) {
        if (currentScrollTop > self.items[i].top) {
          item = self.items[i];
          break;
        }
      }
      setCurrentItem(item);
    }


    /***************
     * Private
     ***************/

    // Find the `top` of an item relative to the content element,
    // and also the height.
    function refreshPosition(item) {
      // Find the top of an item by adding to the offsetHeight until we reach the 
      // content element.
      var current = item.element[0];
      item.top = 0;
      item.left = 0;
      while (current && current !== contentEl[0]) {
        item.top += current.offsetTop;
        item.left += current.offsetLeft;
        current = current.offsetParent;
      }
      item.height = item.element.prop('offsetHeight');
      item.clone.css('margin-left', item.left + 'px');
      if ($mdUtil.floatingScrollbars()) {
        item.clone.css('margin-right', '0');
      }
    }


    // As we scroll, push in and select the correct sticky element.
    function onScroll() {
      var scrollTop = contentEl.prop('scrollTop');
      var isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);
      onScroll.prevScrollTop = scrollTop;

      // At the top?
      if (scrollTop === 0) {
        setCurrentItem(null);

      // Going to next item?
      } else if (isScrollingDown && self.next) {
        if (self.next.top - scrollTop <= 0) {
          // Sticky the next item if we've scrolled past its position.
          setCurrentItem(self.next);
        } else if (self.current) {
          // Push the current item up when we're almost at the next item.
          if (self.next.top - scrollTop <= self.next.height) {
            translate(self.current, self.next.top - self.next.height - scrollTop);
          } else {
            translate(self.current, null);
          }
        }
        
      // Scrolling up with a current sticky item?
      } else if (!isScrollingDown && self.current) {
        if (scrollTop < self.current.top) {
          // Sticky the previous item if we've scrolled up past
          // the original position of the currently stickied item.
          setCurrentItem(self.prev);
        }
        // Scrolling up, and just bumping into the item above (just set to current)?
        // If we have a next item bumping into the current item, translate
        // the current item up from the top as it scrolls into view.
        if (self.current && self.next) {
          if (scrollTop >= self.next.top - self.current.height) {
            translate(self.current, self.next.top - scrollTop - self.current.height);
          } else {
            translate(self.current, null);
          }
        }
      }
    }
     
   function setCurrentItem(item) {
     if (self.current === item) return;
     // Deactivate currently active item
     if (self.current) {
       translate(self.current, null);
       setStickyState(self.current, null);
     }

     // Activate new item if given
     if (item) {
       setStickyState(item, 'active');
     }

     self.current = item;
     var index = self.items.indexOf(item);
     // If index === -1, index + 1 = 0. It works out.
     self.next = self.items[index + 1];
     self.prev = self.items[index - 1];
     setStickyState(self.next, 'next');
     setStickyState(self.prev, 'prev');
   }

   function setStickyState(item, state) {
     if (!item || item.state === state) return;
     if (item.state) {
       item.clone.attr('sticky-prev-state', item.state);
       item.element.attr('sticky-prev-state', item.state);
     }
     item.clone.attr('sticky-state', state);
     item.element.attr('sticky-state', state);
     item.state = state;
   }

   function translate(item, amount) {
     if (!item) return;
     if (amount === null || amount === undefined) {
       if (item.translateY) {
         item.translateY = null;
         item.clone.css($mdConstant.CSS.TRANSFORM, '');
       }
     } else {
       item.translateY = amount;
       item.clone.css(
         $mdConstant.CSS.TRANSFORM, 
         'translate3d(' + item.left + 'px,' + amount + 'px,0)'
       );
     }
   }
  }

  // Function to check for browser sticky support
  function checkStickySupport($el) {
    var stickyProp;
    var testEl = angular.element('<div>');
    $document[0].body.appendChild(testEl[0]);

    var stickyProps = ['sticky', '-webkit-sticky'];
    for (var i = 0; i < stickyProps.length; ++i) {
      testEl.css({position: stickyProps[i], top: 0, 'z-index': 2});
      if (testEl.css('position') == stickyProps[i]) {
        stickyProp = stickyProps[i];
        break;
      }
    }
    testEl.remove();
    return stickyProp;
  }

  // Android 4.4 don't accurately give scroll events.
  // To fix this problem, we setup a fake scroll event. We say:
  // > If a scroll or touchmove event has happened in the last DELAY milliseconds, 
  //   then send a `$scroll` event every animationFrame.
  // Additionally, we add $scrollstart and $scrollend events.
  function setupAugmentedScrollEvents(element) {
    var SCROLL_END_DELAY = 200;
    var isScrolling;
    var lastScrollTime;
    element.on('scroll touchmove', function() {
      if (!isScrolling) {
        isScrolling = true;
        $$rAF(loopScrollEvent);
        element.triggerHandler('$scrollstart');
      }
      element.triggerHandler('$scroll');
      lastScrollTime = +$mdUtil.now();
    });

    function loopScrollEvent() {
      if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {
        isScrolling = false;
        element.triggerHandler('$scrollend');
      } else {
        element.triggerHandler('$scroll');
        $$rAF(loopScrollEvent);
      }
    }
  }

}
MdSticky.$inject = ["$document", "$mdConstant", "$compile", "$$rAF", "$mdUtil"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.subheader
 * @description
 * SubHeader module
 *
 *  Subheaders are special list tiles that delineate distinct sections of a
 *  list or grid list and are typically related to the current filtering or
 *  sorting criteria. Subheader tiles are either displayed inline with tiles or
 *  can be associated with content, for example, in an adjacent column.
 *
 *  Upon scrolling, subheaders remain pinned to the top of the screen and remain
 *  pinned until pushed on or off screen by the next subheader. @see [Material
 *  Design Specifications](https://www.google.com/design/spec/components/subheaders.html)
 *
 *  > To improve the visual grouping of content, use the system color for your subheaders.
 *
 */
angular.module('material.components.subheader', [
  'material.core',
  'material.components.sticky'
])
  .directive('mdSubheader', MdSubheaderDirective);

/**
 * @ngdoc directive
 * @name mdSubheader
 * @module material.components.subheader
 *
 * @restrict E
 *
 * @description
 * The `<md-subheader>` directive is a subheader for a section. By default it is sticky.
 * You can make it not sticky by applying the `md-no-sticky` class to the subheader.
 *
 *
 * @usage
 * <hljs lang="html">
 * <md-subheader>Online Friends</md-subheader>
 * </hljs>
 */

function MdSubheaderDirective($mdSticky, $compile, $mdTheming) {
  return {
    restrict: 'E',
    replace: true,
    transclude: true,
    template: 
      '<h2 class="md-subheader">' +
        '<div class="md-subheader-inner">' +
          '<span class="md-subheader-content"></span>' +
        '</div>' +
      '</h2>',
    compile: function(element, attr, transclude) {
      return function postLink(scope, element, attr) {
        $mdTheming(element);
        var outerHTML = element[0].outerHTML;

        function getContent(el) {
          return angular.element(el[0].querySelector('.md-subheader-content'));
        }

        // Transclude the user-given contents of the subheader
        // the conventional way.
        transclude(scope, function(clone) {
          getContent(element).append(clone);
        });

        // Create another clone, that uses the outer and inner contents
        // of the element, that will be 'stickied' as the user scrolls.
        if (!element.hasClass('md-no-sticky')) {
          transclude(scope, function(clone) {
            var stickyClone = $compile(angular.element(outerHTML))(scope);
            getContent(stickyClone).append(clone);
            $mdSticky(scope, element, stickyClone);
          });
        }
      };
    }
  };
}
MdSubheaderDirective.$inject = ["$mdSticky", "$compile", "$mdTheming"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.swipe
 * @description Swipe module!
 */
/**
 * @ngdoc directive
 * @module material.components.swipe
 * @name mdSwipeLeft
 *
 * @restrict A
 *
 * @description
 * The md-swipe-left directives allows you to specify custom behavior when an element is swiped
 * left.
 *
 * @usage
 * <hljs lang="html">
 * <div md-swipe-left="onSwipeLeft()">Swipe me left!</div>
 * </hljs>
 */
/**
 * @ngdoc directive
 * @module material.components.swipe
 * @name mdSwipeRight
 *
 * @restrict A
 *
 * @description
 * The md-swipe-right directives allows you to specify custom behavior when an element is swiped
 * right.
 *
 * @usage
 * <hljs lang="html">
 * <div md-swipe-right="onSwipeRight()">Swipe me right!</div>
 * </hljs>
 */

angular.module('material.components.swipe', ['material.core'])
    .directive('mdSwipeLeft', getDirective('SwipeLeft'))
    .directive('mdSwipeRight', getDirective('SwipeRight'));

function getDirective(name) {
  var directiveName = 'md' + name;
  var eventName = '$md.' + name.toLowerCase();

    DirectiveFactory.$inject = ["$parse"];
  return DirectiveFactory;

  /* @ngInject */
  function DirectiveFactory($parse) {
      return { restrict: 'A', link: postLink };
      function postLink(scope, element, attr) {
        var fn = $parse(attr[directiveName]);
        element.on(eventName, function(ev) {
          scope.$apply(function() { fn(scope, { $event: ev }); });
        });
      }
    }
}



})();
(function(){
"use strict";

/**
 * @private
 * @ngdoc module
 * @name material.components.switch
 */

angular.module('material.components.switch', [
  'material.core',
  'material.components.checkbox'
])
  .directive('mdSwitch', MdSwitch);

/**
 * @private
 * @ngdoc directive
 * @module material.components.switch
 * @name mdSwitch
 * @restrict E
 *
 * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the switch is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * @param {string} ng-model Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.
 * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.
 *
 * @usage
 * <hljs lang="html">
 * <md-switch ng-model="isActive" aria-label="Finished?">
 *   Finished ?
 * </md-switch>
 *
 * <md-switch md-no-ink ng-model="hasInk" aria-label="No Ink Effects">
 *   No Ink Effects
 * </md-switch>
 *
 * <md-switch ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">
 *   Disabled
 * </md-switch>
 *
 * </hljs>
 */
function MdSwitch(mdCheckboxDirective, $mdTheming, $mdUtil, $document, $mdConstant, $parse, $$rAF, $mdGesture) {
  var checkboxDirective = mdCheckboxDirective[0];

  return {
    restrict: 'E',
    priority:210, // Run before ngAria
    transclude: true,
    template:
      '<div class="md-container">' +
        '<div class="md-bar"></div>' +
        '<div class="md-thumb-container">' +
          '<div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div>' +
        '</div>'+
      '</div>' +
      '<div ng-transclude class="md-label">' +
      '</div>',
    require: '?ngModel',
    compile: compile
  };

  function compile(element, attr) {
    var checkboxLink = checkboxDirective.compile(element, attr);
    // no transition on initial load
    element.addClass('md-dragging');

    return function (scope, element, attr, ngModel) {
      ngModel = ngModel || $mdUtil.fakeNgModel();
      var disabledGetter = $parse(attr.ngDisabled);
      var thumbContainer = angular.element(element[0].querySelector('.md-thumb-container'));
      var switchContainer = angular.element(element[0].querySelector('.md-container'));

      // no transition on initial load
      $$rAF(function() {
        element.removeClass('md-dragging');
      });

      checkboxLink(scope, element, attr, ngModel);

      if (angular.isDefined(attr.ngDisabled)) {
        scope.$watch(disabledGetter, function(isDisabled) {
          element.attr('tabindex', isDisabled ? -1 : 0);
        });
      }

      // These events are triggered by setup drag
      $mdGesture.register(switchContainer, 'drag');
      switchContainer
        .on('$md.dragstart', onDragStart)
        .on('$md.drag', onDrag)
        .on('$md.dragend', onDragEnd);

      var drag;
      function onDragStart(ev) {
        // Don't go if ng-disabled===true
        if (disabledGetter(scope)) return;
        ev.stopPropagation();

        element.addClass('md-dragging');
        drag = {
          width: thumbContainer.prop('offsetWidth')
        };
        element.removeClass('transition');
      }

      function onDrag(ev) {
        if (!drag) return;
        ev.stopPropagation();
        ev.srcEvent && ev.srcEvent.preventDefault();

        var percent = ev.pointer.distanceX / drag.width;

        //if checked, start from right. else, start from left
        var translate = ngModel.$viewValue ?  1 + percent : percent;
        // Make sure the switch stays inside its bounds, 0-1%
        translate = Math.max(0, Math.min(1, translate));

        thumbContainer.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + (100*translate) + '%,0,0)');
        drag.translate = translate;
      }

      function onDragEnd(ev) {
        if (!drag) return;
        ev.stopPropagation();

        element.removeClass('md-dragging');
        thumbContainer.css($mdConstant.CSS.TRANSFORM, '');

        // We changed if there is no distance (this is a click a click),
        // or if the drag distance is >50% of the total.
        var isChanged = ngModel.$viewValue ? drag.translate < 0.5 : drag.translate > 0.5;
        if (isChanged) {
          applyModelValue(!ngModel.$viewValue);
        }
        drag = null;
      }

      function applyModelValue(newValue) {
        scope.$apply(function() {
          ngModel.$setViewValue(newValue);
          ngModel.$render();
        });
      }

    };
  }


}
MdSwitch.$inject = ["mdCheckboxDirective", "$mdTheming", "$mdUtil", "$document", "$mdConstant", "$parse", "$$rAF", "$mdGesture"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.tabs
 * @description
 *
 *  Tabs, created with the `<md-tabs>` directive provide *tabbed* navigation with different styles.
 *  The Tabs component consists of clickable tabs that are aligned horizontally side-by-side.
 *
 *  Features include support for:
 *
 *  - static or dynamic tabs,
 *  - responsive designs,
 *  - accessibility support (ARIA),
 *  - tab pagination,
 *  - external or internal tab content,
 *  - focus indicators and arrow-key navigations,
 *  - programmatic lookup and access to tab controllers, and
 *  - dynamic transitions through different tab contents.
 *
 */
/*
 * @see js folder for tabs implementation
 */
angular.module('material.components.tabs', [
  'material.core',
  'material.components.icon'
]);

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.toast
 * @description
 * Toast
 */
angular.module('material.components.toast', [
  'material.core',
  'material.components.button'
])
  .directive('mdToast', MdToastDirective)
  .provider('$mdToast', MdToastProvider);

function MdToastDirective() {
  return {
    restrict: 'E'
  };
}

/**
 * @ngdoc service
 * @name $mdToast
 * @module material.components.toast
 *
 * @description
 * `$mdToast` is a service to build a toast notification on any position
 * on the screen with an optional duration, and provides a simple promise API.
 *
 *
 * ## Restrictions on custom toasts
 * - The toast's template must have an outer `<md-toast>` element.
 * - For a toast action, use element with class `md-action`.
 * - Add the class `md-capsule` for curved corners.
 *
 * @usage
 * <hljs lang="html">
 * <div ng-controller="MyController">
 *   <md-button ng-click="openToast()">
 *     Open a Toast!
 *   </md-button>
 * </div>
 * </hljs>
 *
 * <hljs lang="js">
 * var app = angular.module('app', ['ngMaterial']);
 * app.controller('MyController', function($scope, $mdToast) {
 *   $scope.openToast = function($event) {
 *     $mdToast.show($mdToast.simple().content('Hello!'));
 *     // Could also do $mdToast.showSimple('Hello');
 *   };
 * });
 * </hljs>
 */

/**
 * @ngdoc method
 * @name $mdToast#showSimple
 * 
 * @description
 * Convenience method which builds and shows a simple toast.
 *
 * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or
 * rejected with `$mdToast.cancel()`.
 *
 */

 /**
 * @ngdoc method
 * @name $mdToast#simple
 *
 * @description
 * Builds a preconfigured toast.
 *
 * @returns {obj} a `$mdToastPreset` with the chainable configuration methods:
 *
 * - $mdToastPreset#content(string) - sets toast content to string
 * - $mdToastPreset#action(string) - adds an action button. If clicked the promise (returned from `show()`) will resolve
 *   with value 'ok'; otherwise it promise is resolved with 'true' after a hideDelay timeout.
 * - $mdToastPreset#highlightAction(boolean) - sets action button to be highlighted
 * - $mdToastPreset#capsule(boolean) - adds 'md-capsule' class to the toast (curved corners)
 * - $mdToastPreset#theme(string) - sets the theme on the toast to theme (default is `$mdThemingProvider`'s default theme)
 */

/**
 * @ngdoc method
 * @name $mdToast#updateContent
 * 
 * @description
 * Updates the content of an existing toast. Useful for updating things like counts, etc.
 *
 */

 /**
 * @ngdoc method
 * @name $mdToast#build
 *
 * @description
 * Creates a custom `$mdToastPreset` that you can configure.
 *
 * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).
 */

 /**
 * @ngdoc method
 * @name $mdToast#show
 *
 * @description Shows the toast.
 *
 * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`
 * and `build()`, or an options object with the following properties:
 *
 *   - `templateUrl` - `{string=}`: The url of an html template file that will
 *     be used as the content of the toast. Restrictions: the template must
 *     have an outer `md-toast` element.
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual
 *     template string.
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
 *     This scope will be destroyed when the toast is removed unless `preserveScope` is set to true.
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false
 *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay
 *     active before automatically closing.  Set to 0 or false to have the toast stay open until
 *     closed manually. Default: 3000.
 *   - `position` - `{string=}`: Where to place the toast. Available: any combination
 *     of 'bottom', 'left', 'top', 'right', 'fit'. Default: 'bottom left'.
 *   - `controller` - `{string=}`: The controller to associate with this toast.
 *     The controller will be injected the local `$hideToast`, which is a function
 *     used to hide the toast.
 *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will
 *     be used as names of values to inject into the controller. For example,
 *     `locals: {three: 3}` would inject `three` into the controller with the value
 *     of 3.
 *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values
 *     and the toast will not open until the promises resolve.
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
 *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending
 *     to the root element of the application.
 *
 * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or
 * rejected with `$mdToast.cancel()`. `$mdToast.hide()` will resolve either with a Boolean
 * value == 'true' or the value passed as an argument to `$mdToast.hide()`.
 * And `$mdToast.cancel()` will resolve the promise with a Boolean value == 'false'
 */

/**
 * @ngdoc method
 * @name $mdToast#hide
 *
 * @description
 * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.
 *
 * @param {*=} response An argument for the resolved promise.
 *
 * @returns {promise} a promise that is called when the existing element is removed from the DOM.
 * The promise is resolved with either a Boolean value == 'true' or the value passed as the
 * argument to `.hide()`.
 *
 */

/**
 * @ngdoc method
 * @name $mdToast#cancel
 *
 * @description
 * Hide the existing toast and reject the promise returned from
 * `$mdToast.show()`.
 *
 * @param {*=} response An argument for the rejected promise.
 *
 * @returns {promise} a promise that is called when the existing element is removed from the DOM
 * The promise is resolved with a Boolean value == 'false'.
 *
 */

function MdToastProvider($$interimElementProvider) {
  // Differentiate promise resolves: hide timeout (value == true) and hide action clicks (value == ok).
  var ACTION_RESOLVE = 'ok';

  var activeToastContent;
  var $mdToast = $$interimElementProvider('$mdToast')
    .setDefaults({
      methods: ['position', 'hideDelay', 'capsule' ],
      options: toastDefaultOptions
    })
    .addPreset('simple', {
      argOption: 'content',
      methods: ['content', 'action', 'highlightAction', 'theme', 'parent'],
      options: /* @ngInject */ ["$mdToast", "$mdTheming", function($mdToast, $mdTheming) {
        var opts = {
          template: [
            '<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">',
              '<span flex>{{ toast.content }}</span>',
              '<md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">',
                '{{ toast.action }}',
              '</md-button>',
            '</md-toast>'
          ].join(''),
          controller: /* @ngInject */ ["$scope", function mdToastCtrl($scope) {
            var self = this;
            $scope.$watch(function() { return activeToastContent; }, function() {
              self.content = activeToastContent;
            });
            this.resolve = function() {
              $mdToast.hide( ACTION_RESOLVE );
            };
          }],
          theme: $mdTheming.defaultTheme(),
          controllerAs: 'toast',
          bindToController: true
        };
        return opts;
      }]
    })
    .addMethod('updateContent', function(newContent) {
      activeToastContent = newContent;
    });

  toastDefaultOptions.$inject = ["$animate", "$mdToast", "$mdUtil"];
    return $mdToast;

  /* @ngInject */
  function toastDefaultOptions($animate, $mdToast, $mdUtil) {
    return {
      onShow: onShow,
      onRemove: onRemove,
      position: 'bottom left',
      themable: true,
      hideDelay: 3000
    };

    function onShow(scope, element, options) {
      element = $mdUtil.extractElementByName(element, 'md-toast');

      // 'top left' -> 'md-top md-left'
      activeToastContent = options.content;
      element.addClass(options.position.split(' ').map(function(pos) {
        return 'md-' + pos;
      }).join(' '));
      options.parent.addClass(toastOpenClass(options.position));

      options.onSwipe = function(ev, gesture) {
        //Add swipeleft/swiperight class to element so it can animate correctly
        element.addClass('md-' + ev.type.replace('$md.',''));
        $mdUtil.nextTick($mdToast.cancel);
      };
      element.on('$md.swipeleft $md.swiperight', options.onSwipe);
      return $animate.enter(element, options.parent);
    }

    function onRemove(scope, element, options) {
      element.off('$md.swipeleft $md.swiperight', options.onSwipe);
      options.parent.removeClass(toastOpenClass(options.position));
      return $animate.leave(element);
    }

    function toastOpenClass(position) {
      return 'md-toast-open-' +
        (position.indexOf('top') > -1 ? 'top' : 'bottom');
    }
  }

}
MdToastProvider.$inject = ["$$interimElementProvider"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.toolbar
 */
angular.module('material.components.toolbar', [
  'material.core',
  'material.components.content'
])
  .directive('mdToolbar', mdToolbarDirective);

/**
 * @ngdoc directive
 * @name mdToolbar
 * @module material.components.toolbar
 * @restrict E
 * @description
 * `md-toolbar` is used to place a toolbar in your app.
 *
 * Toolbars are usually used above a content area to display the title of the
 * current page, and show relevant action buttons for that page.
 *
 * You can change the height of the toolbar by adding either the
 * `md-medium-tall` or `md-tall` class to the toolbar.
 *
 * @usage
 * <hljs lang="html">
 * <div layout="column" layout-fill>
 *   <md-toolbar>
 *
 *     <div class="md-toolbar-tools">
 *       <span>My App's Title</span>
 *
 *       <!-- fill up the space between left and right area -->
 *       <span flex></span>
 *
 *       <md-button>
 *         Right Bar Button
 *       </md-button>
 *     </div>
 *
 *   </md-toolbar>
 *   <md-content>
 *     Hello!
 *   </md-content>
 * </div>
 * </hljs>
 *
 * @param {boolean=} md-scroll-shrink Whether the header should shrink away as
 * the user scrolls down, and reveal itself as the user scrolls up.
 * Note: for scrollShrink to work, the toolbar must be a sibling of a
 * `md-content` element, placed before it. See the scroll shrink demo.
 *
 *
 * @param {number=} md-shrink-speed-factor How much to change the speed of the toolbar's
 * shrinking by. For example, if 0.25 is given then the toolbar will shrink
 * at one fourth the rate at which the user scrolls down. Default 0.5.
 */

function mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming, $animate ) {
  var translateY = angular.bind(null, $mdUtil.supplant, 'translate3d(0,{0}px,0)' );

  return {
    restrict: 'E',
    controller: angular.noop,
    link: function(scope, element, attr) {

      $mdTheming(element);

      if (angular.isDefined(attr.mdScrollShrink)) {
        setupScrollShrink();
      }

      function setupScrollShrink() {
        // Current "y" position of scroll
        var y = 0;
        // Store the last scroll top position
        var prevScrollTop = 0;

        var shrinkSpeedFactor = attr.mdShrinkSpeedFactor || 0.5;

        var toolbarHeight;
        var contentElement;

        var debouncedContentScroll = $$rAF.throttle(onContentScroll);
        var debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5 * 1000);

        // Wait for $mdContentLoaded event from mdContent directive.
        // If the mdContent element is a sibling of our toolbar, hook it up
        // to scroll events.
        scope.$on('$mdContentLoaded', onMdContentLoad);

        function onMdContentLoad($event, newContentEl) {
          // Toolbar and content must be siblings
          if (element.parent()[0] === newContentEl.parent()[0]) {
            // unhook old content event listener if exists
            if (contentElement) {
              contentElement.off('scroll', debouncedContentScroll);
            }

            newContentEl.on('scroll', debouncedContentScroll);
            newContentEl.attr('scroll-shrink', 'true');

            contentElement = newContentEl;
            $$rAF(updateToolbarHeight);
          }
        }

        function updateToolbarHeight() {
          toolbarHeight = element.prop('offsetHeight');
          // Add a negative margin-top the size of the toolbar to the content el.
          // The content will start transformed down the toolbarHeight amount,
          // so everything looks normal.
          //
          // As the user scrolls down, the content will be transformed up slowly
          // to put the content underneath where the toolbar was.
          var margin =  (-toolbarHeight * shrinkSpeedFactor) + 'px';
          contentElement.css('margin-top', margin);
          contentElement.css('margin-bottom', margin);

          onContentScroll();
        }

        function onContentScroll(e) {
          var scrollTop = e ? e.target.scrollTop : prevScrollTop;

          debouncedUpdateHeight();

          y = Math.min(
            toolbarHeight / shrinkSpeedFactor,
            Math.max(0, y + scrollTop - prevScrollTop)
          );

          element.css( $mdConstant.CSS.TRANSFORM, translateY([-y * shrinkSpeedFactor]) );
          contentElement.css( $mdConstant.CSS.TRANSFORM, translateY([(toolbarHeight - y) * shrinkSpeedFactor]) );

          prevScrollTop = scrollTop;

          $mdUtil.nextTick(function () {
            var hasWhiteFrame = element.hasClass('md-whiteframe-z1');

            if ( hasWhiteFrame && !y) {
              $animate.removeClass(element, 'md-whiteframe-z1');
            } else if ( !hasWhiteFrame && y ) {
              $animate.addClass(element, 'md-whiteframe-z1');
            }
          });

        }

      }

    }
  };

}
mdToolbarDirective.$inject = ["$$rAF", "$mdConstant", "$mdUtil", "$mdTheming", "$animate"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.tooltip
 */
angular
    .module('material.components.tooltip', [ 'material.core' ])
    .directive('mdTooltip', MdTooltipDirective);

/**
 * @ngdoc directive
 * @name mdTooltip
 * @module material.components.tooltip
 * @description
 * Tooltips are used to describe elements that are interactive and primarily graphical (not textual).
 *
 * Place a `<md-tooltip>` as a child of the element it describes.
 *
 * A tooltip will activate when the user focuses, hovers over, or touches the parent.
 *
 * @usage
 * <hljs lang="html">
 * <md-button class="md-fab md-accent" aria-label="Play">
 *   <md-tooltip>
 *     Play Music
 *   </md-tooltip>
 *   <md-icon icon="img/icons/ic_play_arrow_24px.svg"></md-icon>
 * </md-button>
 * </hljs>
 *
 * @param {expression=} md-visible Boolean bound to whether the tooltip is
 * currently visible.
 * @param {number=} md-delay How many milliseconds to wait to show the tooltip after the user focuses, hovers, or touches the parent. Defaults to 300ms.
 * @param {string=} md-direction Which direction would you like the tooltip to go?  Supports left, right, top, and bottom.  Defaults to bottom.
 * @param {boolean=} md-autohide If present or provided with a boolean value, the tooltip will hide on mouse leave, regardless of focus
 */
function MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement,
                            $animate, $q) {

  var TOOLTIP_SHOW_DELAY = 300;
  var TOOLTIP_WINDOW_EDGE_SPACE = 8;

  return {
    restrict: 'E',
    transclude: true,
    priority:210, // Before ngAria
    template: '\
        <div class="md-background"></div>\
        <div class="md-content" ng-transclude></div>',
    scope: {
      visible: '=?mdVisible',
      delay: '=?mdDelay',
      autohide: '=?mdAutohide'
    },
    link: postLink
  };

  function postLink(scope, element, attr) {

    $mdTheming(element);

    var parent        = getParentWithPointerEvents(),
        background    = angular.element(element[0].getElementsByClassName('md-background')[0]),
        content       = angular.element(element[0].getElementsByClassName('md-content')[0]),
        direction     = attr.mdDirection,
        current       = getNearestContentElement(),
        tooltipParent = angular.element(current || document.body),
        debouncedOnResize = $$rAF.throttle(function () { if (scope.visible) positionTooltip(); });

    // Initialize element

    setDefaults();
    manipulateElement();
    bindEvents();
    configureWatchers();
    addAriaLabel();


    function setDefaults () {
      if (!angular.isDefined(attr.mdDelay)) scope.delay = TOOLTIP_SHOW_DELAY;
    }

    function configureWatchers () {
      scope.$on('$destroy', function() {
        scope.visible = false;
        element.remove();
        angular.element($window).off('resize', debouncedOnResize);
      });
      scope.$watch('visible', function (isVisible) {
        if (isVisible) showTooltip();
        else hideTooltip();
      });
    }

    function addAriaLabel () {
      if (!parent.attr('aria-label') && !parent.text().trim()) {
        parent.attr('aria-label', element.text().trim());
      }
    }

    function manipulateElement () {
      element.detach();
      element.attr('role', 'tooltip');
    }

    /**
     * Scan up dom hierarchy for enabled parent;
     */
    function getParentWithPointerEvents () {
      var parent = element.parent();
      while (parent && hasComputedStyleValue('pointer-events','none', parent[0])) {
        parent = parent.parent();
      }
      return parent;
    }

     function getNearestContentElement () {
       var current = element.parent()[0];
       // Look for the nearest parent md-content, stopping at the rootElement.
       while (current && current !== $rootElement[0] && current !== document.body) {
         current = current.parentNode;
       }
       return current;
     }


    function hasComputedStyleValue(key, value, target) {
      key    = attr.$normalize(key);
      target = target || element[0];

      var computedStyles = $window.getComputedStyle(target);

      return angular.isDefined(computedStyles[key]) && (computedStyles[key] == value);
    }

    function bindEvents () {
      var mouseActive = false;
      var enterHandler = function() {
        parent.on('blur mouseleave touchend touchcancel', leaveHandler );
        setVisible(true);
      };
      var leaveHandler = function () {
        var autohide = scope.hasOwnProperty('autohide') ? scope.autohide : attr.hasOwnProperty('mdAutohide');
        if (autohide || mouseActive || ($document[0].activeElement !== parent[0]) ) {
          parent.off('blur mouseleave touchend touchcancel', leaveHandler );
          setVisible(false);
        }
        mouseActive = false;
      };

      // to avoid `synthetic clicks` we listen to mousedown instead of `click`
      parent.on('mousedown', function() { mouseActive = true; });
      parent.on('focus mouseenter touchstart', enterHandler );


      angular.element($window).on('resize', debouncedOnResize);
    }

    function setVisible (value) {
      setVisible.value = !!value;
      if (!setVisible.queued) {
        if (value) {
          setVisible.queued = true;
          $timeout(function() {
            scope.visible = setVisible.value;
            setVisible.queued = false;
          }, scope.delay);
        } else {
          $mdUtil.nextTick(function() { scope.visible = false; });
        }
      }
    }

    function showTooltip() {
      // Insert the element before positioning it, so we can get the position
      // and check if we should display it
      tooltipParent.append(element);

      // Check if we should display it or not.
      // This handles hide-* and show-* along with any user defined css
      if ( hasComputedStyleValue('display','none') ) {
        scope.visible = false;
        element.detach();
        return;
      }

      positionTooltip();
      angular.forEach([element, background, content], function (element) {
        $animate.addClass(element, 'md-show');
      });
    }

    function hideTooltip() {
      $q.all([
        $animate.removeClass(content, 'md-show'),
        $animate.removeClass(background, 'md-show'),
        $animate.removeClass(element, 'md-show')
      ]).then(function () {
        if (!scope.visible) element.detach();
      });
    }

    function positionTooltip() {
      var tipRect = $mdUtil.offsetRect(element, tooltipParent);
      var parentRect = $mdUtil.offsetRect(parent, tooltipParent);
      var newPosition = getPosition(direction);

      // If the user provided a direction, just nudge the tooltip onto the screen
      // Otherwise, recalculate based on 'top' since default is 'bottom'
      if (direction) {
        newPosition = fitInParent(newPosition);
      } else if (newPosition.top > element.prop('offsetParent').scrollHeight - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE) {
        newPosition = fitInParent(getPosition('top'));
      }

      element.css({top: newPosition.top + 'px', left: newPosition.left + 'px'});

      positionBackground();

      function positionBackground () {
        var size = direction === 'left' || direction === 'right'
              ? Math.sqrt(Math.pow(tipRect.width, 2) + Math.pow(tipRect.height / 2, 2)) * 2
              : Math.sqrt(Math.pow(tipRect.width / 2, 2) + Math.pow(tipRect.height, 2)) * 2,
            position = direction === 'left' ? { left: 100, top: 50 }
              : direction === 'right' ? { left: 0, top: 50 }
              : direction === 'top' ? { left: 50, top: 100 }
              : { left: 50, top: 0 };
        background.css({
          width: size + 'px',
          height: size + 'px',
          left: position.left + '%',
          top: position.top + '%'
        });
      }

      function fitInParent (pos) {
        var newPosition = { left: pos.left, top: pos.top };
        newPosition.left = Math.min( newPosition.left, tooltipParent.prop('scrollWidth') - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE );
        newPosition.left = Math.max( newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE );
        newPosition.top  = Math.min( newPosition.top,  tooltipParent.prop('scrollHeight') - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE );
        newPosition.top  = Math.max( newPosition.top,  TOOLTIP_WINDOW_EDGE_SPACE );
        return newPosition;
      }

      function getPosition (dir) {
        return dir === 'left'
          ? { left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,
              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }
          : dir === 'right'
          ? { left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,
              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }
          : dir === 'top'
          ? { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
              top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE }
          : { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
              top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE };
      }
    }

  }

}
MdTooltipDirective.$inject = ["$timeout", "$window", "$$rAF", "$document", "$mdUtil", "$mdTheming", "$rootElement", "$animate", "$q"];

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.virtualRepeat
 */
angular.module('material.components.virtualRepeat', [
  'material.core'
])
.directive('mdVirtualRepeatContainer', VirtualRepeatContainerDirective)
.directive('mdVirtualRepeat', VirtualRepeatDirective);


/**
 * @ngdoc directive
 * @name mdVirtualRepeatContainer
 * @module material.components.virtualRepeat
 * @restrict E
 * @description
 * `md-virtual-repeat-container` provides the scroll container for md-virtual-repeat.
 *
 * Virtual repeat is a limited substitute for ng-repeat that renders only
 * enough dom nodes to fill the container and recycling them as the user scrolls.
 *
 * @usage
 * <hljs lang="html">
 *
 * <md-virtual-repeat-container>
 *   <div md-virtual-repeat="i in items" md-item-size="20">Hello {{i}}!</div>
 * </md-virtual-repeat-container>
 * </hljs>
 *
 * @param {boolean=} md-orient-horizontal Whether the container should scroll horizontally
 *     (defaults to orientation and scrolling vertically).
 * @param {boolean=} md-auto-shrink When present, the container will shrink to fit
 *     the number of items when that number is less than its original size.
 * @param {number=} md-auto-shrink-min Minimum number of items that md-auto-shrink
 *     will shrink to (default: 0).
 */
function VirtualRepeatContainerDirective() {
  return {
    controller: VirtualRepeatContainerController,
    template: virtualRepeatContainerTemplate,
    compile: function virtualRepeatContainerCompile($element, $attrs) {
      $element
          .addClass('md-virtual-repeat-container')
          .addClass($attrs.hasOwnProperty('mdOrientHorizontal')
              ? 'md-orient-horizontal'
              : 'md-orient-vertical');
    }
  };
}


function virtualRepeatContainerTemplate($element) {
  return '<div class="md-virtual-repeat-scroller">' +
    '<div class="md-virtual-repeat-sizer"></div>' +
    '<div class="md-virtual-repeat-offsetter">' +
      $element[0].innerHTML +
    '</div></div>';
}

/**
 * Maximum size, in pixels, that can be explicitly set to an element. The actual value varies
 * between browsers, but IE11 has the very lowest size at a mere 1,533,917px. Ideally we could
 * *compute* this value, but Firefox always reports an element to have a size of zero if it
 * goes over the max, meaning that we'd have to binary search for the value.
 * @const {number}
 */
var MAX_ELEMENT_SIZE = 1533917;

/**
 * Number of additional elements to render above and below the visible area inside
 * of the virtual repeat container. A higher number results in less flicker when scrolling
 * very quickly in Safari, but comes with a higher rendering and dirty-checking cost.
 * @const {number}
 */
var NUM_EXTRA = 3;

/** @ngInject */
function VirtualRepeatContainerController($$rAF, $scope, $element, $attrs) {
  this.$scope = $scope;
  this.$element = $element;
  this.$attrs = $attrs;

  /** @type {number} The width or height of the container */
  this.size = 0;
  /** @type {number} The scroll width or height of the scroller */
  this.scrollSize = 0;
  /** @type {number} The scrollLeft or scrollTop of the scroller */
  this.scrollOffset = 0;
  /** @type {boolean} Whether the scroller is oriented horizontally */
  this.horizontal = this.$attrs.hasOwnProperty('mdOrientHorizontal');
  /** @type {!VirtualRepeatController} The repeater inside of this container */
  this.repeater = null;
  /** @type {boolean} Whether auto-shrink is enabled */
  this.autoShrink = this.$attrs.hasOwnProperty('mdAutoShrink');
  /** @type {number} Minimum number of items to auto-shrink to */
  this.autoShrinkMin = parseInt(this.$attrs.mdAutoShrinkMin, 10) || 0;
  /** @type {?number} Original container size when shrank */
  this.originalSize = null;

  this.scroller = $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0];
  this.sizer = this.scroller.getElementsByClassName('md-virtual-repeat-sizer')[0];
  this.offsetter = this.scroller.getElementsByClassName('md-virtual-repeat-offsetter')[0];

  $$rAF(angular.bind(this, this.updateSize));

  // TODO: Come up with a more robust (But hopefully also quick!) way of
  // detecting that we're not visible.
  if ($attrs.ngHide) {
    $scope.$watch($attrs.ngHide, angular.bind(this, function(hidden) {
      if (!hidden) {
        $$rAF(angular.bind(this, this.updateSize));
      }
    }));
  }
}
VirtualRepeatContainerController.$inject = ["$$rAF", "$scope", "$element", "$attrs"];


/** Called by the md-virtual-repeat inside of the container at startup. */
VirtualRepeatContainerController.prototype.register = function(repeaterCtrl) {
  this.repeater = repeaterCtrl;

  angular.element(this.scroller)
      .on('scroll wheel touchmove touchend', angular.bind(this, this.handleScroll_));
};


/** @return {boolean} Whether the container is configured for horizontal scrolling. */
VirtualRepeatContainerController.prototype.isHorizontal = function() {
  return this.horizontal;
};


/** @return {number} The size (width or height) of the container. */
VirtualRepeatContainerController.prototype.getSize = function() {
  return this.size;
};


/**
 * Resizes the container.
 * @private
 * @param {number} The new size to set.
 */
VirtualRepeatContainerController.prototype.setSize_ = function(size) {
  this.size = size;
  this.$element[0].style[this.isHorizontal() ? 'width' : 'height'] = size + 'px';
};


/** Instructs the container to re-measure its size. */
VirtualRepeatContainerController.prototype.updateSize = function() {
  if (this.originalSize) return;

  this.size = this.isHorizontal()
      ? this.$element[0].clientWidth
      : this.$element[0].clientHeight;
  this.repeater && this.repeater.containerUpdated();
};


/** @return {number} The container's scrollHeight or scrollWidth. */
VirtualRepeatContainerController.prototype.getScrollSize = function() {
  return this.scrollSize;
};


/**
 * Sets the scroller element to the specified size.
 * @private
 * @param {number} size The new size.
 */
VirtualRepeatContainerController.prototype.sizeScroller_ = function(size) {
  var dimension =  this.isHorizontal() ? 'width' : 'height';
  var crossDimension = this.isHorizontal() ? 'height' : 'width';

  // If the size falls within the browser's maximum explicit size for a single element, we can
  // set the size and be done. Otherwise, we have to create children that add up the the desired
  // size.
  if (size < MAX_ELEMENT_SIZE) {
    this.sizer.style[dimension] = size + 'px';
  } else {
    // Clear any existing dimensions.
    this.sizer.innerHTML = '';
    this.sizer.style[dimension] = 'auto';
    this.sizer.style[crossDimension] = 'auto';

    // Divide the total size we have to render into N max-size pieces.
    var numChildren = Math.floor(size / MAX_ELEMENT_SIZE);

    // Element template to clone for each max-size piece.
    var sizerChild = document.createElement('div');
    sizerChild.style[dimension] = MAX_ELEMENT_SIZE + 'px';
    sizerChild.style[crossDimension] = '1px';

    for (var i = 0; i < numChildren; i++) {
      this.sizer.appendChild(sizerChild.cloneNode(false));
    }

    // Re-use the element template for the remainder.
    sizerChild.style[dimension] = (size - (numChildren * MAX_ELEMENT_SIZE)) + 'px';
    this.sizer.appendChild(sizerChild);
  }
};


/**
 * If auto-shrinking is enabled, shrinks or unshrinks as appropriate.
 * @private
 * @param {number} size The new size.
 */
VirtualRepeatContainerController.prototype.autoShrink_ = function(size) {
  var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());
  if (this.autoShrink && shrinkSize !== this.size) {
    if (shrinkSize < (this.originalSize || this.size)) {
      if (!this.originalSize) {
        this.originalSize = this.size;
      }

      this.setSize_(shrinkSize);
    } else if (this.originalSize) {
      this.setSize_(this.originalSize);
      this.originalSize = null;
    }
  }
};


/**
 * Sets the scrollHeight or scrollWidth. Called by the repeater based on
 * its item count and item size.
 * @param {number} size The new size.
 */
VirtualRepeatContainerController.prototype.setScrollSize = function(size) {
  if (this.scrollSize === size) return;

  this.sizeScroller_(size);
  this.autoShrink_(size);
  this.scrollSize = size;
};


/** @return {number} The container's current scroll offset. */
VirtualRepeatContainerController.prototype.getScrollOffset = function() {
  return this.scrollOffset;
};

/**
 * Scrolls to a given scrollTop position.
 * @param {number} position
 */
VirtualRepeatContainerController.prototype.scrollTo = function(position) {
  this.scroller[this.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = position;
  this.handleScroll_();
};

VirtualRepeatContainerController.prototype.resetScroll = function() {
  this.scrollTo(0);
};


VirtualRepeatContainerController.prototype.handleScroll_ = function() {
  var offset = this.isHorizontal() ? this.scroller.scrollLeft : this.scroller.scrollTop;
  if (offset === this.scrollOffset) return;

  var itemSize = this.repeater.getItemSize();
  if (!itemSize) return;

  var numItems = Math.max(0, Math.floor(offset / itemSize) - NUM_EXTRA);

  var transform = this.isHorizontal() ? 'translateX(' : 'translateY(';
      transform +=  (numItems * itemSize) + 'px)';

  this.scrollOffset = offset;
  this.offsetter.style.webkitTransform = transform;
  this.offsetter.style.transform = transform;

  this.repeater.containerUpdated();
};


/**
 * @ngdoc directive
 * @name mdVirtualRepeat
 * @module material.components.virtualRepeat
 * @restrict A
 * @priority 1000
 * @description
 * `md-virtual-repeat` specifies an element to repeat using virtual scrolling.
 *
 * Virtual repeat is a limited substitute for ng-repeat that renders only
 * enough dom nodes to fill the container and recycling them as the user scrolls.
 * Arrays, but not objects are supported for iteration.
 * Track by, as alias, and (key, value) syntax are not supported.
 *
 * @usage
 * <hljs lang="html">
 * <md-virtual-repeat-container>
 *   <div md-virtual-repeat="i in items">Hello {{i}}!</div>
 * </md-virtual-repeat-container>
 *
 * <md-virtual-repeat-container md-orient-horizontal>
 *   <div md-virtual-repeat="i in items" md-item-size="20">Hello {{i}}!</div>
 * </md-virtual-repeat-container>
 * </hljs>
 *
 * @param {number=} md-item-size The height or width of the repeated elements (which
 *     must be identical for each element). Optional. Will attempt to read the size
 *     from the dom if missing, but still assumes that all repeated nodes have same
 *     height or width.
 * @param {string=} md-extra-name Evaluates to an additional name to which
 *     the current iterated item can be assigned on the repeated scope. (Needed
 *     for use in md-autocomplete).
 */
function VirtualRepeatDirective($parse) {
  return {
    controller: VirtualRepeatController,
    priority: 1000,
    require: ['mdVirtualRepeat', '^^mdVirtualRepeatContainer'],
    restrict: 'A',
    terminal: true,
    transclude: 'element',
    compile: function VirtualRepeatCompile($element, $attrs) {
      var expression = $attrs.mdVirtualRepeat;
      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/);
      var repeatName = match[1];
      var repeatListExpression = $parse(match[2]);
      var extraName = $attrs.mdExtraName && $parse($attrs.mdExtraName);

      return function VirtualRepeatLink($scope, $element, $attrs, ctrl, $transclude) {
        ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);
      };
    }
  };
}
VirtualRepeatDirective.$inject = ["$parse"];


/** @ngInject */
function VirtualRepeatController($scope, $element, $attrs, $browser, $document, $$rAF) {
  this.$scope = $scope;
  this.$element = $element;
  this.$attrs = $attrs;
  this.$browser = $browser;
  this.$document = $document;
  this.$$rAF = $$rAF;

  /** @type {!Function} Backup reference to $browser.$$checkUrlChange */
  this.browserCheckUrlChange = $browser.$$checkUrlChange;
  /** @type {number} Most recent starting repeat index (based on scroll offset) */
  this.newStartIndex = 0;
  /** @type {number} Most recent ending repeat index (based on scroll offset) */
  this.newEndIndex = 0;
  /** @type {number} Previous starting repeat index (based on scroll offset) */
  this.startIndex = 0;
  /** @type {number} Previous ending repeat index (based on scroll offset) */
  this.endIndex = 0;
  // TODO: measure width/height of first element from dom if not provided.
  // getComputedStyle?
  /** @type {?number} Height/width of repeated elements. */
  this.itemSize = $scope.$eval($attrs.mdItemSize) || null;

  /** @type {boolean} Whether this is the first time that items are rendered. */
  this.isFirstRender = true;

  /** @type {number} Most recently seen length of items. */
  this.itemsLength = 0;

  /**
   * Presently rendered blocks by repeat index.
   * @type {Object<number, !VirtualRepeatController.Block}
   */
  this.blocks = {};
  /** @type {Array<!VirtualRepeatController.Block>} A pool of presently unused blocks. */
  this.pooledBlocks = [];
}
VirtualRepeatController.$inject = ["$scope", "$element", "$attrs", "$browser", "$document", "$$rAF"];


/**
 * An object representing a repeated item.
 * @typedef {{element: !jqLite, new: boolean, scope: !angular.Scope}}
 */
VirtualRepeatController.Block;


/**
 * Called at startup by the md-virtual-repeat postLink function.
 * @param {!VirtualRepeatContainerController} container The container's controller.
 * @param {!Function} transclude The repeated element's bound transclude function.
 * @param {string} repeatName The left hand side of the repeat expression, indicating
 *     the name for each item in the array.
 * @param {!Function} repeatListExpression A compiled expression based on the right hand side
 *     of the repeat expression. Points to the array to repeat over.
 * @param {string|undefined} extraName The optional extra repeatName.
 */
VirtualRepeatController.prototype.link_ =
    function(container, transclude, repeatName, repeatListExpression, extraName) {
  this.container = container;
  this.transclude = transclude;
  this.repeatName = repeatName;
  this.repeatListExpression = repeatListExpression;
  this.extraName = extraName;
  this.sized = false;

  this.container.register(this);
};


/** @private Attempts to set itemSize by measuring a repeated element in the dom */
VirtualRepeatController.prototype.readItemSize_ = function() {
  this.items = this.repeatListExpression(this.$scope);
  this.parentNode = this.$element[0].parentNode;
  var block = this.getBlock_(0);

  this.itemSize = block.element[0][
      this.container.isHorizontal() ? 'offsetWidth' : 'offsetHeight'] || null;

  this.blocks[0] = block;
  this.poolBlock_(0);

  if (this.itemSize) {
    this.containerUpdated();
  }
};


/**
 * Called by the container. Informs us that the containers scroll or size has
 * changed.
 */
VirtualRepeatController.prototype.containerUpdated = function() {
  // If itemSize is unknown, attempt to measure it.
  if (!this.itemSize) {
    this.$$rAF(angular.bind(this, this.readItemSize_));

    return;
  } else if (!this.sized) {
    this.items = this.repeatListExpression(this.$scope);
  }

  if (!this.sized) {
    this.sized = true;
    this.$scope.$watchCollection(this.repeatListExpression,
        angular.bind(this, this.virtualRepeatUpdate_));
  }

  this.updateIndexes_();

  if (this.newStartIndex !== this.startIndex ||
      this.newEndIndex !== this.endIndex ||
      this.container.getScrollOffset() > this.container.getScrollSize()) {
    this.virtualRepeatUpdate_(this.items, this.items);
  }
};


/**
 * Called by the container. Returns the size of a single repeated item.
 * @return {?number} Size of a repeated item.
 */
VirtualRepeatController.prototype.getItemSize = function() {
  return this.itemSize;
};


/**
 * Updates the order and visible offset of repeated blocks in response to scrolling
 * or items updates.
 * @private
 */
VirtualRepeatController.prototype.virtualRepeatUpdate_ = function(items, oldItems) {
  var itemsLength = items ? items.length : 0;
  var lengthChanged = false;

  if (itemsLength !== this.itemsLength) {
    lengthChanged = true;
    this.itemsLength = itemsLength;
  }

  // If the number of items shrank, scroll up to the top.
  if (this.items && itemsLength < this.items.length && this.container.getScrollOffset() !== 0) {
    this.items = items;
    this.container.resetScroll();
    return;
  }

  this.items = items;
  if (items !== oldItems) {
    this.updateIndexes_();
  }

  this.parentNode = this.$element[0].parentNode;

  if (lengthChanged) {
    this.container.setScrollSize(itemsLength * this.itemSize);
  }

  if (this.isFirstRender) {
    this.isFirstRender = false;
    var startIndex = this.$attrs.mdStartIndex ? this.$scope.$eval(this.$attrs.mdStartIndex) : 0;
    this.container.scrollTo(startIndex * this.itemSize);
  }

  // Detach and pool any blocks that are no longer in the viewport.
  Object.keys(this.blocks).forEach(function(blockIndex) {
    var index = parseInt(blockIndex, 10);
    if (index < this.newStartIndex || index >= this.newEndIndex) {
      this.poolBlock_(index);
    }
  }, this);

  // Add needed blocks.
  // For performance reasons, temporarily block browser url checks as we digest
  // the restored block scopes ($$checkUrlChange reads window.location to
  // check for changes and trigger route change, etc, which we don't need when
  // trying to scroll at 60fps).
  this.$browser.$$checkUrlChange = angular.noop;

  var i, block,
      newStartBlocks = [],
      newEndBlocks = [];

  // Collect blocks at the top.
  for (i = this.newStartIndex; i < this.newEndIndex && this.blocks[i] == null; i++) {
    block = this.getBlock_(i);
    this.updateBlock_(block, i);
    newStartBlocks.push(block);
  }

  // Update blocks that are already rendered.
  for (; this.blocks[i] != null; i++) {
    this.updateBlock_(this.blocks[i], i);
  }
  var maxIndex = i - 1;

  // Collect blocks at the end.
  for (; i < this.newEndIndex; i++) {
    block = this.getBlock_(i);
    this.updateBlock_(block, i);
    newEndBlocks.push(block);
  }

  // Attach collected blocks to the document.
  if (newStartBlocks.length) {
    this.parentNode.insertBefore(
        this.domFragmentFromBlocks_(newStartBlocks),
        this.$element[0].nextSibling);
  }
  if (newEndBlocks.length) {
    this.parentNode.insertBefore(
        this.domFragmentFromBlocks_(newEndBlocks),
        this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);
  }

  // Restore $$checkUrlChange.
  this.$browser.$$checkUrlChange = this.browserCheckUrlChange;

  this.startIndex = this.newStartIndex;
  this.endIndex = this.newEndIndex;
};


/**
 * @param {number} index Where the block is to be in the repeated list.
 * @return {!VirtualRepeatController.Block} A new or pooled block to place at the specified index.
 * @private
 */
VirtualRepeatController.prototype.getBlock_ = function(index) {
  if (this.pooledBlocks.length) {
    return this.pooledBlocks.pop();
  }

  var block;
  this.transclude(angular.bind(this, function(clone, scope) {
    block = {
      element: clone,
      new: true,
      scope: scope
    };

    this.updateScope_(scope, index);
    this.parentNode.appendChild(clone[0]);
  }));

  return block;
};


/**
 * Updates and if not in a digest cycle, digests the specified block's scope to the data
 * at the specified index.
 * @param {!VirtualRepeatController.Block} block The block whose scope should be updated.
 * @param {number} index The index to set.
 * @private
 */
VirtualRepeatController.prototype.updateBlock_ = function(block, index) {
  this.blocks[index] = block;

  if (!block.new &&
      (block.scope.$index === index && block.scope[this.repeatName] === this.items[index])) {
    return;
  }
  block.new = false;

  // Update and digest the block's scope.
  this.updateScope_(block.scope, index);

  // Perform digest before reattaching the block.
  // Any resulting synchronous dom mutations should be much faster as a result.
  // This might break some directives, but I'm going to try it for now.
  if (!this.$scope.$root.$$phase) {
    block.scope.$digest();
  }
};


/**
 * Updates scope to the data at the specified index.
 * @param {!angular.Scope} scope The scope which should be updated.
 * @param {number} index The index to set.
 * @private
 */
VirtualRepeatController.prototype.updateScope_ = function(scope, index) {
  scope.$index = index;
  scope[this.repeatName] = this.items && this.items[index];
  if (this.extraName) scope[this.extraName(this.$scope)] = this.items[index];
};


/**
 * Pools the block at the specified index (Pulls its element out of the dom and stores it).
 * @param {number} index The index at which the block to pool is stored.
 * @private
 */
VirtualRepeatController.prototype.poolBlock_ = function(index) {
  this.pooledBlocks.push(this.blocks[index]);
  this.parentNode.removeChild(this.blocks[index].element[0]);
  delete this.blocks[index];
};


/**
 * Produces a dom fragment containing the elements from the list of blocks.
 * @param {!Array<!VirtualRepeatController.Block>} blocks The blocks whose elements
 *     should be added to the document fragment.
 * @return {DocumentFragment}
 * @private
 */
VirtualRepeatController.prototype.domFragmentFromBlocks_ = function(blocks) {
  var fragment = this.$document[0].createDocumentFragment();
  blocks.forEach(function(block) {
    fragment.appendChild(block.element[0]);
  });
  return fragment;
};


/**
 * Updates start and end indexes based on length of repeated items and container size.
 * @private
 */
VirtualRepeatController.prototype.updateIndexes_ = function() {
  var itemsLength = this.items ? this.items.length : 0;
  var containerLength = Math.ceil(this.container.getSize() / this.itemSize);

  this.newStartIndex = Math.max(0, Math.min(
      itemsLength - containerLength,
      Math.floor(this.container.getScrollOffset() / this.itemSize)));
  this.newEndIndex = Math.min(itemsLength, this.newStartIndex + containerLength + NUM_EXTRA);
  this.newStartIndex = Math.max(0, this.newStartIndex - NUM_EXTRA);
};

})();
(function(){
"use strict";

/**
 * @ngdoc module
 * @name material.components.whiteframe
 */
angular.module('material.components.whiteframe', []);

})();
(function(){
"use strict";

angular
    .module('material.components.autocomplete')
    .controller('MdAutocompleteCtrl', MdAutocompleteCtrl);

var ITEM_HEIGHT  = 41,
    MAX_HEIGHT   = 5.5 * ITEM_HEIGHT,
    MENU_PADDING = 8;

function MdAutocompleteCtrl ($scope, $element, $mdUtil, $mdConstant, $mdTheming, $window,
                             $animate, $rootElement, $attrs, $q) {
  //-- private variables
  var ctrl                 = this,
      itemParts            = $scope.itemsExpr.split(/ in /i),
      itemExpr             = itemParts[ 1 ],
      elements             = null,
      cache                = {},
      noBlur               = false,
      selectedItemWatchers = [],
      hasFocus             = false,
      lastCount            = 0;

  //-- public variables with handlers
  defineProperty('hidden', handleHiddenChange, true);

  //-- public variables
  ctrl.scope      = $scope;
  ctrl.parent     = $scope.$parent;
  ctrl.itemName   = itemParts[ 0 ];
  ctrl.matches    = [];
  ctrl.loading    = false;
  ctrl.hidden     = true;
  ctrl.index      = null;
  ctrl.messages   = [];
  ctrl.id         = $mdUtil.nextUid();
  ctrl.isDisabled = null;
  ctrl.isRequired = null;

  //-- public methods
  ctrl.keydown                       = keydown;
  ctrl.blur                          = blur;
  ctrl.focus                         = focus;
  ctrl.clear                         = clearValue;
  ctrl.select                        = select;
  ctrl.listEnter                     = onListEnter;
  ctrl.listLeave                     = onListLeave;
  ctrl.mouseUp                       = onMouseup;
  ctrl.getCurrentDisplayValue        = getCurrentDisplayValue;
  ctrl.registerSelectedItemWatcher   = registerSelectedItemWatcher;
  ctrl.unregisterSelectedItemWatcher = unregisterSelectedItemWatcher;

  return init();

  //-- initialization methods

  /**
   * Initialize the controller, setup watchers, gather elements
   */
  function init () {
    $mdUtil.initOptionalProperties($scope, $attrs, { searchText: null, selectedItem: null });
    $mdTheming($element);
    configureWatchers();
    $mdUtil.nextTick(function () {
      gatherElements();
      focusElement();
      moveDropdown();
    });
  }

  /**
   * Calculates the dropdown's position and applies the new styles to the menu element
   * @returns {*}
   */
  function positionDropdown () {
    if (!elements) return $mdUtil.nextTick(positionDropdown, false);
    var hrect  = elements.wrap.getBoundingClientRect(),
        vrect  = elements.snap.getBoundingClientRect(),
        root   = elements.root.getBoundingClientRect(),
        top    = vrect.bottom - root.top,
        bot    = root.bottom - vrect.top,
        left   = hrect.left - root.left,
        width  = hrect.width,
        styles = {
          left:     left + 'px',
          minWidth: width + 'px',
          maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + 'px'
        };
    if (top > bot && root.height - hrect.bottom - MENU_PADDING < MAX_HEIGHT) {
      styles.top       = 'auto';
      styles.bottom    = bot + 'px';
      styles.maxHeight = Math.min(MAX_HEIGHT, hrect.top - root.top - MENU_PADDING) + 'px';
    } else {
      styles.top       = top + 'px';
      styles.bottom    = 'auto';
      styles.maxHeight = Math.min(MAX_HEIGHT, root.bottom - hrect.bottom - MENU_PADDING) + 'px';
    }
    elements.$.ul.css(styles);
    $mdUtil.nextTick(correctHorizontalAlignment, false);

    /**
     * Makes sure that the menu doesn't go off of the screen on either side.
     */
    function correctHorizontalAlignment () {
      var dropdown = elements.ul.getBoundingClientRect(),
          styles   = {};
      if (dropdown.right > root.right - MENU_PADDING) {
        styles.left = (hrect.right - dropdown.width) + 'px';
      }
      elements.$.ul.css(styles);
    }
  }

  /**
   * Moves the dropdown menu to the body tag in order to avoid z-index and overflow issues.
   */
  function moveDropdown () {
    if (!elements.$.root.length) return;
    $mdTheming(elements.$.ul);
    elements.$.ul.detach();
    elements.$.root.append(elements.$.ul);
    if ($animate.pin) $animate.pin(elements.$.ul, $rootElement);
  }

  /**
   * Sends focus to the input element.
   */
  function focusElement () {
    if ($scope.autofocus) elements.input.focus();
  }

  /**
   * Sets up any watchers used by autocomplete
   */
  function configureWatchers () {
    var wait = parseInt($scope.delay, 10) || 0;
    $attrs.$observe('disabled', function (value) { ctrl.isDisabled = value; });
    $attrs.$observe('required', function (value) { ctrl.isRequired = value !== null; });
    $scope.$watch('searchText', wait ? $mdUtil.debounce(handleSearchText, wait) : handleSearchText);
    $scope.$watch('selectedItem', selectedItemChange);
    angular.element($window).on('resize', positionDropdown);
    $scope.$on('$destroy', cleanup);
  }

  /**
   * Removes any events or leftover elements created by this controller
   */
  function cleanup () {
    angular.element($window).off('resize', positionDropdown);
    elements.$.ul.remove();
  }

  /**
   * Gathers all of the elements needed for this controller
   */
  function gatherElements () {
    elements      = {
      main:  $element[ 0 ],
      ul:    $element.find('ul')[ 0 ],
      input: $element.find('input')[ 0 ],
      wrap:  $element.find('md-autocomplete-wrap')[ 0 ],
      root:  document.body
    };
    elements.li   = elements.ul.getElementsByTagName('li');
    elements.snap = getSnapTarget();
    elements.$    = getAngularElements(elements);
  }

  /**
   * Finds the element that the menu will base its position on
   * @returns {*}
   */
  function getSnapTarget () {
    for (var element = $element; element.length; element = element.parent()) {
      if (angular.isDefined(element.attr('md-autocomplete-snap'))) return element[ 0 ];
    }
    return elements.wrap;
  }

  /**
   * Gathers angular-wrapped versions of each element
   * @param elements
   * @returns {{}}
   */
  function getAngularElements (elements) {
    var obj = {};
    for (var key in elements) {
      if (elements.hasOwnProperty(key)) obj[ key ] = angular.element(elements[ key ]);
    }
    return obj;
  }

  //-- event/change handlers

  /**
   * Handles changes to the `hidden` property.
   * @param hidden
   * @param oldHidden
   */
  function handleHiddenChange (hidden, oldHidden) {
    if (!hidden && oldHidden) {
      positionDropdown();
      if (elements) $mdUtil.nextTick(function () { $mdUtil.disableScrollAround(elements.ul); }, false);
    } else if (hidden && !oldHidden) {
      $mdUtil.nextTick(function () { $mdUtil.enableScrolling(); }, false);
    }
  }

  /**
   * When the user mouses over the dropdown menu, ignore blur events.
   */
  function onListEnter () {
    noBlur = true;
  }

  /**
   * When the user's mouse leaves the menu, blur events may hide the menu again.
   */
  function onListLeave () {
    noBlur = false;
    if (!hasFocus) ctrl.hidden = true;
  }

  /**
   * When the mouse button is released, send focus back to the input field.
   */
  function onMouseup () {
    elements.input.focus();
  }

  /**
   * Handles changes to the selected item.
   * @param selectedItem
   * @param previousSelectedItem
   */
  function selectedItemChange (selectedItem, previousSelectedItem) {
    if (selectedItem) {
      getDisplayValue(selectedItem).then(function (val) {
        $scope.searchText = val;
        handleSelectedItemChange(selectedItem, previousSelectedItem);
      });
    }

    if (selectedItem !== previousSelectedItem) announceItemChange();
  }

  /**
   * Use the user-defined expression to announce changes each time a new item is selected
   */
  function announceItemChange () {
    angular.isFunction($scope.itemChange) && $scope.itemChange(getItemAsNameVal($scope.selectedItem));
  }

  /**
   * Use the user-defined expression to announce changes each time the search text is changed
   */
  function announceTextChange () {
    angular.isFunction($scope.textChange) && $scope.textChange();
  }

  /**
   * Calls any external watchers listening for the selected item.  Used in conjunction with
   * `registerSelectedItemWatcher`.
   * @param selectedItem
   * @param previousSelectedItem
   */
  function handleSelectedItemChange (selectedItem, previousSelectedItem) {
    selectedItemWatchers.forEach(function (watcher) { watcher(selectedItem, previousSelectedItem); });
  }

  /**
   * Register a function to be called when the selected item changes.
   * @param cb
   */
  function registerSelectedItemWatcher (cb) {
    if (selectedItemWatchers.indexOf(cb) == -1) {
      selectedItemWatchers.push(cb);
    }
  }

  /**
   * Unregister a function previously registered for selected item changes.
   * @param cb
   */
  function unregisterSelectedItemWatcher (cb) {
    var i = selectedItemWatchers.indexOf(cb);
    if (i != -1) {
      selectedItemWatchers.splice(i, 1);
    }
  }

  /**
   * Handles changes to the searchText property.
   * @param searchText
   * @param previousSearchText
   */
  function handleSearchText (searchText, previousSearchText) {
    ctrl.index = getDefaultIndex();
    // do nothing on init
    if (searchText === previousSearchText) return;

    getDisplayValue($scope.selectedItem).then(function (val) {
      // clear selected item if search text no longer matches it
      if (searchText !== val) {
        $scope.selectedItem = null;

        // trigger change event if available
        if (searchText !== previousSearchText) announceTextChange();

        // cancel results if search text is not long enough
        if (!isMinLengthMet()) {
          ctrl.loading = false;
          ctrl.matches = [];
          ctrl.hidden  = shouldHide();
          updateMessages();
        } else {
          handleQuery();
        }
      }
    });

  }

  /**
   * Handles input blur event, determines if the dropdown should hide.
   */
  function blur () {
    hasFocus = false;
    if (!noBlur) ctrl.hidden = true;
  }

  /**
   * Handles input focus event, determines if the dropdown should show.
   */
  function focus () {
    hasFocus = true;
    //-- if searchText is null, let's force it to be a string
    if (!angular.isString($scope.searchText)) $scope.searchText = '';
    if ($scope.minLength > 0) return;
    ctrl.hidden = shouldHide();
    if (!ctrl.hidden) handleQuery();
  }

  /**
   * Handles keyboard input.
   * @param event
   */
  function keydown (event) {
    switch (event.keyCode) {
      case $mdConstant.KEY_CODE.DOWN_ARROW:
        if (ctrl.loading) return;
        event.stopPropagation();
        event.preventDefault();
        ctrl.index   = Math.min(ctrl.index + 1, ctrl.matches.length - 1);
        updateScroll();
        updateMessages();
        break;
      case $mdConstant.KEY_CODE.UP_ARROW:
        if (ctrl.loading) return;
        event.stopPropagation();
        event.preventDefault();
        ctrl.index   = ctrl.index < 0 ? ctrl.matches.length - 1 : Math.max(0, ctrl.index - 1);
        updateScroll();
        updateMessages();
        break;
      case $mdConstant.KEY_CODE.TAB:
      case $mdConstant.KEY_CODE.ENTER:
        if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;
        event.stopPropagation();
        event.preventDefault();
        select(ctrl.index);
        break;
      case $mdConstant.KEY_CODE.ESCAPE:
        event.stopPropagation();
        event.preventDefault();
        clearValue();
        ctrl.matches = [];
        ctrl.hidden  = true;
        ctrl.index   = getDefaultIndex();
        break;
      default:
    }
  }

  //-- getters

  /**
   * Returns the minimum length needed to display the dropdown.
   * @returns {*}
   */
  function getMinLength () {
    return angular.isNumber($scope.minLength) ? $scope.minLength : 1;
  }

  /**
   * Returns the display value for an item.
   * @param item
   * @returns {*}
   */
  function getDisplayValue (item) {
    return $q.when(getItemText(item) || item);

    /**
     * Getter function to invoke user-defined expression (in the directive)
     * to convert your object to a single string.
     */
    function getItemText (item) {
      return (item && $scope.itemText) ? $scope.itemText(getItemAsNameVal(item)) : null;
    }
  }

  /**
   * Returns the locals object for compiling item templates.
   * @param item
   * @returns {{}}
   */
  function getItemAsNameVal (item) {
    if (!item) return undefined;

    var locals = {};
    if (ctrl.itemName) locals[ ctrl.itemName ] = item;

    return locals;
  }

  /**
   * Returns the default index based on whether or not autoselect is enabled.
   * @returns {number}
   */
  function getDefaultIndex () {
    return $scope.autoselect ? 0 : -1;
  }

  /**
   * Determines if the menu should be hidden.
   * @returns {boolean}
   */
  function shouldHide () {
    if (!isMinLengthMet() || !ctrl.matches.length) return true;
  }

  /**
   * Returns the display value of the current item.
   * @returns {*}
   */
  function getCurrentDisplayValue () {
    return getDisplayValue(ctrl.matches[ ctrl.index ]);
  }

  /**
   * Determines if the minimum length is met by the search text.
   * @returns {*}
   */
  function isMinLengthMet () {
    return angular.isDefined($scope.searchText) && $scope.searchText.length >= getMinLength();
  }

  //-- actions

  /**
   * Defines a public property with a handler and a default value.
   * @param key
   * @param handler
   * @param value
   */
  function defineProperty (key, handler, value) {
    Object.defineProperty(ctrl, key, {
      get: function () { return value; },
      set: function (newValue) {
        var oldValue = value;
        value        = newValue;
        handler(newValue, oldValue);
      }
    });
  }

  /**
   * Selects the item at the given index.
   * @param index
   */
  function select (index) {
    //-- force form to update state for validation
    $mdUtil.nextTick(function () {
      getDisplayValue(ctrl.matches[ index ]).then(function (val) {
        var ngModel = elements.$.input.controller('ngModel');
        ngModel.$setViewValue(val);
        ngModel.$render();
      }).finally(function () {
        $scope.selectedItem = ctrl.matches[ index ];
        ctrl.loading        = false;
        ctrl.hidden         = true;
        ctrl.index          = 0;
        ctrl.matches        = [];
      });
    }, false);
  }

  /**
   * Clears the searchText value and selected item.
   */
  function clearValue () {
    $scope.searchText = '';
    select(-1);

    // Per http://www.w3schools.com/jsref/event_oninput.asp
    var eventObj = document.createEvent('CustomEvent');
    eventObj.initCustomEvent('input', true, true, { value: $scope.searchText });
    elements.input.dispatchEvent(eventObj);

    elements.input.focus();
  }

  /**
   * Fetches the results for the provided search text.
   * @param searchText
   */
  function fetchResults (searchText) {
    var items = $scope.$parent.$eval(itemExpr),
        term  = searchText.toLowerCase();
    if (angular.isArray(items)) {
      handleResults(items);
    } else if (items) {
      $mdUtil.nextTick(function () {
        ctrl.loading = true;
        if (items.success) items.success(handleResults);
        if (items.then)    items.then(handleResults);
        if (items.finally) items.finally(function () { ctrl.loading = false; });
      });
    }
    function handleResults (matches) {
      cache[ term ] = matches;
      if (searchText !== $scope.searchText) return; //-- just cache the results if old request
      ctrl.matches = matches;
      ctrl.hidden  = shouldHide();
      if ($scope.selectOnMatch) selectItemOnMatch();
      updateMessages();
      positionDropdown();
    }
  }

  /**
   * Updates the ARIA messages
   */
  function updateMessages () {
    getCurrentDisplayValue().then(function (msg) {
      ctrl.messages = [ getCountMessage(), msg ];
    });
  }

  /**
   * Returns the ARIA message for how many results match the current query.
   * @returns {*}
   */
  function getCountMessage () {
    if (lastCount === ctrl.matches.length) return '';
    lastCount = ctrl.matches.length;
    switch (ctrl.matches.length) {
      case 0:
        return 'There are no matches available.';
      case 1:
        return 'There is 1 match available.';
      default:
        return 'There are ' + ctrl.matches.length + ' matches available.';
    }
  }

  /**
   * Makes sure that the focused element is within view.
   */
  function updateScroll () {
    if (!elements.li[ ctrl.index ]) return;
    var li  = elements.li[ ctrl.index ],
        top = li.offsetTop,
        bot = top + li.offsetHeight,
        hgt = elements.ul.clientHeight;
    if (top < elements.ul.scrollTop) {
      elements.ul.scrollTop = top;
    } else if (bot > elements.ul.scrollTop + hgt) {
      elements.ul.scrollTop = bot - hgt;
    }
  }

  /**
   * Starts the query to gather the results for the current searchText.  Attempts to return cached
   * results first, then forwards the process to `fetchResults` if necessary.
   */
  function handleQuery () {
    var searchText = $scope.searchText,
        term       = searchText.toLowerCase();
    //-- if results are cached, pull in cached results
    if (!$scope.noCache && cache[ term ]) {
      ctrl.matches = cache[ term ];
      updateMessages();
    } else {
      fetchResults(searchText);
    }
    if (hasFocus) ctrl.hidden = shouldHide();
  }

  /**
   * If there is only one matching item and the search text matches its display value exactly,
   * automatically select that item.  Note: This function is only called if the user uses the
   * `md-select-on-match` flag.
   */
  function selectItemOnMatch () {
    var searchText = $scope.searchText,
        matches    = ctrl.matches,
        item       = matches[ 0 ];
    if (matches.length === 1) getDisplayValue(item).then(function (displayValue) {
      if (searchText == displayValue) select(0);
    });
  }

}
MdAutocompleteCtrl.$inject = ["$scope", "$element", "$mdUtil", "$mdConstant", "$mdTheming", "$window", "$animate", "$rootElement", "$attrs", "$q"];

})();
(function(){
"use strict";

angular
    .module('material.components.autocomplete')
    .directive('mdAutocomplete', MdAutocomplete);

/**
 * @ngdoc directive
 * @name mdAutocomplete
 * @module material.components.autocomplete
 *
 * @description
 * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a
 *     custom query. This component allows you to provide real-time suggestions as the user types
 *     in the input area.
 *
 * To start, you will need to specify the required parameters and provide a template for your
 *     results. The content inside `md-autocomplete` will be treated as a template.
 *
 * In more complex cases, you may want to include other content such as a message to display when
 *     no matches were found.  You can do this by wrapping your template in `md-item-template` and
 *     adding a tag for `md-not-found`.  An example of this is shown below.
 *
 * ### Validation
 *
 * You can use `ng-messages` to include validation the same way that you would normally validate;
 *     however, if you want to replicate a standard input with a floating label, you will have to
 *     do the following:
 *
 * - Make sure that your template is wrapped in `md-item-template`
 * - Add your `ng-messages` code inside of `md-autocomplete`
 * - Add your validation properties to `md-autocomplete` (ie. `required`)
 * - Add a `name` to `md-autocomplete` (to be used on the generated `input`)
 *
 * There is an example below of how this should look.
 *
 *
 * @param {expression} md-items An expression in the format of `item in items` to iterate over
 *     matches for your search.
 * @param {expression=} md-selected-item-change An expression to be run each time a new item is
 *     selected
 * @param {expression=} md-search-text-change An expression to be run each time the search text
 *     updates
 * @param {string=} md-search-text A model to bind the search query text to
 * @param {object=} md-selected-item A model to bind the selected item to
 * @param {string=} md-item-text An expression that will convert your object to a single string.
 * @param {string=} placeholder Placeholder text that will be forwarded to the input.
 * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete
 * @param {boolean=} ng-disabled Determines whether or not to disable the input field
 * @param {number=} md-min-length Specifies the minimum length of text before autocomplete will
 *     make suggestions
 * @param {number=} md-delay Specifies the amount of time (in milliseconds) to wait before looking
 *     for results
 * @param {boolean=} md-autofocus If true, will immediately focus the input element
 * @param {boolean=} md-autoselect If true, the first item will be selected by default
 * @param {string=} md-menu-class This will be applied to the dropdown menu for styling
 * @param {string=} md-floating-label This will add a floating label to autocomplete and wrap it in
 *     `md-input-container`
 * @param {string=} md-input-name The name attribute given to the input element to be used with
 *     FormController
 * @param {string=} md-input-id An ID to be added to the input element
 * @param {number=} md-input-minlength The minimum length for the input's value for validation
 * @param {number=} md-input-maxlength The maximum length for the input's value for validation
 * @param {boolean=} md-select-on-match When set, autocomplete will automatically select exact
 *     the item if the search text is an exact match
 *
 * @usage
 * ###Basic Example
 * <hljs lang="html">
 *   <md-autocomplete
 *       md-selected-item="selectedItem"
 *       md-search-text="searchText"
 *       md-items="item in getMatches(searchText)"
 *       md-item-text="item.display">
 *     <span md-highlight-text="searchText">{{item.display}}</span>
 *   </md-autocomplete>
 * </hljs>
 *
 * ###Example with "not found" message
 * <hljs lang="html">
 * <md-autocomplete
 *     md-selected-item="selectedItem"
 *     md-search-text="searchText"
 *     md-items="item in getMatches(searchText)"
 *     md-item-text="item.display">
 *   <md-item-template>
 *     <span md-highlight-text="searchText">{{item.display}}</span>
 *   </md-item-template>
 *   <md-not-found>
 *     No matches found.
 *   </md-not-found>
 * </md-autocomplete>
 * </hljs>
 *
 * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the
 *     different parts that make up our component.
 *
 * ### Example with validation
 * <hljs lang="html">
 * <form name="autocompleteForm">
 *   <md-autocomplete
 *       required
 *       md-input-name="autocomplete"
 *       md-selected-item="selectedItem"
 *       md-search-text="searchText"
 *       md-items="item in getMatches(searchText)"
 *       md-item-text="item.display">
 *     <md-item-template>
 *       <span md-highlight-text="searchText">{{item.display}}</span>
 *     </md-item-template>
 *     <div ng-messages="autocompleteForm.autocomplete.$error">
 *       <div ng-message="required">This field is required</div>
 *     </div>
 *   </md-autocomplete>
 * </form>
 * </hljs>
 *
 * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the
 *     different parts that make up our component.
 */

function MdAutocomplete () {
  return {
    controller:   'MdAutocompleteCtrl',
    controllerAs: '$mdAutocompleteCtrl',
    scope:        {
      inputName:      '@mdInputName',
      inputMinlength: '@mdInputMinlength',
      inputMaxlength: '@mdInputMaxlength',
      searchText:     '=?mdSearchText',
      selectedItem:   '=?mdSelectedItem',
      itemsExpr:      '@mdItems',
      itemText:       '&mdItemText',
      placeholder:    '@placeholder',
      noCache:        '=?mdNoCache',
      selectOnMatch:  '=?mdSelectOnMatch',
      itemChange:     '&?mdSelectedItemChange',
      textChange:     '&?mdSearchTextChange',
      minLength:      '=?mdMinLength',
      delay:          '=?mdDelay',
      autofocus:      '=?mdAutofocus',
      floatingLabel:  '@?mdFloatingLabel',
      autoselect:     '=?mdAutoselect',
      menuClass:      '@?mdMenuClass',
      inputId:        '@?mdInputId'
    },
    template:     function (element, attr) {
      var noItemsTemplate = getNoItemsTemplate(),
          itemTemplate    = getItemTemplate(),
          leftover        = element.html();
      return '\
        <md-autocomplete-wrap\
            layout="row"\
            ng-class="{ \'md-whiteframe-z1\': !floatingLabel, \'md-menu-showing\': !$mdAutocompleteCtrl.hidden }"\
            role="listbox">\
          ' + getInputElement() + '\
          <md-progress-linear\
              ng-if="$mdAutocompleteCtrl.loading && !$mdAutocompleteCtrl.hidden"\
              md-mode="indeterminate"></md-progress-linear>\
          <ul role="presentation"\
              class="md-autocomplete-suggestions md-whiteframe-z1 {{menuClass || \'\'}}"\
              id="ul-{{$mdAutocompleteCtrl.id}}"\
              ng-hide="$mdAutocompleteCtrl.hidden"\
              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"\
              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"\
              ng-mouseup="$mdAutocompleteCtrl.mouseUp()">\
            <li ng-repeat="(index, item) in $mdAutocompleteCtrl.matches"\
                ng-class="{ selected: index === $mdAutocompleteCtrl.index }"\
                ng-click="$mdAutocompleteCtrl.select(index)"\
                md-autocomplete-list-item="$mdAutocompleteCtrl.itemName">\
                ' + itemTemplate + '\
            </li>\
            ' + noItemsTemplate + '\
          </ul>\
        </md-autocomplete-wrap>\
        <aria-status\
            class="md-visually-hidden"\
            role="status"\
            aria-live="assertive">\
          <p ng-repeat="message in $mdAutocompleteCtrl.messages track by $index" ng-if="message">{{message}}</p>\
        </aria-status>';

      function getItemTemplate () {
        var templateTag = element.find('md-item-template').remove(),
            html        = templateTag.length ? templateTag.html() : element.html();
        if (!templateTag.length) element.empty();
        return html;
      }

      function getNoItemsTemplate () {
        var templateTag = element.find('md-not-found').remove(),
            template    = templateTag.length ? templateTag.html() : '';
        return template
            ? '<li ng-if="!$mdAutocompleteCtrl.matches.length && !$mdAutocompleteCtrl.loading\
                       && !$mdAutocompleteCtrl.hidden"\
                   ng-hide="$mdAutocompleteCtrl.hidden"\
                   md-autocomplete-parent-scope>' + template + '</li>'
            : '';

      }

      function getInputElement () {
        if (attr.mdFloatingLabel) {
          return '\
            <md-input-container flex ng-if="floatingLabel">\
              <label>{{floatingLabel}}</label>\
              <input type="search"\
                  id="{{ inputId || \'fl-input-\' + $mdAutocompleteCtrl.id }}"\
                  name="{{inputName}}"\
                  autocomplete="off"\
                  ng-required="$mdAutocompleteCtrl.isRequired"\
                  ng-minlength="inputMinlength"\
                  ng-maxlength="inputMaxlength"\
                  ng-disabled="$mdAutocompleteCtrl.isDisabled"\
                  ng-model="$mdAutocompleteCtrl.scope.searchText"\
                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"\
                  ng-blur="$mdAutocompleteCtrl.blur()"\
                  ng-focus="$mdAutocompleteCtrl.focus()"\
                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"\
                  aria-label="{{floatingLabel}}"\
                  aria-autocomplete="list"\
                  aria-haspopup="true"\
                  aria-activedescendant=""\
                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>\
              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + '</div>\
            </md-input-container>';
        } else {
          return '\
            <input flex type="search"\
                id="{{ inputId || \'input-\' + $mdAutocompleteCtrl.id }}"\
                name="{{inputName}}"\
                ng-if="!floatingLabel"\
                autocomplete="off"\
                ng-required="$mdAutocompleteCtrl.isRequired"\
                ng-disabled="$mdAutocompleteCtrl.isDisabled"\
                ng-model="$mdAutocompleteCtrl.scope.searchText"\
                ng-keydown="$mdAutocompleteCtrl.keydown($event)"\
                ng-blur="$mdAutocompleteCtrl.blur()"\
                ng-focus="$mdAutocompleteCtrl.focus()"\
                placeholder="{{placeholder}}"\
                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"\
                aria-label="{{placeholder}}"\
                aria-autocomplete="list"\
                aria-haspopup="true"\
                aria-activedescendant=""\
                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>\
            <button\
                type="button"\
                tabindex="-1"\
                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"\
                ng-click="$mdAutocompleteCtrl.clear()">\
              <md-icon md-svg-icon="md-close"></md-icon>\
              <span class="md-visually-hidden">Clear</span>\
            </button>\
                ';
        }
      }
    }
  };
}

})();
(function(){
"use strict";

angular
    .module('material.components.autocomplete')
    .controller('MdHighlightCtrl', MdHighlightCtrl);

function MdHighlightCtrl ($scope, $element, $interpolate) {
  var ctrl = this;

  ctrl.term     = null;
  ctrl.template = null;
  ctrl.watchers = [];
  ctrl.init     = init;

  function init (term, template) {
    createWatchers(term, template);
    $element.on('$destroy', cleanup);
  }

  function createWatchers (term, template) {
    ctrl.watchers.push($scope.$watch(term, function (term) {
      ctrl.term = term;
      updateHTML(term, ctrl.template);
    }));
    ctrl.watchers.push($scope.$watch(compileTemplate, function (template) {
      ctrl.template = template;
      updateHTML(ctrl.term, template);
    }));

    function compileTemplate () { return $interpolate(template)($scope); }
  }

  function cleanup () {
    ctrl.watchers.forEach(function (watcher) { watcher(); });
  }

  function updateHTML () {
    if (ctrl.term === null || ctrl.template === null) return;
    var unsafeText = $interpolate(ctrl.template)($scope),
        text       = angular.element('<div>').text(unsafeText).html(),
        flags      = $element.attr('md-highlight-flags') || '',
        regex      = getRegExp(ctrl.term, flags),
        html       = text.replace(regex, '<span class="highlight">$&</span>');
    $element.html(html);
  }

  function sanitize (term) {
    if (!term) return term;
    return term.replace(/[\\\^\$\*\+\?\.\(\)\|\{}\[\]]/g, '\\$&');
  }

  function getRegExp (text, flags) {
    var str = '';
    if (flags.indexOf('^') >= 1) str += '^';
    str += text;
    if (flags.indexOf('$') >= 1) str += '$';
    return new RegExp(sanitize(str), flags.replace(/[\$\^]/g, ''));
  }
}
MdHighlightCtrl.$inject = ["$scope", "$element", "$interpolate"];

})();
(function(){
"use strict";

angular
    .module('material.components.autocomplete')
    .directive('mdHighlightText', MdHighlight);

/**
 * @ngdoc directive
 * @name mdHighlightText
 * @module material.components.autocomplete
 *
 * @description
 * The `md-highlight-text` directive allows you to specify text that should be highlighted within
 *     an element.  Highlighted text will be wrapped in `<span class="highlight"></span>` which can
 *     be styled through CSS.  Please note that child elements may not be used with this directive.
 *
 * @param {string} md-highlight-text A model to be searched for
 * @param {string=} md-highlight-flags A list of flags (loosely based on JavaScript RexExp flags).
 *     #### **Supported flags**:
 *     - `g`: Find all matches within the provided text
 *     - `i`: Ignore case when searching for matches
 *     - `$`: Only match if the text ends with the search term
 *     - `^`: Only match if the text begins with the search term
 *
 * @usage
 * <hljs lang="html">
 * <input placeholder="Enter a search term..." ng-model="searchTerm" type="text" />
 * <ul>
 *   <li ng-repeat="result in results" md-highlight-text="searchTerm">
 *     {{result.text}}
 *   </li>
 * </ul>
 * </hljs>
 */

function MdHighlight () {
  return {
    terminal:   true,
    scope:      false,
    controller: 'MdHighlightCtrl',
    compile:    function (element, attr) {
      var template = element.html();
      return function (scope, element, attr, ctrl) {
        ctrl.init(attr.mdHighlightText, template);
      };
    }
  };
}

})();
(function(){
"use strict";

angular
    .module('material.components.autocomplete')
    .directive('mdAutocompleteListItem', MdAutocompleteListItem);

function MdAutocompleteListItem ($compile, $mdUtil) {
  return {
    terminal: true,
    link:     postLink,
    scope:    false
  };
  function postLink (scope, element, attr) {
    var ctrl             = scope.$parent.$mdAutocompleteCtrl,
        newScope         = ctrl.parent.$new(false, ctrl.parent),
        itemName         = ctrl.scope.$eval(attr.mdAutocompleteListItem);
    newScope[ itemName ] = scope.item;
    $compile(element.contents())(newScope);
    element.attr({
      role: 'option',
      id:   'item_' + $mdUtil.nextUid()
    });
  }
}
MdAutocompleteListItem.$inject = ["$compile", "$mdUtil"];

})();
(function(){
"use strict";

angular
    .module('material.components.autocomplete')
    .directive('mdAutocompleteParentScope', MdAutocompleteParentScope);

function MdAutocompleteParentScope ($compile) {
  return {
    restrict: 'A',
    terminal: true,
    link:     postLink,
    scope:    false
  };
  function postLink (scope, element, attr) {
    var ctrl = scope.$parent.$mdAutocompleteCtrl;
    $compile(element.contents())(ctrl.parent);
    if (attr.hasOwnProperty('mdAutocompleteReplace')) {
      element.after(element.contents());
      element.remove();
    }
  }
}
MdAutocompleteParentScope.$inject = ["$compile"];

})();
(function(){
"use strict";

angular
    .module('material.components.chips')
    .directive('mdChip', MdChip);

/**
 * @ngdoc directive
 * @name mdChip
 * @module material.components.chips
 *
 * @description
 * `<md-chip>` is a component used within `<md-chips>` and is responsible for rendering individual
 * chips.
 *
 *
 * @usage
 * <hljs lang="html">
 *   <md-chip>{{$chip}}</md-chip>
 * </hljs>
 *
 */

// This hint text is hidden within a chip but used by screen readers to
// inform the user how they can interact with a chip.
var DELETE_HINT_TEMPLATE = '\
    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">\
      {{$mdChipsCtrl.deleteHint}}\
    </span>';

/**
 * MDChip Directive Definition
 *
 * @param $mdTheming
 * @param $mdInkRipple
 * @ngInject
 */
function MdChip($mdTheming) {
  return {
    restrict: 'E',
    require: '^?mdChips',
    compile:  compile
  };

  function compile(element, attr) {
    element.append(DELETE_HINT_TEMPLATE);
    return function postLink(scope, element, attr, ctrl) {
      element.addClass('md-chip');
      $mdTheming(element);

      if (ctrl) angular.element(element[0].querySelector('.md-chip-content'))
          .on('blur', function () {
            ctrl.selectedChip = -1;
          });
    };
  }
}
MdChip.$inject = ["$mdTheming"];

})();
(function(){
"use strict";

angular
    .module('material.components.chips')
    .directive('mdChipRemove', MdChipRemove);

/**
 * @ngdoc directive
 * @name mdChipRemove
 * @module material.components.chips
 *
 * @description
 * `<md-chip-remove>`
 * Designates an element to be used as the delete button for a chip. This
 * element is passed as a child of the `md-chips` element.
 *
 * @usage
 * <hljs lang="html">
 *   <md-chips><button md-chip-remove>DEL</button></md-chips>
 * </hljs>
 */


/**
 * MdChipRemove Directive Definition.
 * 
 * @param $compile
 * @param $timeout
 * @returns {{restrict: string, require: string[], link: Function, scope: boolean}}
 * @constructor
 */
function MdChipRemove ($timeout) {
  return {
    restrict: 'A',
    require: '^mdChips',
    scope: false,
    link: postLink
  };

  function postLink(scope, element, attr, ctrl) {
    element.on('click', function(event) {
      scope.$apply(function() {
        ctrl.removeChip(scope.$$replacedScope.$index);
      });
    });

    // Child elements aren't available until after a $timeout tick as they are hidden by an
    // `ng-if`. see http://goo.gl/zIWfuw
    $timeout(function() {
      element.attr({ tabindex: -1, ariaHidden: true });
      element.find('button').attr('tabindex', '-1');
    });
  }
}
MdChipRemove.$inject = ["$timeout"];

})();
(function(){
"use strict";

angular
    .module('material.components.chips')
    .directive('mdChipTransclude', MdChipTransclude);

function MdChipTransclude ($compile, $mdUtil) {
  return {
    restrict: 'EA',
    terminal: true,
    link: link,
    scope: false
  };
  function link (scope, element, attr) {
    var ctrl = scope.$parent.$mdChipsCtrl,
        newScope = ctrl.parent.$new(false, ctrl.parent);
    newScope.$$replacedScope = scope;
    newScope.$chip = scope.$chip;
    newScope.$mdChipsCtrl = ctrl;
    element.html(ctrl.$scope.$eval(attr.mdChipTransclude));
    $compile(element.contents())(newScope);
  }
}
MdChipTransclude.$inject = ["$compile", "$mdUtil"];

})();
(function(){
"use strict";

angular
    .module('material.components.chips')
    .controller('MdChipsCtrl', MdChipsCtrl);

/**
 * Controller for the MdChips component. Responsible for adding to and
 * removing from the list of chips, marking chips as selected, and binding to
 * the models of various input components.
 *
 * @param $scope
 * @param $mdConstant
 * @param $log
 * @param $element
 * @constructor
 */
function MdChipsCtrl ($scope, $mdConstant, $log, $element, $timeout) {
  /** @type {$timeout} **/
  this.$timeout = $timeout;

  /** @type {Object} */
  this.$mdConstant = $mdConstant;

  /** @type {angular.$scope} */
  this.$scope = $scope;

  /** @type {angular.$scope} */
  this.parent = $scope.$parent;

  /** @type {$log} */
  this.$log = $log;

  /** @type {$element} */
  this.$element = $element;

  /** @type {angular.NgModelController} */
  this.ngModelCtrl = null;

  /** @type {angular.NgModelController} */
  this.userInputNgModelCtrl = null;

  /** @type {Element} */
  this.userInputElement = null;

  /** @type {Array.<Object>} */
  this.items = [];

  /** @type {number} */
  this.selectedChip = -1;


  /**
   * Hidden hint text for how to delete a chip. Used to give context to screen readers.
   * @type {string}
   */
  this.deleteHint = 'Press delete to remove this chip.';

  /**
   * Hidden label for the delete button. Used to give context to screen readers.
   * @type {string}
   */
  this.deleteButtonLabel = 'Remove';

  /**
   * Model used by the input element.
   * @type {string}
   */
  this.chipBuffer = '';

  /**
   * Whether to use the mdOnAppend expression to transform the chip buffer
   * before appending it to the list.
   * @type {boolean}
   */
  this.useMdOnAppend = false;
}
MdChipsCtrl.$inject = ["$scope", "$mdConstant", "$log", "$element", "$timeout"];

/**
 * Handles the keydown event on the input element: <enter> appends the
 * buffer to the chip list, while backspace removes the last chip in the list
 * if the current buffer is empty.
 * @param event
 */
MdChipsCtrl.prototype.inputKeydown = function(event) {
  var chipBuffer = this.getChipBuffer();
  switch (event.keyCode) {
    case this.$mdConstant.KEY_CODE.ENTER:
      if (this.$scope.requireMatch || !chipBuffer) break;
      event.preventDefault();
      this.appendChip(chipBuffer);
      this.resetChipBuffer();
      break;
    case this.$mdConstant.KEY_CODE.BACKSPACE:
      if (chipBuffer) break;
      event.stopPropagation();
      if (this.items.length) this.selectAndFocusChipSafe(this.items.length - 1);
      break;
  }
};

/**
 * Handles the keydown event on the chip elements: backspace removes the selected chip, arrow
 * keys switch which chips is active
 * @param event
 */
MdChipsCtrl.prototype.chipKeydown = function (event) {
  if (this.getChipBuffer()) return;
  switch (event.keyCode) {
    case this.$mdConstant.KEY_CODE.BACKSPACE:
    case this.$mdConstant.KEY_CODE.DELETE:
      if (this.selectedChip < 0) return;
      event.preventDefault();
      this.removeAndSelectAdjacentChip(this.selectedChip);
      break;
    case this.$mdConstant.KEY_CODE.LEFT_ARROW:
      event.preventDefault();
      if (this.selectedChip < 0) this.selectedChip = this.items.length;
      if (this.items.length) this.selectAndFocusChipSafe(this.selectedChip - 1);
      break;
    case this.$mdConstant.KEY_CODE.RIGHT_ARROW:
      event.preventDefault();
      this.selectAndFocusChipSafe(this.selectedChip + 1);
      break;
    case this.$mdConstant.KEY_CODE.ESCAPE:
    case this.$mdConstant.KEY_CODE.TAB:
      if (this.selectedChip < 0) return;
      event.preventDefault();
      this.onFocus();
      break;
  }
};

/**
 * Get the input's placeholder - uses `placeholder` when list is empty and `secondary-placeholder`
 * when the list is non-empty. If `secondary-placeholder` is not provided, `placeholder` is used
 * always.
 */
MdChipsCtrl.prototype.getPlaceholder = function() {
  // Allow `secondary-placeholder` to be blank.
  var useSecondary = (this.items.length &&
      (this.secondaryPlaceholder == '' || this.secondaryPlaceholder));
  return useSecondary ? this.placeholder : this.secondaryPlaceholder;
};

/**
 * Removes chip at {@code index} and selects the adjacent chip.
 * @param index
 */
MdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {
  var selIndex = this.getAdjacentChipIndex(index);
  this.removeChip(index);
  this.$timeout(angular.bind(this, function () {
      this.selectAndFocusChipSafe(selIndex);
  }));
};

/**
 * Sets the selected chip index to -1.
 */
MdChipsCtrl.prototype.resetSelectedChip = function() {
  this.selectedChip = -1;
};

/**
 * Gets the index of an adjacent chip to select after deletion. Adjacency is
 * determined as the next chip in the list, unless the target chip is the
 * last in the list, then it is the chip immediately preceding the target. If
 * there is only one item in the list, -1 is returned (select none).
 * The number returned is the index to select AFTER the target has been
 * removed.
 * If the current chip is not selected, then -1 is returned to select none.
 */
MdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {
  var len = this.items.length - 1;
  return (len == 0) ? -1 :
      (index == len) ? index -1 : index;
};

/**
 * Append the contents of the buffer to the chip list. This method will first
 * call out to the md-on-append method, if provided
 * @param newChip
 */
MdChipsCtrl.prototype.appendChip = function(newChip) {
  if (this.items.indexOf(newChip) + 1) return;
  if (this.useMdOnAppend && this.mdOnAppend) {
    newChip = this.mdOnAppend({'$chip': newChip});
  }
  this.items.push(newChip);
};

/**
 * Sets whether to use the md-on-append expression. This expression is
 * bound to scope and controller in {@code MdChipsDirective} as
 * {@code mdOnAppend}. Due to the nature of directive scope bindings, the
 * controller cannot know on its own/from the scope whether an expression was
 * actually provided.
 */
MdChipsCtrl.prototype.useMdOnAppendExpression = function() {
  this.useMdOnAppend = true;
};

/**
 * Gets the input buffer. The input buffer can be the model bound to the
 * default input item {@code this.chipBuffer}, the {@code selectedItem}
 * model of an {@code md-autocomplete}, or, through some magic, the model
 * bound to any inpput or text area element found within a
 * {@code md-input-container} element.
 * @return {Object|string}
 */
MdChipsCtrl.prototype.getChipBuffer = function() {
  return !this.userInputElement ? this.chipBuffer :
      this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue :
          this.userInputElement[0].value;
};

/**
 * Resets the input buffer for either the internal input or user provided input element.
 */
MdChipsCtrl.prototype.resetChipBuffer = function() {
  if (this.userInputElement) {
    if (this.userInputNgModelCtrl) {
      this.userInputNgModelCtrl.$setViewValue('');
      this.userInputNgModelCtrl.$render();
    } else {
      this.userInputElement[0].value = '';
    }
  } else {
    this.chipBuffer = '';
  }
};

/**
 * Removes the chip at the given index.
 * @param index
 */
MdChipsCtrl.prototype.removeChip = function(index) {
  this.items.splice(index, 1);
};

MdChipsCtrl.prototype.removeChipAndFocusInput = function (index) {
  this.removeChip(index);
  this.onFocus();
};
/**
 * Selects the chip at `index`,
 * @param index
 */
MdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {
  if (!this.items.length) {
    this.selectChip(-1);
    this.onFocus();
    return;
  }
  if (index === this.items.length) return this.onFocus();
  index = Math.max(index, 0);
  index = Math.min(index, this.items.length - 1);
  this.selectChip(index);
  this.focusChip(index);
};

/**
 * Marks the chip at the given index as selected.
 * @param index
 */
MdChipsCtrl.prototype.selectChip = function(index) {
  if (index >= -1 && index <= this.items.length) {
    this.selectedChip = index;
  } else {
    this.$log.warn('Selected Chip index out of bounds; ignoring.');
  }
};

/**
 * Selects the chip at `index` and gives it focus.
 * @param index
 */
MdChipsCtrl.prototype.selectAndFocusChip = function(index) {
  this.selectChip(index);
  if (index != -1) {
    this.focusChip(index);
  }
};

/**
 * Call `focus()` on the chip at `index`
 */
MdChipsCtrl.prototype.focusChip = function(index) {
  this.$element[0].querySelector('md-chip[index="' + index + '"] .md-chip-content').focus();
};

/**
 * Configures the required interactions with the ngModel Controller.
 * Specifically, set {@code this.items} to the {@code NgModelCtrl#$viewVale}.
 * @param ngModelCtrl
 */
MdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {
  this.ngModelCtrl = ngModelCtrl;

  var self = this;
  ngModelCtrl.$render = function() {
    // model is updated. do something.
    self.items = self.ngModelCtrl.$viewValue;
  };
};

MdChipsCtrl.prototype.onFocus = function () {
  var input = this.$element[0].querySelector('input');
  input && input.focus();
  this.resetSelectedChip();
};

MdChipsCtrl.prototype.onInputFocus = function () {
  this.inputHasFocus = true;
  this.resetSelectedChip();
};

MdChipsCtrl.prototype.onInputBlur = function () {
  this.inputHasFocus = false;
};

/**
 * Configure event bindings on a user-provided input element.
 * @param inputElement
 */
MdChipsCtrl.prototype.configureUserInput = function(inputElement) {
  this.userInputElement = inputElement;

  // Find the NgModelCtrl for the input element
  var ngModelCtrl = inputElement.controller('ngModel');
  // `.controller` will look in the parent as well.
  if (ngModelCtrl != this.ngModelCtrl) {
    this.userInputNgModelCtrl = ngModelCtrl;
  }

  // Bind to keydown and focus events of input
  var scope = this.$scope;
  var ctrl = this;
  inputElement
      .attr({ tabindex: 0 })
      .on('keydown', function(event) { scope.$apply( angular.bind(ctrl, function() { ctrl.inputKeydown(event); })) })
      .on('focus', angular.bind(ctrl, ctrl.onInputFocus))
      .on('blur', angular.bind(ctrl, ctrl.onInputBlur));
};

MdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {

  ctrl.registerSelectedItemWatcher(angular.bind(this, function (item) {
    if (item) {
      this.appendChip(item);
      this.resetChipBuffer();
    }
  }));

  this.$element.find('input')
      .on('focus',angular.bind(this, this.onInputFocus) )
      .on('blur', angular.bind(this, this.onInputBlur) );
};

MdChipsCtrl.prototype.hasFocus = function () {
  return this.inputHasFocus || this.selectedChip >= 0;
};

})();
(function(){
"use strict";

  angular
      .module('material.components.chips')
      .directive('mdChips', MdChips);

  /**
   * @ngdoc directive
   * @name mdChips
   * @module material.components.chips
   *
   * @description
   * `<md-chips>` is an input component for building lists of strings or objects. The list items are
   * displayed as 'chips'. This component can make use of an `<input>` element or an
   * `<md-autocomplete>` element.
   *
   * <strong>Custom `<md-chip-template>` template</strong>
   * A custom template may be provided to render the content of each chip. This is achieved by
   * specifying an `<md-chip-template>` element as a child of `<md-chips>`. Note: Any attributes on
   * `<md-chip-template>` will be dropped as only the innerHTML is used for the chip template. The
   * variables `$chip` and `$index` are available in the scope of `<md-chip-template>`, representing
   * the chip object and its index in the list of chips, respectively.
   * To override the chip delete control, include an element (ideally a button) with the attribute
   * `md-chip-remove`. A click listener to remove the chip will be added automatically. The element
   * is also placed as a sibling to the chip content (on which there are also click listeners) to
   * avoid a nested ng-click situation.
   *
   * <h3> Pending Features </h3>
   * <ul style="padding-left:20px;">
   *
   *   <ul>Style
   *     <li>Colours for hover, press states (ripple?).</li>
   *   </ul>
   *
   *   <ul>List Manipulation
   *     <li>delete item via DEL or backspace keys when selected</li>
   *   </ul>
   *
   *   <ul>Validation
   *     <li>de-dupe values (or support duplicates, but fix the ng-repeat duplicate key issue)</li>
   *     <li>allow a validation callback</li>
   *     <li>hilighting style for invalid chips</li>
   *   </ul>
   *
   *   <ul>Item mutation
   *     <li>Support `
   *       <md-chip-edit>` template, show/hide the edit element on tap/click? double tap/double
   *       click?
   *     </li>
   *   </ul>
   *
   *   <ul>Truncation and Disambiguation (?)
   *     <li>Truncate chip text where possible, but do not truncate entries such that two are
   *     indistinguishable.</li>
   *   </ul>
   *
   *   <ul>Drag and Drop
   *     <li>Drag and drop chips between related `<md-chips>` elements.
   *     </li>
   *   </ul>
   * </ul>
   *
   *  <span style="font-size:.8em;text-align:center">
   *    Warning: This component is a WORK IN PROGRESS. If you use it now,
   *    it will probably break on you in the future.
   *  </span>
   *
   * @param {string=|object=} ng-model A model to bind the list of items to
   * @param {string=} placeholder Placeholder text that will be forwarded to the input.
   * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,
   *    displayed when there is at least on item in the list
   * @param {boolean=} readonly Disables list manipulation (deleting or adding list items), hiding
   *    the input and delete buttons
   * @param {expression} md-on-append An expression expected to convert the input string into an
   *    object when adding a chip.
   * @param {string=} delete-hint A string read by screen readers instructing users that pressing
   *    the delete key will remove the chip.
   * @param {string=} delete-button-label A label for the delete button. Also hidden and read by
   *    screen readers.
   *
   * @usage
   * <hljs lang="html">
   *   <md-chips
   *       ng-model="myItems"
   *       placeholder="Add an item"
   *       readonly="isReadOnly">
   *   </md-chips>
   * </hljs>
   *
   */


  var MD_CHIPS_TEMPLATE = '\
      <md-chips-wrap\
          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"\
          ng-keydown="$mdChipsCtrl.chipKeydown($event)"\
          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus() }"\
          class="md-chips">\
        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"\
            index="{{$index}}"\
            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index}">\
          <div class="md-chip-content"\
              tabindex="-1"\
              aria-hidden="true"\
              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"\
              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>\
          <div class="md-chip-remove-container"\
              md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>\
        </md-chip>\
        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"\
            class="md-chip-input-container"\
            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>\
        </div>\
      </md-chips-wrap>';

  var CHIP_INPUT_TEMPLATE = '\
        <input\
            tabindex="0"\
            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"\
            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"\
            ng-model="$mdChipsCtrl.chipBuffer"\
            ng-focus="$mdChipsCtrl.onInputFocus()"\
            ng-blur="$mdChipsCtrl.onInputBlur()"\
            ng-keydown="$mdChipsCtrl.inputKeydown($event)">';

  var CHIP_DEFAULT_TEMPLATE = '\
      <span>{{$chip}}</span>';

  var CHIP_REMOVE_TEMPLATE = '\
      <button\
          class="md-chip-remove"\
          ng-if="!$mdChipsCtrl.readonly"\
          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"\
          type="button"\
          aria-hidden="true"\
          tabindex="-1">\
        <md-icon md-svg-icon="md-close"></md-icon>\
        <span class="md-visually-hidden">\
          {{$mdChipsCtrl.deleteButtonLabel}}\
        </span>\
      </button>';

  /**
   * MDChips Directive Definition
   */
  function MdChips ($mdTheming, $mdUtil, $compile, $log, $timeout) {
    return {
      template: function(element, attrs) {
        // Clone the element into an attribute. By prepending the attribute
        // name with '$', Angular won't write it into the DOM. The cloned
        // element propagates to the link function via the attrs argument,
        // where various contained-elements can be consumed.
        var content = attrs['$mdUserTemplate'] = element.clone();
        return MD_CHIPS_TEMPLATE;
      },
      require: ['mdChips'],
      restrict: 'E',
      controller: 'MdChipsCtrl',
      controllerAs: '$mdChipsCtrl',
      bindToController: true,
      compile: compile,
      scope: {
        readonly: '=readonly',
        placeholder: '@',
        secondaryPlaceholder: '@',
        mdOnAppend: '&',
        deleteHint: '@',
        deleteButtonLabel: '@',
        requireMatch: '=?mdRequireMatch'
      }
    };

    /**
     * Builds the final template for `md-chips` and returns the postLink function.
     *
     * Building the template involves 3 key components:
     * static chips
     * chip template
     * input control
     *
     * If no `ng-model` is provided, only the static chip work needs to be done.
     *
     * If no user-passed `md-chip-template` exists, the default template is used. This resulting
     * template is appended to the chip content element.
     *
     * The remove button may be overridden by passing an element with an md-chip-remove attribute.
     *
     * If an `input` or `md-autocomplete` element is provided by the caller, it is set aside for
     * transclusion later. The transclusion happens in `postLink` as the parent scope is required.
     * If no user input is provided, a default one is appended to the input container node in the
     * template.
     *
     * Static Chips (i.e. `md-chip` elements passed from the caller) are gathered and set aside for
     * transclusion in the `postLink` function.
     *
     *
     * @param element
     * @param attr
     * @returns {Function}
     */
    function compile(element, attr) {
      // Grab the user template from attr and reset the attribute to null.
      var userTemplate = attr['$mdUserTemplate'];
      attr['$mdUserTemplate'] = null;

      // Set the chip remove, chip contents and chip input templates. The link function will put
      // them on the scope for transclusion later.
      var chipRemoveTemplate   = getTemplateByQuery('md-chips>*[md-chip-remove]') || CHIP_REMOVE_TEMPLATE,
          chipContentsTemplate = getTemplateByQuery('md-chips>md-chip-template') || CHIP_DEFAULT_TEMPLATE,
          chipInputTemplate    = getTemplateByQuery('md-chips>md-autocomplete')
              || getTemplateByQuery('md-chips>input')
              || CHIP_INPUT_TEMPLATE,
          staticChips = userTemplate.find('md-chip');

      // Warn of malformed template. See #2545
      if (userTemplate[0].querySelector('md-chip-template>*[md-chip-remove]')) {
        $log.warn('invalid placement of md-chip-remove within md-chip-template.');
      }

      function getTemplateByQuery (query) {
        if (!attr.ngModel) return;
        var element = userTemplate[0].querySelector(query);
        return element && element.outerHTML;
      }

      /**
       * Configures controller and transcludes.
       */
      return function postLink(scope, element, attrs, controllers) {

        $mdUtil.initOptionalProperties(scope, attr);

        $mdTheming(element);
        var mdChipsCtrl = controllers[0];
        mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;
        mdChipsCtrl.chipRemoveTemplate   = chipRemoveTemplate;
        mdChipsCtrl.chipInputTemplate    = chipInputTemplate;

        element
            .attr({ ariaHidden: true, tabindex: -1 })
            .on('focus', function () { mdChipsCtrl.onFocus(); });

        if (attr.ngModel) {
          mdChipsCtrl.configureNgModel(element.controller('ngModel'));

          // If an `md-on-append` attribute was set, tell the controller to use the expression
          // when appending chips.
          if (attrs.mdOnAppend) mdChipsCtrl.useMdOnAppendExpression();

          // The md-autocomplete and input elements won't be compiled until after this directive
          // is complete (due to their nested nature). Wait a tick before looking for them to
          // configure the controller.
          if (chipInputTemplate != CHIP_INPUT_TEMPLATE) {
            $timeout(function() {
              if (chipInputTemplate.indexOf('<md-autocomplete') === 0)
                mdChipsCtrl
                    .configureAutocomplete(element.find('md-autocomplete')
                        .controller('mdAutocomplete'));
              mdChipsCtrl.configureUserInput(element.find('input'));
            });
          }
        }

        // Compile with the parent's scope and prepend any static chips to the wrapper.
        if (staticChips.length > 0) {
          var compiledStaticChips = $compile(staticChips)(scope.$parent);
          $timeout(function() { element.find('md-chips-wrap').prepend(compiledStaticChips); });
        }
      };
    }
  }
  MdChips.$inject = ["$mdTheming", "$mdUtil", "$compile", "$log", "$timeout"];

})();
(function(){
"use strict";

angular
    .module('material.components.chips')
    .controller('MdContactChipsCtrl', MdContactChipsCtrl);



/**
 * Controller for the MdContactChips component
 * @constructor
 */
function MdContactChipsCtrl () {
  /** @type {Object} */
  this.selectedItem = null;

  /** @type {string} */
  this.searchText = '';
}


MdContactChipsCtrl.prototype.queryContact = function(searchText) {
  var results = this.contactQuery({'$query': searchText});
  return this.filterSelected ?
      results.filter(angular.bind(this, this.filterSelectedContacts)) : results;
};


MdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {
  return this.contacts.indexOf(contact) == -1;
};

})();
(function(){
"use strict";

  angular
      .module('material.components.chips')
      .directive('mdContactChips', MdContactChips);

  /**
   * @ngdoc directive
   * @name mdContactChips
   * @module material.components.chips
   *
   * @description
   * `<md-contact-chips>` is an input component based on `md-chips` and makes use of an
   *    `md-autocomplete` element. The component allows the caller to supply a query expression
   *    which returns  a list of possible contacts. The user can select one of these and add it to
   *    the list of chips.
   *
   * @param {string=|object=} ng-model A model to bind the list of items to
   * @param {string=} placeholder Placeholder text that will be forwarded to the input.
   * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,
   *    displayed when there is at least on item in the list
   * @param {expression} md-contacts An expression expected to return contacts matching the search
   *    test, `$query`.
   * @param {string} md-contact-name The field name of the contact object representing the
   *    contact's name.
   * @param {string} md-contact-email The field name of the contact object representing the
   *    contact's email address.
   * @param {string} md-contact-image The field name of the contact object representing the
   *    contact's image.
   *
   *
   * // The following attribute has been removed but may come back.
   * @param {expression=} filter-selected Whether to filter selected contacts from the list of
   *    suggestions shown in the autocomplete.
   *
   *
   *
   * @usage
   * <hljs lang="html">
   *   <md-contact-chips
   *       ng-model="ctrl.contacts"
   *       md-contacts="ctrl.querySearch($query)"
   *       md-contact-name="name"
   *       md-contact-image="image"
   *       md-contact-email="email"
   *       placeholder="To">
   *   </md-contact-chips>
   * </hljs>
   *
   */


  var MD_CONTACT_CHIPS_TEMPLATE = '\
      <md-chips class="md-contact-chips"\
          ng-model="$mdContactChipsCtrl.contacts"\
          md-require-match="$mdContactChipsCtrl.requireMatch"\
          md-autocomplete-snap>\
          <md-autocomplete\
              md-menu-class="md-contact-chips-suggestions"\
              md-selected-item="$mdContactChipsCtrl.selectedItem"\
              md-search-text="$mdContactChipsCtrl.searchText"\
              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"\
              md-item-text="$mdContactChipsCtrl.mdContactName"\
              md-no-cache="true"\
              md-autoselect\
              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?\
                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">\
            <div class="md-contact-suggestion">\
              <img \
                  ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"\
                  alt="{{item[$mdContactChipsCtrl.contactName]}}" />\
              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText">\
                {{item[$mdContactChipsCtrl.contactName]}}\
              </span>\
              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>\
            </div>\
          </md-autocomplete>\
          <md-chip-template>\
            <div class="md-contact-avatar">\
              <img \
                  ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"\
                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}" />\
            </div>\
            <div class="md-contact-name">\
              {{$chip[$mdContactChipsCtrl.contactName]}}\
            </div>\
          </md-chip-template>\
      </md-chips>';


  /**
   * MDContactChips Directive Definition
   *
   * @param $mdTheming
   * @returns {*}
   * @ngInject
   */
  function MdContactChips ($mdTheming, $mdUtil) {
    return {
      template: function(element, attrs) {
        return MD_CONTACT_CHIPS_TEMPLATE;
      },
      restrict: 'E',
      controller: 'MdContactChipsCtrl',
      controllerAs: '$mdContactChipsCtrl',
      bindToController: true,
      compile: compile,
      scope: {
        contactQuery: '&mdContacts',
        placeholder: '@',
        secondaryPlaceholder: '@',
        contactName: '@mdContactName',
        contactImage: '@mdContactImage',
        contactEmail: '@mdContactEmail',
        contacts: '=ngModel',
        requireMatch: '=?mdRequireMatch'
      }
    };

    function compile(element, attr) {
      return function postLink(scope, element, attrs, controllers) {

        $mdUtil.initOptionalProperties(scope, attr);
        $mdTheming(element);

        element.attr('tabindex', '-1');
      };
    }
  }
  MdContactChips.$inject = ["$mdTheming", "$mdUtil"];

})();
(function(){
"use strict";

/**
 * @ngdoc directive
 * @name mdTab
 * @module material.components.tabs
 *
 * @restrict E
 *
 * @description
 * Use the `<md-tab>` a nested directive used within `<md-tabs>` to specify a tab with a **label** and optional *view content*.
 *
 * If the `label` attribute is not specified, then an optional `<md-tab-label>` tag can be used to specify more
 * complex tab header markup. If neither the **label** nor the **md-tab-label** are specified, then the nested
 * markup of the `<md-tab>` is used as the tab header markup.
 *
 * Please note that if you use `<md-tab-label>`, your content **MUST** be wrapped in the `<md-tab-body>` tag.  This
 * is to define a clear separation between the tab content and the tab label.
 *
 * If a tab **label** has been identified, then any **non-**`<md-tab-label>` markup
 * will be considered tab content and will be transcluded to the internal `<div class="md-tabs-content">` container.
 *
 * This container is used by the TabsController to show/hide the active tab's content view. This synchronization is
 * automatically managed by the internal TabsController whenever the tab selection changes. Selection changes can
 * be initiated via data binding changes, programmatic invocation, or user gestures.
 *
 * @param {string=} label Optional attribute to specify a simple string as the tab label
 * @param {boolean=} disabled If present, disabled tab selection.
 * @param {expression=} md-on-deselect Expression to be evaluated after the tab has been de-selected.
 * @param {expression=} md-on-select Expression to be evaluated after the tab has been selected.
 *
 *
 * @usage
 *
 * <hljs lang="html">
 * <md-tab label="" disabled="" md-on-select="" md-on-deselect="" >
 *   <h3>My Tab content</h3>
 * </md-tab>
 *
 * <md-tab >
 *   <md-tab-label>
 *     <h3>My Tab content</h3>
 *   </md-tab-label>
 *   <md-tab-body>
 *     <p>
 *       Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
 *       totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae
 *       dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,
 *       sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.
 *     </p>
 *   </md-tab-body>
 * </md-tab>
 * </hljs>
 *
 */
angular
    .module('material.components.tabs')
    .directive('mdTab', MdTab);

function MdTab () {
  return {
    require:  '^?mdTabs',
    terminal: true,
    compile:  function (element, attr) {
      var label = element.find('md-tab-label'),
          body  = element.find('md-tab-body');

      if (label.length == 0) {
        label = angular.element('<md-tab-label></md-tab-label>');
        if (attr.label) label.text(attr.label);
        else label.append(element.contents());
      }

      if (body.length == 0) {
        var contents = element.contents().detach();
        body         = angular.element('<md-tab-body></md-tab-body>');
        body.append(contents);
      }

      element.append(label);
      if (body.html()) element.append(body);

      return postLink;
    },
    scope:    {
      active:   '=?mdActive',
      disabled: '=?ngDisabled',
      select:   '&?mdOnSelect',
      deselect: '&?mdOnDeselect'
    }
  };

  function postLink (scope, element, attr, ctrl) {
    if (!ctrl) return;
    var tabs  = element.parent()[ 0 ].getElementsByTagName('md-tab'),
        index = Array.prototype.indexOf.call(tabs, element[ 0 ]),
        body  = element.find('md-tab-body').eq(0).remove(),
        label = element.find('md-tab-label').eq(0).remove(),
        data  = ctrl.insertTab({
          scope:    scope,
          parent:   scope.$parent,
          index:    index,
          element:  element,
          template: body.html(),
          label:    label.html()
        }, index);

    scope.select   = scope.select || angular.noop;
    scope.deselect = scope.deselect || angular.noop;

    scope.$watch('active', function (active) { if (active) ctrl.select(data.getIndex()); });
    scope.$watch('disabled', function () { ctrl.refreshIndex(); });
    scope.$watch(
        function () {
          return Array.prototype.indexOf.call(tabs, element[ 0 ]);
        },
        function (newIndex) {
          data.index = newIndex;
          ctrl.updateTabOrder();
        }
    );
    scope.$on('$destroy', function () { ctrl.removeTab(data); });

  }
}

})();
(function(){
"use strict";

angular
    .module('material.components.tabs')
    .directive('mdTabItem', MdTabItem);

function MdTabItem () {
  return {
    require: '^?mdTabs',
    link:    function link (scope, element, attr, ctrl) {
      if (!ctrl) return;
      ctrl.attachRipple(scope, element);
    }
  };
}

})();
(function(){
"use strict";

angular
    .module('material.components.tabs')
    .directive('mdTabLabel', MdTabLabel);

function MdTabLabel () {
  return { terminal: true };
}


})();
(function(){
"use strict";

angular.module('material.components.tabs')
    .directive('mdTabScroll', MdTabScroll);

function MdTabScroll ($parse) {
  return {
    restrict: 'A',
    compile: function ($element, attr) {
      var fn = $parse(attr.mdTabScroll, null, true);
      return function ngEventHandler (scope, element) {
        element.on('mousewheel', function (event) {
          scope.$apply(function () { fn(scope, { $event: event }); });
        });
      };
    }
  }
}
MdTabScroll.$inject = ["$parse"];

})();
(function(){
"use strict";

angular
    .module('material.components.tabs')
    .controller('MdTabsController', MdTabsController);

/**
 * @ngInject
 */
function MdTabsController ($scope, $element, $window, $mdConstant, $mdTabInkRipple,
                           $mdUtil, $animate, $attrs, $compile, $mdTheming) {
  // define private properties
  var ctrl      = this,
      locked    = false,
      elements  = getElements(),
      queue     = [],
      destroyed = false,
      loaded    = false;

  // define one-way bindings
  defineOneWayBinding('stretchTabs', handleStretchTabs);

  // define public properties with change handlers
  defineProperty('focusIndex', handleFocusIndexChange, ctrl.selectedIndex || 0);
  defineProperty('offsetLeft', handleOffsetChange, 0);
  defineProperty('hasContent', handleHasContent, false);
  defineProperty('maxTabWidth', handleMaxTabWidth, getMaxTabWidth());
  defineProperty('shouldPaginate', handleShouldPaginate, false);

  // define boolean attributes
  defineBooleanAttribute('noInkBar', handleInkBar);
  defineBooleanAttribute('dynamicHeight', handleDynamicHeight);
  defineBooleanAttribute('noPagination');
  defineBooleanAttribute('swipeContent');
  defineBooleanAttribute('noDisconnect');
  defineBooleanAttribute('autoselect');
  defineBooleanAttribute('centerTabs', handleCenterTabs);
  defineBooleanAttribute('enableDisconnect');

  // define public properties
  ctrl.scope             = $scope;
  ctrl.parent            = $scope.$parent;
  ctrl.tabs              = [];
  ctrl.lastSelectedIndex = null;
  ctrl.hasFocus          = false;
  ctrl.lastClick         = true;
  ctrl.shouldCenterTabs  = shouldCenterTabs();

  // define public methods
  ctrl.updatePagination   = $mdUtil.debounce(updatePagination, 100);
  ctrl.redirectFocus      = redirectFocus;
  ctrl.attachRipple       = attachRipple;
  ctrl.insertTab          = insertTab;
  ctrl.removeTab          = removeTab;
  ctrl.select             = select;
  ctrl.scroll             = scroll;
  ctrl.nextPage           = nextPage;
  ctrl.previousPage       = previousPage;
  ctrl.keydown            = keydown;
  ctrl.canPageForward     = canPageForward;
  ctrl.canPageBack        = canPageBack;
  ctrl.refreshIndex       = refreshIndex;
  ctrl.incrementIndex     = incrementIndex;
  ctrl.updateInkBarStyles = $mdUtil.debounce(updateInkBarStyles, 100);
  ctrl.updateTabOrder     = $mdUtil.debounce(updateTabOrder, 100);

  init();

  /**
   * Perform initialization for the controller, setup events and watcher(s)
   */
  function init () {
    ctrl.selectedIndex = ctrl.selectedIndex || 0;
    compileTemplate();
    configureWatchers();
    bindEvents();
    $mdTheming($element);
    $mdUtil.nextTick(function () {
      updateHeightFromContent();
      adjustOffset();
      updateInkBarStyles();
      ctrl.tabs[ ctrl.selectedIndex ] && ctrl.tabs[ ctrl.selectedIndex ].scope.select();
      loaded = true;
      updatePagination();
    });
  }

  /**
   * Compiles the template provided by the user.  This is passed as an attribute from the tabs
   * directive's template function.
   */
  function compileTemplate () {
    var template = $attrs.$mdTabsTemplate,
        element  = angular.element(elements.data);
    element.html(template);
    $compile(element.contents())(ctrl.parent);
    delete $attrs.$mdTabsTemplate;
  }

  /**
   * Binds events used by the tabs component.
   */
  function bindEvents () {
    angular.element($window).on('resize', handleWindowResize);
    $scope.$on('$destroy', cleanup);
  }

  /**
   * Configure watcher(s) used by Tabs
   */
  function configureWatchers () {
    $scope.$watch('$mdTabsCtrl.selectedIndex', handleSelectedIndexChange);
  }

  /**
   * Creates a one-way binding manually rather than relying on Angular's isolated scope
   * @param key
   * @param handler
   */
  function defineOneWayBinding (key, handler) {
    var attr = $attrs.$normalize('md-' + key);
    if (handler) defineProperty(key, handler);
    $attrs.$observe(attr, function (newValue) { ctrl[ key ] = newValue; });
  }

  /**
   * Defines boolean attributes with default value set to true.  (ie. md-stretch-tabs with no value
   * will be treated as being truthy)
   * @param key
   * @param handler
   */
  function defineBooleanAttribute (key, handler) {
    var attr = $attrs.$normalize('md-' + key);
    if (handler) defineProperty(key, handler);
    if ($attrs.hasOwnProperty(attr)) updateValue($attrs[attr]);
    $attrs.$observe(attr, updateValue);
    function updateValue (newValue) {
      ctrl[ key ] = newValue !== 'false';
    }
  }

  /**
   * Remove any events defined by this controller
   */
  function cleanup () {
    destroyed = true;
    angular.element($window).off('resize', handleWindowResize);
  }

  // Change handlers

  /**
   * Toggles stretch tabs class and updates inkbar when tab stretching changes
   * @param stretchTabs
   */
  function handleStretchTabs (stretchTabs) {
    angular.element(elements.wrapper).toggleClass('md-stretch-tabs', shouldStretchTabs());
    updateInkBarStyles();
  }

  function handleCenterTabs (newValue) {
    ctrl.shouldCenterTabs = shouldCenterTabs();
  }

  function handleMaxTabWidth (newWidth, oldWidth) {
    if (newWidth !== oldWidth) {
      $mdUtil.nextTick(ctrl.updateInkBarStyles);
    }
  }

  function handleShouldPaginate (newValue, oldValue) {
    if (newValue !== oldValue) {
      ctrl.maxTabWidth      = getMaxTabWidth();
      ctrl.shouldCenterTabs = shouldCenterTabs();
      $mdUtil.nextTick(function () {
        ctrl.maxTabWidth = getMaxTabWidth();
        adjustOffset(ctrl.selectedIndex);
      });
    }
  }

  /**
   * Add/remove the `md-no-tab-content` class depending on `ctrl.hasContent`
   * @param hasContent
   */
  function handleHasContent (hasContent) {
    $element[ hasContent ? 'removeClass' : 'addClass' ]('md-no-tab-content');
  }

  /**
   * Apply ctrl.offsetLeft to the paging element when it changes
   * @param left
   */
  function handleOffsetChange (left) {
    var newValue = ctrl.shouldCenterTabs ? '' : '-' + left + 'px';
    angular.element(elements.paging).css($mdConstant.CSS.TRANSFORM, 'translate3d(' + newValue + ', 0, 0)');
    $scope.$broadcast('$mdTabsPaginationChanged');
  }

  /**
   * Update the UI whenever `ctrl.focusIndex` is updated
   * @param newIndex
   * @param oldIndex
   */
  function handleFocusIndexChange (newIndex, oldIndex) {
    if (newIndex === oldIndex) return;
    if (!elements.tabs[ newIndex ]) return;
    adjustOffset();
    redirectFocus();
  }

  /**
   * Update the UI whenever the selected index changes. Calls user-defined select/deselect methods.
   * @param newValue
   * @param oldValue
   */
  function handleSelectedIndexChange (newValue, oldValue) {
    if (newValue === oldValue) return;

    ctrl.selectedIndex     = getNearestSafeIndex(newValue);
    ctrl.lastSelectedIndex = oldValue;
    ctrl.updateInkBarStyles();
    updateHeightFromContent();
    adjustOffset(newValue);
    $scope.$broadcast('$mdTabsChanged');
    ctrl.tabs[ oldValue ] && ctrl.tabs[ oldValue ].scope.deselect();
    ctrl.tabs[ newValue ] && ctrl.tabs[ newValue ].scope.select();
  }

  /**
   * Queues up a call to `handleWindowResize` when a resize occurs while the tabs component is
   * hidden.
   */
  function handleResizeWhenVisible () {
    // if there is already a watcher waiting for resize, do nothing
    if (handleResizeWhenVisible.watcher) return;
    // otherwise, we will abuse the $watch function to check for visible
    handleResizeWhenVisible.watcher = $scope.$watch(function () {
      // since we are checking for DOM size, we use $mdUtil.nextTick() to wait for after the DOM updates
      $mdUtil.nextTick(function () {
        // if the watcher has already run (ie. multiple digests in one cycle), do nothing
        if (!handleResizeWhenVisible.watcher) return;

        if ($element.prop('offsetParent')) {
          handleResizeWhenVisible.watcher();
          handleResizeWhenVisible.watcher = null;

          // we have to trigger our own $apply so that the DOM bindings will update
          handleWindowResize();
        }
      }, false);
    });
  }

  // Event handlers / actions

  /**
   * Handle user keyboard interactions
   * @param event
   */
  function keydown (event) {
    switch (event.keyCode) {
      case $mdConstant.KEY_CODE.LEFT_ARROW:
        event.preventDefault();
        incrementIndex(-1, true);
        break;
      case $mdConstant.KEY_CODE.RIGHT_ARROW:
        event.preventDefault();
        incrementIndex(1, true);
        break;
      case $mdConstant.KEY_CODE.SPACE:
      case $mdConstant.KEY_CODE.ENTER:
        event.preventDefault();
        if (!locked) ctrl.selectedIndex = ctrl.focusIndex;
        break;
    }
    ctrl.lastClick = false;
  }

  /**
   * Update the selected index and trigger a click event on the original `md-tab` element in order
   * to fire user-added click events.
   * @param index
   */
  function select (index) {
    if (!locked) ctrl.focusIndex = ctrl.selectedIndex = index;
    ctrl.lastClick = true;
    // nextTick is required to prevent errors in user-defined click events
    $mdUtil.nextTick(function () {
      ctrl.tabs[ index ].element.triggerHandler('click');
    }, false);
  }

  /**
   * When pagination is on, this makes sure the selected index is in view.
   * @param event
   */
  function scroll (event) {
    if (!ctrl.shouldPaginate) return;
    event.preventDefault();
    ctrl.offsetLeft = fixOffset(ctrl.offsetLeft - event.wheelDelta);
  }

  /**
   * Slides the tabs over approximately one page forward.
   */
  function nextPage () {
    var viewportWidth = elements.canvas.clientWidth,
        totalWidth    = viewportWidth + ctrl.offsetLeft,
        i, tab;
    for (i = 0; i < elements.tabs.length; i++) {
      tab = elements.tabs[ i ];
      if (tab.offsetLeft + tab.offsetWidth > totalWidth) break;
    }
    ctrl.offsetLeft = fixOffset(tab.offsetLeft);
  }

  /**
   * Slides the tabs over approximately one page backward.
   */
  function previousPage () {
    var i, tab;
    for (i = 0; i < elements.tabs.length; i++) {
      tab = elements.tabs[ i ];
      if (tab.offsetLeft + tab.offsetWidth >= ctrl.offsetLeft) break;
    }
    ctrl.offsetLeft = fixOffset(tab.offsetLeft + tab.offsetWidth - elements.canvas.clientWidth);
  }

  /**
   * Update size calculations when the window is resized.
   */
  function handleWindowResize () {
    $scope.$apply(function () {
      ctrl.lastSelectedIndex = ctrl.selectedIndex;
      ctrl.offsetLeft        = fixOffset(ctrl.offsetLeft);
      $mdUtil.nextTick(ctrl.updateInkBarStyles, false);
      $mdUtil.nextTick(updatePagination);
    });
  }

  function handleInkBar (hide) {
    angular.element(elements.inkBar).toggleClass('ng-hide', hide);
  }

  /**
   * Toggle dynamic height class when value changes
   * @param value
   */
  function handleDynamicHeight (value) {
    $element.toggleClass('md-dynamic-height', value);
  }

  /**
   * Remove a tab from the data and select the nearest valid tab.
   * @param tabData
   */
  function removeTab (tabData) {
    if (destroyed) return;
    var selectedIndex = ctrl.selectedIndex,
        tab           = ctrl.tabs.splice(tabData.getIndex(), 1)[ 0 ];
    refreshIndex();
    // when removing a tab, if the selected index did not change, we have to manually trigger the
    //   tab select/deselect events
    if (ctrl.selectedIndex === selectedIndex) {
      tab.scope.deselect();
      ctrl.tabs[ ctrl.selectedIndex ] && ctrl.tabs[ ctrl.selectedIndex ].scope.select();
    }
    $mdUtil.nextTick(function () {
      updatePagination();
      ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);
    });
  }

  /**
   * Create an entry in the tabs array for a new tab at the specified index.
   * @param tabData
   * @param index
   * @returns {*}
   */
  function insertTab (tabData, index) {
    var hasLoaded = loaded;
    var proto     = {
          getIndex:     function () { return ctrl.tabs.indexOf(tab); },
          isActive:     function () { return this.getIndex() === ctrl.selectedIndex; },
          isLeft:       function () { return this.getIndex() < ctrl.selectedIndex; },
          isRight:      function () { return this.getIndex() > ctrl.selectedIndex; },
          shouldRender: function () { return !ctrl.noDisconnect || this.isActive(); },
          hasFocus:     function () {
            return !ctrl.lastClick
                && ctrl.hasFocus && this.getIndex() === ctrl.focusIndex;
          },
          id:           $mdUtil.nextUid()
        },
        tab       = angular.extend(proto, tabData);
    if (angular.isDefined(index)) {
      ctrl.tabs.splice(index, 0, tab);
    } else {
      ctrl.tabs.push(tab);
    }
    processQueue();
    updateHasContent();
    $mdUtil.nextTick(function () {
      updatePagination();
      // if autoselect is enabled, select the newly added tab
      if (hasLoaded && ctrl.autoselect) $mdUtil.nextTick(function () {
        $mdUtil.nextTick(function () { select(ctrl.tabs.indexOf(tab)); });
      });
    });
    return tab;
  }

  // Getter methods

  /**
   * Gathers references to all of the DOM elements used by this controller.
   * @returns {{}}
   */
  function getElements () {
    var elements = {};

    // gather tab bar elements
    elements.wrapper = $element[ 0 ].getElementsByTagName('md-tabs-wrapper')[ 0 ];
    elements.data    = $element[ 0 ].getElementsByTagName('md-tab-data')[ 0 ];
    elements.canvas  = elements.wrapper.getElementsByTagName('md-tabs-canvas')[ 0 ];
    elements.paging  = elements.canvas.getElementsByTagName('md-pagination-wrapper')[ 0 ];
    elements.tabs    = elements.paging.getElementsByTagName('md-tab-item');
    elements.dummies = elements.canvas.getElementsByTagName('md-dummy-tab');
    elements.inkBar  = elements.paging.getElementsByTagName('md-ink-bar')[ 0 ];

    // gather tab content elements
    elements.contentsWrapper = $element[ 0 ].getElementsByTagName('md-tabs-content-wrapper')[ 0 ];
    elements.contents        = elements.contentsWrapper.getElementsByTagName('md-tab-content');

    return elements;
  }

  /**
   * Determines whether or not the left pagination arrow should be enabled.
   * @returns {boolean}
   */
  function canPageBack () {
    return ctrl.offsetLeft > 0;
  }

  /**
   * Determines whether or not the right pagination arrow should be enabled.
   * @returns {*|boolean}
   */
  function canPageForward () {
    var lastTab = elements.tabs[ elements.tabs.length - 1 ];
    return lastTab && lastTab.offsetLeft + lastTab.offsetWidth > elements.canvas.clientWidth +
        ctrl.offsetLeft;
  }

  /**
   * Determines if the UI should stretch the tabs to fill the available space.
   * @returns {*}
   */
  function shouldStretchTabs () {
    switch (ctrl.stretchTabs) {
      case 'always':
        return true;
      case 'never':
        return false;
      default:
        return !ctrl.shouldPaginate
            && $window.matchMedia('(max-width: 600px)').matches;
    }
  }

  /**
   * Determines if the tabs should appear centered.
   * @returns {string|boolean}
   */
  function shouldCenterTabs () {
    return ctrl.centerTabs && !ctrl.shouldPaginate;
  }

  /**
   * Determines if pagination is necessary to display the tabs within the available space.
   * @returns {boolean}
   */
  function shouldPaginate () {
    if (ctrl.noPagination || !loaded) return false;
    var canvasWidth = Math.min($element.prop('clientWidth'), ctrl.maxTabWidth);
    angular.forEach(elements.dummies, function (tab) { canvasWidth -= tab.offsetWidth; });
    return canvasWidth < 0;
  }

  /**
   * Finds the nearest tab index that is available.  This is primarily used for when the active
   * tab is removed.
   * @param newIndex
   * @returns {*}
   */
  function getNearestSafeIndex (newIndex) {
    if (newIndex === -1) return -1;
    var maxOffset = Math.max(ctrl.tabs.length - newIndex, newIndex),
        i, tab;
    for (i = 0; i <= maxOffset; i++) {
      tab = ctrl.tabs[ newIndex + i ];
      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();
      tab = ctrl.tabs[ newIndex - i ];
      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();
    }
    return newIndex;
  }

  // Utility methods

  /**
   * Defines a property using a getter and setter in order to trigger a change handler without
   * using `$watch` to observe changes.
   * @param key
   * @param handler
   * @param value
   */
  function defineProperty (key, handler, value) {
    Object.defineProperty(ctrl, key, {
      get: function () { return value; },
      set: function (newValue) {
        var oldValue = value;
        value        = newValue;
        handler && handler(newValue, oldValue);
      }
    });
  }

  /**
   * Updates whether or not pagination should be displayed.
   */
  function updatePagination () {
    ctrl.shouldPaginate = shouldPaginate();
  }

  function getMaxTabWidth () {
    return $element.prop('clientWidth');
  }

  /**
   * Re-orders the tabs and updates the selected and focus indexes to their new positions.
   * This is triggered by `tabDirective.js` when the user's tabs have been re-ordered.
   */
  function updateTabOrder () {
    var selectedItem   = ctrl.tabs[ ctrl.selectedIndex ],
        focusItem      = ctrl.tabs[ ctrl.focusIndex ];
    ctrl.tabs          = ctrl.tabs.sort(function (a, b) {
      return a.index - b.index;
    });
    ctrl.selectedIndex = ctrl.tabs.indexOf(selectedItem);
    ctrl.focusIndex    = ctrl.tabs.indexOf(focusItem);
  }

  /**
   * This moves the selected or focus index left or right.  This is used by the keydown handler.
   * @param inc
   */
  function incrementIndex (inc, focus) {
    var newIndex,
        key   = focus ? 'focusIndex' : 'selectedIndex',
        index = ctrl[ key ];
    for (newIndex = index + inc;
         ctrl.tabs[ newIndex ] && ctrl.tabs[ newIndex ].scope.disabled;
         newIndex += inc) {}
    if (ctrl.tabs[ newIndex ]) {
      ctrl[ key ] = newIndex;
    }
  }

  /**
   * This is used to forward focus to dummy elements.  This method is necessary to avoid aniation
   * issues when attempting to focus an item that is out of view.
   */
  function redirectFocus () {
    elements.dummies[ ctrl.focusIndex ].focus();
  }

  /**
   * Forces the pagination to move the focused tab into view.
   */
  function adjustOffset (index) {
    if (index == null) index = ctrl.focusIndex;
    if (!elements.tabs[ index ]) return;
    if (ctrl.shouldCenterTabs) return;
    var tab         = elements.tabs[ index ],
        left        = tab.offsetLeft,
        right       = tab.offsetWidth + left;
    ctrl.offsetLeft = Math.max(ctrl.offsetLeft, fixOffset(right - elements.canvas.clientWidth));
    ctrl.offsetLeft = Math.min(ctrl.offsetLeft, fixOffset(left));
  }

  /**
   * Iterates through all queued functions and clears the queue.  This is used for functions that
   * are called before the UI is ready, such as size calculations.
   */
  function processQueue () {
    queue.forEach(function (func) { $mdUtil.nextTick(func); });
    queue = [];
  }

  /**
   * Determines if the tab content area is needed.
   */
  function updateHasContent () {
    var hasContent  = false;
    angular.forEach(ctrl.tabs, function (tab) {
      if (tab.template) hasContent = true;
    });
    ctrl.hasContent = hasContent;
  }

  /**
   * Moves the indexes to their nearest valid values.
   */
  function refreshIndex () {
    ctrl.selectedIndex = getNearestSafeIndex(ctrl.selectedIndex);
    ctrl.focusIndex    = getNearestSafeIndex(ctrl.focusIndex);
  }

  /**
   * Calculates the content height of the current tab.
   * @returns {*}
   */
  function updateHeightFromContent () {
    if (!ctrl.dynamicHeight) return $element.css('height', '');
    if (!ctrl.tabs.length) return queue.push(updateHeightFromContent);
    var tabContent    = elements.contents[ ctrl.selectedIndex ],
        contentHeight = tabContent ? tabContent.offsetHeight : 0,
        tabsHeight    = elements.wrapper.offsetHeight,
        newHeight     = contentHeight + tabsHeight,
        currentHeight = $element.prop('clientHeight');
    if (currentHeight === newHeight) return;
    locked = true;
    $animate
        .animate(
        $element,
        { height: currentHeight + 'px' },
        { height: newHeight + 'px' }
    )
        .then(function () {
                $element.css('height', '');
                locked = false;
              });
  }

  /**
   * Repositions the ink bar to the selected tab.
   * @returns {*}
   */
  function updateInkBarStyles () {
    if (!elements.tabs[ ctrl.selectedIndex ]) return;
    if (!ctrl.tabs.length) return queue.push(ctrl.updateInkBarStyles);
    // if the element is not visible, we will not be able to calculate sizes until it is
    // we should treat that as a resize event rather than just updating the ink bar
    if (!$element.prop('offsetParent')) return handleResizeWhenVisible();
    var index      = ctrl.selectedIndex,
        totalWidth = elements.paging.offsetWidth,
        tab        = elements.tabs[ index ],
        left       = tab.offsetLeft,
        right      = totalWidth - left - tab.offsetWidth,
        tabWidth;
    if (ctrl.shouldCenterTabs) {
      tabWidth = Array.prototype.slice.call(elements.tabs).reduce(function (value, element) {
        return value + element.offsetWidth;
      }, 0);
      if (totalWidth > tabWidth) $mdUtil.nextTick(updateInkBarStyles, false);
    }
    updateInkBarClassName();
    angular.element(elements.inkBar).css({ left: left + 'px', right: right + 'px' });
  }

  /**
   * Adds left/right classes so that the ink bar will animate properly.
   */
  function updateInkBarClassName () {
    var newIndex = ctrl.selectedIndex,
        oldIndex = ctrl.lastSelectedIndex,
        ink      = angular.element(elements.inkBar);
    if (!angular.isNumber(oldIndex)) return;
    ink
        .toggleClass('md-left', newIndex < oldIndex)
        .toggleClass('md-right', newIndex > oldIndex);
  }

  /**
   * Takes an offset value and makes sure that it is within the min/max allowed values.
   * @param value
   * @returns {*}
   */
  function fixOffset (value) {
    if (!elements.tabs.length || !ctrl.shouldPaginate) return 0;
    var lastTab    = elements.tabs[ elements.tabs.length - 1 ],
        totalWidth = lastTab.offsetLeft + lastTab.offsetWidth;
    value          = Math.max(0, value);
    value          = Math.min(totalWidth - elements.canvas.clientWidth, value);
    return value;
  }

  /**
   * Attaches a ripple to the tab item element.
   * @param scope
   * @param element
   */
  function attachRipple (scope, element) {
    var options = { colorElement: angular.element(elements.inkBar) };
    $mdTabInkRipple.attach(scope, element, options);
  }
}
MdTabsController.$inject = ["$scope", "$element", "$window", "$mdConstant", "$mdTabInkRipple", "$mdUtil", "$animate", "$attrs", "$compile", "$mdTheming"];

})();
(function(){
"use strict";

/**
 * @ngdoc directive
 * @name mdTabs
 * @module material.components.tabs
 *
 * @restrict E
 *
 * @description
 * The `<md-tabs>` directive serves as the container for 1..n `<md-tab>` child directives to produces a Tabs components.
 * In turn, the nested `<md-tab>` directive is used to specify a tab label for the **header button** and a [optional] tab view
 * content that will be associated with each tab button.
 *
 * Below is the markup for its simplest usage:
 *
 *  <hljs lang="html">
 *  <md-tabs>
 *    <md-tab label="Tab #1"></md-tab>
 *    <md-tab label="Tab #2"></md-tab>
 *    <md-tab label="Tab #3"></md-tab>
 *  </md-tabs>
 *  </hljs>
 *
 * Tabs supports three (3) usage scenarios:
 *
 *  1. Tabs (buttons only)
 *  2. Tabs with internal view content
 *  3. Tabs with external view content
 *
 * **Tab-only** support is useful when tab buttons are used for custom navigation regardless of any other components, content, or views.
 * **Tabs with internal views** are the traditional usages where each tab has associated view content and the view switching is managed internally by the Tabs component.
 * **Tabs with external view content** is often useful when content associated with each tab is independently managed and data-binding notifications announce tab selection changes.
 *
 * Additional features also include:
 *
 * *  Content can include any markup.
 * *  If a tab is disabled while active/selected, then the next tab will be auto-selected.
 *
 * ### Explanation of tab stretching
 *
 * Initially, tabs will have an inherent size.  This size will either be defined by how much space is needed to accommodate their text or set by the user through CSS.  Calculations will be based on this size.
 *
 * On mobile devices, tabs will be expanded to fill the available horizontal space.  When this happens, all tabs will become the same size.
 *
 * On desktops, by default, stretching will never occur.
 *
 * This default behavior can be overridden through the `md-stretch-tabs` attribute.  Here is a table showing when stretching will occur:
 *
 * `md-stretch-tabs` | mobile    | desktop
 * ------------------|-----------|--------
 * `auto`            | stretched | ---
 * `always`          | stretched | stretched
 * `never`           | ---       | ---
 *
 * @param {integer=} md-selected Index of the active/selected tab
 * @param {boolean=} md-no-ink If present, disables ink ripple effects.
 * @param {boolean=} md-no-bar If present, disables the selection ink bar.
 * @param {string=}  md-align-tabs Attribute to indicate position of tab buttons: `bottom` or `top`; default is `top`
 * @param {string=} md-stretch-tabs Attribute to indicate whether or not to stretch tabs: `auto`, `always`, or `never`; default is `auto`
 * @param {boolean=} md-dynamic-height When enabled, the tab wrapper will resize based on the contents of the selected tab
 * @param {boolean=} md-center-tabs When enabled, tabs will be centered provided there is no need for pagination
 * @param {boolean=} md-no-pagination When enabled, pagination will remain off
 * @param {boolean=} md-swipe-content When enabled, swipe gestures will be enabled for the content area to jump between tabs
 * @param {boolean=} md-no-disconnect If your tab content has background tasks (ie. event listeners), you will want to include this to prevent the scope from being disconnected
 * @param {boolean=} md-autoselect When present, any tabs added after the initial load will be automatically selected
 *
 * @usage
 * <hljs lang="html">
 * <md-tabs md-selected="selectedIndex" >
 *   <img ng-src="img/angular.png" class="centered">
 *   <md-tab
 *       ng-repeat="tab in tabs | orderBy:predicate:reversed"
 *       md-on-select="onTabSelected(tab)"
 *       md-on-deselect="announceDeselected(tab)"
 *       ng-disabled="tab.disabled">
 *     <md-tab-label>
 *       {{tab.title}}
 *       <img src="img/removeTab.png" ng-click="removeTab(tab)" class="delete">
 *     </md-tab-label>
 *     <md-tab-body>
 *       {{tab.content}}
 *     </md-tab-body>
 *   </md-tab>
 * </md-tabs>
 * </hljs>
 *
 */
angular
    .module('material.components.tabs')
    .directive('mdTabs', MdTabs);

function MdTabs () {
  return {
    scope:            {
      selectedIndex: '=?mdSelected'
    },
    template:         function (element, attr) {
      attr[ "$mdTabsTemplate" ] = element.html();
      return '\
        <md-tabs-wrapper>\
          <md-tab-data></md-tab-data>\
          <md-prev-button\
              tabindex="-1"\
              role="button"\
              aria-label="Previous Page"\
              aria-disabled="{{!$mdTabsCtrl.canPageBack()}}"\
              ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }"\
              ng-if="$mdTabsCtrl.shouldPaginate"\
              ng-click="$mdTabsCtrl.previousPage()">\
            <md-icon md-svg-icon="md-tabs-arrow"></md-icon>\
          </md-prev-button>\
          <md-next-button\
              tabindex="-1"\
              role="button"\
              aria-label="Next Page"\
              aria-disabled="{{!$mdTabsCtrl.canPageForward()}}"\
              ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }"\
              ng-if="$mdTabsCtrl.shouldPaginate"\
              ng-click="$mdTabsCtrl.nextPage()">\
            <md-icon md-svg-icon="md-tabs-arrow"></md-icon>\
          </md-next-button>\
          <md-tabs-canvas\
              tabindex="0"\
              aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}"\
              ng-focus="$mdTabsCtrl.redirectFocus()"\
              ng-class="{\
                  \'md-paginated\': $mdTabsCtrl.shouldPaginate,\
                  \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs\
              }"\
              ng-keydown="$mdTabsCtrl.keydown($event)"\
              role="tablist">\
            <md-pagination-wrapper\
                ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }"\
                md-tab-scroll="$mdTabsCtrl.scroll($event)">\
              <md-tab-item\
                  tabindex="-1"\
                  class="md-tab"\
                  style="max-width: {{ $mdTabsCtrl.maxTabWidth + \'px\' }}"\
                  ng-repeat="tab in $mdTabsCtrl.tabs"\
                  role="tab"\
                  aria-controls="tab-content-{{::tab.id}}"\
                  aria-selected="{{tab.isActive()}}"\
                  aria-disabled="{{tab.scope.disabled || \'false\'}}"\
                  ng-click="$mdTabsCtrl.select(tab.getIndex())"\
                  ng-class="{\
                      \'md-active\':    tab.isActive(),\
                      \'md-focused\':   tab.hasFocus(),\
                      \'md-disabled\':  tab.scope.disabled\
                  }"\
                  ng-disabled="tab.scope.disabled"\
                  md-swipe-left="$mdTabsCtrl.nextPage()"\
                  md-swipe-right="$mdTabsCtrl.previousPage()"\
                  md-template="::tab.label"\
                  md-scope="::tab.parent"></md-tab-item>\
              <md-ink-bar></md-ink-bar>\
            </md-pagination-wrapper>\
            <div class="md-visually-hidden md-dummy-wrapper">\
              <md-dummy-tab\
                  class="md-tab"\
                  tabindex="-1"\
                  id="tab-item-{{::tab.id}}"\
                  role="tab"\
                  aria-controls="tab-content-{{::tab.id}}"\
                  aria-selected="{{tab.isActive()}}"\
                  aria-disabled="{{tab.scope.disabled || \'false\'}}"\
                  ng-focus="$mdTabsCtrl.hasFocus = true"\
                  ng-blur="$mdTabsCtrl.hasFocus = false"\
                  ng-repeat="tab in $mdTabsCtrl.tabs"\
                  md-template="::tab.label"\
                  md-scope="::tab.parent"></md-dummy-tab>\
            </div>\
          </md-tabs-canvas>\
        </md-tabs-wrapper>\
        <md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent && $mdTabsCtrl.selectedIndex >= 0">\
          <md-tab-content\
              id="tab-content-{{::tab.id}}"\
              role="tabpanel"\
              aria-labelledby="tab-item-{{::tab.id}}"\
              md-swipe-left="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(1)"\
              md-swipe-right="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(-1)"\
              ng-if="$mdTabsCtrl.hasContent"\
              ng-repeat="(index, tab) in $mdTabsCtrl.tabs"\
              ng-class="{\
                \'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null,\
                \'md-active\':        tab.isActive(),\
                \'md-left\':          tab.isLeft(),\
                \'md-right\':         tab.isRight(),\
                \'md-no-scroll\':     $mdTabsCtrl.dynamicHeight\
              }">\
            <div\
                md-template="::tab.template"\
                md-connected-if="tab.isActive()"\
                md-scope="::tab.parent"\
                ng-if="$mdTabsCtrl.enableDisconnect || tab.shouldRender()"></div>\
          </md-tab-content>\
        </md-tabs-content-wrapper>\
      ';
    },
    controller:       'MdTabsController',
    controllerAs:     '$mdTabsCtrl',
    bindToController: true
  };
}

})();
(function(){
"use strict";

angular
    .module('material.components.tabs')
    .directive('mdTemplate', MdTemplate);

function MdTemplate ($compile, $mdUtil) {
  return {
    restrict: 'A',
    link:     link,
    scope:    {
      template:     '=mdTemplate',
      connected:    '=?mdConnectedIf',
      compileScope: '=mdScope'
    },
    require:  '^?mdTabs'
  };
  function link (scope, element, attr, ctrl) {
    if (!ctrl) return;
    var compileScope = ctrl.enableDisconnect ? scope.compileScope.$new() : scope.compileScope;
    element.html(scope.template);
    $compile(element.contents())(compileScope);
    element.on('DOMSubtreeModified', function () {
      ctrl.updatePagination();
      ctrl.updateInkBarStyles();
    });
    return $mdUtil.nextTick(handleScope);

    function handleScope () {
      scope.$watch('connected', function (value) { value === false ? disconnect() : reconnect(); });
      scope.$on('$destroy', reconnect);
    }

    function disconnect () {
      if (ctrl.enableDisconnect) $mdUtil.disconnectScope(compileScope);
    }

    function reconnect () {
      if (ctrl.enableDisconnect) $mdUtil.reconnectScope(compileScope);
    }
  }
}
MdTemplate.$inject = ["$compile", "$mdUtil"];

})();
(function(){ 
angular.module("material.core").constant("$MD_THEME_CSS", "/* mixin definition ; sets LTR and RTL within the same style call */md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }md-backdrop {  background-color: '{{background-900-0.0}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme {    background-color: '{{background-900-0.48}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme.ng-enter {    background-color: '{{background-900-0.0}}'; }    md-backdrop.md-opaque.md-THEME_NAME-theme.ng-enter.md-opaque.md-THEME_NAME-theme.ng-enter-active {      background-color: '{{background-900-0.48}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme.ng-leave.md-opaque.md-THEME_NAME-theme.ng-leave-active {    background-color: '{{background-900-0.0}}'; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-content.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }a.md-button.md-THEME_NAME-theme, .md-button.md-THEME_NAME-theme {  border-radius: 3px; }  a.md-button.md-THEME_NAME-theme:not([disabled]):hover, .md-button.md-THEME_NAME-theme:not([disabled]):hover {    background-color: '{{background-500-0.2}}'; }  a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme:not([disabled]).md-focused {    background-color: '{{background-500-0.2}}'; }  a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover, .md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {    background-color: transparent; }  a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab md-icon, .md-button.md-THEME_NAME-theme.md-fab md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {      background-color: '{{accent-A700}}'; }  a.md-button.md-THEME_NAME-theme.md-icon-button, .md-button.md-THEME_NAME-theme.md-icon-button {    border-radius: 50%; }  a.md-button.md-THEME_NAME-theme.md-primary, .md-button.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab, .md-button.md-THEME_NAME-theme.md-primary.md-raised, .md-button.md-THEME_NAME-theme.md-primary.md-fab {      color: '{{primary-contrast}}';      background-color: '{{primary-color}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {        color: '{{primary-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {        background-color: '{{primary-color}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {        background-color: '{{primary-600}}'; }    a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {      color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {      background-color: '{{accent-A700}}'; }  a.md-button.md-THEME_NAME-theme.md-raised, .md-button.md-THEME_NAME-theme.md-raised {    color: '{{background-contrast}}';    background-color: '{{background-50}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {      color: '{{background-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {      background-color: '{{background-50}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {      background-color: '{{background-200}}'; }  a.md-button.md-THEME_NAME-theme.md-warn, .md-button.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab, .md-button.md-THEME_NAME-theme.md-warn.md-raised, .md-button.md-THEME_NAME-theme.md-warn.md-fab {      color: '{{warn-contrast}}';      background-color: '{{warn-color}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {        color: '{{warn-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {        background-color: '{{warn-color}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {        background-color: '{{warn-700}}'; }    a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {      color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent, .md-button.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab, .md-button.md-THEME_NAME-theme.md-accent.md-raised, .md-button.md-THEME_NAME-theme.md-accent.md-fab {      color: '{{accent-contrast}}';      background-color: '{{accent-color}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {        color: '{{accent-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {        background-color: '{{accent-color}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {        background-color: '{{accent-700}}'; }    a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {      color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled], .md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-accent[disabled], .md-button.md-THEME_NAME-theme.md-warn[disabled] {    color: '{{foreground-3}}';    cursor: not-allowed; }    a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon, .md-button.md-THEME_NAME-theme[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {      color: '{{foreground-3}}'; }  a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled] {    background-color: '{{foreground-4}}'; }  a.md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme[disabled] {    background-color: transparent; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions {    border-top-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label, md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages, md-input-container.md-THEME_NAME-theme [ng-message], md-input-container.md-THEME_NAME-theme [data-ng-message], md-input-container.md-THEME_NAME-theme [x-ng-message] {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled], [disabled] md-input-container.md-THEME_NAME-theme .md-input {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, '{{foreground-3}}' 0%, '{{foreground-3}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-3}}' 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-list.md-THEME_NAME-theme md-list-item button {  background-color: '{{background-color}}'; }  md-list.md-THEME_NAME-theme md-list-item button.md-button:not([disabled]):hover {    background-color: '{{background-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient('{{warn-100}}' 0%, '{{warn-100}}' 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient('{{accent-100}}' 0%, '{{accent-100}}' 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled], md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked:not([disabled]).md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-select.md-THEME_NAME-theme .md-select-value {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-label {  color: '{{warn-500}}' !important;  border-bottom-color: '{{warn-500}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value.md-select-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-value {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-value {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-option[disabled] {  color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([selected]) {  background: '{{background-200}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  border-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled] {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{accent-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{primary-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{warn-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{primary-contrast}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{accent-contrast}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{warn-contrast}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toast.md-THEME_NAME-theme {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-toolbar.md-THEME_NAME-theme {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme .md-button {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-background {    background-color: '{{foreground-2}}'; }"); 
})();


})(window, window.angular);
/**
 * @license AngularJS v1.4.3
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc module
 * @name ngAria
 * @description
 *
 * The `ngAria` module provides support for common
 * [<abbr title="Accessible Rich Internet Applications">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)
 * attributes that convey state or semantic information about the application for users
 * of assistive technologies, such as screen readers.
 *
 * <div doc-module-components="ngAria"></div>
 *
 * ## Usage
 *
 * For ngAria to do its magic, simply include the module `ngAria` as a dependency. The following
 * directives are supported:
 * `ngModel`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`, `ngDblClick`, and `ngMessages`.
 *
 * Below is a more detailed breakdown of the attributes handled by ngAria:
 *
 * | Directive                                   | Supported Attributes                                                                   |
 * |---------------------------------------------|----------------------------------------------------------------------------------------|
 * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |
 * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |
 * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |
 * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |
 * | {@link module:ngMessages ngMessages}        | aria-live                                                                              |
 * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |
 * | {@link ng.directive:ngClick ngClick}        | tabindex, keypress event, button role                                                               |
 *
 * Find out more information about each directive by reading the
 * {@link guide/accessibility ngAria Developer Guide}.
 *
 * ##Example
 * Using ngDisabled with ngAria:
 * ```html
 * <md-checkbox ng-disabled="disabled">
 * ```
 * Becomes:
 * ```html
 * <md-checkbox ng-disabled="disabled" aria-disabled="true">
 * ```
 *
 * ##Disabling Attributes
 * It's possible to disable individual attributes added by ngAria with the
 * {@link ngAria.$ariaProvider#config config} method. For more details, see the
 * {@link guide/accessibility Developer Guide}.
 */
 /* global -ngAriaModule */
var ngAriaModule = angular.module('ngAria', ['ng']).
                        provider('$aria', $AriaProvider);

/**
 * @ngdoc provider
 * @name $ariaProvider
 *
 * @description
 *
 * Used for configuring the ARIA attributes injected and managed by ngAria.
 *
 * ```js
 * angular.module('myApp', ['ngAria'], function config($ariaProvider) {
 *   $ariaProvider.config({
 *     ariaValue: true,
 *     tabindex: false
 *   });
 * });
 *```
 *
 * ## Dependencies
 * Requires the {@link ngAria} module to be installed.
 *
 */
function $AriaProvider() {
  var config = {
    ariaHidden: true,
    ariaChecked: true,
    ariaDisabled: true,
    ariaRequired: true,
    ariaInvalid: true,
    ariaMultiline: true,
    ariaValue: true,
    tabindex: true,
    bindKeypress: true,
    bindRoleForClick: true
  };

  /**
   * @ngdoc method
   * @name $ariaProvider#config
   *
   * @param {object} config object to enable/disable specific ARIA attributes
   *
   *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags
   *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags
   *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags
   *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags
   *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags
   *  - **ariaMultiline** – `{boolean}` – Enables/disables aria-multiline tags
   *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags
   *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags
   *  - **bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `&lt;div&gt;` and
   *    `&lt;li&gt;` elements with ng-click
   *  - **bindRoleForClick** – `{boolean}` – Adds role=button to non-interactive elements like `div`
   *    using ng-click, making them more accessible to users of assistive technologies
   *
   * @description
   * Enables/disables various ARIA attributes
   */
  this.config = function(newConfig) {
    config = angular.extend(config, newConfig);
  };

  function watchExpr(attrName, ariaAttr, negate) {
    return function(scope, elem, attr) {
      var ariaCamelName = attr.$normalize(ariaAttr);
      if (config[ariaCamelName] && !attr[ariaCamelName]) {
        scope.$watch(attr[attrName], function(boolVal) {
          // ensure boolean value
          boolVal = negate ? !boolVal : !!boolVal;
          elem.attr(ariaAttr, boolVal);
        });
      }
    };
  }

  /**
   * @ngdoc service
   * @name $aria
   *
   * @description
   * @priority 200
   *
   * The $aria service contains helper methods for applying common
   * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.
   *
   * ngAria injects common accessibility attributes that tell assistive technologies when HTML
   * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,
   * let's review a code snippet from ngAria itself:
   *
   *```js
   * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {
   *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled');
   * }])
   *```
   * Shown above, the ngAria module creates a directive with the same signature as the
   * traditional `ng-disabled` directive. But this ngAria version is dedicated to
   * solely managing accessibility attributes. The internal `$aria` service is used to watch the
   * boolean attribute `ngDisabled`. If it has not been explicitly set by the developer,
   * `aria-disabled` is injected as an attribute with its value synchronized to the value in
   * `ngDisabled`.
   *
   * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do
   * anything to enable this feature. The `aria-disabled` attribute is automatically managed
   * simply as a silent side-effect of using `ng-disabled` with the ngAria module.
   *
   * The full list of directives that interface with ngAria:
   * * **ngModel**
   * * **ngShow**
   * * **ngHide**
   * * **ngClick**
   * * **ngDblclick**
   * * **ngMessages**
   * * **ngDisabled**
   *
   * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each
   * directive.
   *
   *
   * ## Dependencies
   * Requires the {@link ngAria} module to be installed.
   */
  this.$get = function() {
    return {
      config: function(key) {
        return config[key];
      },
      $$watchExpr: watchExpr
    };
  };
}


ngAriaModule.directive('ngShow', ['$aria', function($aria) {
  return $aria.$$watchExpr('ngShow', 'aria-hidden', true);
}])
.directive('ngHide', ['$aria', function($aria) {
  return $aria.$$watchExpr('ngHide', 'aria-hidden', false);
}])
.directive('ngModel', ['$aria', function($aria) {

  function shouldAttachAttr(attr, normalizedAttr, elem) {
    return $aria.config(normalizedAttr) && !elem.attr(attr);
  }

  function shouldAttachRole(role, elem) {
    return !elem.attr('role') && (elem.attr('type') === role) && (elem[0].nodeName !== 'INPUT');
  }

  function getShape(attr, elem) {
    var type = attr.type,
        role = attr.role;

    return ((type || role) === 'checkbox' || role === 'menuitemcheckbox') ? 'checkbox' :
           ((type || role) === 'radio'    || role === 'menuitemradio') ? 'radio' :
           (type === 'range'              || role === 'progressbar' || role === 'slider') ? 'range' :
           (type || role) === 'textbox'   || elem[0].nodeName === 'TEXTAREA' ? 'multiline' : '';
  }

  return {
    restrict: 'A',
    require: '?ngModel',
    priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value
    compile: function(elem, attr) {
      var shape = getShape(attr, elem);

      return {
        pre: function(scope, elem, attr, ngModel) {
          if (shape === 'checkbox' && attr.type !== 'checkbox') {
            //Use the input[checkbox] $isEmpty implementation for elements with checkbox roles
            ngModel.$isEmpty = function(value) {
              return value === false;
            };
          }
        },
        post: function(scope, elem, attr, ngModel) {
          var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem);

          function ngAriaWatchModelValue() {
            return ngModel.$modelValue;
          }

          function getRadioReaction() {
            if (needsTabIndex) {
              needsTabIndex = false;
              return function ngAriaRadioReaction(newVal) {
                var boolVal = (attr.value == ngModel.$viewValue);
                elem.attr('aria-checked', boolVal);
                elem.attr('tabindex', 0 - !boolVal);
              };
            } else {
              return function ngAriaRadioReaction(newVal) {
                elem.attr('aria-checked', (attr.value == ngModel.$viewValue));
              };
            }
          }

          function ngAriaCheckboxReaction() {
            elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue));
          }

          switch (shape) {
            case 'radio':
            case 'checkbox':
              if (shouldAttachRole(shape, elem)) {
                elem.attr('role', shape);
              }
              if (shouldAttachAttr('aria-checked', 'ariaChecked', elem)) {
                scope.$watch(ngAriaWatchModelValue, shape === 'radio' ?
                    getRadioReaction() : ngAriaCheckboxReaction);
              }
              break;
            case 'range':
              if (shouldAttachRole(shape, elem)) {
                elem.attr('role', 'slider');
              }
              if ($aria.config('ariaValue')) {
                var needsAriaValuemin = !elem.attr('aria-valuemin') &&
                    (attr.hasOwnProperty('min') || attr.hasOwnProperty('ngMin'));
                var needsAriaValuemax = !elem.attr('aria-valuemax') &&
                    (attr.hasOwnProperty('max') || attr.hasOwnProperty('ngMax'));
                var needsAriaValuenow = !elem.attr('aria-valuenow');

                if (needsAriaValuemin) {
                  attr.$observe('min', function ngAriaValueMinReaction(newVal) {
                    elem.attr('aria-valuemin', newVal);
                  });
                }
                if (needsAriaValuemax) {
                  attr.$observe('max', function ngAriaValueMinReaction(newVal) {
                    elem.attr('aria-valuemax', newVal);
                  });
                }
                if (needsAriaValuenow) {
                  scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {
                    elem.attr('aria-valuenow', newVal);
                  });
                }
              }
              break;
            case 'multiline':
              if (shouldAttachAttr('aria-multiline', 'ariaMultiline', elem)) {
                elem.attr('aria-multiline', true);
              }
              break;
          }

          if (needsTabIndex) {
            elem.attr('tabindex', 0);
          }

          if (ngModel.$validators.required && shouldAttachAttr('aria-required', 'ariaRequired', elem)) {
            scope.$watch(function ngAriaRequiredWatch() {
              return ngModel.$error.required;
            }, function ngAriaRequiredReaction(newVal) {
              elem.attr('aria-required', !!newVal);
            });
          }

          if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem)) {
            scope.$watch(function ngAriaInvalidWatch() {
              return ngModel.$invalid;
            }, function ngAriaInvalidReaction(newVal) {
              elem.attr('aria-invalid', !!newVal);
            });
          }
        }
      };
    }
  };
}])
.directive('ngDisabled', ['$aria', function($aria) {
  return $aria.$$watchExpr('ngDisabled', 'aria-disabled');
}])
.directive('ngMessages', function() {
  return {
    restrict: 'A',
    require: '?ngMessages',
    link: function(scope, elem, attr, ngMessages) {
      if (!elem.attr('aria-live')) {
        elem.attr('aria-live', 'assertive');
      }
    }
  };
})
.directive('ngClick',['$aria', '$parse', function($aria, $parse) {
  return {
    restrict: 'A',
    compile: function(elem, attr) {
      var fn = $parse(attr.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);
      return function(scope, elem, attr) {

        var nodeBlackList = ['BUTTON', 'A', 'INPUT', 'TEXTAREA'];

        function isNodeOneOf(elem, nodeTypeArray) {
          if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {
            return true;
          }
        }

        if ($aria.config('bindRoleForClick')
            && !elem.attr('role')
              && !isNodeOneOf(elem, nodeBlackList)) {
          elem.attr('role', 'button');
        }

        if ($aria.config('tabindex') && !elem.attr('tabindex')) {
          elem.attr('tabindex', 0);
        }

        if ($aria.config('bindKeypress') && !attr.ngKeypress && !isNodeOneOf(elem, nodeBlackList)) {
          elem.on('keypress', function(event) {
            var keyCode = event.which || event.keyCode;
            if (keyCode === 32 || keyCode === 13) {
              scope.$apply(callback);
            }

            function callback() {
              fn(scope, { $event: event });
            }
          });
        }
      };
    }
  };
}])
.directive('ngDblclick', ['$aria', function($aria) {
  return function(scope, elem, attr) {
    if ($aria.config('tabindex') && !elem.attr('tabindex')) {
      elem.attr('tabindex', 0);
    }
  };
}]);


})(window, window.angular);

!function(a,b){b["true"]=a,function(a,b){"use strict";function c(){this.$get=["$$sanitizeUri",function(a){return function(b){var c=[];return f(b,k(c,function(b,c){return!/^unsafe/.test(a(b,c))})),c.join("")}}]}function d(a){var c=[],d=k(c,b.noop);return d.chars(a),c.join("")}function e(a){var b,c={},d=a.split(",");for(b=0;b<d.length;b++)c[d[b]]=!0;return c}function f(a,c){function d(a,d,f,h){if(d=b.lowercase(d),A[d])for(;j.last()&&B[j.last()];)e("",j.last());z[d]&&j.last()==d&&e("",d),h=w[d]||!!h,h||j.push(d);var i={};f.replace(o,function(a,b,c,d,e){var f=c||d||e||"";i[b]=g(f)}),c.start&&c.start(d,i,h)}function e(a,d){var e,f=0;if(d=b.lowercase(d))for(f=j.length-1;f>=0&&j[f]!=d;f--);if(f>=0){for(e=j.length-1;e>=f;e--)c.end&&c.end(j[e]);j.length=f}}var f,h,i,j=[],k=a;for(j.last=function(){return j[j.length-1]};a;){if(h=!0,j.last()&&C[j.last()])a=a.replace(new RegExp("(.*)<\\s*\\/\\s*"+j.last()+"[^>]*>","i"),function(a,b){return b=b.replace(r,"$1").replace(t,"$1"),c.chars&&c.chars(g(b)),""}),e("",j.last());else if(0===a.indexOf("<!--")?(f=a.indexOf("--",4),f>=0&&a.lastIndexOf("-->",f)===f&&(c.comment&&c.comment(a.substring(4,f)),a=a.substring(f+3),h=!1)):s.test(a)?(i=a.match(s),i&&(a=a.replace(i[0],""),h=!1)):q.test(a)?(i=a.match(n),i&&(a=a.substring(i[0].length),i[0].replace(n,e),h=!1)):p.test(a)&&(i=a.match(m),i&&(a=a.substring(i[0].length),i[0].replace(m,d),h=!1)),h){f=a.indexOf("<");var u=0>f?a:a.substring(0,f);a=0>f?"":a.substring(f),c.chars&&c.chars(g(u))}if(a==k)throw l("badparse","The sanitizer was unable to parse the following block of html: {0}",a);k=a}e()}function g(a){if(!a)return"";var b=H.exec(a),c=b[1],d=b[3],e=b[2];return e&&(G.innerHTML=e.replace(/</g,"&lt;"),e="textContent"in G?G.textContent:G.innerText),c+e+d}function h(a){return a.replace(/&/g,"&amp;").replace(u,function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1);return"&#"+(1024*(b-55296)+(c-56320)+65536)+";"}).replace(v,function(a){var b=a.charCodeAt(0);return 159>=b||173==b||b>=1536&&1540>=b||1807==b||6068==b||6069==b||b>=8204&&8207>=b||b>=8232&&8239>=b||b>=8288&&8303>=b||65279==b||b>=65520&&65535>=b?"&#"+b+";":a}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function i(a){var c="",d=a.split(";");return b.forEach(d,function(a){var d=a.split(":");if(2==d.length){var e=I(b.lowercase(d[0])),a=I(b.lowercase(d[1]));("color"===e&&(a.match(/^rgb\([0-9%,\. ]*\)$/i)||a.match(/^rgba\([0-9%,\. ]*\)$/i)||a.match(/^hsl\([0-9%,\. ]*\)$/i)||a.match(/^hsla\([0-9%,\. ]*\)$/i)||a.match(/^#[0-9a-f]{3,6}$/i)||a.match(/^[a-z]*$/i))||"text-align"===e&&("left"===a||"right"===a||"center"===a||"justify"===a)||"float"===e&&("left"===a||"right"===a||"none"===a)||("width"===e||"height"===e)&&a.match(/[0-9\.]*(px|em|rem|%)/))&&(c+=e+": "+a+";")}}),c}function j(a,b,c,d){return"img"===a&&b["ta-insert-video"]&&("ta-insert-video"===c||"allowfullscreen"===c||"frameborder"===c||"contenteditble"===c&&"false"===d)?!0:!1}function k(a,c){var d=!1,e=b.bind(a,a.push);return{start:function(a,f,g){a=b.lowercase(a),!d&&C[a]&&(d=a),d||D[a]!==!0||(e("<"),e(a),b.forEach(f,function(d,g){var k=b.lowercase(g),l="img"===a&&"src"===k||"background"===k;("style"===k&&""!==(d=i(d))||j(a,f,k,d)||F[k]===!0&&(E[k]!==!0||c(d,l)))&&(e(" "),e(g),e('="'),e(h(d)),e('"'))}),e(g?"/>":">"))},end:function(a){a=b.lowercase(a),d||D[a]!==!0||(e("</"),e(a),e(">")),a==d&&(d=!1)},chars:function(a){d||e(h(a))}}}var l=b.$$minErr("$sanitize"),m=/^<\s*([\w:-]+)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*>/,n=/^<\s*\/\s*([\w:-]+)[^>]*>/,o=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,p=/^</,q=/^<\s*\//,r=/<!--(.*?)-->/g,s=/<!DOCTYPE([^>]*?)>/i,t=/<!\[CDATA\[(.*?)]]>/g,u=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,v=/([^\#-~| |!])/g,w=e("area,br,col,hr,img,wbr"),x=e("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),y=e("rp,rt"),z=b.extend({},y,x),A=b.extend({},x,e("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),B=b.extend({},y,e("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),C=e("script,style"),D=b.extend({},w,A,B,z),E=e("background,cite,href,longdesc,src,usemap"),F=b.extend({},E,e("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width")),G=document.createElement("pre"),H=/^(\s*)([\s\S]*?)(\s*)$/,I=function(){return String.prototype.trim?function(a){return b.isString(a)?a.trim():a}:function(a){return b.isString(a)?a.replace(/^\s\s*/,"").replace(/\s\s*$/,""):a}}();b.module("ngSanitize",[]).provider("$sanitize",c),b.module("ngSanitize").filter("linky",["$sanitize",function(a){var c=/((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>]/,e=/^mailto:/;return function(f,g){function h(a){a&&n.push(d(a))}function i(a,c){n.push("<a "),b.isDefined(g)&&(n.push('target="'),n.push(g),n.push('" ')),n.push('href="'),n.push(a),n.push('">'),h(c),n.push("</a>")}if(!f)return f;for(var j,k,l,m=f,n=[];j=m.match(c);)k=j[0],j[2]==j[3]&&(k="mailto:"+k),l=j.index,h(m.substr(0,l)),i(k,j[0].replace(e,"")),m=m.substring(l+j[0].length);return h(m),a(n.join(""))}}])}(window,window.angular)}({},function(){return this}());
!function(a,b){b["true"]=a,angular.module("textAngularSetup",[]).value("taOptions",{toolbar:[["h1","h2","h3","h4","h5","h6","p","pre","quote"],["bold","italics","underline","ul","ol","redo","undo","clear"],["justifyLeft","justifyCenter","justifyRight","indent","outdent"],["html","insertImage","insertLink","insertVideo"]],classes:{focussed:"focussed",toolbar:"btn-toolbar",toolbarGroup:"btn-group",toolbarButton:"btn btn-default",toolbarButtonActive:"active",disabled:"disabled",textEditor:"form-control",htmlEditor:"form-control"},setup:{textEditorSetup:function(){},htmlEditorSetup:function(){}},defaultFileDropHandler:function(a,b){var c=new FileReader;return"image"===a.type.substring(0,5)?(c.onload=function(){""!==c.result&&b("insertImage",c.result,!0)},c.readAsDataURL(a),!0):!1}}).value("taSelectableElements",["a","img"]).value("taCustomRenderers",[{selector:"img",customAttribute:"ta-insert-video",renderLogic:function(a){var b=angular.element("<iframe></iframe>"),c=a.prop("attributes");angular.forEach(c,function(a){b.attr(a.name,a.value)}),b.attr("src",b.attr("ta-insert-video")),a.replaceWith(b)}}]).constant("taTranslations",{html:{buttontext:"Toggle HTML",tooltip:"Toggle html / Rich Text"},heading:{tooltip:"Heading "},p:{tooltip:"Paragraph"},pre:{tooltip:"Preformatted text"},ul:{tooltip:"Unordered List"},ol:{tooltip:"Ordered List"},quote:{tooltip:"Quote/unqoute selection or paragraph"},undo:{tooltip:"Undo"},redo:{tooltip:"Redo"},bold:{tooltip:"Bold"},italic:{tooltip:"Italic"},underline:{tooltip:"Underline"},justifyLeft:{tooltip:"Align text left"},justifyRight:{tooltip:"Align text right"},justifyCenter:{tooltip:"Center"},indent:{tooltip:"Increase indent"},outdent:{tooltip:"Decrease indent"},clear:{tooltip:"Clear formatting"},insertImage:{dialogPrompt:"Please enter an image URL to insert",tooltip:"Insert image",hotkey:"the - possibly language dependent hotkey ... for some future implementation"},insertVideo:{tooltip:"Insert video",dialogPrompt:"Please enter a youtube URL to embed"},insertLink:{tooltip:"Insert / edit link",dialogPrompt:"Please enter a URL to insert"}}).run(["taRegisterTool","$window","taTranslations","taSelection",function(a,b,c,d){a("html",{buttontext:c.html.buttontext,tooltiptext:c.html.tooltip,action:function(){this.$editor().switchView()},activeState:function(){return this.$editor().showHtml}});var e=function(a){return function(){return this.$editor().queryFormatBlockState(a)}},f=function(){return this.$editor().wrapSelection("formatBlock","<"+this.name.toUpperCase()+">")};angular.forEach(["h1","h2","h3","h4","h5","h6"],function(b){a(b.toLowerCase(),{buttontext:b.toUpperCase(),tooltiptext:c.heading.tooltip+b.charAt(1),action:f,activeState:e(b.toLowerCase())})}),a("p",{buttontext:"P",tooltiptext:c.p.tooltip,action:function(){return this.$editor().wrapSelection("formatBlock","<P>")},activeState:function(){return this.$editor().queryFormatBlockState("p")}}),a("pre",{buttontext:"pre",tooltiptext:c.pre.tooltip,action:function(){return this.$editor().wrapSelection("formatBlock","<PRE>")},activeState:function(){return this.$editor().queryFormatBlockState("pre")}}),a("ul",{iconclass:"fa fa-list-ul",tooltiptext:c.ul.tooltip,action:function(){return this.$editor().wrapSelection("insertUnorderedList",null)},activeState:function(){return this.$editor().queryCommandState("insertUnorderedList")}}),a("ol",{iconclass:"fa fa-list-ol",tooltiptext:c.ol.tooltip,action:function(){return this.$editor().wrapSelection("insertOrderedList",null)},activeState:function(){return this.$editor().queryCommandState("insertOrderedList")}}),a("quote",{iconclass:"fa fa-quote-right",tooltiptext:c.quote.tooltip,action:function(){return this.$editor().wrapSelection("formatBlock","<BLOCKQUOTE>")},activeState:function(){return this.$editor().queryFormatBlockState("blockquote")}}),a("undo",{iconclass:"fa fa-undo",tooltiptext:c.undo.tooltip,action:function(){return this.$editor().wrapSelection("undo",null)}}),a("redo",{iconclass:"fa fa-repeat",tooltiptext:c.redo.tooltip,action:function(){return this.$editor().wrapSelection("redo",null)}}),a("bold",{iconclass:"fa fa-bold",tooltiptext:c.bold.tooltip,action:function(){return this.$editor().wrapSelection("bold",null)},activeState:function(){return this.$editor().queryCommandState("bold")},commandKeyCode:98}),a("justifyLeft",{iconclass:"fa fa-align-left",tooltiptext:c.justifyLeft.tooltip,action:function(){return this.$editor().wrapSelection("justifyLeft",null)},activeState:function(a){var b=!1;return a&&(b="left"===a.css("text-align")||"left"===a.attr("align")||"right"!==a.css("text-align")&&"center"!==a.css("text-align")&&!this.$editor().queryCommandState("justifyRight")&&!this.$editor().queryCommandState("justifyCenter")),b=b||this.$editor().queryCommandState("justifyLeft")}}),a("justifyRight",{iconclass:"fa fa-align-right",tooltiptext:c.justifyRight.tooltip,action:function(){return this.$editor().wrapSelection("justifyRight",null)},activeState:function(a){var b=!1;return a&&(b="right"===a.css("text-align")),b=b||this.$editor().queryCommandState("justifyRight")}}),a("justifyCenter",{iconclass:"fa fa-align-center",tooltiptext:c.justifyCenter.tooltip,action:function(){return this.$editor().wrapSelection("justifyCenter",null)},activeState:function(a){var b=!1;return a&&(b="center"===a.css("text-align")),b=b||this.$editor().queryCommandState("justifyCenter")}}),a("indent",{iconclass:"fa fa-indent",tooltiptext:c.indent.tooltip,action:function(){return this.$editor().wrapSelection("indent",null)},activeState:function(){return this.$editor().queryFormatBlockState("blockquote")}}),a("outdent",{iconclass:"fa fa-outdent",tooltiptext:c.outdent.tooltip,action:function(){return this.$editor().wrapSelection("outdent",null)},activeState:function(){return!1}}),a("italics",{iconclass:"fa fa-italic",tooltiptext:c.italic.tooltip,action:function(){return this.$editor().wrapSelection("italic",null)},activeState:function(){return this.$editor().queryCommandState("italic")},commandKeyCode:105}),a("underline",{iconclass:"fa fa-underline",tooltiptext:c.underline.tooltip,action:function(){return this.$editor().wrapSelection("underline",null)},activeState:function(){return this.$editor().queryCommandState("underline")},commandKeyCode:117}),a("clear",{iconclass:"fa fa-ban",tooltiptext:c.clear.tooltip,action:function(a,b){this.$editor().wrapSelection("removeFormat",null);var c=angular.element(d.getSelectionElement()),e=function(a){a=angular.element(a);var b=a;angular.forEach(a.children(),function(a){var c=angular.element("<p></p>");c.html(angular.element(a).html()),b.after(c),b=c}),a.remove()};angular.forEach(c.find("ul"),e),angular.forEach(c.find("ol"),e);var f=this.$editor(),g=function(a){a=angular.element(a),a[0]!==f.displayElements.text[0]&&a.removeAttr("class"),angular.forEach(a.children(),g)};angular.forEach(c,g),"li"!==c[0].tagName.toLowerCase()&&"ol"!==c[0].tagName.toLowerCase()&&"ul"!==c[0].tagName.toLowerCase()&&this.$editor().wrapSelection("formatBlock","<p>"),b()}});var g=function(a,b,c){var d=function(){c.updateTaBindtaTextElement(),c.hidePopover()};a.preventDefault(),c.displayElements.popover.css("width","375px");var e=c.displayElements.popoverContainer;e.empty();var f=angular.element('<div class="btn-group" style="padding-right: 6px;">'),g=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">100% </button>');g.on("click",function(a){a.preventDefault(),b.css({width:"100%",height:""}),d()});var h=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">50% </button>');h.on("click",function(a){a.preventDefault(),b.css({width:"50%",height:""}),d()});var i=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">25% </button>');i.on("click",function(a){a.preventDefault(),b.css({width:"25%",height:""}),d()});var j=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">Reset</button>');j.on("click",function(a){a.preventDefault(),b.css({width:"",height:""}),d()}),f.append(g),f.append(h),f.append(i),f.append(j),e.append(f),f=angular.element('<div class="btn-group" style="padding-right: 6px;">');var k=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-left"></i></button>');k.on("click",function(a){a.preventDefault(),b.css("float","left"),d()});var l=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-right"></i></button>');l.on("click",function(a){a.preventDefault(),b.css("float","right"),d()});var m=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-justify"></i></button>');m.on("click",function(a){a.preventDefault(),b.css("float",""),d()}),f.append(k),f.append(m),f.append(l),e.append(f),f=angular.element('<div class="btn-group">');var n=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-trash-o"></i></button>');n.on("click",function(a){a.preventDefault(),b.remove(),d()}),f.append(n),e.append(f),c.showPopover(b),c.showResizeOverlay(b)};a("insertImage",{iconclass:"fa fa-picture-o",tooltiptext:c.insertImage.tooltip,action:function(){var a;return a=b.prompt(c.insertImage.dialogPrompt,"http://"),a&&""!==a&&"http://"!==a?this.$editor().wrapSelection("insertImage",a,!0):void 0},onElementSelect:{element:"img",action:g}}),a("insertVideo",{iconclass:"fa fa-youtube-play",tooltiptext:c.insertVideo.tooltip,action:function(){var a;if(a=b.prompt(c.insertVideo.dialogPrompt,"http://"),a&&""!==a&&"http://"!==a){var d=a.match(/(\?|&)v=[^&]*/);if(d.length>0){var e="http://www.youtube.com/embed/"+d[0].substring(3),f='<img class="ta-insert-video" ta-insert-video="'+e+'" contenteditable="false" src="" allowfullscreen="true" width="300" frameborder="0" height="250"/>';return this.$editor().wrapSelection("insertHTML",f,!0)}}},onElementSelect:{element:"img",onlyWithAttrs:["ta-insert-video"],action:g}}),a("insertLink",{tooltiptext:c.insertLink.tooltip,iconclass:"fa fa-link",action:function(){var a;return a=b.prompt(c.insertLink.dialogPrompt,"http://"),a&&""!==a&&"http://"!==a?this.$editor().wrapSelection("createLink",a,!0):void 0},activeState:function(a){return a?"A"===a[0].tagName:!1},onElementSelect:{element:"a",action:function(a,d,e){a.preventDefault(),e.displayElements.popover.css("width","435px");var f=e.displayElements.popoverContainer;f.empty(),f.css("line-height","28px");var g=angular.element('<a href="'+d.attr("href")+'" target="_blank">'+d.attr("href")+"</a>");g.css({display:"inline-block","max-width":"200px",overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap","vertical-align":"middle"}),f.append(g);var h=angular.element('<div class="btn-group pull-right">'),i=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on"><i class="fa fa-edit icon-edit"></i></button>');i.on("click",function(a){a.preventDefault();var f=b.prompt(c.insertLink.dialogPrompt,d.attr("href"));f&&""!==f&&"http://"!==f&&(d.attr("href",f),e.updateTaBindtaTextElement()),e.hidePopover()}),h.append(i);var j=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on"><i class="fa fa-unlink icon-unlink"></i></button>');j.on("click",function(a){a.preventDefault(),d.replaceWith(d.contents()),e.updateTaBindtaTextElement(),e.hidePopover()}),h.append(j);var k=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on">Open in New Window</button>');"_blank"===d.attr("target")&&k.addClass("active"),k.on("click",function(a){a.preventDefault(),d.attr("target","_blank"===d.attr("target")?"":"_blank"),k.toggleClass("active"),e.updateTaBindtaTextElement()}),h.append(k),f.append(h),e.showPopover(d)}}})}]),function(){"Use Strict";function a(a){try{return 0!==angular.element(a).length}catch(b){return!1}}function b(a,c){var d=[],e=a.children();return e.length&&angular.forEach(e,function(a){d=d.concat(b(angular.element(a),c))}),void 0!==a.attr(c)&&d.push(a),d}function c(b,c){if(!b||""===b||n.hasOwnProperty(b))throw"textAngular Error: A unique name is required for a Tool Definition";if(c.display&&(""===c.display||!a(c.display))||!c.display&&!c.buttontext&&!c.iconclass)throw'textAngular Error: Tool Definition for "'+b+'" does not have a valid display/iconclass/buttontext value';n[b]=c}var d=!1;/AppleWebKit\/([\d.]+)/.exec(navigator.userAgent)&&(document.addEventListener("click",function(){var a=window.event.target;if(d&&null!==a){for(var b=!1,c=a;null!==c&&"html"!==c.tagName.toLowerCase()&&!b;)b="true"===c.contentEditable,c=c.parentNode;b||(document.getElementById("textAngular-editableFix-010203040506070809").setSelectionRange(0,0),a.focus())}d=!1},!1),angular.element(document).ready(function(){angular.element(document.body).append(angular.element('<input id="textAngular-editableFix-010203040506070809" style="width:1px;height:1px;border:none;margin:0;padding:0;position:absolute; top: -10000; left: -10000;" unselectable="on" tabIndex="-1">'))}));var e=function(){var a,b=-1,c=window.navigator.userAgent,d=c.indexOf("MSIE "),e=c.indexOf("Trident/");if(d>0)b=parseInt(c.substring(d+5,c.indexOf(".",d)),10);else if(e>0){var f=c.indexOf("rv:");b=parseInt(c.substring(f+3,c.indexOf(".",f)),10)}return b>-1?b:a}();"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s\s*/,"").replace(/\s\s*$/,"")});var f,g,h,i,j;if(e>8||void 0===e){var k=function(){var a=document.createElement("style");return/AppleWebKit\/([\d.]+)/.exec(navigator.userAgent)&&a.appendChild(document.createTextNode("")),document.head.insertBefore(a,document.head.firstChild),a.sheet}();f=function(){var a=document.createElement("style");return/AppleWebKit\/([\d.]+)/.exec(navigator.userAgent)&&a.appendChild(document.createTextNode("")),document.head.appendChild(a),a.sheet}(),g=function(a,b){i(f,a,b)},i=function(a,b,c){var d;return a.rules?d=Math.max(a.rules.length-1,0):a.cssRules&&(d=Math.max(a.cssRules.length-1,0)),a.insertRule?a.insertRule(b+"{"+c+"}",d):a.addRule(b,c,d),d},h=function(a){j(f,a)},j=function(a,b){a.removeRule?a.removeRule(b):a.deleteRule(b)},i(k,".ta-scroll-window.form-control","height: auto; min-height: 300px; overflow: auto; font-family: inherit; font-size: 100%; position: relative; padding: 0;"),i(k,".ta-root.focussed .ta-scroll-window.form-control","border-color: #66afe9; outline: 0; -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);"),i(k,".ta-editor.ta-html","min-height: 300px; height: auto; overflow: auto; font-family: inherit; font-size: 100%;"),i(k,".ta-scroll-window > .ta-bind","height: auto; min-height: 300px; padding: 6px 12px;"),i(k,".ta-root .ta-resizer-handle-overlay","z-index: 100; position: absolute; display: none;"),i(k,".ta-root .ta-resizer-handle-overlay > .ta-resizer-handle-info","position: absolute; bottom: 16px; right: 16px; border: 1px solid black; background-color: #FFF; padding: 0 4px; opacity: 0.7;"),i(k,".ta-root .ta-resizer-handle-overlay > .ta-resizer-handle-background","position: absolute; bottom: 5px; right: 5px; left: 5px; top: 5px; border: 1px solid black; background-color: rgba(0, 0, 0, 0.2);"),i(k,".ta-root .ta-resizer-handle-overlay > .ta-resizer-handle-corner","width: 10px; height: 10px; position: absolute;"),i(k,".ta-root .ta-resizer-handle-overlay > .ta-resizer-handle-corner-tl","top: 0; left: 0; border-left: 1px solid black; border-top: 1px solid black;"),i(k,".ta-root .ta-resizer-handle-overlay > .ta-resizer-handle-corner-tr","top: 0; right: 0; border-right: 1px solid black; border-top: 1px solid black;"),i(k,".ta-root .ta-resizer-handle-overlay > .ta-resizer-handle-corner-bl","bottom: 0; left: 0; border-left: 1px solid black; border-bottom: 1px solid black;"),i(k,".ta-root .ta-resizer-handle-overlay > .ta-resizer-handle-corner-br","bottom: 0; right: 0; border: 1px solid black; cursor: se-resize; background-color: white;")}var l=!1,m=angular.module("textAngular",["ngSanitize","textAngularSetup"]),n={};m.constant("taRegisterTool",c),m.value("taTools",n),m.config([function(){angular.forEach(n,function(a,b){delete n[b]})}]),m.directive("textAngular",["$compile","$timeout","taOptions","taSelection","taExecCommand","textAngularManager","$window","$document","$animate","$log",function(a,b,c,d,e,f,g,h,i,j){return{require:"?ngModel",scope:{},restrict:"EA",link:function(k,l,m,n){var o,p,q,r,s,t,u,v,w,x=m.serial?m.serial:Math.floor(1e16*Math.random()),y=m.name?m.name:"textAngularEditor"+x,z=function(a,c,d){b(function(){var b=function(){a.off(c,b),d()};a.on(c,b)},100)};w=e(m.taDefaultWrap),angular.extend(k,angular.copy(c),{wrapSelection:function(a,b,c){w(a,!1,b),c&&k["reApplyOnSelectorHandlerstaTextElement"+x](),k.displayElements.text[0].focus()},showHtml:!1}),m.taFocussedClass&&(k.classes.focussed=m.taFocussedClass),m.taTextEditorClass&&(k.classes.textEditor=m.taTextEditorClass),m.taHtmlEditorClass&&(k.classes.htmlEditor=m.taHtmlEditorClass),m.taTextEditorSetup&&(k.setup.textEditorSetup=k.$parent.$eval(m.taTextEditorSetup)),m.taHtmlEditorSetup&&(k.setup.htmlEditorSetup=k.$parent.$eval(m.taHtmlEditorSetup)),k.fileDropHandler=m.taFileDrop?k.$parent.$eval(m.taFileDrop):k.defaultFileDropHandler,u=l[0].innerHTML,l[0].innerHTML="",k.displayElements={forminput:angular.element("<input type='hidden' tabindex='-1' style='display: none;'>"),html:angular.element("<textarea></textarea>"),text:angular.element("<div></div>"),scrollWindow:angular.element("<div class='ta-scroll-window'></div>"),popover:angular.element('<div class="popover fade bottom" style="max-width: none; width: 305px;"></div>'),popoverArrow:angular.element('<div class="arrow"></div>'),popoverContainer:angular.element('<div class="popover-content"></div>'),resize:{overlay:angular.element('<div class="ta-resizer-handle-overlay"></div>'),background:angular.element('<div class="ta-resizer-handle-background"></div>'),anchors:[angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-tl"></div>'),angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-tr"></div>'),angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-bl"></div>'),angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-br"></div>')],info:angular.element('<div class="ta-resizer-handle-info"></div>')}},k.displayElements.popover.append(k.displayElements.popoverArrow),k.displayElements.popover.append(k.displayElements.popoverContainer),k.displayElements.scrollWindow.append(k.displayElements.popover),k.displayElements.popover.on("mousedown",function(a,b){return b&&angular.extend(a,b),a.preventDefault(),!1}),k.showPopover=function(a){k.displayElements.popover.css("display","block"),k.reflowPopover(a),i.addClass(k.displayElements.popover,"in"),z(l,"click keyup",function(){k.hidePopover()})},k.reflowPopover=function(a){k.displayElements.text[0].offsetHeight-51>a[0].offsetTop?(k.displayElements.popover.css("top",a[0].offsetTop+a[0].offsetHeight+"px"),k.displayElements.popover.removeClass("top").addClass("bottom")):(k.displayElements.popover.css("top",a[0].offsetTop-54+"px"),k.displayElements.popover.removeClass("bottom").addClass("top"));var b=k.displayElements.text[0].offsetWidth-k.displayElements.popover[0].offsetWidth,c=a[0].offsetLeft+a[0].offsetWidth/2-k.displayElements.popover[0].offsetWidth/2;k.displayElements.popover.css("left",Math.max(0,Math.min(b,c))+"px"),k.displayElements.popoverArrow.css("margin-left",Math.min(c,Math.max(0,c-b))-11+"px")},k.hidePopover=function(){i.removeClass(k.displayElements.popover,"in",function(){k.displayElements.popover.css("display",""),k.displayElements.popoverContainer.attr("style",""),k.displayElements.popoverContainer.attr("class","popover-content")})},k.displayElements.resize.overlay.append(k.displayElements.resize.background),angular.forEach(k.displayElements.resize.anchors,function(a){k.displayElements.resize.overlay.append(a)}),k.displayElements.resize.overlay.append(k.displayElements.resize.info),k.displayElements.scrollWindow.append(k.displayElements.resize.overlay),k.reflowResizeOverlay=function(a){a=angular.element(a)[0],k.displayElements.resize.overlay.css({display:"block",left:a.offsetLeft-5+"px",top:a.offsetTop-5+"px",width:a.offsetWidth+10+"px",height:a.offsetHeight+10+"px"}),k.displayElements.resize.info.text(a.offsetWidth+" x "+a.offsetHeight)},k.showResizeOverlay=function(a){var b=function(b){var c={width:parseInt(a.attr("width")),height:parseInt(a.attr("height")),x:b.clientX,y:b.clientY};void 0===c.width&&(c.width=a[0].offsetWidth),void 0===c.height&&(c.height=a[0].offsetHeight),k.hidePopover();var d=c.height/c.width,e=function(b){var e={x:Math.max(0,c.width+(b.clientX-c.x)),y:Math.max(0,c.height+(b.clientY-c.y))},f=function(a,b){a=angular.element(a),"img"===a[0].tagName.toLowerCase()&&(b.height&&(a.attr("height",b.height),delete b.height),b.width&&(a.attr("width",b.width),delete b.width)),a.css(b)};if(b.shiftKey){var g=e.y/e.x;f(a,{width:d>g?e.x:e.y/d,height:d>g?e.x*d:e.y})}else f(a,{width:e.x,height:e.y});k.reflowResizeOverlay(a)};h.find("body").on("mousemove",e),z(k.displayElements.resize.overlay,"mouseup",function(){h.find("body").off("mousemove",e),k.showPopover(a)}),b.stopPropagation(),b.preventDefault()};k.displayElements.resize.anchors[3].on("mousedown",b),k.reflowResizeOverlay(a),z(l,"click",function(){k.hideResizeOverlay()})},k.hideResizeOverlay=function(){k.displayElements.resize.overlay.css("display","")},k.setup.htmlEditorSetup(k.displayElements.html),k.setup.textEditorSetup(k.displayElements.text),k.displayElements.html.attr({id:"taHtmlElement"+x,"ng-show":"showHtml","ta-bind":"ta-bind","ng-model":"html"}),k.displayElements.text.attr({id:"taTextElement"+x,contentEditable:"true","ta-bind":"ta-bind","ng-model":"html"}),k.displayElements.scrollWindow.attr({"ng-hide":"showHtml"}),m.taDefaultWrap&&k.displayElements.text.attr("ta-default-wrap",m.taDefaultWrap),m.taUnsafeSanitizer&&(k.displayElements.text.attr("ta-unsafe-sanitizer",m.taUnsafeSanitizer),k.displayElements.html.attr("ta-unsafe-sanitizer",m.taUnsafeSanitizer)),k.displayElements.scrollWindow.append(k.displayElements.text),l.append(k.displayElements.scrollWindow),l.append(k.displayElements.html),k.displayElements.forminput.attr("name",y),l.append(k.displayElements.forminput),m.tabindex&&(l.removeAttr("tabindex"),k.displayElements.text.attr("tabindex",m.tabindex),k.displayElements.html.attr("tabindex",m.tabindex)),m.placeholder&&(k.displayElements.text.attr("placeholder",m.placeholder),k.displayElements.html.attr("placeholder",m.placeholder)),m.taDisabled&&(k.displayElements.text.attr("ta-readonly","disabled"),k.displayElements.html.attr("ta-readonly","disabled"),k.disabled=k.$parent.$eval(m.taDisabled),k.$parent.$watch(m.taDisabled,function(a){k.disabled=a,k.disabled?l.addClass(k.classes.disabled):l.removeClass(k.classes.disabled)})),a(k.displayElements.scrollWindow)(k),a(k.displayElements.html)(k),k.updateTaBindtaTextElement=k["updateTaBindtaTextElement"+x],k.updateTaBindtaHtmlElement=k["updateTaBindtaHtmlElement"+x],l.addClass("ta-root"),k.displayElements.scrollWindow.addClass("ta-text ta-editor "+k.classes.textEditor),k.displayElements.html.addClass("ta-html ta-editor "+k.classes.htmlEditor),k._actionRunning=!1;var A=!1;if(k.startAction=function(){return k._actionRunning=!0,g.rangy&&g.rangy.saveSelection?(A=g.rangy.saveSelection(),function(){A&&g.rangy.restoreSelection(A)}):void 0},k.endAction=function(){k._actionRunning=!1,A&&g.rangy.removeMarkers(A),A=!1,k.updateSelectedStyles(),k.showHtml||k["updateTaBindtaTextElement"+x]()},s=function(){l.addClass(k.classes.focussed),v.focus()},k.displayElements.html.on("focus",s),k.displayElements.text.on("focus",s),t=function(a){return k._actionRunning||h[0].activeElement===k.displayElements.html[0]||h[0].activeElement===k.displayElements.text[0]||(l.removeClass(k.classes.focussed),v.unfocus(),b(function(){l.triggerHandler("blur")},0)),a.preventDefault(),!1},k.displayElements.html.on("blur",t),k.displayElements.text.on("blur",t),k.queryFormatBlockState=function(a){return!k.showHtml&&a.toLowerCase()===h[0].queryCommandValue("formatBlock").toLowerCase()},k.queryCommandState=function(a){return k.showHtml?"":h[0].queryCommandState(a)},k.switchView=function(){k.showHtml=!k.showHtml,k.showHtml?b(function(){return k.displayElements.html[0].focus()},100):b(function(){return k.displayElements.text[0].focus()},100)},m.ngModel){var B=!0;n.$render=function(){if(B){B=!1;var a=k.$parent.$eval(m.ngModel);void 0!==a&&null!==a||!u||""===u||n.$setViewValue(u)}k.displayElements.forminput.val(n.$viewValue),k._elementSelectTriggered||h[0].activeElement===k.displayElements.html[0]||h[0].activeElement===k.displayElements.text[0]||(k.html=n.$viewValue||"")};var C=function(a){return m.required&&n.$setValidity("required",!(!a||""===a.trim())),a};n.$parsers.push(C),n.$formatters.push(C)}else k.displayElements.forminput.val(u),k.html=u;if(k.$watch("html",function(a,b){a!==b&&(m.ngModel&&n.$viewValue!==a&&n.$setViewValue(a),k.displayElements.forminput.val(a))}),m.taTargetToolbars)v=f.registerEditor(y,k,m.taTargetToolbars.split(","));else{var D=angular.element('<div text-angular-toolbar name="textAngularToolbar'+x+'">');m.taToolbar&&D.attr("ta-toolbar",m.taToolbar),m.taToolbarClass&&D.attr("ta-toolbar-class",m.taToolbarClass),m.taToolbarGroupClass&&D.attr("ta-toolbar-group-class",m.taToolbarGroupClass),m.taToolbarButtonClass&&D.attr("ta-toolbar-button-class",m.taToolbarButtonClass),m.taToolbarActiveButtonClass&&D.attr("ta-toolbar-active-button-class",m.taToolbarActiveButtonClass),m.taFocussedClass&&D.attr("ta-focussed-class",m.taFocussedClass),l.prepend(D),a(D)(k.$parent),v=f.registerEditor(y,k,["textAngularToolbar"+x])}k.$on("$destroy",function(){f.unregisterEditor(y)}),k.$on("ta-element-select",function(a,b){v.triggerElementSelect(a,b)}),k.$on("ta-drop-event",function(a,b,c,d){k.displayElements.text[0].focus(),d&&d.files&&d.files.length>0&&(angular.forEach(d.files,function(a){try{return k.fileDropHandler(a,k.wrapSelection)||k.fileDropHandler!==k.defaultFileDropHandler&&k.defaultFileDropHandler(a,k.wrapSelection)}catch(b){j.error(b)}}),c.preventDefault(),c.stopPropagation())}),k._bUpdateSelectedStyles=!1,k.updateSelectedStyles=function(){var a;void 0!==(a=d.getSelectionElement())&&a.parentNode!==k.displayElements.text[0]?v.updateSelectedStyles(angular.element(a)):v.updateSelectedStyles(),k._bUpdateSelectedStyles&&b(k.updateSelectedStyles,200)},o=function(){k._bUpdateSelectedStyles||(k._bUpdateSelectedStyles=!0,k.$apply(function(){k.updateSelectedStyles()}))},k.displayElements.html.on("keydown",o),k.displayElements.text.on("keydown",o),p=function(){k._bUpdateSelectedStyles=!1},k.displayElements.html.on("keyup",p),k.displayElements.text.on("keyup",p),q=function(a,b){b&&angular.extend(a,b),k.$apply(function(){return v.sendKeyCommand(a)?(k._bUpdateSelectedStyles||k.updateSelectedStyles(),a.preventDefault(),!1):void 0})},k.displayElements.html.on("keypress",q),k.displayElements.text.on("keypress",q),r=function(){k._bUpdateSelectedStyles=!1,k.$apply(function(){k.updateSelectedStyles()})},k.displayElements.html.on("mouseup",r),k.displayElements.text.on("mouseup",r)}}}]).factory("taBrowserTag",[function(){return function(a){return a?""===a?void 0===e?"div":8>=e?"P":"p":8>=e?a.toUpperCase():a:8>=e?"P":"p"}}]).factory("taExecCommand",["taSelection","taBrowserTag","$document",function(a,b,c){var d=/^(address|article|aside|audio|blockquote|canvas|dd|div|dl|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hgroup|hr|noscript|ol|output|p|pre|section|table|tfoot|ul|video)$/gi,e=/^(ul|li|ol)$/gi,f=function(b,c){var d,e,f=b.find("li");for(e=f.length-1;e>=0;e--)d=angular.element("<"+c+">"+f[e].innerHTML+"</"+c+">"),b.after(d);b.remove(),a.setSelectionToElementEnd(d[0])},g=function(b,c){var d=angular.element("<"+c+">"+b[0].innerHTML+"</"+c+">");b.after(d),b.remove(),a.setSelectionToElementEnd(d.find("li")[0])},h=function(c,d,e){for(var f="",g=0;g<c.length;g++)f+="<"+b("li")+">"+c[g].innerHTML+"</"+b("li")+">";var h=angular.element("<"+e+">"+f+"</"+e+">");d.after(h),d.remove(),a.setSelectionToElementEnd(h.find("li")[0])};return function(i){return i=b(i),function(j,k,l){var m,n,o,p,q,r=angular.element("<"+i+">"),s=a.getSelectionElement(),t=angular.element(s);if(void 0!==s){var u=s.tagName.toLowerCase();if("insertorderedlist"===j.toLowerCase()||"insertunorderedlist"===j.toLowerCase()){var v=b("insertorderedlist"===j.toLowerCase()?"ol":"ul");if(u===v)return f(t,i);if("li"===u&&t.parent()[0].tagName.toLowerCase()===v&&1===t.parent().children().length)return f(t.parent(),i);if("li"===u&&t.parent()[0].tagName.toLowerCase()!==v&&1===t.parent().children().length)return g(t.parent(),v);if(u.match(d)&&!t.hasClass("ta-bind")){if("ol"===u||"ul"===u)return g(t,v);var w=!1;return angular.forEach(t.children(),function(a){a.tagName.match(d)&&(w=!0)}),w?h(t.children(),t,v):h([angular.element("<div>"+s.innerHTML+"</div>")[0]],t,v)}if(u.match(d)){if(p=a.getOnlySelectedElements(),1===p.length&&("ol"===p[0].tagName.toLowerCase()||"ul"===p[0].tagName.toLowerCase()))return p[0].tagName.toLowerCase()===v?f(angular.element(p[0]),i):g(angular.element(p[0]),v);o="";var x=[];for(m=0;m<p.length;m++)if(3!==p[m].nodeType){var y=angular.element(p[m]);o+="<"+b("li")+">"+y[0].innerHTML+"</"+b("li")+">",x.unshift(y)}return n=angular.element("<"+v+">"+o+"</"+v+">"),x.pop().replaceWith(n),angular.forEach(x,function(a){a.remove()}),void a.setSelectionToElementEnd(n[0])}}else if("formatblock"===j.toLowerCase()){var z=l.toLowerCase().replace(/[<>]/gi,"");for(n="li"===u?t.parent():t;!n[0].tagName.match(d);)n=n.parent(),u=n[0].tagName.toLowerCase();if(u===z){p=n.children();var A=!1;for(m=0;m<p.length;m++)A=A||p[m].tagName.match(d);A?(n.after(p),q=n.next(),n.remove(),n=q):(r.append(n[0].childNodes),n.after(r),n.remove(),n=r)}else if(n.parent()[0].tagName.toLowerCase()!==z||n.parent().hasClass("ta-bind"))if(u.match(e))n.wrap(l);else{p=a.getOnlySelectedElements(),0===p.length&&(p=[n[0]]);var B=!1;if(angular.forEach(p,function(a){3!==a.nodeType&&a.tagName.match(d)||(B=!0)}),B)for(;3===p[0].nodeType||!p[0].tagName.match(d);)p=[p[0].parentNode];if(angular.element(p[0]).hasClass("ta-bind"))n=angular.element(l),n[0].innerHTML=p[0].innerHTML,p[0].innerHTML=n[0].outerHTML;else if("blockquote"===z){for(o="",m=0;m<p.length;m++)o+=p[m].outerHTML;n=angular.element(l),n[0].innerHTML=o,p[0].parentNode.insertBefore(n[0],p[0]),angular.forEach(p,function(a){a.parentNode.removeChild(a)})}else for(m=0;m<p.length;m++)n=angular.element(l),n[0].innerHTML=p[m].innerHTML,p[m].parentNode.insertBefore(n[0],p[m]),p[m].parentNode.removeChild(p[m])}else{var C=n.parent(),D=C.contents();for(m=0;m<D.length;m++)C.parent().hasClass("ta-bind")&&3===D[m].nodeType&&(r=angular.element("<"+i+">"),r[0].innerHTML=D[m].outerHTML,D[m]=r[0]),C.parent()[0].insertBefore(D[m],C[0]);C.remove()}return void a.setSelectionToElementEnd(n[0])}}try{c[0].execCommand(j,k,l)}catch(E){}}}}]).directive("taBind",["taSanitize","$timeout","$window","$document","taFixChrome","taBrowserTag","taSelection","taSelectableElements","taApplyCustomRenderers","taOptions",function(a,b,c,f,i,j,k,m,n,o){return{require:"ngModel",scope:{},link:function(j,p,q,r){var s,t,u=void 0!==p.attr("contenteditable")&&p.attr("contenteditable"),v=u||"textarea"===p[0].tagName.toLowerCase()||"input"===p[0].tagName.toLowerCase(),w=!1,x=!1,y=q.taUnsafeSanitizer||o.disableSanitizer;void 0===q.taDefaultWrap&&(q.taDefaultWrap="p"),""===q.taDefaultWrap?(s="",t=void 0===e?"<div><br></div>":e>=11?"<p><br></p>":8>=e?"<P>&nbsp;</P>":"<p>&nbsp;</p>"):(s=void 0===e||e>=11?"<"+q.taDefaultWrap+"><br></"+q.taDefaultWrap+">":8>=e?"<"+q.taDefaultWrap.toUpperCase()+"></"+q.taDefaultWrap.toUpperCase()+">":"<"+q.taDefaultWrap+"></"+q.taDefaultWrap+">",t=void 0===e||e>=11?"<"+q.taDefaultWrap+"><br></"+q.taDefaultWrap+">":8>=e?"<"+q.taDefaultWrap.toUpperCase()+">&nbsp;</"+q.taDefaultWrap.toUpperCase()+">":"<"+q.taDefaultWrap+">&nbsp;</"+q.taDefaultWrap+">"),p.addClass("ta-bind");
var z=function(){if(u)return p[0].innerHTML;if(v)return p.val();throw"textAngular Error: attempting to update non-editable taBind"},A=function(a){a||(a=z()),a===t?""!==r.$viewValue&&r.$setViewValue(""):r.$viewValue!==a&&r.$setViewValue(a)};if(j.$parent["updateTaBind"+(q.id||"")]=function(){w||A()},v)if(u){if(p.on("cut",function(a){w?a.preventDefault():b(function(){A()},0)}),p.on("paste",function(a,b){b&&angular.extend(a,b);var d;if(a.clipboardData||a.originalEvent&&a.originalEvent.clipboardData?d=(a.originalEvent||a).clipboardData.getData("text/plain"):c.clipboardData&&(d=c.clipboardData.getData("Text")),!d&&!w)return!0;if(a.preventDefault(),!w){var e=angular.element("<div></div>");if(e[0].innerHTML=d,d=e.text(),f[0].selection){var g=f[0].selection.createRange();g.pasteHTML(d)}else f[0].execCommand("insertText",!1,d);A()}}),p.on("keyup",function(a,b){if(b&&angular.extend(a,b),!w){if(""!==s&&13===a.keyCode&&!a.shiftKey){var c=k.getSelectionElement();if(c.tagName.toLowerCase()!==q.taDefaultWrap&&"li"!==c.tagName.toLowerCase()&&(""===c.innerHTML.trim()||"<br>"===c.innerHTML.trim())){var d=angular.element(s);angular.element(c).replaceWith(d),k.setSelectionToElementStart(d[0])}}var e=z();""!==s&&""===e.trim()&&(p[0].innerHTML=s,k.setSelectionToElementStart(p.children()[0])),A(e)}}),p.on("blur",function(){x=!1,w||A(),r.$render()}),q.placeholder&&(e>8||void 0===e)){var B;if(!q.id)throw"textAngular Error: An unique ID is required for placeholders to work";B=g("#"+q.id+".placeholder-text:before",'content: "'+q.placeholder+'"'),j.$on("$destroy",function(){h(B)})}p.on("focus",function(){x=!0,r.$render()}),p.on("mousedown",function(a,b){b&&angular.extend(a,b),a.stopPropagation()})}else p.on("paste cut",function(){w||b(function(){r.$setViewValue(z())},0)}),p.on("change blur",function(){w||r.$setViewValue(z())});var C=function(b){return r.$oldViewValue=a(i(b),r.$oldViewValue,y)},D=function(a){return q.required&&r.$setValidity("required",!(!a||a.trim()===t||""===a.trim())),a};r.$parsers.push(C),r.$parsers.push(D),r.$formatters.push(C),r.$formatters.push(D);var E=function(a){return j.$emit("ta-element-select",this),a.preventDefault(),!1},F=function(a,c){if(c&&angular.extend(a,c),!l&&!w){l=!0;var d;d=a.originalEvent?a.originalEvent.dataTransfer:a.dataTransfer,j.$emit("ta-drop-event",this,a,d),b(function(){l=!1},100)}};j.$parent["reApplyOnSelectorHandlers"+(q.id||"")]=function(){w||angular.forEach(m,function(a){p.find(a).off("click",E).on("click",E)})};var G=function(a){p[0].innerHTML=a};r.$render=function(){var a=r.$viewValue||"";f[0].activeElement!==p[0]?u?(q.placeholder?""===a?(x?p.removeClass("placeholder-text"):p.addClass("placeholder-text"),G(s)):(p.removeClass("placeholder-text"),G(a)):G(""===a?s:a),w?p.off("drop",F):(angular.forEach(m,function(a){p.find(a).on("click",E)}),p.on("drop",F))):"textarea"!==p[0].tagName.toLowerCase()&&"input"!==p[0].tagName.toLowerCase()?G(n(a)):p.val(a):u&&p.removeClass("placeholder-text")},q.taReadonly&&(w=j.$parent.$eval(q.taReadonly),w?(p.addClass("ta-readonly"),("textarea"===p[0].tagName.toLowerCase()||"input"===p[0].tagName.toLowerCase())&&p.attr("disabled","disabled"),void 0!==p.attr("contenteditable")&&p.attr("contenteditable")&&p.removeAttr("contenteditable")):(p.removeClass("ta-readonly"),"textarea"===p[0].tagName.toLowerCase()||"input"===p[0].tagName.toLowerCase()?p.removeAttr("disabled"):u&&p.attr("contenteditable","true")),j.$parent.$watch(q.taReadonly,function(a,b){b!==a&&(a?(p.addClass("ta-readonly"),("textarea"===p[0].tagName.toLowerCase()||"input"===p[0].tagName.toLowerCase())&&p.attr("disabled","disabled"),void 0!==p.attr("contenteditable")&&p.attr("contenteditable")&&p.removeAttr("contenteditable"),angular.forEach(m,function(a){p.find(a).on("click",E)}),p.off("drop",F)):(p.removeClass("ta-readonly"),"textarea"===p[0].tagName.toLowerCase()||"input"===p[0].tagName.toLowerCase()?p.removeAttr("disabled"):u&&p.attr("contenteditable","true"),angular.forEach(m,function(a){p.find(a).off("click",E)}),p.on("drop",F)),w=a)})),u&&!w&&(angular.forEach(m,function(a){p.find(a).on("click",E)}),p.on("drop",F),p.on("blur",function(){/AppleWebKit\/([\d.]+)/.exec(navigator.userAgent)&&(d=!0)}))}}}]).factory("taApplyCustomRenderers",["taCustomRenderers",function(a){return function(c){var d=angular.element("<div></div>");return d[0].innerHTML=c,angular.forEach(a,function(a){var c=[];a.selector&&""!==a.selector?c=d.find(a.selector):a.customAttribute&&""!==a.customAttribute&&(c=b(d,a.customAttribute)),angular.forEach(c,function(b){b=angular.element(b),a.selector&&""!==a.selector&&a.customAttribute&&""!==a.customAttribute?void 0!==b.attr(a.customAttribute)&&a.renderLogic(b):a.renderLogic(b)})}),d[0].innerHTML}}]).directive("taMaxText",function(){return{restrict:"A",require:"ngModel",link:function(a,b,c,d){function e(a){var b=angular.element("<div/>");b.html(a);var c=b.text().length;return f>=c?(d.$setValidity("taMaxText",!0),a):void d.$setValidity("taMaxText",!1)}var f=parseInt(a.$eval(c.taMaxText));if(isNaN(f))throw"Max text must be an integer";c.$observe("taMaxText",function(a){if(f=parseInt(a),isNaN(f))throw"Max text must be an integer";d.$dirty&&d.$setViewValue(d.$viewValue)}),d.$parsers.unshift(e)}}}).directive("taMinText",function(){return{restrict:"A",require:"ngModel",link:function(a,b,c,d){function e(a){var b=angular.element("<div/>");b.html(a);var c=b.text().length;return!c||c>=f?(d.$setValidity("taMinText",!0),a):void d.$setValidity("taMinText",!1)}var f=parseInt(a.$eval(c.taMinText));if(isNaN(f))throw"Min text must be an integer";c.$observe("taMinText",function(a){if(f=parseInt(a),isNaN(f))throw"Min text must be an integer";d.$dirty&&d.$setViewValue(d.$viewValue)}),d.$parsers.unshift(e)}}}).factory("taFixChrome",function(){var a=function(a){for(var b=angular.element("<div>"+a+"</div>"),c=angular.element(b).find("span"),d=0;d<c.length;d++){var e=angular.element(c[d]);e.attr("style")&&e.attr("style").match(/line-height: 1.428571429;|color: inherit; line-height: 1.1;/i)&&(e.attr("style",e.attr("style").replace(/( |)font-family: inherit;|( |)line-height: 1.428571429;|( |)line-height:1.1;|( |)color: inherit;/gi,"")),e.attr("style")&&""!==e.attr("style")||(e.next().length>0&&"BR"===e.next()[0].tagName&&e.next().remove(),e.replaceWith(e[0].innerHTML)))}var f=b[0].innerHTML.replace(/style="[^"]*?(line-height: 1.428571429;|color: inherit; line-height: 1.1;)[^"]*"/gi,"");return f!==b[0].innerHTML&&(b[0].innerHTML=f),b[0].innerHTML};return a}).factory("taSanitize",["$sanitize",function(a){return function(c,d,e){var f=angular.element("<div>"+c+"</div>");angular.forEach(b(f,"align"),function(a){a.css("text-align",a.attr("align")),a.removeAttr("align")});var g;c=f[0].innerHTML;try{g=a(c),e&&(g=c)}catch(h){g=d||""}return g}}]).directive("textAngularToolbar",["$compile","textAngularManager","taOptions","taTools","taToolExecuteAction","$window",function(a,b,c,d,e,f){return{scope:{name:"@"},restrict:"EA",link:function(g,h,i){if(!g.name||""===g.name)throw"textAngular Error: A toolbar requires a name";angular.extend(g,angular.copy(c)),i.taToolbar&&(g.toolbar=g.$parent.$eval(i.taToolbar)),i.taToolbarClass&&(g.classes.toolbar=i.taToolbarClass),i.taToolbarGroupClass&&(g.classes.toolbarGroup=i.taToolbarGroupClass),i.taToolbarButtonClass&&(g.classes.toolbarButton=i.taToolbarButtonClass),i.taToolbarActiveButtonClass&&(g.classes.toolbarButtonActive=i.taToolbarActiveButtonClass),i.taFocussedClass&&(g.classes.focussed=i.taFocussedClass),g.disabled=!0,g.focussed=!1,g._$element=h,h[0].innerHTML="",h.addClass("ta-toolbar "+g.classes.toolbar),g.$watch("focussed",function(){g.focussed?h.addClass(g.classes.focussed):h.removeClass(g.classes.focussed)});var j=function(b,c){var d;if(d=angular.element(b&&b.display?b.display:"<button type='button'>"),d.addClass(g.classes.toolbarButton),d.attr("name",c.name),d.attr("unselectable","on"),d.attr("ng-disabled","isDisabled()"),d.attr("tabindex","-1"),d.attr("ng-click","executeAction()"),d.attr("ng-class","displayActiveToolClass(active)"),b&&b.tooltiptext&&d.attr("title",b.tooltiptext),d.on("mousedown",function(a,b){return b&&angular.extend(a,b),a.preventDefault(),!1}),b&&!b.display&&!c._display&&(d[0].innerHTML="",b.buttontext&&(d[0].innerHTML=b.buttontext),b.iconclass)){var e=angular.element("<i>"),f=d[0].innerHTML;e.addClass(b.iconclass),d[0].innerHTML="",d.append(e),f&&""!==f&&d.append("&nbsp;"+f)}return c._lastToolDefinition=angular.copy(b),a(d)(c)};g.tools={},g._parent={disabled:!0,showHtml:!1,queryFormatBlockState:function(){return!1},queryCommandState:function(){return!1}};var k={$window:f,$editor:function(){return g._parent},isDisabled:function(){return this.$eval("disabled")||this.$eval("disabled()")||"html"!==this.name&&this.$editor().showHtml||this.$parent.disabled||this.$editor().disabled},displayActiveToolClass:function(a){return a?g.classes.toolbarButtonActive:""},executeAction:e};angular.forEach(g.toolbar,function(a){var b=angular.element("<div>");b.addClass(g.classes.toolbarGroup),angular.forEach(a,function(a){g.tools[a]=angular.extend(g.$new(!0),d[a],k,{name:a}),g.tools[a].$element=j(d[a],g.tools[a]),b.append(g.tools[a].$element)}),h.append(b)}),g.updateToolDisplay=function(a,b,c){var d=g.tools[a];if(d){if(d._lastToolDefinition&&!c&&(b=angular.extend({},d._lastToolDefinition,b)),null===b.buttontext&&null===b.iconclass&&null===b.display)throw'textAngular Error: Tool Definition for updating "'+a+'" does not have a valid display/iconclass/buttontext value';null===b.buttontext&&delete b.buttontext,null===b.iconclass&&delete b.iconclass,null===b.display&&delete b.display;var e=j(b,d);d.$element.replaceWith(e),d.$element=e}},g.addTool=function(a,b,c,e){g.tools[a]=angular.extend(g.$new(!0),d[a],k,{name:a}),g.tools[a].$element=j(d[a],g.tools[a]);var f;void 0===c&&(c=g.toolbar.length-1),f=angular.element(h.children()[c]),void 0===e?(f.append(g.tools[a].$element),g.toolbar[c][g.toolbar[c].length-1]=a):(f.children().eq(e).after(g.tools[a].$element),g.toolbar[c][e]=a)},b.registerToolbar(g),g.$on("$destroy",function(){b.unregisterToolbar(g.name)})}}}]).service("taToolExecuteAction",["$q",function(a){return function(b){void 0!==b&&(this.$editor=function(){return b});var c=a.defer(),d=c.promise,e=this.$editor();d["finally"](function(){e.endAction.call(e)});var f;try{f=this.action(c,e.startAction())}catch(g){}(f||void 0===f)&&c.resolve()}}]).service("textAngularManager",["taToolExecuteAction","taTools","taRegisterTool",function(a,b,c){var d={},e={};return{registerEditor:function(c,f,g){if(!c||""===c)throw"textAngular Error: An editor requires a name";if(!f)throw"textAngular Error: An editor requires a scope";if(e[c])throw'textAngular Error: An Editor with name "'+c+'" already exists';var h=[];return angular.forEach(g,function(a){d[a]&&h.push(d[a])}),e[c]={scope:f,toolbars:g,_registerToolbar:function(a){this.toolbars.indexOf(a.name)>=0&&h.push(a)},editorFunctions:{disable:function(){angular.forEach(h,function(a){a.disabled=!0})},enable:function(){angular.forEach(h,function(a){a.disabled=!1})},focus:function(){angular.forEach(h,function(a){a._parent=f,a.disabled=!1,a.focussed=!0})},unfocus:function(){angular.forEach(h,function(a){a.disabled=!0,a.focussed=!1})},updateSelectedStyles:function(a){angular.forEach(h,function(b){angular.forEach(b.tools,function(b){b.activeState&&(b.active=b.activeState(a))})})},sendKeyCommand:function(c){var d=!1;return(c.ctrlKey||c.metaKey)&&angular.forEach(b,function(b,e){if(b.commandKeyCode&&b.commandKeyCode===c.which)for(var g=0;g<h.length;g++)if(void 0!==h[g].tools[e]){a.call(h[g].tools[e],f),d=!0;break}}),d},triggerElementSelect:function(a,c){var d=function(a,b){for(var c=!0,d=0;d<b.length;d++)c=c&&a.attr(b[d]);return c},e=[],g={},i=!1;c=angular.element(c);var j=!1;if(angular.forEach(b,function(a,b){a.onElementSelect&&a.onElementSelect.element&&a.onElementSelect.element.toLowerCase()===c[0].tagName.toLowerCase()&&(!a.onElementSelect.filter||a.onElementSelect.filter(c))&&(j=j||angular.isArray(a.onElementSelect.onlyWithAttrs)&&d(c,a.onElementSelect.onlyWithAttrs),(!a.onElementSelect.onlyWithAttrs||d(c,a.onElementSelect.onlyWithAttrs))&&(g[b]=a))}),j?(angular.forEach(g,function(a,b){a.onElementSelect.onlyWithAttrs&&d(c,a.onElementSelect.onlyWithAttrs)&&e.push({name:b,tool:a})}),e.sort(function(a,b){return b.tool.onElementSelect.onlyWithAttrs.length-a.tool.onElementSelect.onlyWithAttrs.length})):angular.forEach(g,function(a,b){e.push({name:b,tool:a})}),e.length>0)for(var k=0;k<e.length;k++){for(var l=e[k].tool,m=e[k].name,n=0;n<h.length;n++)if(void 0!==h[n].tools[m]){l.onElementSelect.action.call(h[n].tools[m],a,c,f),i=!0;break}if(i)break}return i}}},e[c].editorFunctions},retrieveEditor:function(a){return e[a]},unregisterEditor:function(a){delete e[a]},registerToolbar:function(a){if(!a)throw"textAngular Error: A toolbar requires a scope";if(!a.name||""===a.name)throw"textAngular Error: A toolbar requires a name";if(d[a.name])throw'textAngular Error: A toolbar with name "'+a.name+'" already exists';d[a.name]=a,angular.forEach(e,function(b){b._registerToolbar(a)})},retrieveToolbar:function(a){return d[a]},retrieveToolbarsViaEditor:function(a){var b=[],c=this;return angular.forEach(this.retrieveEditor(a).toolbars,function(a){b.push(c.retrieveToolbar(a))}),b},unregisterToolbar:function(a){delete d[a]},updateToolsDisplay:function(a){var b=this;angular.forEach(a,function(a,c){b.updateToolDisplay(c,a)})},resetToolsDisplay:function(){var a=this;angular.forEach(b,function(b,c){a.resetToolDisplay(c)})},updateToolDisplay:function(a,b){var c=this;angular.forEach(d,function(d,e){c.updateToolbarToolDisplay(e,a,b)})},resetToolDisplay:function(a){var b=this;angular.forEach(d,function(c,d){b.resetToolbarToolDisplay(d,a)})},updateToolbarToolDisplay:function(a,b,c){if(!d[a])throw'textAngular Error: No Toolbar with name "'+a+'" exists';d[a].updateToolDisplay(b,c)},resetToolbarToolDisplay:function(a,c){if(!d[a])throw'textAngular Error: No Toolbar with name "'+a+'" exists';d[a].updateToolDisplay(c,b[c],!0)},removeTool:function(a){delete b[a],angular.forEach(d,function(b){delete b.tools[a];for(var c=0;c<b.toolbar.length;c++){for(var d,e=0;e<b.toolbar[c].length;e++){if(b.toolbar[c][e]===a){d={group:c,index:e};break}if(void 0!==d)break}void 0!==d&&(b.toolbar[d.group].slice(d.index,1),b._$element.children().eq(d.group).children().eq(d.index).remove())}})},addTool:function(a,b,e,f){c(a,b),angular.forEach(d,function(c){c.addTool(a,b,e,f)})},addToolToToolbar:function(a,b,e,f,g){c(a,b),d[e].addTool(a,b,f,g)},refreshEditor:function(a){if(!e[a])throw'textAngular Error: No Editor with name "'+a+'" exists';e[a].scope.updateTaBindtaTextElement(),e[a].scope.$$phase||e[a].scope.$digest()}}}]).service("taSelection",["$window","$document",function(a,b){var c=b[0],d=function(a){if(a.hasChildNodes())return a.firstChild;for(;a&&!a.nextSibling;)a=a.parentNode;return a?a.nextSibling:null},e=function(a){var b=a.startContainer,c=a.endContainer;if(b===c)return[b];for(var e=[];b&&b!==c;)b=d(b),b.parentNode===a.commonAncestorContainer&&e.push(b);for(b=a.startContainer;b&&b!==a.commonAncestorContainer;)b.parentNode===a.commonAncestorContainer&&e.unshift(b),b=b.parentNode;return e};return{getOnlySelectedElements:function(){if(window.getSelection){var b=a.getSelection();if(!b.isCollapsed)return e(b.getRangeAt(0))}return[]},getSelectionElement:function(){var b,d,e;return c.selection&&c.selection.createRange?(b=c.selection.createRange(),b.parentElement()):a.getSelection&&(d=a.getSelection(),d.getRangeAt?d.rangeCount>0&&(b=d.getRangeAt(0)):(b=c.createRange(),b.setStart(d.anchorNode,d.anchorOffset),b.setEnd(d.focusNode,d.focusOffset),b.collapsed!==d.isCollapsed&&(b.setStart(d.focusNode,d.focusOffset),b.setEnd(d.anchorNode,d.anchorOffset))),b)?(e=b.commonAncestorContainer,3===e.nodeType?e.parentNode:e):void 0},setSelectionToElementStart:function(b){if(c.createRange&&a.getSelection){var d=c.createRange();d.selectNodeContents(b),d.setStart(b,0),d.setEnd(b,0);var e=a.getSelection();e.removeAllRanges(),e.addRange(d)}else if(c.selection&&c.body.createTextRange){var f=c.body.createTextRange();f.moveToElementText(b),f.collapse(!0),f.moveEnd("character",0),f.moveStart("character",0),f.select()}},setSelectionToElementEnd:function(b){if(c.createRange&&a.getSelection){var d=c.createRange();d.selectNodeContents(b),d.collapse(!1);var e=a.getSelection();e.removeAllRanges(),e.addRange(d)}else if(c.selection&&c.body.createTextRange){var f=c.body.createTextRange();f.moveToElementText(b),f.collapse(!1),f.select()}}}}])}()}({},function(){return this}());
(function() {
    'use strict';

    angular.module('hj.uiSrefFastclick', [])
        .directive('uiSref', ['$document',
            function($document) {
                return {
                    restrict: 'A',
                    priority: 999,
                    link: function($scope, $element, $attrs) {
                        var trackTouch, touchTarget, touchStartX, touchStartY, lastClickTime,
                            boundary = 10,
                            tapDelay = 200;

                        var touchMove = function(e) {
                            if (Math.abs(e.targetTouches[0].pageX - touchStartX) > boundary || Math.abs(e.targetTouches[0].pageY - touchStartY) > boundary) {
                                trackTouch = false;
                            }
                        };

                        $document.on("touchmove", touchMove);

                        $element.on('$destroy', function() {
                            $document.off("touchmove", touchMove);
                        });

                        $element.bind("touchstart", function(e) {
                            if (e.targetTouches.length > 1) {
                                return;
                            }

                            touchTarget = e.target;

                            touchStartX = e.targetTouches[0].pageX;
                            touchStartY = e.targetTouches[0].pageY;

                            trackTouch = true;

                            if ((e.timeStamp - lastClickTime) < tapDelay) {
                                e.preventDefault();
                            }
                        });

                        $element.bind("touchend", function(e) {
                            if (!trackTouch) {
                                return;
                            }

                            if (e.target !== touchTarget) {
                                return;
                            }

                            if (Math.abs(e.changedTouches[0].pageX - touchStartX) > boundary || Math.abs(e.changedTouches[0].pageY - touchStartY) > boundary) {
                                return;
                            }

                            lastClickTime = e.timeStamp;

                            $element.triggerHandler('click');

                            e.preventDefault();
                        });
                    }
                };
            }
        ]);

})();

/*!
angular-xeditable - 0.1.9
Edit-in-place for angular.js
Build date: 2015-03-26 
*/
angular.module("xeditable",[]).value("editableOptions",{theme:"default",icon_set:"default",buttons:"right",blurElem:"cancel",blurForm:"ignore",activate:"focus",isDisabled:!1,activationEvent:"click"}),angular.module("xeditable").directive("editableBsdate",["editableDirectiveFactory",function(a){return a({directiveName:"editableBsdate",inputTpl:"<div></div>",render:function(){this.parent.render.call(this);var a=angular.element('<input type="text" class="form-control" ng-model="$data"/>'),b=angular.element('<button type="button" class="btn btn-default"><i class="glyphicon glyphicon-calendar"></i></button>'),c=angular.element('<span class="input-group-btn"></span>');a.attr("datepicker-popup",this.attrs.eDatepickerPopupXEditable||"yyyy/MM/dd"),a.attr("is-open",this.attrs.eIsOpen),a.attr("date-disabled",this.attrs.eDateDisabled),a.attr("datepicker-popup",this.attrs.eDatepickerPopup),a.attr("datepicker-mode",this.attrs.eDatepickerMode||"day"),a.attr("min-date",this.attrs.eMinDate),a.attr("max-date",this.attrs.eMaxDate),a.attr("show-weeks",this.attrs.eShowWeeks||!0),a.attr("starting-day",this.attrs.eStartingDay||0),a.attr("init-date",this.attrs.eInitDate||new Date),a.attr("min-mode",this.attrs.eMinMode||"day"),a.attr("max-mode",this.attrs.eMaxMode||"year"),a.attr("format-day",this.attrs.eFormatDay||"dd"),a.attr("format-month",this.attrs.eFormatMonth||"MMMM"),a.attr("format-year",this.attrs.eFormatYear||"yyyy"),a.attr("format-day-header",this.attrs.eFormatDayHeader||"EEE"),a.attr("format-day-title",this.attrs.eFormatDayTitle||"MMMM yyyy"),a.attr("format-month-title",this.attrs.eFormatMonthTitle||"yyyy"),a.attr("year-range",this.attrs.eYearRange||20),a.attr("show-button-bar",this.attrs.eShowButtonBar||!0),a.attr("current-text",this.attrs.eCurrentText||"Today"),a.attr("clear-text",this.attrs.eClearText||"Clear"),a.attr("close-text",this.attrs.eCloseText||"Done"),a.attr("close-on-date-selection",this.attrs.eCloseOnDateSelection||!0),a.attr("date-picker-append-to-body",this.attrs.eDatePickerAppendToBody||!1),a.attr("date-disabled",this.attrs.eDateDisabled),b.attr("ng-click",this.attrs.eNgClick),c.append(b),this.inputEl.prepend(a),this.inputEl.append(c),this.inputEl.removeAttr("class"),this.inputEl.attr("class","input-group")}})}]),angular.module("xeditable").directive("editableBstime",["editableDirectiveFactory",function(a){return a({directiveName:"editableBstime",inputTpl:"<timepicker></timepicker>",render:function(){this.parent.render.call(this);var a=angular.element('<div class="well well-small" style="display:inline-block;"></div>');a.attr("ng-model",this.inputEl.attr("ng-model")),this.inputEl.removeAttr("ng-model"),this.attrs.eNgChange&&(a.attr("ng-change",this.inputEl.attr("ng-change")),this.inputEl.removeAttr("ng-change")),this.inputEl.wrap(a)}})}]),angular.module("xeditable").directive("editableCheckbox",["editableDirectiveFactory",function(a){return a({directiveName:"editableCheckbox",inputTpl:'<input type="checkbox">',render:function(){this.parent.render.call(this),this.attrs.eTitle&&(this.inputEl.wrap("<label></label>"),this.inputEl.parent().append(this.attrs.eTitle))},autosubmit:function(){var a=this;a.inputEl.bind("change",function(){setTimeout(function(){a.scope.$apply(function(){a.scope.$form.$submit()})},500)})}})}]),angular.module("xeditable").directive("editableChecklist",["editableDirectiveFactory","editableNgOptionsParser",function(a,b){return a({directiveName:"editableChecklist",inputTpl:"<span></span>",useCopy:!0,render:function(){this.parent.render.call(this);var a=b(this.attrs.eNgOptions),c='<label ng-repeat="'+a.ngRepeat+'"><input type="checkbox" checklist-model="$parent.$data" checklist-value="'+a.locals.valueFn+'"><span ng-bind="'+a.locals.displayFn+'"></span></label>';this.inputEl.removeAttr("ng-model"),this.inputEl.removeAttr("ng-options"),this.inputEl.html(c)}})}]),angular.module("xeditable").directive("editableCombodate",["editableDirectiveFactory","editableCombodate",function(a,b){return a({directiveName:"editableCombodate",inputTpl:'<input type="text">',render:function(){this.parent.render.call(this);var a=b.getInstance(this.inputEl,{value:new Date(this.scope.$data)}),c=this;a.$widget.find("select").bind("change",function(){c.scope.$data=new Date(a.getValue()).toISOString()})}})}]),function(){var a="text|password|email|tel|number|url|search|color|date|datetime|time|month|week|file".split("|");angular.forEach(a,function(a){var b="editable"+a.charAt(0).toUpperCase()+a.slice(1);angular.module("xeditable").directive(b,["editableDirectiveFactory",function(c){return c({directiveName:b,inputTpl:'<input type="'+a+'">'})}])}),angular.module("xeditable").directive("editableRange",["editableDirectiveFactory",function(a){return a({directiveName:"editableRange",inputTpl:'<input type="range" id="range" name="range">',render:function(){this.parent.render.call(this),this.inputEl.after("<output>{{$data}}</output>")}})}])}(),angular.module("xeditable").directive("editableRadiolist",["editableDirectiveFactory","editableNgOptionsParser",function(a,b){return a({directiveName:"editableRadiolist",inputTpl:"<span></span>",render:function(){this.parent.render.call(this);var a=b(this.attrs.eNgOptions),c='<label ng-repeat="'+a.ngRepeat+'"><input type="radio" ng-disabled="'+this.attrs.eNgDisabled+'" ng-model="$parent.$data" value="{{'+a.locals.valueFn+'}}"><span ng-bind="'+a.locals.displayFn+'"></span></label>';this.inputEl.removeAttr("ng-model"),this.inputEl.removeAttr("ng-options"),this.inputEl.html(c)},autosubmit:function(){var a=this;a.inputEl.bind("change",function(){setTimeout(function(){a.scope.$apply(function(){a.scope.$form.$submit()})},500)})}})}]),angular.module("xeditable").directive("editableSelect",["editableDirectiveFactory",function(a){return a({directiveName:"editableSelect",inputTpl:"<select></select>",autosubmit:function(){var a=this;a.inputEl.bind("change",function(){a.scope.$apply(function(){a.scope.$form.$submit()})})}})}]),angular.module("xeditable").directive("editableTextarea",["editableDirectiveFactory",function(a){return a({directiveName:"editableTextarea",inputTpl:"<textarea></textarea>",addListeners:function(){var a=this;a.parent.addListeners.call(a),a.single&&"no"!==a.buttons&&a.autosubmit()},autosubmit:function(){var a=this;a.inputEl.bind("keydown",function(b){(b.ctrlKey||b.metaKey)&&13===b.keyCode&&a.scope.$apply(function(){a.scope.$form.$submit()})})}})}]),angular.module("xeditable").factory("editableController",["$q","editableUtils",function(a,b){function c(a,c,d,e,f,g,h,i,j,k){var l,m,n=this;n.scope=a,n.elem=d,n.attrs=c,n.inputEl=null,n.editorEl=null,n.single=!0,n.error="",n.theme=f[h.theme]||f["default"],n.parent={},n.icon_set="default"===h.icon_set?g["default"][h.theme]:g.external[h.icon_set],n.inputTpl="",n.directiveName="",n.useCopy=!1,n.single=null,n.buttons="right",n.init=function(b){if(n.single=b,n.name=c.eName||c[n.directiveName],!c[n.directiveName])throw"You should provide value for `"+n.directiveName+"` in editable element!";l=e(c[n.directiveName]),n.buttons=n.single?n.attrs.buttons||h.buttons:"no",c.eName&&n.scope.$watch("$data",function(a){n.scope.$form.$data[c.eName]=a}),c.onshow&&(n.onshow=function(){return n.catchError(e(c.onshow)(a))}),c.onhide&&(n.onhide=function(){return e(c.onhide)(a)}),c.oncancel&&(n.oncancel=function(){return e(c.oncancel)(a)}),c.onbeforesave&&(n.onbeforesave=function(){return n.catchError(e(c.onbeforesave)(a))}),c.onaftersave&&(n.onaftersave=function(){return n.catchError(e(c.onaftersave)(a))}),a.$parent.$watch(c[n.directiveName],function(){n.setLocalValue(),n.handleEmpty()})},n.render=function(){var a=n.theme;n.inputEl=angular.element(n.inputTpl),n.controlsEl=angular.element(a.controlsTpl),n.controlsEl.append(n.inputEl),"no"!==n.buttons&&(n.buttonsEl=angular.element(a.buttonsTpl),n.submitEl=angular.element(a.submitTpl),n.cancelEl=angular.element(a.cancelTpl),n.icon_set&&(n.submitEl.find("span").addClass(n.icon_set.ok),n.cancelEl.find("span").addClass(n.icon_set.cancel)),n.buttonsEl.append(n.submitEl).append(n.cancelEl),n.controlsEl.append(n.buttonsEl),n.inputEl.addClass("editable-has-buttons")),n.errorEl=angular.element(a.errorTpl),n.controlsEl.append(n.errorEl),n.editorEl=angular.element(n.single?a.formTpl:a.noformTpl),n.editorEl.append(n.controlsEl);for(var d in c.$attr)if(!(d.length<=1)){var e=!1,f=d.substring(1,2);if("e"===d.substring(0,1)&&f===f.toUpperCase()&&(e=d.substring(1),"Form"!==e&&"NgSubmit"!==e)){e=e.substring(0,1).toLowerCase()+b.camelToDash(e.substring(1));var g="value"!==e&&""===c[d]?e:c[d];n.inputEl.attr(e,g)}}n.inputEl.addClass("editable-input"),n.inputEl.attr("ng-model","$data"),n.editorEl.addClass(b.camelToDash(n.directiveName)),n.single&&(n.editorEl.attr("editable-form","$form"),n.editorEl.attr("blur",n.attrs.blur||("no"===n.buttons?"cancel":h.blurElem))),angular.isFunction(a.postrender)&&a.postrender.call(n)},n.setLocalValue=function(){n.scope.$data=n.useCopy?angular.copy(l(a.$parent)):l(a.$parent)},n.show=function(){return n.setLocalValue(),n.render(),d.after(n.editorEl),j(n.editorEl)(a),n.addListeners(),d.addClass("editable-hide"),n.onshow()},n.hide=function(){return n.editorEl.remove(),d.removeClass("editable-hide"),n.onhide()},n.cancel=function(){n.oncancel()},n.addListeners=function(){n.inputEl.bind("keyup",function(a){if(n.single)switch(a.keyCode){case 27:n.scope.$apply(function(){n.scope.$form.$cancel()})}}),n.single&&"no"===n.buttons&&n.autosubmit(),n.editorEl.bind("click",function(a){a.which&&1!==a.which||n.scope.$form.$visible&&(n.scope.$form._clicked=!0)})},n.setWaiting=function(a){a?(m=!n.inputEl.attr("disabled")&&!n.inputEl.attr("ng-disabled")&&!n.inputEl.attr("ng-enabled"),m&&(n.inputEl.attr("disabled","disabled"),n.buttonsEl&&n.buttonsEl.find("button").attr("disabled","disabled"))):m&&(n.inputEl.removeAttr("disabled"),n.buttonsEl&&n.buttonsEl.find("button").removeAttr("disabled"))},n.activate=function(a,b){setTimeout(function(){var c=n.inputEl[0];"focus"===h.activate&&c.focus&&(a&&(b=b||a,c.onfocus=function(){var c=this;setTimeout(function(){c.setSelectionRange(a,b)})}),c.focus()),"select"===h.activate&&c.select&&c.select()},0)},n.setError=function(b){angular.isObject(b)||(a.$error=b,n.error=b)},n.catchError=function(a,b){return angular.isObject(a)&&b!==!0?k.when(a).then(angular.bind(this,function(a){this.catchError(a,!0)}),angular.bind(this,function(a){this.catchError(a,!0)})):b&&angular.isObject(a)&&a.status&&200!==a.status&&a.data&&angular.isString(a.data)?(this.setError(a.data),a=a.data):angular.isString(a)&&this.setError(a),a},n.save=function(){l.assign(a.$parent,n.useCopy?angular.copy(n.scope.$data):n.scope.$data)},n.handleEmpty=function(){var b=l(a.$parent),c=null===b||void 0===b||""===b||angular.isArray(b)&&0===b.length;d.toggleClass("editable-empty",c)},n.autosubmit=angular.noop,n.onshow=angular.noop,n.onhide=angular.noop,n.oncancel=angular.noop,n.onbeforesave=angular.noop,n.onaftersave=angular.noop}return c.$inject=["$scope","$attrs","$element","$parse","editableThemes","editableIcons","editableOptions","$rootScope","$compile","$q"],c}]),angular.module("xeditable").factory("editableDirectiveFactory",["$parse","$compile","editableThemes","$rootScope","$document","editableController","editableFormController","editableOptions",function(a,b,c,d,e,f,g,h){return function(b){return{restrict:"A",scope:!0,require:[b.directiveName,"?^form"],controller:f,link:function(c,f,i,j){var k,l=j[0],m=!1;if(j[1])k=j[1],m=!0;else if(i.eForm){var n=a(i.eForm)(c);if(n)k=n,m=!0;else for(var o=0;o<e[0].forms.length;o++)if(e[0].forms[o].name===i.eForm){k=null,m=!0;break}}angular.forEach(b,function(a,b){void 0!==l[b]&&(l.parent[b]=l[b])}),angular.extend(l,b);var p=angular.isDefined(i.editDisabled)?c.$eval(i.editDisabled):h.isDisabled;if(!p)if(l.init(!m),c.$editable=l,f.addClass("editable"),m)if(k){if(c.$form=k,!c.$form.$addEditable)throw"Form with editable elements should have `editable-form` attribute.";c.$form.$addEditable(l)}else d.$$editableBuffer=d.$$editableBuffer||{},d.$$editableBuffer[i.eForm]=d.$$editableBuffer[i.eForm]||[],d.$$editableBuffer[i.eForm].push(l),c.$form=null;else c.$form=g(),c.$form.$addEditable(l),i.eForm&&(c.$parent[i.eForm]=c.$form),(!i.eForm||i.eClickable)&&(f.addClass("editable-click"),f.bind(h.activationEvent,function(a){a.preventDefault(),a.editable=l,c.$apply(function(){c.$form.$show()})}))}}}}]),angular.module("xeditable").factory("editableFormController",["$parse","$document","$rootScope","editablePromiseCollection","editableUtils",function(a,b,c,d,e){var f=[],g=function(a,b){if(b==a)return!0;for(var c=b.parentNode;null!==c;){if(c==a)return!0;c=c.parentNode}return!1},h=function(a,b){var c=!0,d=a.$editables;return angular.forEach(d,function(a){var d=a.editorEl[0];g(d,b.target)&&(c=!1)}),c};b.bind("click",function(a){if(!(a.which&&1!==a.which||a.isDefaultPrevented())){for(var b=[],d=[],e=0;e<f.length;e++)f[e]._clicked?f[e]._clicked=!1:f[e].$waiting||("cancel"===f[e]._blur&&h(f[e],a)&&b.push(f[e]),"submit"===f[e]._blur&&h(f[e],a)&&d.push(f[e]));(b.length||d.length)&&c.$apply(function(){angular.forEach(b,function(a){a.$cancel()}),angular.forEach(d,function(a){a.$submit()})})}});var i={$addEditable:function(a){this.$editables.push(a),a.elem.bind("$destroy",angular.bind(this,this.$removeEditable,a)),a.scope.$form||(a.scope.$form=this),this.$visible&&a.catchError(a.show())},$removeEditable:function(a){for(var b=0;b<this.$editables.length;b++)if(this.$editables[b]===a)return void this.$editables.splice(b,1)},$show:function(){if(!this.$visible){this.$visible=!0;var a=d();a.when(this.$onshow()),this.$setError(null,""),angular.forEach(this.$editables,function(b){a.when(b.show())}),a.then({onWait:angular.bind(this,this.$setWaiting),onTrue:angular.bind(this,this.$activate),onFalse:angular.bind(this,this.$activate),onString:angular.bind(this,this.$activate)}),setTimeout(angular.bind(this,function(){this._clicked=!1,-1===e.indexOf(f,this)&&f.push(this)}),0)}},$activate:function(a){var b;if(this.$editables.length){if(angular.isString(a))for(b=0;b<this.$editables.length;b++)if(this.$editables[b].name===a)return void this.$editables[b].activate();for(b=0;b<this.$editables.length;b++)if(this.$editables[b].error)return void this.$editables[b].activate();this.$editables[0].activate(this.$editables[0].elem[0].selectionStart,this.$editables[0].elem[0].selectionEnd)}},$hide:function(){this.$visible&&(this.$visible=!1,this.$onhide(),angular.forEach(this.$editables,function(a){a.hide()}),e.arrayRemove(f,this))},$cancel:function(){this.$visible&&(this.$oncancel(),angular.forEach(this.$editables,function(a){a.cancel()}),this.$hide())},$setWaiting:function(a){this.$waiting=!!a,angular.forEach(this.$editables,function(b){b.setWaiting(!!a)})},$setError:function(a,b){angular.forEach(this.$editables,function(c){a&&c.name!==a||c.setError(b)})},$submit:function(){function a(a){var b=d();b.when(this.$onbeforesave()),b.then({onWait:angular.bind(this,this.$setWaiting),onTrue:a?angular.bind(this,this.$save):angular.bind(this,this.$hide),onFalse:angular.bind(this,this.$hide),onString:angular.bind(this,this.$activate)})}if(!this.$waiting){this.$setError(null,"");var b=d();angular.forEach(this.$editables,function(a){b.when(a.onbeforesave())}),b.then({onWait:angular.bind(this,this.$setWaiting),onTrue:angular.bind(this,a,!0),onFalse:angular.bind(this,a,!1),onString:angular.bind(this,this.$activate)})}},$save:function(){angular.forEach(this.$editables,function(a){a.save()});var a=d();a.when(this.$onaftersave()),angular.forEach(this.$editables,function(b){a.when(b.onaftersave())}),a.then({onWait:angular.bind(this,this.$setWaiting),onTrue:angular.bind(this,this.$hide),onFalse:angular.bind(this,this.$hide),onString:angular.bind(this,this.$activate)})},$onshow:angular.noop,$oncancel:angular.noop,$onhide:angular.noop,$onbeforesave:angular.noop,$onaftersave:angular.noop};return function(){return angular.extend({$editables:[],$visible:!1,$waiting:!1,$data:{},_clicked:!1,_blur:null},i)}}]),angular.module("xeditable").directive("editableForm",["$rootScope","$parse","editableFormController","editableOptions",function(a,b,c,d){return{restrict:"A",require:["form"],compile:function(){return{pre:function(b,d,e,f){var g,h=f[0];e.editableForm?b[e.editableForm]&&b[e.editableForm].$show?(g=b[e.editableForm],angular.extend(h,g)):(g=c(),b[e.editableForm]=g,angular.extend(g,h)):(g=c(),angular.extend(h,g));var i=a.$$editableBuffer,j=h.$name;j&&i&&i[j]&&(angular.forEach(i[j],function(a){g.$addEditable(a)}),delete i[j])},post:function(a,c,e,f){var g;g=e.editableForm&&a[e.editableForm]&&a[e.editableForm].$show?a[e.editableForm]:f[0],e.onshow&&(g.$onshow=angular.bind(g,b(e.onshow),a)),e.onhide&&(g.$onhide=angular.bind(g,b(e.onhide),a)),e.oncancel&&(g.$oncancel=angular.bind(g,b(e.oncancel),a)),e.shown&&b(e.shown)(a)&&g.$show(),g._blur=e.blur||d.blurForm,e.ngSubmit||e.submit||(e.onbeforesave&&(g.$onbeforesave=function(){return b(e.onbeforesave)(a,{$data:g.$data})}),e.onaftersave&&(g.$onaftersave=function(){return b(e.onaftersave)(a,{$data:g.$data})}),c.bind("submit",function(b){b.preventDefault(),a.$apply(function(){g.$submit()})})),c.bind("click",function(a){a.which&&1!==a.which||g.$visible&&(g._clicked=!0)})}}}}}]),angular.module("xeditable").factory("editablePromiseCollection",["$q",function(a){function b(){return{promises:[],hasFalse:!1,hasString:!1,when:function(b,c){if(b===!1)this.hasFalse=!0;else if(!c&&angular.isObject(b))this.promises.push(a.when(b));else{if(!angular.isString(b))return;this.hasString=!0}},then:function(b){function c(){h.hasString||h.hasFalse?!h.hasString&&h.hasFalse?e():f():d()}b=b||{};var d=b.onTrue||angular.noop,e=b.onFalse||angular.noop,f=b.onString||angular.noop,g=b.onWait||angular.noop,h=this;this.promises.length?(g(!0),a.all(this.promises).then(function(a){g(!1),angular.forEach(a,function(a){h.when(a,!0)}),c()},function(){g(!1),f()})):c()}}}return b}]),angular.module("xeditable").factory("editableUtils",[function(){return{indexOf:function(a,b){if(a.indexOf)return a.indexOf(b);for(var c=0;c<a.length;c++)if(b===a[c])return c;return-1},arrayRemove:function(a,b){var c=this.indexOf(a,b);return c>=0&&a.splice(c,1),b},camelToDash:function(a){var b=/[A-Z]/g;return a.replace(b,function(a,b){return(b?"-":"")+a.toLowerCase()})},dashToCamel:function(a){var b=/([\:\-\_]+(.))/g,c=/^moz([A-Z])/;return a.replace(b,function(a,b,c,d){return d?c.toUpperCase():c}).replace(c,"Moz$1")}}}]),angular.module("xeditable").factory("editableNgOptionsParser",[function(){function a(a){var c;if(!(c=a.match(b)))throw"ng-options parse error";var d,e=c[2]||c[1],f=c[4]||c[6],g=c[5],h=(c[3]||"",c[2]?c[1]:f),i=c[7],j=c[8],k=j?c[8]:null;return void 0===g?(d=f+" in "+i,void 0!==j&&(d+=" track by "+k)):d="("+g+", "+f+") in "+i,{ngRepeat:d,locals:{valueName:f,keyName:g,valueFn:h,displayFn:e}}}var b=/^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/;return a}]),angular.module("xeditable").factory("editableCombodate",[function(){function a(a,b){if(this.$element=angular.element(a),"INPUT"!=this.$element[0].nodeName)throw"Combodate should be applied to INPUT element";this.defaults={format:"YYYY-MM-DD HH:mm",template:"D / MMM / YYYY   H : mm",value:null,minYear:1970,maxYear:2015,yearDescending:!0,minuteStep:5,secondStep:1,firstItem:"empty",errorClass:null,customClass:"",roundTime:!0,smartDays:!0},this.options=angular.extend({},this.defaults,b),this.init()}return a.prototype={constructor:a,init:function(){if(this.map={day:["D","date"],month:["M","month"],year:["Y","year"],hour:["[Hh]","hours"],minute:["m","minutes"],second:["s","seconds"],ampm:["[Aa]",""]},this.$widget=angular.element('<span class="combodate"></span>').html(this.getTemplate()),this.initCombos(),this.options.smartDays){var a=this;this.$widget.find("select").bind("change",function(b){(angular.element(b.target).hasClass("month")||angular.element(b.target).hasClass("year"))&&a.fillCombo("day")})}this.$widget.find("select").css("width","auto"),this.$element.css("display","none").after(this.$widget),this.setValue(this.$element.val()||this.options.value)},getTemplate:function(){var a=this.options.template,b=this.options.customClass;return angular.forEach(this.map,function(b){b=b[0];var c=new RegExp(b+"+"),d=b.length>1?b.substring(1,2):b;a=a.replace(c,"{"+d+"}")}),a=a.replace(/ /g,"&nbsp;"),angular.forEach(this.map,function(c,d){c=c[0];var e=c.length>1?c.substring(1,2):c;a=a.replace("{"+e+"}",'<select class="'+d+" "+b+'"></select>')}),a},initCombos:function(){for(var a in this.map){var b=this.$widget[0].querySelectorAll("."+a);this["$"+a]=b.length?angular.element(b):null,this.fillCombo(a)}},fillCombo:function(a){var b=this["$"+a];if(b){var c="fill"+a.charAt(0).toUpperCase()+a.slice(1),d=this[c](),e=b.val();b.html("");for(var f=0;f<d.length;f++)b.append('<option value="'+d[f][0]+'">'+d[f][1]+"</option>");b.val(e)}},fillCommon:function(a){var b,c=[];if("name"===this.options.firstItem){b=moment.relativeTime||moment.langData()._relativeTime;var d="function"==typeof b[a]?b[a](1,!0,a,!1):b[a];d=d.split(" ").reverse()[0],c.push(["",d])}else"empty"===this.options.firstItem&&c.push(["",""]);return c},fillDay:function(){var a,b,c=this.fillCommon("d"),d=-1!==this.options.template.indexOf("DD"),e=31;if(this.options.smartDays&&this.$month&&this.$year){var f=parseInt(this.$month.val(),10),g=parseInt(this.$year.val(),10);isNaN(f)||isNaN(g)||(e=moment([g,f]).daysInMonth())}for(b=1;e>=b;b++)a=d?this.leadZero(b):b,c.push([b,a]);return c},fillMonth:function(){var a,b,c=this.fillCommon("M"),d=-1!==this.options.template.indexOf("MMMM"),e=-1!==this.options.template.indexOf("MMM"),f=-1!==this.options.template.indexOf("MM");for(b=0;11>=b;b++)a=d?moment().date(1).month(b).format("MMMM"):e?moment().date(1).month(b).format("MMM"):f?this.leadZero(b+1):b+1,c.push([b,a]);return c},fillYear:function(){var a,b,c=[],d=-1!==this.options.template.indexOf("YYYY");for(b=this.options.maxYear;b>=this.options.minYear;b--)a=d?b:(b+"").substring(2),c[this.options.yearDescending?"push":"unshift"]([b,a]);return c=this.fillCommon("y").concat(c)},fillHour:function(){var a,b,c=this.fillCommon("h"),d=-1!==this.options.template.indexOf("h"),e=(-1!==this.options.template.indexOf("H"),-1!==this.options.template.toLowerCase().indexOf("hh")),f=d?1:0,g=d?12:23;for(b=f;g>=b;b++)a=e?this.leadZero(b):b,c.push([b,a]);return c},fillMinute:function(){var a,b,c=this.fillCommon("m"),d=-1!==this.options.template.indexOf("mm");for(b=0;59>=b;b+=this.options.minuteStep)a=d?this.leadZero(b):b,c.push([b,a]);return c},fillSecond:function(){var a,b,c=this.fillCommon("s"),d=-1!==this.options.template.indexOf("ss");for(b=0;59>=b;b+=this.options.secondStep)a=d?this.leadZero(b):b,c.push([b,a]);return c},fillAmpm:function(){var a=-1!==this.options.template.indexOf("a"),b=(-1!==this.options.template.indexOf("A"),[["am",a?"am":"AM"],["pm",a?"pm":"PM"]]);return b},getValue:function(a){var b,c={},d=this,e=!1;return angular.forEach(this.map,function(a,b){if("ampm"!==b){var f="day"===b?1:0;return c[b]=d["$"+b]?parseInt(d["$"+b].val(),10):f,isNaN(c[b])?(e=!0,!1):void 0}}),e?"":(this.$ampm&&(c.hour=12===c.hour?"am"===this.$ampm.val()?0:12:"am"===this.$ampm.val()?c.hour:c.hour+12),b=moment([c.year,c.month,c.day,c.hour,c.minute,c.second]),this.highlight(b),a=void 0===a?this.options.format:a,null===a?b.isValid()?b:null:b.isValid()?b.format(a):"")},setValue:function(a){function b(a,b){var c={};return angular.forEach(a.children("option"),function(a){var d=angular.element(a).attr("value");if(""!==d){var e=Math.abs(d-b);("undefined"==typeof c.distance||e<c.distance)&&(c={value:d,distance:e})}}),c.value}if(a){var c="string"==typeof a?moment(a,this.options.format,!0):moment(a),d=this,e={};c.isValid()&&(angular.forEach(this.map,function(a,b){"ampm"!==b&&(e[b]=c[a[1]]())}),this.$ampm&&(e.hour>=12?(e.ampm="pm",e.hour>12&&(e.hour-=12)):(e.ampm="am",0===e.hour&&(e.hour=12))),angular.forEach(e,function(a,c){d["$"+c]&&("minute"===c&&d.options.minuteStep>1&&d.options.roundTime&&(a=b(d["$"+c],a)),"second"===c&&d.options.secondStep>1&&d.options.roundTime&&(a=b(d["$"+c],a)),d["$"+c].val(a))}),this.options.smartDays&&this.fillCombo("day"),this.$element.val(c.format(this.options.format)).triggerHandler("change"))}},highlight:function(a){a.isValid()?this.options.errorClass?this.$widget.removeClass(this.options.errorClass):this.$widget.find("select").css("border-color",this.borderColor):this.options.errorClass?this.$widget.addClass(this.options.errorClass):(this.borderColor||(this.borderColor=this.$widget.find("select").css("border-color")),this.$widget.find("select").css("border-color","red"))},leadZero:function(a){return 9>=a?"0"+a:a},destroy:function(){this.$widget.remove(),this.$element.removeData("combodate").show()}},{getInstance:function(b,c){return new a(b,c)}}}]),angular.module("xeditable").factory("editableIcons",function(){var a={"default":{bs2:{ok:"icon-ok icon-white",cancel:"icon-remove"},bs3:{ok:"glyphicon glyphicon-ok",cancel:"glyphicon glyphicon-remove"}},external:{"font-awesome":{ok:"fa fa-check",cancel:"fa fa-times"}}};return a}),angular.module("xeditable").factory("editableThemes",function(){var a={"default":{formTpl:'<form class="editable-wrap"></form>',noformTpl:'<span class="editable-wrap"></span>',controlsTpl:'<span class="editable-controls"></span>',inputTpl:"",errorTpl:'<div class="editable-error" ng-show="$error" ng-bind="$error"></div>',buttonsTpl:'<span class="editable-buttons"></span>',submitTpl:'<button type="submit">save</button>',cancelTpl:'<button type="button" ng-click="$form.$cancel()">cancel</button>'},bs2:{formTpl:'<form class="form-inline editable-wrap" role="form"></form>',noformTpl:'<span class="editable-wrap"></span>',controlsTpl:'<div class="editable-controls controls control-group" ng-class="{\'error\': $error}"></div>',inputTpl:"",errorTpl:'<div class="editable-error help-block" ng-show="$error" ng-bind="$error"></div>',buttonsTpl:'<span class="editable-buttons"></span>',submitTpl:'<button type="submit" class="btn btn-primary"><span></span></button>',cancelTpl:'<button type="button" class="btn" ng-click="$form.$cancel()"><span></span></button>'},bs3:{formTpl:'<form class="form-inline editable-wrap" role="form"></form>',noformTpl:'<span class="editable-wrap"></span>',controlsTpl:'<div class="editable-controls form-group" ng-class="{\'has-error\': $error}"></div>',inputTpl:"",errorTpl:'<div class="editable-error help-block" ng-show="$error" ng-bind="$error"></div>',buttonsTpl:'<span class="editable-buttons"></span>',submitTpl:'<button type="submit" class="btn btn-primary"><span></span></button>',cancelTpl:'<button type="button" class="btn btn-default" ng-click="$form.$cancel()"><span></span></button>',buttonsClass:"",inputClass:"",postrender:function(){switch(this.directiveName){case"editableText":case"editableSelect":case"editableTextarea":case"editableEmail":case"editableTel":case"editableNumber":case"editableUrl":case"editableSearch":case"editableDate":case"editableDatetime":case"editableBsdate":case"editableTime":case"editableMonth":case"editableWeek":if(this.inputEl.addClass("form-control"),this.theme.inputClass){if(this.inputEl.attr("multiple")&&("input-sm"===this.theme.inputClass||"input-lg"===this.theme.inputClass))break;this.inputEl.addClass(this.theme.inputClass)}break;case"editableCheckbox":this.editorEl.addClass("checkbox")}this.buttonsEl&&this.theme.buttonsClass&&this.buttonsEl.find("button").addClass(this.theme.buttonsClass)}}};return a});
/* 
 * Angular JS Multi Select
 * Creates a dropdown-like button with checkboxes. 
 *
 * Project started on: Tue, 14 Jan 2014 - 5:18:02 PM
 * Current version: 4.0.0
 * 
 * Released under the MIT License
 * --------------------------------------------------------------------------------
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Ignatius Steven (https://github.com/isteven)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy 
 * of this software and associated documentation files (the "Software"), to deal 
 * in the Software without restriction, including without limitation the rights 
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is 
 * furnished to do so, subject to the following conditions: 
 *
 * The above copyright notice and this permission notice shall be included in all 
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
 * SOFTWARE.
 * --------------------------------------------------------------------------------
 */

'use strict'

angular.module( 'isteven-multi-select', ['ng'] ).directive( 'istevenMultiSelect' , [ '$sce', '$timeout', '$templateCache', function ( $sce, $timeout, $templateCache ) {
    return {
        restrict:
            'AE',

        scope:
        {
            // models
            inputModel      : '=',
            outputModel     : '=',

            // settings based on attribute
            isDisabled      : '=',

            // callbacks
            onClear         : '&',
            onClose         : '&',
            onSearchChange  : '&',
            onItemClick     : '&',
            onOpen          : '&',
            onReset         : '&',
            onSelectAll     : '&',
            onSelectNone    : '&',

            // i18n
            translation     : '='
        },

        /* 
         * The rest are attributes. They don't need to be parsed / binded, so we can safely access them by value.
         * - buttonLabel, directiveId, helperElements, itemLabel, maxLabels, orientation, selectionMode, minSearchLength,
         *   tickProperty, disableProperty, groupProperty, searchProperty, maxHeight, outputProperties
         */

        templateUrl:
            'isteven-multi-select.htm',

        link: function ( $scope, element, attrs ) {

            $scope.backUp           = [];
            $scope.varButtonLabel   = '';
            $scope.spacingProperty  = '';
            $scope.indexProperty    = '';
            $scope.orientationH     = false;
            $scope.orientationV     = true;
            $scope.filteredModel    = [];
            $scope.inputLabel       = { labelFilter: '' };
            $scope.tabIndex         = 0;
            $scope.lang             = {};
            $scope.helperStatus     = {
                all     : true,
                none    : true,
                reset   : true,
                filter  : true
            };

            var
                prevTabIndex        = 0,
                helperItems         = [],
                helperItemsLength   = 0,
                checkBoxLayer       = '',
                scrolled            = false,
                selectedItems       = [],
                formElements        = [],
                vMinSearchLength    = 0,
                clickedItem         = null

            // v3.0.0
            // clear button clicked
            $scope.clearClicked = function( e ) {
                $scope.inputLabel.labelFilter = '';
                $scope.updateFilter();
                $scope.select( 'clear', e );
            }

            // A little hack so that AngularJS ng-repeat can loop using start and end index like a normal loop
            // http://stackoverflow.com/questions/16824853/way-to-ng-repeat-defined-number-of-times-instead-of-repeating-over-array
            $scope.numberToArray = function( num ) {
                return new Array( num );
            }

            // Call this function when user type on the filter field
            $scope.searchChanged = function() {
                if ( $scope.inputLabel.labelFilter.length < vMinSearchLength && $scope.inputLabel.labelFilter.length > 0 ) {
                    return false;
                }
                $scope.updateFilter();
            }

            $scope.updateFilter = function()
            {
                // we check by looping from end of input-model
                $scope.filteredModel = [];
                var i = 0;

                if ( typeof $scope.inputModel === 'undefined' ) {
                    return false;
                }

                for( i = $scope.inputModel.length - 1; i >= 0; i-- ) {

                    // if it's group end, we push it to filteredModel[];
                    if ( typeof $scope.inputModel[ i ][ attrs.groupProperty ] !== 'undefined' && $scope.inputModel[ i ][ attrs.groupProperty ] === false ) {
                        $scope.filteredModel.push( $scope.inputModel[ i ] );
                    }

                    // if it's data 
                    var gotData = false;
                    if ( typeof $scope.inputModel[ i ][ attrs.groupProperty ] === 'undefined' ) {

                        // If we set the search-key attribute, we use this loop. 
                        if ( typeof attrs.searchProperty !== 'undefined' && attrs.searchProperty !== '' ) {

                            for (var key in $scope.inputModel[ i ]  ) {
                                if (
                                    typeof $scope.inputModel[ i ][ key ] !== 'boolean'
                                    && String( $scope.inputModel[ i ][ key ] ).toUpperCase().indexOf( $scope.inputLabel.labelFilter.toUpperCase() ) >= 0
                                    && attrs.searchProperty.indexOf( key ) > -1
                                ) {
                                    gotData = true;
                                    break;
                                }
                            }
                        }
                        // if there's no search-key attribute, we use this one. Much better on performance.
                        else {
                            for ( var key in $scope.inputModel[ i ]  ) {
                                if (
                                    typeof $scope.inputModel[ i ][ key ] !== 'boolean'
                                    && String( $scope.inputModel[ i ][ key ] ).toUpperCase().indexOf( $scope.inputLabel.labelFilter.toUpperCase() ) >= 0
                                ) {
                                    gotData = true;
                                    break;
                                }
                            }
                        }

                        if ( gotData === true ) {
                            // push
                            $scope.filteredModel.push( $scope.inputModel[ i ] );
                        }
                    }

                    // if it's group start
                    if ( typeof $scope.inputModel[ i ][ attrs.groupProperty ] !== 'undefined' && $scope.inputModel[ i ][ attrs.groupProperty ] === true ) {

                        if ( typeof $scope.filteredModel[ $scope.filteredModel.length - 1 ][ attrs.groupProperty ] !== 'undefined'
                            && $scope.filteredModel[ $scope.filteredModel.length - 1 ][ attrs.groupProperty ] === false ) {
                            $scope.filteredModel.pop();
                        }
                        else {
                            $scope.filteredModel.push( $scope.inputModel[ i ] );
                        }
                    }
                }

                $scope.filteredModel.reverse();

                $timeout( function() {

                    $scope.getFormElements();

                    // Callback: on filter change                      
                    if ( $scope.inputLabel.labelFilter.length > vMinSearchLength ) {

                        var filterObj = [];

                        angular.forEach( $scope.filteredModel, function( value, key ) {
                            if ( typeof value !== 'undefined' ) {
                                if ( typeof value[ attrs.groupProperty ] === 'undefined' ) {
                                    var tempObj = angular.copy( value );
                                    var index = filterObj.push( tempObj );
                                    delete filterObj[ index - 1 ][ $scope.indexProperty ];
                                    delete filterObj[ index - 1 ][ $scope.spacingProperty ];
                                }
                            }
                        });

                        $scope.onSearchChange({
                            data:
                            {
                                keyword: $scope.inputLabel.labelFilter,
                                result: filterObj
                            }
                        });
                    }
                },0);
            };

            // List all the input elements. We need this for our keyboard navigation.
            // This function will be called everytime the filter is updated. 
            // Depending on the size of filtered mode, might not good for performance, but oh well..
            $scope.getFormElements = function() {
                formElements = [];

                var
                    selectButtons   = [],
                    inputField      = [],
                    checkboxes      = [],
                    clearButton     = [];

                // If available, then get select all, select none, and reset buttons
                if ( $scope.helperStatus.all || $scope.helperStatus.none || $scope.helperStatus.reset ) {
                    selectButtons = element.children().children().next().children().children()[ 0 ].getElementsByTagName( 'button' );
                    // If available, then get the search box and the clear button
                    if ( $scope.helperStatus.filter ) {
                        // Get helper - search and clear button. 
                        inputField =    element.children().children().next().children().children().next()[ 0 ].getElementsByTagName( 'input' );
                        clearButton =   element.children().children().next().children().children().next()[ 0 ].getElementsByTagName( 'button' );
                    }
                }
                else {
                    if ( $scope.helperStatus.filter ) {
                        // Get helper - search and clear button. 
                        inputField =    element.children().children().next().children().children()[ 0 ].getElementsByTagName( 'input' );
                        clearButton =   element.children().children().next().children().children()[ 0 ].getElementsByTagName( 'button' );
                    }
                }

                // Get checkboxes
                if ( !$scope.helperStatus.all && !$scope.helperStatus.none && !$scope.helperStatus.reset && !$scope.helperStatus.filter ) {
                    checkboxes = element.children().children().next()[ 0 ].getElementsByTagName( 'input' );
                }
                else {
                    checkboxes = element.children().children().next().children().next()[ 0 ].getElementsByTagName( 'input' );
                }

                // Push them into global array formElements[] 
                for ( var i = 0; i < selectButtons.length ; i++ )   { formElements.push( selectButtons[ i ] );  }
                for ( var i = 0; i < inputField.length ; i++ )      { formElements.push( inputField[ i ] );     }
                for ( var i = 0; i < clearButton.length ; i++ )     { formElements.push( clearButton[ i ] );    }
                for ( var i = 0; i < checkboxes.length ; i++ )      { formElements.push( checkboxes[ i ] );     }
            }

            // check if an item has attrs.groupProperty (be it true or false)
            $scope.isGroupMarker = function( item , type ) {
                if ( typeof item[ attrs.groupProperty ] !== 'undefined' && item[ attrs.groupProperty ] === type ) return true;
                return false;
            }

            $scope.removeGroupEndMarker = function( item ) {
                if ( typeof item[ attrs.groupProperty ] !== 'undefined' && item[ attrs.groupProperty ] === false ) return false;
                return true;
            }

            // call this function when an item is clicked
            $scope.syncItems = function( item, e, ng_repeat_index ) {

                e.preventDefault();
                e.stopPropagation();

                // if the directive is globaly disabled, do nothing
                if ( typeof attrs.disableProperty !== 'undefined' && item[ attrs.disableProperty ] === true ) {
                    return false;
                }

                // if item is disabled, do nothing
                if ( typeof attrs.isDisabled !== 'undefined' && $scope.isDisabled === true ) {
                    return false;
                }

                // if end group marker is clicked, do nothing
                if ( typeof item[ attrs.groupProperty ] !== 'undefined' && item[ attrs.groupProperty ] === false ) {
                    return false;
                }

                var index = $scope.filteredModel.indexOf( item );

                // if the start of group marker is clicked ( only for multiple selection! )
                // how it works:
                // - if, in a group, there are items which are not selected, then they all will be selected
                // - if, in a group, all items are selected, then they all will be de-selected                
                if ( typeof item[ attrs.groupProperty ] !== 'undefined' && item[ attrs.groupProperty ] === true ) {

                    // this is only for multiple selection, so if selection mode is single, do nothing
                    if ( typeof attrs.selectionMode !== 'undefined' && attrs.selectionMode.toUpperCase() === 'SINGLE' ) {
                        return false;
                    }

                    var i,j,k;
                    var startIndex = 0;
                    var endIndex = $scope.filteredModel.length - 1;
                    var tempArr = [];

                    // nest level is to mark the depth of the group.
                    // when you get into a group (start group marker), nestLevel++
                    // when you exit a group (end group marker), nextLevel--
                    var nestLevel = 0;

                    // we loop throughout the filtered model (not whole model)
                    for( i = index ; i < $scope.filteredModel.length ; i++) {

                        // this break will be executed when we're done processing each group
                        if ( nestLevel === 0 && i > index )
                        {
                            break;
                        }

                        if ( typeof $scope.filteredModel[ i ][ attrs.groupProperty ] !== 'undefined' && $scope.filteredModel[ i ][ attrs.groupProperty ] === true ) {

                            // To cater multi level grouping
                            if ( tempArr.length === 0 ) {
                                startIndex = i + 1;
                            }
                            nestLevel = nestLevel + 1;
                        }

                        // if group end
                        else if ( typeof $scope.filteredModel[ i ][ attrs.groupProperty ] !== 'undefined' && $scope.filteredModel[ i ][ attrs.groupProperty ] === false ) {

                            nestLevel = nestLevel - 1;

                            // cek if all are ticked or not                            
                            if ( tempArr.length > 0 && nestLevel === 0 ) {

                                var allTicked = true;

                                endIndex = i;

                                for ( j = 0; j < tempArr.length ; j++ ) {
                                    if ( typeof tempArr[ j ][ $scope.tickProperty ] !== 'undefined' &&  tempArr[ j ][ $scope.tickProperty ] === false ) {
                                        allTicked = false;
                                        break;
                                    }
                                }

                                if ( allTicked === true ) {
                                    for ( j = startIndex; j <= endIndex ; j++ ) {
                                        if ( typeof $scope.filteredModel[ j ][ attrs.groupProperty ] === 'undefined' ) {
                                            if ( typeof attrs.disableProperty === 'undefined' ) {
                                                $scope.filteredModel[ j ][ $scope.tickProperty ] = false;
                                                // we refresh input model as well
                                                inputModelIndex = $scope.filteredModel[ j ][ $scope.indexProperty ];
                                                $scope.inputModel[ inputModelIndex ][ $scope.tickProperty ] = false;
                                            }
                                            else if ( $scope.filteredModel[ j ][ attrs.disableProperty ] !== true ) {
                                                $scope.filteredModel[ j ][ $scope.tickProperty ] = false;
                                                // we refresh input model as well
                                                inputModelIndex = $scope.filteredModel[ j ][ $scope.indexProperty ];
                                                $scope.inputModel[ inputModelIndex ][ $scope.tickProperty ] = false;
                                            }
                                        }
                                    }
                                }

                                else {
                                    for ( j = startIndex; j <= endIndex ; j++ ) {
                                        if ( typeof $scope.filteredModel[ j ][ attrs.groupProperty ] === 'undefined' ) {
                                            if ( typeof attrs.disableProperty === 'undefined' ) {
                                                $scope.filteredModel[ j ][ $scope.tickProperty ] = true;
                                                // we refresh input model as well
                                                inputModelIndex = $scope.filteredModel[ j ][ $scope.indexProperty ];
                                                $scope.inputModel[ inputModelIndex ][ $scope.tickProperty ] = true;

                                            }
                                            else if ( $scope.filteredModel[ j ][ attrs.disableProperty ] !== true ) {
                                                $scope.filteredModel[ j ][ $scope.tickProperty ] = true;
                                                // we refresh input model as well
                                                inputModelIndex = $scope.filteredModel[ j ][ $scope.indexProperty ];
                                                $scope.inputModel[ inputModelIndex ][ $scope.tickProperty ] = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        // if data
                        else {
                            tempArr.push( $scope.filteredModel[ i ] );
                        }
                    }
                }

                // if an item (not group marker) is clicked
                else {

                    // If it's single selection mode
                    if ( typeof attrs.selectionMode !== 'undefined' && attrs.selectionMode.toUpperCase() === 'SINGLE' ) {

                        // first, set everything to false
                        for( i=0 ; i < $scope.filteredModel.length ; i++) {
                            $scope.filteredModel[ i ][ $scope.tickProperty ] = false;
                        }
                        for( i=0 ; i < $scope.inputModel.length ; i++) {
                            $scope.inputModel[ i ][ $scope.tickProperty ] = false;
                        }

                        // then set the clicked item to true
                        $scope.filteredModel[ index ][ $scope.tickProperty ] = true;
                    }

                    // Multiple
                    else {
                        $scope.filteredModel[ index ][ $scope.tickProperty ]   = !$scope.filteredModel[ index ][ $scope.tickProperty ];
                    }

                    // we refresh input model as well
                    var inputModelIndex = $scope.filteredModel[ index ][ $scope.indexProperty ];
                    $scope.inputModel[ inputModelIndex ][ $scope.tickProperty ] = $scope.filteredModel[ index ][ $scope.tickProperty ];
                }

                // we execute the callback function here
                clickedItem = angular.copy( item );
                if ( clickedItem !== null ) {
                    $timeout( function() {
                        delete clickedItem[ $scope.indexProperty ];
                        delete clickedItem[ $scope.spacingProperty ];
                        $scope.onItemClick( { data: clickedItem } );
                        clickedItem = null;
                    }, 0 );
                }

                $scope.refreshOutputModel();
                $scope.refreshButton();

                // We update the index here
                prevTabIndex = $scope.tabIndex;
                $scope.tabIndex = ng_repeat_index + helperItemsLength;

                // Set focus on the hidden checkbox 
                e.target.focus();

                // set & remove CSS style
                $scope.removeFocusStyle( prevTabIndex );
                $scope.setFocusStyle( $scope.tabIndex );

                if ( typeof attrs.selectionMode !== 'undefined' && attrs.selectionMode.toUpperCase() === 'SINGLE' ) {
                    // on single selection mode, we then hide the checkbox layer
                    $scope.toggleCheckboxes( e );
                }
            }

            // update $scope.outputModel
            $scope.refreshOutputModel = function() {

                $scope.outputModel  = [];
                var
                    outputProps     = [],
                    tempObj         = {};

                // v4.0.0
                if ( typeof attrs.outputProperties !== 'undefined' ) {
                    outputProps = attrs.outputProperties.split(' ');
                    angular.forEach( $scope.inputModel, function( value, key ) {
                        if (
                            typeof value !== 'undefined'
                            && typeof value[ attrs.groupProperty ] === 'undefined'
                            && value[ $scope.tickProperty ] === true
                        ) {
                            tempObj         = {};
                            angular.forEach( value, function( value1, key1 ) {
                                if ( outputProps.indexOf( key1 ) > -1 ) {
                                    tempObj[ key1 ] = value1;
                                }
                            });
                            var index = $scope.outputModel.push( tempObj );
                            delete $scope.outputModel[ index - 1 ][ $scope.indexProperty ];
                            delete $scope.outputModel[ index - 1 ][ $scope.spacingProperty ];
                        }
                    });
                }
                else {
                    angular.forEach( $scope.inputModel, function( value, key ) {
                        if (
                            typeof value !== 'undefined'
                            && typeof value[ attrs.groupProperty ] === 'undefined'
                            && value[ $scope.tickProperty ] === true
                        ) {
                            var temp = angular.copy( value );
                            var index = $scope.outputModel.push( temp );
                            delete $scope.outputModel[ index - 1 ][ $scope.indexProperty ];
                            delete $scope.outputModel[ index - 1 ][ $scope.spacingProperty ];
                        }
                    });
                }
            }

            // refresh button label
            $scope.refreshButton = function() {

                $scope.varButtonLabel   = '';
                var ctr                 = 0;

                // refresh button label...
                if ( $scope.outputModel.length === 0 ) {
                    // https://github.com/isteven/angular-multi-select/pull/19                    
                    $scope.varButtonLabel = $scope.lang.nothingSelected;
                }
                else {
                    var tempMaxLabels = $scope.outputModel.length;
                    if ( typeof attrs.maxLabels !== 'undefined' && attrs.maxLabels !== '' ) {
                        tempMaxLabels = attrs.maxLabels;
                    }

                    // if max amount of labels displayed..
                    if ( $scope.outputModel.length > tempMaxLabels ) {
                        $scope.more = true;
                    }
                    else {
                        $scope.more = false;
                    }

                    angular.forEach( $scope.inputModel, function( value, key ) {
                        if ( typeof value !== 'undefined' && value[ attrs.tickProperty ] === true ) {
                            if ( ctr < tempMaxLabels ) {
                                $scope.varButtonLabel += ( $scope.varButtonLabel.length > 0 ? '</div>, <div class="buttonLabel">' : '<div class="buttonLabel">') + $scope.writeLabel( value, 'buttonLabel' );
                            }
                            ctr++;
                        }
                    });

                    if ( $scope.more === true ) {
                        // https://github.com/isteven/angular-multi-select/pull/16
                        if (tempMaxLabels > 0) {
                            $scope.varButtonLabel += ', ... ';
                        }
                        $scope.varButtonLabel += '(' + $scope.outputModel.length + ')';
                    }
                }
                $scope.varButtonLabel = $sce.trustAsHtml( $scope.varButtonLabel + '<span class="caret"></span>' );
            }

            // Check if a checkbox is disabled or enabled. It will check the granular control (disableProperty) and global control (isDisabled)
            // Take note that the granular control has higher priority.
            $scope.itemIsDisabled = function( item ) {

                if ( typeof attrs.disableProperty !== 'undefined' && item[ attrs.disableProperty ] === true ) {
                    return true;
                }
                else {
                    if ( $scope.isDisabled === true ) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }

            }

            // A simple function to parse the item label settings. Used on the buttons and checkbox labels.
            $scope.writeLabel = function( item, type ) {

                // type is either 'itemLabel' or 'buttonLabel'
                var temp    = attrs[ type ].split( ' ' );
                var label   = '';

                angular.forEach( temp, function( value, key ) {
                    item[ value ] && ( label += '&nbsp;' + value.split( '.' ).reduce( function( prev, current ) {
                        return prev[ current ];
                    }, item ));
                });

                if ( type.toUpperCase() === 'BUTTONLABEL' ) {
                    return label;
                }
                return $sce.trustAsHtml( label );
            }

            // UI operations to show/hide checkboxes based on click event..
            $scope.toggleCheckboxes = function( e ) {

                // We grab the button
                var clickedEl = element.children()[0];

                // Just to make sure.. had a bug where key events were recorded twice
                angular.element( document ).off( 'click', $scope.externalClickListener );
                angular.element( document ).off( 'keydown', $scope.keyboardListener );

                // The idea below was taken from another multi-select directive - https://github.com/amitava82/angular-multiselect 
                // His version is awesome if you need a more simple multi-select approach.                                

                // close
                if ( angular.element( checkBoxLayer ).hasClass( 'show' )) {

                    angular.element( checkBoxLayer ).removeClass( 'show' );
                    angular.element( clickedEl ).removeClass( 'buttonClicked' );
                    angular.element( document ).off( 'click', $scope.externalClickListener );
                    angular.element( document ).off( 'keydown', $scope.keyboardListener );

                    // clear the focused element;
                    $scope.removeFocusStyle( $scope.tabIndex );
                    if ( typeof formElements[ $scope.tabIndex ] !== 'undefined' ) {
                        formElements[ $scope.tabIndex ].blur();
                    }

                    // close callback
                    $timeout( function() {
                        $scope.onClose();
                    }, 0 );

                    // set focus on button again
                    element.children().children()[ 0 ].focus();
                }
                // open
                else
                {
                    // clear filter
                    $scope.inputLabel.labelFilter = '';
                    $scope.updateFilter();

                    helperItems = [];
                    helperItemsLength = 0;

                    angular.element( checkBoxLayer ).addClass( 'show' );
                    angular.element( clickedEl ).addClass( 'buttonClicked' );

                    // Attach change event listener on the input filter. 
                    // We need this because ng-change is apparently not an event listener.                    
                    angular.element( document ).on( 'click', $scope.externalClickListener );
                    angular.element( document ).on( 'keydown', $scope.keyboardListener );

                    // to get the initial tab index, depending on how many helper elements we have. 
                    // priority is to always focus it on the input filter                                                                
                    $scope.getFormElements();
                    $scope.tabIndex = 0;

                    var helperContainer = angular.element( element[ 0 ].querySelector( '.helperContainer' ) )[0];

                    if ( typeof helperContainer !== 'undefined' ) {
                        for ( var i = 0; i < helperContainer.getElementsByTagName( 'BUTTON' ).length ; i++ ) {
                            helperItems[ i ] = helperContainer.getElementsByTagName( 'BUTTON' )[ i ];
                        }
                        helperItemsLength = helperItems.length + helperContainer.getElementsByTagName( 'INPUT' ).length;
                    }

                    // focus on the filter element on open. 
                    if ( element[ 0 ].querySelector( '.inputFilter' ) ) {
                        element[ 0 ].querySelector( '.inputFilter' ).focus();
                        $scope.tabIndex = $scope.tabIndex + helperItemsLength - 2;
                        // blur button in vain
                        angular.element( element ).children()[ 0 ].blur();
                    }
                    // if there's no filter then just focus on the first checkbox item
                    else {
                        if ( !$scope.isDisabled ) {
                            $scope.tabIndex = $scope.tabIndex + helperItemsLength;
                            if ( $scope.inputModel.length > 0 ) {
                                formElements[ $scope.tabIndex ].focus();
                                $scope.setFocusStyle( $scope.tabIndex );
                                // blur button in vain
                                angular.element( element ).children()[ 0 ].blur();
                            }
                        }
                    }

                    // open callback
                    $scope.onOpen();
                }
            }

            // handle clicks outside the button / multi select layer
            $scope.externalClickListener = function( e ) {

                var targetsArr = element.find( e.target.tagName );
                for (var i = 0; i < targetsArr.length; i++) {
                    if ( e.target == targetsArr[i] ) {
                        return;
                    }
                }

                angular.element( checkBoxLayer.previousSibling ).removeClass( 'buttonClicked' );
                angular.element( checkBoxLayer ).removeClass( 'show' );
                angular.element( document ).off( 'click', $scope.externalClickListener );
                angular.element( document ).off( 'keydown', $scope.keyboardListener );

                // close callback                
                $timeout( function() {
                    $scope.onClose();
                }, 0 );

                // set focus on button again
                element.children().children()[ 0 ].focus();
            }

            // select All / select None / reset buttons
            $scope.select = function( type, e ) {

                var helperIndex = helperItems.indexOf( e.target );
                $scope.tabIndex = helperIndex;

                switch( type.toUpperCase() ) {
                    case 'ALL':
                        angular.forEach( $scope.filteredModel, function( value, key ) {
                            if ( typeof value !== 'undefined' && value[ attrs.disableProperty ] !== true ) {
                                if ( typeof value[ attrs.groupProperty ] === 'undefined' ) {
                                    value[ $scope.tickProperty ] = true;
                                }
                            }
                        });
                        $scope.refreshOutputModel();
                        $scope.refreshButton();
                        $scope.onSelectAll();
                        break;
                    case 'NONE':
                        angular.forEach( $scope.filteredModel, function( value, key ) {
                            if ( typeof value !== 'undefined' && value[ attrs.disableProperty ] !== true ) {
                                if ( typeof value[ attrs.groupProperty ] === 'undefined' ) {
                                    value[ $scope.tickProperty ] = false;
                                }
                            }
                        });
                        $scope.refreshOutputModel();
                        $scope.refreshButton();
                        $scope.onSelectNone();
                        break;
                    case 'RESET':
                        angular.forEach( $scope.filteredModel, function( value, key ) {
                            if ( typeof value[ attrs.groupProperty ] === 'undefined' && typeof value !== 'undefined' && value[ attrs.disableProperty ] !== true ) {
                                var temp = value[ $scope.indexProperty ];
                                value[ $scope.tickProperty ] = $scope.backUp[ temp ][ $scope.tickProperty ];
                            }
                        });
                        $scope.refreshOutputModel();
                        $scope.refreshButton();
                        $scope.onReset();
                        break;
                    case 'CLEAR':
                        $scope.tabIndex = $scope.tabIndex + 1;
                        $scope.onClear();
                        break;
                    case 'FILTER':
                        $scope.tabIndex = helperItems.length - 1;
                        break;
                    default:
                }
            }

            // just to create a random variable name                
            function genRandomString( length ) {
                var possible    = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
                var temp        = '';
                for( var i=0; i < length; i++ ) {
                    temp += possible.charAt( Math.floor( Math.random() * possible.length ));
                }
                return temp;
            }

            // count leading spaces
            $scope.prepareGrouping = function() {
                var spacing     = 0;
                angular.forEach( $scope.filteredModel, function( value, key ) {
                    value[ $scope.spacingProperty ] = spacing;
                    if ( value[ attrs.groupProperty ] === true ) {
                        spacing+=2;
                    }
                    else if ( value[ attrs.groupProperty ] === false ) {
                        spacing-=2;
                    }
                });
            }

            // prepare original index
            $scope.prepareIndex = function() {
                var ctr = 0;
                angular.forEach( $scope.filteredModel, function( value, key ) {
                    value[ $scope.indexProperty ] = ctr;
                    ctr++;
                });
            }

            // navigate using up and down arrow
            $scope.keyboardListener = function( e ) {

                var key = e.keyCode ? e.keyCode : e.which;
                var isNavigationKey = false;

                // ESC key (close)
                if ( key === 27 ) {
                    e.preventDefault();
                    e.stopPropagation();
                    $scope.toggleCheckboxes( e );
                }


                // next element ( tab, down & right key )                    
                else if ( key === 40 || key === 39 || ( !e.shiftKey && key == 9 ) ) {

                    isNavigationKey = true;
                    prevTabIndex = $scope.tabIndex;
                    $scope.tabIndex++;
                    if ( $scope.tabIndex > formElements.length - 1 ) {
                        $scope.tabIndex = 0;
                        prevTabIndex = formElements.length - 1;
                    }
                    while ( formElements[ $scope.tabIndex ].disabled === true ) {
                        $scope.tabIndex++;
                        if ( $scope.tabIndex > formElements.length - 1 ) {
                            $scope.tabIndex = 0;
                        }
                        if ( $scope.tabIndex === prevTabIndex ) {
                            break;
                        }
                    }
                }

                // prev element ( shift+tab, up & left key )
                else if ( key === 38 || key === 37 || ( e.shiftKey && key == 9 ) ) {
                    isNavigationKey = true;
                    prevTabIndex = $scope.tabIndex;
                    $scope.tabIndex--;
                    if ( $scope.tabIndex < 0 ) {
                        $scope.tabIndex = formElements.length - 1;
                        prevTabIndex = 0;
                    }
                    while ( formElements[ $scope.tabIndex ].disabled === true ) {
                        $scope.tabIndex--;
                        if ( $scope.tabIndex === prevTabIndex ) {
                            break;
                        }
                        if ( $scope.tabIndex < 0 ) {
                            $scope.tabIndex = formElements.length - 1;
                        }
                    }
                }

                if ( isNavigationKey === true ) {

                    e.preventDefault();

                    // set focus on the checkbox                    
                    formElements[ $scope.tabIndex ].focus();
                    var actEl = document.activeElement;

                    if ( actEl.type.toUpperCase() === 'CHECKBOX' ) {
                        $scope.setFocusStyle( $scope.tabIndex );
                        $scope.removeFocusStyle( prevTabIndex );
                    }
                    else {
                        $scope.removeFocusStyle( prevTabIndex );
                        $scope.removeFocusStyle( helperItemsLength );
                        $scope.removeFocusStyle( formElements.length - 1 );
                    }
                }

                isNavigationKey = false;
            }

            // set (add) CSS style on selected row
            $scope.setFocusStyle = function( tabIndex ) {
                angular.element( formElements[ tabIndex ] ).parent().parent().parent().addClass( 'multiSelectFocus' );
            }

            // remove CSS style on selected row
            $scope.removeFocusStyle = function( tabIndex ) {
                angular.element( formElements[ tabIndex ] ).parent().parent().parent().removeClass( 'multiSelectFocus' );
            }

            /*********************
             *********************
             *
             * 1) Initializations
             *
             *********************
             *********************/

                // attrs to $scope - attrs-$scope - attrs - $scope
                // Copy some properties that will be used on the template. They need to be in the $scope.
            $scope.groupProperty    = attrs.groupProperty;
            $scope.tickProperty     = attrs.tickProperty;
            $scope.directiveId      = attrs.directiveId;

            // Unfortunately I need to add these grouping properties into the input model
            var tempStr = genRandomString( 5 );
            $scope.indexProperty = 'idx_' + tempStr;
            $scope.spacingProperty = 'spc_' + tempStr;

            // set orientation css            
            if ( typeof attrs.orientation !== 'undefined' ) {

                if ( attrs.orientation.toUpperCase() === 'HORIZONTAL' ) {
                    $scope.orientationH = true;
                    $scope.orientationV = false;
                }
                else
                {
                    $scope.orientationH = false;
                    $scope.orientationV = true;
                }
            }

            // get elements required for DOM operation
            checkBoxLayer = element.children().children().next()[0];

            // set max-height property if provided
            if ( typeof attrs.maxHeight !== 'undefined' ) {
                var layer = element.children().children().children()[0];
                angular.element( layer ).attr( "style", "height:" + attrs.maxHeight + "; overflow-y:scroll;" );
            }

            // some flags for easier checking            
            for ( var property in $scope.helperStatus ) {
                if ( $scope.helperStatus.hasOwnProperty( property )) {
                    if (
                        typeof attrs.helperElements !== 'undefined'
                        && attrs.helperElements.toUpperCase().indexOf( property.toUpperCase() ) === -1
                    ) {
                        $scope.helperStatus[ property ] = false;
                    }
                }
            }
            if ( typeof attrs.selectionMode !== 'undefined' && attrs.selectionMode.toUpperCase() === 'SINGLE' )  {
                $scope.helperStatus[ 'all' ] = false;
                $scope.helperStatus[ 'none' ] = false;
            }

            // helper button icons.. I guess you can use html tag here if you want to. 
            $scope.icon        = {};
            $scope.icon.selectAll  = '&#10003;';    // a tick icon
            $scope.icon.selectNone = '&times;';     // x icon
            $scope.icon.reset      = '&#8630;';     // undo icon            
            // this one is for the selected items
            $scope.icon.tickMark   = '&#10003;';    // a tick icon 

            // configurable button labels                       
            if ( typeof attrs.translation !== 'undefined' ) {
                $scope.lang.selectAll       = $sce.trustAsHtml( $scope.icon.selectAll  + '&nbsp;&nbsp;' + $scope.translation.selectAll );
                $scope.lang.selectNone      = $sce.trustAsHtml( $scope.icon.selectNone + '&nbsp;&nbsp;' + $scope.translation.selectNone );
                $scope.lang.reset           = $sce.trustAsHtml( $scope.icon.reset      + '&nbsp;&nbsp;' + $scope.translation.reset );
                $scope.lang.search          = $scope.translation.search;
                $scope.lang.nothingSelected = $sce.trustAsHtml( $scope.translation.nothingSelected );
            }
            else {
                $scope.lang.selectAll       = $sce.trustAsHtml( $scope.icon.selectAll  + '&nbsp;&nbsp;Select All' );
                $scope.lang.selectNone      = $sce.trustAsHtml( $scope.icon.selectNone + '&nbsp;&nbsp;Select None' );
                $scope.lang.reset           = $sce.trustAsHtml( $scope.icon.reset      + '&nbsp;&nbsp;Reset' );
                $scope.lang.search          = 'Search...';
                $scope.lang.nothingSelected = 'None Selected';
            }
            $scope.icon.tickMark = $sce.trustAsHtml( $scope.icon.tickMark );

            // min length of keyword to trigger the filter function
            if ( typeof attrs.MinSearchLength !== 'undefined' && parseInt( attrs.MinSearchLength ) > 0 ) {
                vMinSearchLength = Math.floor( parseInt( attrs.MinSearchLength ) );
            }

            /*******************************************************
             *******************************************************
             *
             * 2) Logic starts here, initiated by watch 1 & watch 2
             *
             *******************************************************
             *******************************************************/

                // watch1, for changes in input model property
                // updates multi-select when user select/deselect a single checkbox programatically
                // https://github.com/isteven/angular-multi-select/issues/8            
            $scope.$watch( 'inputModel' , function( newVal ) {
                if ( newVal ) {
                    $scope.refreshOutputModel();
                    $scope.refreshButton();
                }
            }, true );

            // watch2 for changes in input model as a whole
            // this on updates the multi-select when a user load a whole new input-model. We also update the $scope.backUp variable
            $scope.$watch( 'inputModel' , function( newVal ) {
                if ( newVal ) {
                    $scope.backUp = angular.copy( $scope.inputModel );
                    $scope.updateFilter();
                    $scope.prepareGrouping();
                    $scope.prepareIndex();
                    $scope.refreshOutputModel();
                    $scope.refreshButton();
                }
            });

            // watch for changes in directive state (disabled or enabled)
            $scope.$watch( 'isDisabled' , function( newVal ) {
                $scope.isDisabled = newVal;
            });

            // this is for touch enabled devices. We don't want to hide checkboxes on scroll. 
            var onTouchStart = function( e ) {
                $scope.$apply( function() {
                    $scope.scrolled = false;
                });
            };
            angular.element( document ).bind( 'touchstart', onTouchStart);
            var onTouchMove = function( e ) {
                $scope.$apply( function() {
                    $scope.scrolled = true;
                });
            };
            angular.element( document ).bind( 'touchmove', onTouchMove);

            // unbind document events to prevent memory leaks
            $scope.$on( '$destroy', function () {
                angular.element( document ).unbind( 'touchstart', onTouchStart);
                angular.element( document ).unbind( 'touchmove', onTouchMove);
            });
        }
    }
}]).run( [ '$templateCache' , function( $templateCache ) {
    var template =
        '<span class="multiSelect inlineBlock">' +
            // main button
        '<button id="{{directiveId}}" type="button"' +
        'ng-click="toggleCheckboxes( $event ); refreshSelectedItems(); refreshButton(); prepareGrouping; prepareIndex();"' +
        'ng-bind-html="varButtonLabel"' +
        'ng-disabled="disable-button"' +
        '>' +
        '</button>' +
            // overlay layer
        '<div class="checkboxLayer">' +
            // container of the helper elements
        '<div class="helperContainer" ng-if="helperStatus.filter || helperStatus.all || helperStatus.none || helperStatus.reset ">' +
            // container of the first 3 buttons, select all, none and reset
        '<div class="line" ng-if="helperStatus.all || helperStatus.none || helperStatus.reset ">' +
            // select all
        '<button type="button" class="helperButton"' +
        'ng-disabled="isDisabled"' +
        'ng-if="helperStatus.all"' +
        'ng-click="select( \'all\', $event );"' +
        'ng-bind-html="lang.selectAll">' +
        '</button>'+
            // select none
        '<button type="button" class="helperButton"' +
        'ng-disabled="isDisabled"' +
        'ng-if="helperStatus.none"' +
        'ng-click="select( \'none\', $event );"' +
        'ng-bind-html="lang.selectNone">' +
        '</button>'+
            // reset
        '<button type="button" class="helperButton reset"' +
        'ng-disabled="isDisabled"' +
        'ng-if="helperStatus.reset"' +
        'ng-click="select( \'reset\', $event );"' +
        'ng-bind-html="lang.reset">'+
        '</button>' +
        '</div>' +
            // the search box
        '<div class="line" style="position:relative" ng-if="helperStatus.filter">'+
            // textfield                
        '<input placeholder="{{lang.search}}" type="text"' +
        'ng-click="select( \'filter\', $event )" '+
        'ng-model="inputLabel.labelFilter" '+
        'ng-change="searchChanged()" class="inputFilter"'+
        '/>'+
            // clear button
        '<button type="button" class="clearButton" ng-click="clearClicked( $event )" >×</button> '+
        '</div> '+
        '</div> '+
            // selection items
        '<div class="checkBoxContainer">'+
        '<div '+
        'ng-repeat="item in filteredModel | filter:removeGroupEndMarker" class="multiSelectItem"'+
        'ng-class="{selected: item[ tickProperty ], horizontal: orientationH, vertical: orientationV, multiSelectGroup:item[ groupProperty ], disabled:itemIsDisabled( item )}"'+
        'ng-click="syncItems( item, $event, $index );" '+
        'ng-mouseleave="removeFocusStyle( tabIndex );"> '+
            // this is the spacing for grouped items
        '<div class="acol" ng-if="item[ spacingProperty ] > 0" ng-repeat="i in numberToArray( item[ spacingProperty ] ) track by $index">'+
        '</div>  '+
        '<div class="acol">'+
        '<label>'+
            // input, so that it can accept focus on keyboard click
        '<input class="checkbox focusable" type="checkbox" '+
        'ng-disabled="itemIsDisabled( item )" '+
        'ng-checked="item[ tickProperty ]" '+
        'ng-click="syncItems( item, $event, $index )" />'+
            // item label using ng-bind-hteml
        '<span '+
        'ng-class="{disabled:itemIsDisabled( item )}" '+
        'ng-bind-html="writeLabel( item, \'itemLabel\' )">'+
        '</span>'+
        '</label>'+
        '</div>'+
            // the tick/check mark
        '<span class="tickMark" ng-if="item[ groupProperty ] !== true && item[ tickProperty ] === true" ng-bind-html="icon.tickMark"></span>'+
        '</div>'+
        '</div>'+
        '</div>'+
        '</span>';
    $templateCache.put( 'isteven-multi-select.htm' , template );
}]); 

/*! 9.0.8 */
!window.XMLHttpRequest||window.FileAPI&&FileAPI.shouldLoad||(window.XMLHttpRequest.prototype.setRequestHeader=function(a){return function(b,c){if("__setXHR_"===b){var d=c(this);d instanceof Function&&d(this)}else a.apply(this,arguments)}}(window.XMLHttpRequest.prototype.setRequestHeader));var ngFileUpload=angular.module("ngFileUpload",[]);ngFileUpload.version="9.0.8",ngFileUpload.service("UploadBase",["$http","$q","$timeout",function(a,b,c){function d(d){function g(a){j.notify&&j.notify(a),k.progressFunc&&c(function(){k.progressFunc(a)})}function h(a){return null!=d._start&&f?{loaded:a.loaded+d._start,total:d._file.size,type:a.type,config:d,lengthComputable:!0,target:a.target}:a}function i(){a(d).then(function(a){f&&d._chunkSize&&!d._finished?(g({loaded:d._end,total:d._file.size,config:d,type:"progress"}),e.upload(d)):(d._finished&&delete d._finished,j.resolve(a))},function(a){j.reject(a)},function(a){j.notify(a)})}d.method=d.method||"POST",d.headers=d.headers||{};var j=d._deferred=d._deferred||b.defer(),k=j.promise;return d.disableProgress||(d.headers.__setXHR_=function(){return function(a){a&&a instanceof XMLHttpRequest&&(d.__XHR=a,d.xhrFn&&d.xhrFn(a),a.upload.addEventListener("progress",function(a){a.config=d,g(h(a))},!1),a.upload.addEventListener("load",function(a){a.lengthComputable&&(a.config=d,g(h(a)))},!1))}}),f?d._chunkSize&&d._end&&!d._finished?(d._start=d._end,d._end+=d._chunkSize,i()):d.resumeSizeUrl?a.get(d.resumeSizeUrl).then(function(a){d._start=d.resumeSizeResponseReader?d.resumeSizeResponseReader(a.data):parseInt((null==a.data.size?a.data:a.data.size).toString()),d._chunkSize&&(d._end=d._start+d._chunkSize),i()},function(a){throw a}):d.resumeSize?d.resumeSize().then(function(a){d._start=a,i()},function(a){throw a}):i():i(),k.success=function(a){return k.then(function(b){a(b.data,b.status,b.headers,d)}),k},k.error=function(a){return k.then(null,function(b){a(b.data,b.status,b.headers,d)}),k},k.progress=function(a){return k.progressFunc=a,k.then(null,null,function(b){a(b)}),k},k.abort=k.pause=function(){return d.__XHR&&c(function(){d.__XHR.abort()}),k},k.xhr=function(a){return d.xhrFn=function(b){return function(){b&&b.apply(k,arguments),a.apply(k,arguments)}}(d.xhrFn),k},k}var e=this;this.isResumeSupported=function(){return window.Blob&&Blob instanceof Function&&(new Blob).slice};var f=this.isResumeSupported();this.rename=function(a,b){return a.ngfName=b,a},this.jsonBlob=function(a){var b=new Blob([a],{type:"application/json"});return b._ngfBlob=!0,b},this.json=function(a){return angular.toJson(a)},this.upload=function(a){function b(a){return null!=a&&(a instanceof Blob||a.flashId&&a.name&&a.size)}function c(b,c){if(b._ngfBlob)return b;if(a._file=a._file||b,null!=a._start&&f){a._end&&a._end>=b.size&&(a._finished=!0,a._end=b.size);var d=b.slice(a._start,a._end||b.size);return d.name=b.name,d.ngfName=b.ngfName,a._chunkSize&&(c.append("_chunkSize",a._end-a._start),c.append("_chunkNumber",Math.floor(a._start/a._chunkSize)),c.append("_totalSize",a._file.size)),d}return b}function g(d,e,f){if(void 0!==e)if(angular.isDate(e)&&(e=e.toISOString()),angular.isString(e))d.append(f,e);else if(b(e)){var h=c(e,d),i=f.split(",");i[1]&&(h.ngfName=i[1].replace(/^\s+|\s+$/g,""),f=i[0]),a._fileKey=a._fileKey||f,d.append(f,h,h.ngfName||h.name)}else if(angular.isObject(e)){if(e.$$ngfCircularDetection)throw"ngFileUpload: Circular reference in config.data. Make sure specified data for Upload.upload() has no circular reference: "+f;e.$$ngfCircularDetection=!0;try{for(var j in e)if(e.hasOwnProperty(j)&&"$$ngfCircularDetection"!==j){var k=null==a.objectKey?"[i]":a.objectKey;e.length&&parseInt(j)>-1&&(k=null==a.arrayKey?k:a.arrayKey),g(d,e[j],f+k.replace(/[ik]/g,j))}}finally{delete e.$$ngfCircularDetection}}else d.append(f,e)}function h(){a._chunkSize=e.translateScalars(a.resumeChunkSize),a._chunkSize=a._chunkSize?parseInt(a._chunkSize.toString()):null,a.headers=a.headers||{},a.headers["Content-Type"]=void 0,a.transformRequest=a.transformRequest?angular.isArray(a.transformRequest)?a.transformRequest:[a.transformRequest]:[],a.transformRequest.push(function(b){var c,d=new FormData;b=b||a.fields||{},a.file&&(b.file=a.file);for(c in b)if(b.hasOwnProperty(c)){var e=b[c];a.formDataAppender?a.formDataAppender(d,c,e):g(d,e,c)}return d})}return a._isDigested||(a._isDigested=!0,h()),d(a)},this.http=function(b){return b.transformRequest=b.transformRequest||function(b){return window.ArrayBuffer&&b instanceof window.ArrayBuffer||b instanceof Blob?b:a.defaults.transformRequest[0].apply(this,arguments)},b._chunkSize=e.translateScalars(b.resumeChunkSize),b._chunkSize=b._chunkSize?parseInt(b._chunkSize.toString()):null,d(b)},this.translateScalars=function(a){if(angular.isString(a)){if(a.search(/kb/i)===a.length-2)return parseFloat(1e3*a.substring(0,a.length-2));if(a.search(/mb/i)===a.length-2)return parseFloat(1e6*a.substring(0,a.length-2));if(a.search(/gb/i)===a.length-2)return parseFloat(1e9*a.substring(0,a.length-2));if(a.search(/b/i)===a.length-1)return parseFloat(a.substring(0,a.length-1));if(a.search(/s/i)===a.length-1)return parseFloat(a.substring(0,a.length-1));if(a.search(/m/i)===a.length-1)return parseFloat(60*a.substring(0,a.length-1));if(a.search(/h/i)===a.length-1)return parseFloat(3600*a.substring(0,a.length-1))}return a},this.setDefaults=function(a){this.defaults=a||{}},this.defaults={},this.version=ngFileUpload.version}]),ngFileUpload.service("Upload",["$parse","$timeout","$compile","UploadResize",function(a,b,c,d){function e(a,b){null==b||a.$dirty||(a.$setDirty?a.$setDirty():a.$dirty=!0)}function f(a,b,c,d){var e=h.attrGetter("ngfResize",b,c);if(!e||!h.isResizeSupported())return d();for(var f=a.length,g=function(){f--,0===f&&d()},i=function(b){return function(c){a.splice(b,1,c),g()}},j=function(a){return function(b){g(),a.$error="resize",a.$errorParam=(b?(b.message?b.message:b)+": ":"")+(a&&a.name)}},k=0;k<a.length;k++){var l=a[k];0===l.type.indexOf("image")?h.resize(l,e.width,e.height,e.quality).then(i(k),j(l)):g()}}function g(a,b,c,d){var e=[],f=h.attrGetter("ngfKeep",c,d);if(f){var g=!1;if("distinct"===f||h.attrGetter("ngfKeepDistinct",c,d)===!0){var i=b.length;if(a)for(var j=0;j<a.length;j++){for(var k=0;i>k;k++)if(a[j].name===b[k].name){e.push(a[j]);break}k===i&&(b.push(a[j]),g=!0)}a=b}else a=b.concat(a||[])}return{files:a,dupFiles:e,keep:f}}var h=d;return h.getAttrWithDefaults=function(a,b){if(null!=a[b])return a[b];var c=h.defaults[b];return null==c?c:angular.isString(c)?c:JSON.stringify(c)},h.attrGetter=function(b,c,d,e){var f=this.getAttrWithDefaults(c,b);if(!d)return f;try{return e?a(f)(d,e):a(f)(d)}catch(g){if(b.search(/min|max|pattern/i))return f;throw g}},h.shouldUpdateOn=function(a,b,c){var d=h.attrGetter("ngModelOptions",b,c);return d&&d.updateOn?d.updateOn.split(" ").indexOf(a)>-1:!0},h.updateModel=function(c,d,i,j,k,l,m){function n(f,g,k,m,n){var o=f&&f.length?f[0]:null;c&&(e(c,f),angular.forEach(c.$ngfValidations,function(a){c.$setValidity(a.name,a.valid)}),c&&c.$setViewValue(n?o:f)),j&&a(j)(i,{$files:f,$file:o,$newFiles:k,$duplicateFiles:m,$invalidFiles:g,$event:l});var p=h.attrGetter("ngfModelInvalid",d);p&&b(function(){a(p).assign(i,g)}),b(function(){})}var o=k,p=(c&&c.$modelValue||d.$$ngfPrevFiles||[]).slice(0),q=g(k,p,d,i);k=q.files;var r=q.dupFiles,s=!h.attrGetter("ngfMultiple",d,i)&&!h.attrGetter("multiple",d)&&!q.keep;d.$$ngfPrevFiles=k,h.validate(o,c,d,i,h.attrGetter("ngfValidateLater",d),function(){if(m)n(k,[],o,r,s);else{var a=h.attrGetter("ngModelOptions",d,i);if(!a||!a.allowInvalid){var c=[],e=[];angular.forEach(k,function(a){a.$error?e.push(a):c.push(a)}),k=c}f(k,d,i,function(){b(function(){n(k,e,o,r,s)},a&&a.debounce?a.debounce.change||a.debounce:0)})}});for(var t=p.length;t--;){var u=p[t];window.URL&&u.blobUrl&&(URL.revokeObjectURL(u.blobUrl),delete u.blobUrl)}},h}]),ngFileUpload.directive("ngfSelect",["$parse","$timeout","$compile","Upload",function(a,b,c,d){function e(a){var b=a.match(/Android[^\d]*(\d+)\.(\d+)/);if(b&&b.length>2){var c=d.defaults.androidFixMinorVersion||4;return parseInt(b[1])<4||parseInt(b[1])===c&&parseInt(b[2])<c}return-1===a.indexOf("Chrome")&&/.*Windows.*Safari.*/.test(a)}function f(a,b,c,d,f,h,i,j){function k(){return"input"===b[0].tagName.toLowerCase()&&c.type&&"file"===c.type.toLowerCase()}function l(){return t("ngfChange")||t("ngfSelect")}function m(b){if(j.shouldUpdateOn("change",c,a)){for(var e=b.__files_||b.target&&b.target.files,f=[],g=0;g<e.length;g++)f.push(e[g]);j.updateModel(d,c,a,l(),f.length?f:null,b)}}function n(a){if(b!==a)for(var c=0;c<b[0].attributes.length;c++){var d=b[0].attributes[c];"type"!==d.name&&"class"!==d.name&&"id"!==d.name&&"style"!==d.name&&((null==d.value||""===d.value)&&("required"===d.name&&(d.value="required"),"multiple"===d.name&&(d.value="multiple")),a.attr(d.name,d.value))}}function o(){if(k())return b;var a=angular.element('<input type="file">');return n(a),a.css("visibility","hidden").css("position","absolute").css("overflow","hidden").css("width","0px").css("height","0px").css("border","none").css("margin","0px").css("padding","0px").attr("tabindex","-1"),g.push({el:b,ref:a}),document.body.appendChild(a[0]),a}function p(c){if(b.attr("disabled")||t("ngfSelectDisabled",a))return!1;var d=q(c);return null!=d?d:(r(c),e(navigator.userAgent)?setTimeout(function(){w[0].click()},0):w[0].click(),!1)}function q(a){var b=a.changedTouches||a.originalEvent&&a.originalEvent.changedTouches;if("touchstart"===a.type)return v=b?b[0].clientY:0,!0;if(a.stopPropagation(),a.preventDefault(),"touchend"===a.type){var c=b?b[0].clientY:0;if(Math.abs(c-v)>20)return!1}}function r(b){j.shouldUpdateOn("click",c,a)&&w.val()&&(w.val(null),j.updateModel(d,c,a,l(),null,b,!0))}function s(a){if(w&&!w.attr("__ngf_ie10_Fix_")){if(!w[0].parentNode)return void(w=null);a.preventDefault(),a.stopPropagation(),w.unbind("click");var b=w.clone();return w.replaceWith(b),w=b,w.attr("__ngf_ie10_Fix_","true"),w.bind("change",m),w.bind("click",s),w[0].click(),!1}w.removeAttr("__ngf_ie10_Fix_")}var t=function(a,b){return j.attrGetter(a,c,b)},u=[];u.push(a.$watch(t("ngfMultiple"),function(){w.attr("multiple",t("ngfMultiple",a))})),u.push(a.$watch(t("ngfCapture"),function(){w.attr("capture",t("ngfCapture",a))})),c.$observe("accept",function(){w.attr("accept",t("accept"))}),u.push(function(){c.$$observers&&delete c.$$observers.accept});var v=0,w=b;k()||(w=o()),w.bind("change",m),k()?b.bind("click",r):b.bind("click touchstart touchend",p),-1!==navigator.appVersion.indexOf("MSIE 10")&&w.bind("click",s),d&&d.$formatters.push(function(a){return(null==a||0===a.length)&&w.val()&&w.val(null),a}),a.$on("$destroy",function(){k()||w.remove(),angular.forEach(u,function(a){a()})}),h(function(){for(var a=0;a<g.length;a++){var b=g[a];document.body.contains(b.el[0])||(g.splice(a,1),b.ref.remove())}}),window.FileAPI&&window.FileAPI.ngfFixIE&&window.FileAPI.ngfFixIE(b,w,m)}var g=[];return{restrict:"AEC",require:"?ngModel",link:function(e,g,h,i){f(e,g,h,i,a,b,c,d)}}}]),function(){function a(a){return"img"===a.tagName.toLowerCase()?"image":"audio"===a.tagName.toLowerCase()?"audio":"video"===a.tagName.toLowerCase()?"video":/./}function b(b,c,d,e,f,g,h,i){function j(a){var g=b.attrGetter("ngfNoObjectUrl",f,d);b.dataUrl(a,g)["finally"](function(){c(function(){var b=(g?a.$ngfDataUrl:a.$ngfBlobUrl)||a.$ngfDataUrl;i?e.css("background-image","url('"+(b||"")+"')"):e.attr("src",b),b?e.removeClass("ngf-hide"):e.addClass("ngf-hide")})})}c(function(){var c=d.$watch(f[g],function(c){var d=h;if("ngfThumbnail"===g&&(d||(d={width:e[0].clientWidth,height:e[0].clientHeight}),0===d.width&&window.getComputedStyle)){var f=getComputedStyle(e[0]);d={width:parseInt(f.width.slice(0,-2)),height:parseInt(f.height.slice(0,-2))}}return angular.isString(c)?(e.removeClass("ngf-hide"),i?e.css("background-image","url('"+c+"')"):e.attr("src",c)):void(!c||!c.type||0!==c.type.search(a(e[0]))||i&&0!==c.type.indexOf("image")?e.addClass("ngf-hide"):d&&b.isResizeSupported()?b.resize(c,d.width,d.height,d.quality).then(function(a){j(a)},function(a){throw a}):j(c))});d.$on("$destroy",function(){c()})})}ngFileUpload.service("UploadDataUrl",["UploadBase","$timeout","$q",function(a,b,c){var d=a;return d.base64DataUrl=function(a){if(angular.isArray(a)){var b=c.defer(),e=0;return angular.forEach(a,function(c){d.dataUrl(c,!0)["finally"](function(){if(e++,e===a.length){var c=[];angular.forEach(a,function(a){c.push(a.$ngfDataUrl)}),b.resolve(c,a)}})}),b.promise}return d.dataUrl(a,!0)},d.dataUrl=function(a,d){if(d&&null!=a.$ngfDataUrl||!d&&null!=a.$ngfBlobUrl){var e=c.defer();return b(function(){e.resolve(d?a.$ngfDataUrl:a.$ngfBlobUrl,a)}),e.promise}var f=d?a.$$ngfDataUrlPromise:a.$$ngfBlobUrlPromise;if(f)return f;var g=c.defer();return b(function(){if(window.FileReader&&a&&(!window.FileAPI||-1===navigator.userAgent.indexOf("MSIE 8")||a.size<2e4)&&(!window.FileAPI||-1===navigator.userAgent.indexOf("MSIE 9")||a.size<4e6)){var c=window.URL||window.webkitURL;if(c&&c.createObjectURL&&!d){var e;try{e=c.createObjectURL(a)}catch(f){return void b(function(){a.$ngfBlobUrl="",g.reject()})}b(function(){a.$ngfBlobUrl=e,e&&g.resolve(e,a)})}else{var h=new FileReader;h.onload=function(c){b(function(){a.$ngfDataUrl=c.target.result,g.resolve(c.target.result,a)})},h.onerror=function(){b(function(){a.$ngfDataUrl="",g.reject()})},h.readAsDataURL(a)}}else b(function(){a[d?"dataUrl":"blobUrl"]="",g.reject()})}),f=d?a.$$ngfDataUrlPromise=g.promise:a.$$ngfBlobUrlPromise=g.promise,f["finally"](function(){delete a[d?"$$ngfDataUrlPromise":"$$ngfBlobUrlPromise"]}),f},d}]);var c=angular.element("<style>.ngf-hide{display:none !important}</style>");document.getElementsByTagName("head")[0].appendChild(c[0]),ngFileUpload.directive("ngfSrc",["Upload","$timeout",function(a,c){return{restrict:"AE",link:function(d,e,f){b(a,c,d,e,f,"ngfSrc",a.attrGetter("ngfResize",f,d),!1)}}}]),ngFileUpload.directive("ngfBackground",["Upload","$timeout",function(a,c){return{restrict:"AE",link:function(d,e,f){b(a,c,d,e,f,"ngfBackground",a.attrGetter("ngfResize",f,d),!0)}}}]),ngFileUpload.directive("ngfThumbnail",["Upload","$timeout",function(a,c){return{restrict:"AE",link:function(d,e,f){var g=a.attrGetter("ngfSize",f,d);b(a,c,d,e,f,"ngfThumbnail",g,a.attrGetter("ngfAsBackground",f,d))}}}])}(),ngFileUpload.service("UploadValidate",["UploadDataUrl","$q","$timeout",function(a,b,c){function d(a){var b="",c=[];if(a.length>2&&"/"===a[0]&&"/"===a[a.length-1])b=a.substring(1,a.length-1);else{var e=a.split(",");if(e.length>1)for(var f=0;f<e.length;f++){var g=d(e[f]);g.regexp?(b+="("+g.regexp+")",f<e.length-1&&(b+="|")):c=c.concat(g.excludes)}else 0===a.indexOf("!")?c.push("^((?!"+d(a.substring(1)).regexp+").)*$"):(0===a.indexOf(".")&&(a="*"+a),b="^"+a.replace(new RegExp("[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]","g"),"\\$&")+"$",b=b.replace(/\\\*/g,".*").replace(/\\\?/g,"."))}return{regexp:b,excludes:c}}var e=a;return e.validatePattern=function(a,b){if(!b)return!0;var c=d(b),e=!0;if(c.regexp&&c.regexp.length){var f=new RegExp(c.regexp,"i");e=null!=a.type&&f.test(a.type)||null!=a.name&&f.test(a.name)}for(var g=c.excludes.length;g--;){var h=new RegExp(c.excludes[g],"i");e=e&&(null==a.type||h.test(a.type))&&(null==a.name||h.test(a.name))}return e},e.validate=function(a,b,c,d,f,g){function h(c,d,e){if(a){for(var f="ngf"+c[0].toUpperCase()+c.substr(1),g=a.length,h=null;g--;){var i=a[g],k=j(f,{$file:i});null==k&&(k=d(j("ngfValidate")||{}),h=null==h?!0:h),null!=k&&(e(i,k)||(i.$error=c,i.$errorParam=k,a.splice(g,1),h=!1))}null!==h&&b.$ngfValidations.push({name:c,valid:h})}}function i(c,d,e,f,h){if(a){var i=0,l=!1,m="ngf"+c[0].toUpperCase()+c.substr(1);a=void 0===a.length?[a]:a,angular.forEach(a,function(a){if(0!==a.type.search(e))return!0;var n=j(m,{$file:a})||d(j("ngfValidate",{$file:a})||{});n&&(k++,i++,f(a,n).then(function(b){h(b,n)||(a.$error=c,a.$errorParam=n,l=!0)},function(){j("ngfValidateForce",{$file:a})&&(a.$error=c,a.$errorParam=n,l=!0)})["finally"](function(){k--,i--,i||b.$ngfValidations.push({name:c,valid:!l}),k||g.call(b,b.$ngfValidations)}))})}}b=b||{},b.$ngfValidations=b.$ngfValidations||[],angular.forEach(b.$ngfValidations,function(a){a.valid=!0});var j=function(a,b){return e.attrGetter(a,c,d,b)};if(f)return void g.call(b);if(null==a||0===a.length)return void g.call(b);if(a=void 0===a.length?[a]:a.slice(0),h("pattern",function(a){return a.pattern},e.validatePattern),h("minSize",function(a){return a.size&&a.size.min},function(a,b){return a.size>=e.translateScalars(b)}),h("maxSize",function(a){return a.size&&a.size.max},function(a,b){return a.size<=e.translateScalars(b)}),h("validateFn",function(){return null},function(a,b){return b===!0||null===b||""===b}),!a.length)return void g.call(b,b.$ngfValidations);var k=0;i("maxHeight",function(a){return a.height&&a.height.max},/image/,this.imageDimensions,function(a,b){return a.height<=b}),i("minHeight",function(a){return a.height&&a.height.min},/image/,this.imageDimensions,function(a,b){return a.height>=b}),i("maxWidth",function(a){return a.width&&a.width.max},/image/,this.imageDimensions,function(a,b){return a.width<=b}),i("minWidth",function(a){return a.width&&a.width.min},/image/,this.imageDimensions,function(a,b){return a.width>=b}),i("ratio",function(a){return a.ratio},/image/,this.imageDimensions,function(a,b){for(var c=b.toString().split(","),d=!1,e=0;e<c.length;e++){var f=c[e],g=f.search(/x/i);f=g>-1?parseFloat(f.substring(0,g))/parseFloat(f.substring(g+1)):parseFloat(f),Math.abs(a.width/a.height-f)<1e-4&&(d=!0)}return d}),i("maxDuration",function(a){return a.duration&&a.duration.max},/audio|video/,this.mediaDuration,function(a,b){return a<=e.translateScalars(b)}),i("minDuration",function(a){return a.duration&&a.duration.min},/audio|video/,this.mediaDuration,function(a,b){return a>=e.translateScalars(b)}),i("validateAsyncFn",function(){return null},/./,function(a,b){return b},function(a){return a===!0||null===a||""===a}),k||g.call(b,b.$ngfValidations)},e.imageDimensions=function(a){if(a.$ngfWidth&&a.$ngfHeight){var d=b.defer();return c(function(){d.resolve({width:a.$ngfWidth,height:a.$ngfHeight})}),d.promise}if(a.$ngfDimensionPromise)return a.$ngfDimensionPromise;var f=b.defer();return c(function(){return 0!==a.type.indexOf("image")?void f.reject("not image"):void e.dataUrl(a).then(function(b){function d(){var b=h[0].clientWidth,c=h[0].clientHeight;h.remove(),a.$ngfWidth=b,a.$ngfHeight=c,f.resolve({width:b,height:c})}function e(){h.remove(),f.reject("load error")}function g(){c(function(){h[0].parentNode&&(h[0].clientWidth?d():i>10?e():g())},1e3)}var h=angular.element("<img>").attr("src",b).css("visibility","hidden").css("position","fixed");h.on("load",d),h.on("error",e);var i=0;g(),angular.element(document.getElementsByTagName("body")[0]).append(h)},function(){f.reject("load error")})}),a.$ngfDimensionPromise=f.promise,a.$ngfDimensionPromise["finally"](function(){delete a.$ngfDimensionPromise}),a.$ngfDimensionPromise},e.mediaDuration=function(a){if(a.$ngfDuration){var d=b.defer();return c(function(){d.resolve(a.$ngfDuration)}),d.promise}if(a.$ngfDurationPromise)return a.$ngfDurationPromise;var f=b.defer();return c(function(){return 0!==a.type.indexOf("audio")&&0!==a.type.indexOf("video")?void f.reject("not media"):void e.dataUrl(a).then(function(b){function d(){var b=h[0].duration;a.$ngfDuration=b,h.remove(),f.resolve(b)}function e(){h.remove(),f.reject("load error")}function g(){c(function(){h[0].parentNode&&(h[0].duration?d():i>10?e():g())},1e3)}var h=angular.element(0===a.type.indexOf("audio")?"<audio>":"<video>").attr("src",b).css("visibility","none").css("position","fixed");h.on("loadedmetadata",d),h.on("error",e);var i=0;g(),angular.element(document.body).append(h)},function(){f.reject("load error")})}),a.$ngfDurationPromise=f.promise,a.$ngfDurationPromise["finally"](function(){delete a.$ngfDurationPromise}),a.$ngfDurationPromise},e}]),ngFileUpload.service("UploadResize",["UploadValidate","$q","$timeout",function(a,b,c){var d=a,e=function(a,b,c,d){var e=Math.min(c/a,d/b);return{width:a*e,height:b*e}},f=function(a,c,d,f,g){var h=b.defer(),i=document.createElement("canvas"),j=document.createElement("img");return j.onload=function(){try{0===c&&(c=j.width,d=j.height);var a=e(j.width,j.height,c,d);i.width=a.width,i.height=a.height;var b=i.getContext("2d");b.drawImage(j,0,0,a.width,a.height),h.resolve(i.toDataURL(g||"image/WebP",f||1))}catch(k){h.reject(k)}},j.onerror=function(){h.reject()},j.src=a,h.promise},g=function(a){for(var b=a.split(","),c=b[0].match(/:(.*?);/)[1],d=atob(b[1]),e=d.length,f=new Uint8Array(e);e--;)f[e]=d.charCodeAt(e);return new Blob([f],{type:c})};return d.isResizeSupported=function(){var a=document.createElement("canvas");return window.atob&&a.getContext&&a.getContext("2d")},d.resize=function(a,e,h,i){var j=b.defer();return 0!==a.type.indexOf("image")?(c(function(){j.resolve("Only images are allowed for resizing!")}),j.promise):(d.dataUrl(a,!0).then(function(b){f(b,e,h,i,a.type).then(function(b){var c=g(b);c.name=a.name,j.resolve(c)},function(){j.reject()})},function(){j.reject()}),j.promise)},d}]),function(){function a(a,c,d,e,f,g,h,i,j){function k(){return c.attr("disabled")||o("ngfDropDisabled",a)}function l(a,b,c,d){var e=o("ngfDragOverClass",a,{$event:c}),f="dragover";if(angular.isString(e))f=e;else if(e&&(e.delay&&(s=e.delay),e.accept||e.reject)){var g=c.dataTransfer.items;if(null!=g&&g.length)for(var h=e.pattern||o("ngfPattern",a,{$event:c}),j=g.length;j--;){if(!i.validatePattern(g[j],h)){f=e.reject;break}f=e.accept}else f=e.accept}d(f)}function m(a,b,c,d){function e(a,b,c){if(null!=b)if(b.isDirectory){var d=(c||"")+b.name;a.push({name:b.name,type:"directory",path:d});var f=b.createReader(),g=[];i++;var h=function(){f.readEntries(function(d){try{if(d.length)g=g.concat(Array.prototype.slice.call(d||[],0)),h();else{for(var f=0;f<g.length;f++)e(a,g[f],(c?c:"")+b.name+"/");i--}}catch(j){i--,console.error(j)}},function(){i--})};h()}else i++,b.file(function(b){try{i--,b.path=(c?c:"")+b.name,a.push(b)}catch(d){i--,console.error(d)}},function(){i--})}var f=[],i=0,j=a.dataTransfer.items;if(j&&j.length>0&&"file"!==h.protocol())for(var k=0;k<j.length;k++){if(j[k].webkitGetAsEntry&&j[k].webkitGetAsEntry()&&j[k].webkitGetAsEntry().isDirectory){var l=j[k].webkitGetAsEntry();if(l.isDirectory&&!c)continue;null!=l&&e(f,l)}else{var m=j[k].getAsFile();null!=m&&f.push(m)}if(!d&&f.length>0)break}else{var n=a.dataTransfer.files;if(null!=n)for(var o=0;o<n.length&&(f.push(n.item(o)),d||!(f.length>0));o++);}var p=0;!function q(a){g(function(){if(i)10*p++<2e4&&q(10);else{if(!d&&f.length>1){for(k=0;"directory"===f[k].type;)k++;f=[f[k]]}b(f)}},a||0)}()}var n=b(),o=function(a,b,c){return i.attrGetter(a,d,b,c)};if(o("dropAvailable")&&g(function(){a[o("dropAvailable")]?a[o("dropAvailable")].value=n:a[o("dropAvailable")]=n}),!n)return void(o("ngfHideOnDropNotAvailable",a)===!0&&c.css("display","none"));var p,q=null,r=f(o("ngfStopPropagation")),s=1;c[0].addEventListener("dragover",function(b){if(!k()){if(b.preventDefault(),r(a)&&b.stopPropagation(),navigator.userAgent.indexOf("Chrome")>-1){var e=b.dataTransfer.effectAllowed;b.dataTransfer.dropEffect="move"===e||"linkMove"===e?"move":"copy"}g.cancel(q),p||(p="C",l(a,d,b,function(d){p=d,c.addClass(p),o("ngfDrag",a,{$isDragging:!0,$class:p,$event:b})}))}},!1),c[0].addEventListener("dragenter",function(b){k()||(b.preventDefault(),r(a)&&b.stopPropagation())},!1),c[0].addEventListener("dragleave",function(b){k()||(b.preventDefault(),r(a)&&b.stopPropagation(),q=g(function(){p&&c.removeClass(p),p=null,o("ngfDrag",a,{$isDragging:!1,$event:b})},s||100))},!1),c[0].addEventListener("drop",function(b){if(!k()&&i.shouldUpdateOn("drop",d,a)){b.preventDefault(),r(a)&&b.stopPropagation(),p&&c.removeClass(p),p=null;var f;try{f=b.dataTransfer&&b.dataTransfer.getData&&b.dataTransfer.getData("text/html")}catch(g){}if(f){var h;f.replace(/<img .*src *=\"([^\"]*)\"/,function(a,b){h=b}),h&&j({url:h,method:"get",responseType:"arraybuffer"}).then(function(c){var f=new Uint8Array(c.data),g=c.headers("content-type")||"image/jpg",h=new Blob([f],{type:g});i.updateModel(e,d,a,o("ngfChange")||o("ngfDrop"),[h],b)})}else m(b,function(c){i.updateModel(e,d,a,o("ngfChange")||o("ngfDrop"),c,b)},o("ngfAllowDir",a)!==!1,o("multiple")||o("ngfMultiple",a))}},!1),c[0].addEventListener("paste",function(b){if(!k()&&i.shouldUpdateOn("paste",d,a)){var c=[],f=b.clipboardData||b.originalEvent.clipboardData;if(f&&f.items){for(var g=0;g<f.items.length;g++)-1!==f.items[g].type.indexOf("image")&&c.push(f.items[g].getAsFile());i.updateModel(e,d,a,o("ngfChange")||o("ngfDrop"),c,b)}}},!1)}function b(){var a=document.createElement("div");return"draggable"in a&&"ondrop"in a&&!/Edge\/12./i.test(navigator.userAgent)}ngFileUpload.directive("ngfDrop",["$parse","$timeout","$location","Upload","$http",function(b,c,d,e,f){return{restrict:"AEC",require:"?ngModel",link:function(g,h,i,j){a(g,h,i,j,b,c,d,e,f)}}}]),ngFileUpload.directive("ngfNoFileDrop",function(){return function(a,c){b()&&c.css("display","none")}}),ngFileUpload.directive("ngfDropAvailable",["$parse","$timeout","Upload",function(a,c,d){return function(e,f,g){if(b()){var h=a(d.attrGetter("ngfDropAvailable",g));c(function(){h(e),h.assign&&h.assign(e,!0)})}}}])}();
/* SockJS client, version 0.3.4, http://sockjs.org, MIT License

Copyright (c) 2011-2012 VMware, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// JSON2 by Douglas Crockford (minified).
var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()

SockJS=function(){var a=document,b=window,c={},d=function(){};d.prototype.addEventListener=function(a,b){this._listeners||(this._listeners={}),a in this._listeners||(this._listeners[a]=[]);var d=this._listeners[a];c.arrIndexOf(d,b)===-1&&d.push(b);return},d.prototype.removeEventListener=function(a,b){if(!(this._listeners&&a in this._listeners))return;var d=this._listeners[a],e=c.arrIndexOf(d,b);if(e!==-1){d.length>1?this._listeners[a]=d.slice(0,e).concat(d.slice(e+1)):delete this._listeners[a];return}return},d.prototype.dispatchEvent=function(a){var b=a.type,c=Array.prototype.slice.call(arguments,0);this["on"+b]&&this["on"+b].apply(this,c);if(this._listeners&&b in this._listeners)for(var d=0;d<this._listeners[b].length;d++)this._listeners[b][d].apply(this,c)};var e=function(a,b){this.type=a;if(typeof b!="undefined")for(var c in b){if(!b.hasOwnProperty(c))continue;this[c]=b[c]}};e.prototype.toString=function(){var a=[];for(var b in this){if(!this.hasOwnProperty(b))continue;var c=this[b];typeof c=="function"&&(c="[function]"),a.push(b+"="+c)}return"SimpleEvent("+a.join(", ")+")"};var f=function(a){var b=this;b._events=a||[],b._listeners={}};f.prototype.emit=function(a){var b=this;b._verifyType(a);if(b._nuked)return;var c=Array.prototype.slice.call(arguments,1);b["on"+a]&&b["on"+a].apply(b,c);if(a in b._listeners)for(var d=0;d<b._listeners[a].length;d++)b._listeners[a][d].apply(b,c)},f.prototype.on=function(a,b){var c=this;c._verifyType(a);if(c._nuked)return;a in c._listeners||(c._listeners[a]=[]),c._listeners[a].push(b)},f.prototype._verifyType=function(a){var b=this;c.arrIndexOf(b._events,a)===-1&&c.log("Event "+JSON.stringify(a)+" not listed "+JSON.stringify(b._events)+" in "+b)},f.prototype.nuke=function(){var a=this;a._nuked=!0;for(var b=0;b<a._events.length;b++)delete a[a._events[b]];a._listeners={}};var g="abcdefghijklmnopqrstuvwxyz0123456789_";c.random_string=function(a,b){b=b||g.length;var c,d=[];for(c=0;c<a;c++)d.push(g.substr(Math.floor(Math.random()*b),1));return d.join("")},c.random_number=function(a){return Math.floor(Math.random()*a)},c.random_number_string=function(a){var b=(""+(a-1)).length,d=Array(b+1).join("0");return(d+c.random_number(a)).slice(-b)},c.getOrigin=function(a){a+="/";var b=a.split("/").slice(0,3);return b.join("/")},c.isSameOriginUrl=function(a,c){return c||(c=b.location.href),a.split("/").slice(0,3).join("/")===c.split("/").slice(0,3).join("/")},c.getParentDomain=function(a){if(/^[0-9.]*$/.test(a))return a;if(/^\[/.test(a))return a;if(!/[.]/.test(a))return a;var b=a.split(".").slice(1);return b.join(".")},c.objectExtend=function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a};var h="_jp";c.polluteGlobalNamespace=function(){h in b||(b[h]={})},c.closeFrame=function(a,b){return"c"+JSON.stringify([a,b])},c.userSetCode=function(a){return a===1e3||a>=3e3&&a<=4999},c.countRTO=function(a){var b;return a>100?b=3*a:b=a+200,b},c.log=function(){b.console&&console.log&&console.log.apply&&console.log.apply(console,arguments)},c.bind=function(a,b){return a.bind?a.bind(b):function(){return a.apply(b,arguments)}},c.flatUrl=function(a){return a.indexOf("?")===-1&&a.indexOf("#")===-1},c.amendUrl=function(b){var d=a.location;if(!b)throw new Error("Wrong url for SockJS");if(!c.flatUrl(b))throw new Error("Only basic urls are supported in SockJS");return b.indexOf("//")===0&&(b=d.protocol+b),b.indexOf("/")===0&&(b=d.protocol+"//"+d.host+b),b=b.replace(/[/]+$/,""),b},c.arrIndexOf=function(a,b){for(var c=0;c<a.length;c++)if(a[c]===b)return c;return-1},c.arrSkip=function(a,b){var d=c.arrIndexOf(a,b);if(d===-1)return a.slice();var e=a.slice(0,d);return e.concat(a.slice(d+1))},c.isArray=Array.isArray||function(a){return{}.toString.call(a).indexOf("Array")>=0},c.delay=function(a,b){return typeof a=="function"&&(b=a,a=0),setTimeout(b,a)};var i=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,j={"\0":"\\u0000","\x01":"\\u0001","\x02":"\\u0002","\x03":"\\u0003","\x04":"\\u0004","\x05":"\\u0005","\x06":"\\u0006","\x07":"\\u0007","\b":"\\b","\t":"\\t","\n":"\\n","\x0b":"\\u000b","\f":"\\f","\r":"\\r","\x0e":"\\u000e","\x0f":"\\u000f","\x10":"\\u0010","\x11":"\\u0011","\x12":"\\u0012","\x13":"\\u0013","\x14":"\\u0014","\x15":"\\u0015","\x16":"\\u0016","\x17":"\\u0017","\x18":"\\u0018","\x19":"\\u0019","\x1a":"\\u001a","\x1b":"\\u001b","\x1c":"\\u001c","\x1d":"\\u001d","\x1e":"\\u001e","\x1f":"\\u001f",'"':'\\"',"\\":"\\\\","\x7f":"\\u007f","\x80":"\\u0080","\x81":"\\u0081","\x82":"\\u0082","\x83":"\\u0083","\x84":"\\u0084","\x85":"\\u0085","\x86":"\\u0086","\x87":"\\u0087","\x88":"\\u0088","\x89":"\\u0089","\x8a":"\\u008a","\x8b":"\\u008b","\x8c":"\\u008c","\x8d":"\\u008d","\x8e":"\\u008e","\x8f":"\\u008f","\x90":"\\u0090","\x91":"\\u0091","\x92":"\\u0092","\x93":"\\u0093","\x94":"\\u0094","\x95":"\\u0095","\x96":"\\u0096","\x97":"\\u0097","\x98":"\\u0098","\x99":"\\u0099","\x9a":"\\u009a","\x9b":"\\u009b","\x9c":"\\u009c","\x9d":"\\u009d","\x9e":"\\u009e","\x9f":"\\u009f","\xad":"\\u00ad","\u0600":"\\u0600","\u0601":"\\u0601","\u0602":"\\u0602","\u0603":"\\u0603","\u0604":"\\u0604","\u070f":"\\u070f","\u17b4":"\\u17b4","\u17b5":"\\u17b5","\u200c":"\\u200c","\u200d":"\\u200d","\u200e":"\\u200e","\u200f":"\\u200f","\u2028":"\\u2028","\u2029":"\\u2029","\u202a":"\\u202a","\u202b":"\\u202b","\u202c":"\\u202c","\u202d":"\\u202d","\u202e":"\\u202e","\u202f":"\\u202f","\u2060":"\\u2060","\u2061":"\\u2061","\u2062":"\\u2062","\u2063":"\\u2063","\u2064":"\\u2064","\u2065":"\\u2065","\u2066":"\\u2066","\u2067":"\\u2067","\u2068":"\\u2068","\u2069":"\\u2069","\u206a":"\\u206a","\u206b":"\\u206b","\u206c":"\\u206c","\u206d":"\\u206d","\u206e":"\\u206e","\u206f":"\\u206f","\ufeff":"\\ufeff","\ufff0":"\\ufff0","\ufff1":"\\ufff1","\ufff2":"\\ufff2","\ufff3":"\\ufff3","\ufff4":"\\ufff4","\ufff5":"\\ufff5","\ufff6":"\\ufff6","\ufff7":"\\ufff7","\ufff8":"\\ufff8","\ufff9":"\\ufff9","\ufffa":"\\ufffa","\ufffb":"\\ufffb","\ufffc":"\\ufffc","\ufffd":"\\ufffd","\ufffe":"\\ufffe","\uffff":"\\uffff"},k=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,l,m=JSON&&JSON.stringify||function(a){return i.lastIndex=0,i.test(a)&&(a=a.replace(i,function(a){return j[a]})),'"'+a+'"'},n=function(a){var b,c={},d=[];for(b=0;b<65536;b++)d.push(String.fromCharCode(b));return a.lastIndex=0,d.join("").replace(a,function(a){return c[a]="\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4),""}),a.lastIndex=0,c};c.quote=function(a){var b=m(a);return k.lastIndex=0,k.test(b)?(l||(l=n(k)),b.replace(k,function(a){return l[a]})):b};var o=["websocket","xdr-streaming","xhr-streaming","iframe-eventsource","iframe-htmlfile","xdr-polling","xhr-polling","iframe-xhr-polling","jsonp-polling"];c.probeProtocols=function(){var a={};for(var b=0;b<o.length;b++){var c=o[b];a[c]=y[c]&&y[c].enabled()}return a},c.detectProtocols=function(a,b,c){var d={},e=[];b||(b=o);for(var f=0;f<b.length;f++){var g=b[f];d[g]=a[g]}var h=function(a){var b=a.shift();d[b]?e.push(b):a.length>0&&h(a)};return c.websocket!==!1&&h(["websocket"]),d["xhr-streaming"]&&!c.null_origin?e.push("xhr-streaming"):d["xdr-streaming"]&&!c.cookie_needed&&!c.null_origin?e.push("xdr-streaming"):h(["iframe-eventsource","iframe-htmlfile"]),d["xhr-polling"]&&!c.null_origin?e.push("xhr-polling"):d["xdr-polling"]&&!c.cookie_needed&&!c.null_origin?e.push("xdr-polling"):h(["iframe-xhr-polling","jsonp-polling"]),e};var p="_sockjs_global";c.createHook=function(){var a="a"+c.random_string(8);if(!(p in b)){var d={};b[p]=function(a){return a in d||(d[a]={id:a,del:function(){delete d[a]}}),d[a]}}return b[p](a)},c.attachMessage=function(a){c.attachEvent("message",a)},c.attachEvent=function(c,d){typeof b.addEventListener!="undefined"?b.addEventListener(c,d,!1):(a.attachEvent("on"+c,d),b.attachEvent("on"+c,d))},c.detachMessage=function(a){c.detachEvent("message",a)},c.detachEvent=function(c,d){typeof b.addEventListener!="undefined"?b.removeEventListener(c,d,!1):(a.detachEvent("on"+c,d),b.detachEvent("on"+c,d))};var q={},r=!1,s=function(){for(var a in q)q[a](),delete q[a]},t=function(){if(r)return;r=!0,s()};c.attachEvent("unload",t),c.unload_add=function(a){var b=c.random_string(8);return q[b]=a,r&&c.delay(s),b},c.unload_del=function(a){a in q&&delete q[a]},c.createIframe=function(b,d){var e=a.createElement("iframe"),f,g,h=function(){clearTimeout(f);try{e.onload=null}catch(a){}e.onerror=null},i=function(){e&&(h(),setTimeout(function(){e&&e.parentNode.removeChild(e),e=null},0),c.unload_del(g))},j=function(a){e&&(i(),d(a))},k=function(a,b){try{e&&e.contentWindow&&e.contentWindow.postMessage(a,b)}catch(c){}};return e.src=b,e.style.display="none",e.style.position="absolute",e.onerror=function(){j("onerror")},e.onload=function(){clearTimeout(f),f=setTimeout(function(){j("onload timeout")},2e3)},a.body.appendChild(e),f=setTimeout(function(){j("timeout")},15e3),g=c.unload_add(i),{post:k,cleanup:i,loaded:h}},c.createHtmlfile=function(a,d){var e=new ActiveXObject("htmlfile"),f,g,i,j=function(){clearTimeout(f)},k=function(){e&&(j(),c.unload_del(g),i.parentNode.removeChild(i),i=e=null,CollectGarbage())},l=function(a){e&&(k(),d(a))},m=function(a,b){try{i&&i.contentWindow&&i.contentWindow.postMessage(a,b)}catch(c){}};e.open(),e.write('<html><script>document.domain="'+document.domain+'";'+"</s"+"cript></html>"),e.close(),e.parentWindow[h]=b[h];var n=e.createElement("div");return e.body.appendChild(n),i=e.createElement("iframe"),n.appendChild(i),i.src=a,f=setTimeout(function(){l("timeout")},15e3),g=c.unload_add(k),{post:m,cleanup:k,loaded:j}};var u=function(){};u.prototype=new f(["chunk","finish"]),u.prototype._start=function(a,d,e,f){var g=this;try{g.xhr=new XMLHttpRequest}catch(h){}if(!g.xhr)try{g.xhr=new b.ActiveXObject("Microsoft.XMLHTTP")}catch(h){}if(b.ActiveXObject||b.XDomainRequest)d+=(d.indexOf("?")===-1?"?":"&")+"t="+ +(new Date);g.unload_ref=c.unload_add(function(){g._cleanup(!0)});try{g.xhr.open(a,d,!0)}catch(i){g.emit("finish",0,""),g._cleanup();return}if(!f||!f.no_credentials)g.xhr.withCredentials="true";if(f&&f.headers)for(var j in f.headers)g.xhr.setRequestHeader(j,f.headers[j]);g.xhr.onreadystatechange=function(){if(g.xhr){var a=g.xhr;switch(a.readyState){case 3:try{var b=a.status,c=a.responseText}catch(a){}b===1223&&(b=204),c&&c.length>0&&g.emit("chunk",b,c);break;case 4:var b=a.status;b===1223&&(b=204),g.emit("finish",b,a.responseText),g._cleanup(!1)}}},g.xhr.send(e)},u.prototype._cleanup=function(a){var b=this;if(!b.xhr)return;c.unload_del(b.unload_ref),b.xhr.onreadystatechange=function(){};if(a)try{b.xhr.abort()}catch(d){}b.unload_ref=b.xhr=null},u.prototype.close=function(){var a=this;a.nuke(),a._cleanup(!0)};var v=c.XHRCorsObject=function(){var a=this,b=arguments;c.delay(function(){a._start.apply(a,b)})};v.prototype=new u;var w=c.XHRLocalObject=function(a,b,d){var e=this;c.delay(function(){e._start(a,b,d,{no_credentials:!0})})};w.prototype=new u;var x=c.XDRObject=function(a,b,d){var e=this;c.delay(function(){e._start(a,b,d)})};x.prototype=new f(["chunk","finish"]),x.prototype._start=function(a,b,d){var e=this,f=new XDomainRequest;b+=(b.indexOf("?")===-1?"?":"&")+"t="+ +(new Date);var g=f.ontimeout=f.onerror=function(){e.emit("finish",0,""),e._cleanup(!1)};f.onprogress=function(){e.emit("chunk",200,f.responseText)},f.onload=function(){e.emit("finish",200,f.responseText),e._cleanup(!1)},e.xdr=f,e.unload_ref=c.unload_add(function(){e._cleanup(!0)});try{e.xdr.open(a,b),e.xdr.send(d)}catch(h){g()}},x.prototype._cleanup=function(a){var b=this;if(!b.xdr)return;c.unload_del(b.unload_ref),b.xdr.ontimeout=b.xdr.onerror=b.xdr.onprogress=b.xdr.onload=null;if(a)try{b.xdr.abort()}catch(d){}b.unload_ref=b.xdr=null},x.prototype.close=function(){var a=this;a.nuke(),a._cleanup(!0)},c.isXHRCorsCapable=function(){return b.XMLHttpRequest&&"withCredentials"in new XMLHttpRequest?1:b.XDomainRequest&&a.domain?2:L.enabled()?3:4};var y=function(a,d,e){if(this===b)return new y(a,d,e);var f=this,g;f._options={devel:!1,debug:!1,protocols_whitelist:[],info:undefined,rtt:undefined},e&&c.objectExtend(f._options,e),f._base_url=c.amendUrl(a),f._server=f._options.server||c.random_number_string(1e3),f._options.protocols_whitelist&&f._options.protocols_whitelist.length?g=f._options.protocols_whitelist:(typeof d=="string"&&d.length>0?g=[d]:c.isArray(d)?g=d:g=null,g&&f._debug('Deprecated API: Use "protocols_whitelist" option instead of supplying protocol list as a second parameter to SockJS constructor.')),f._protocols=[],f.protocol=null,f.readyState=y.CONNECTING,f._ir=S(f._base_url),f._ir.onfinish=function(a,b){f._ir=null,a?(f._options.info&&(a=c.objectExtend(a,f._options.info)),f._options.rtt&&(b=f._options.rtt),f._applyInfo(a,b,g),f._didClose()):f._didClose(1002,"Can't connect to server",!0)}};y.prototype=new d,y.version="0.3.4",y.CONNECTING=0,y.OPEN=1,y.CLOSING=2,y.CLOSED=3,y.prototype._debug=function(){this._options.debug&&c.log.apply(c,arguments)},y.prototype._dispatchOpen=function(){var a=this;a.readyState===y.CONNECTING?(a._transport_tref&&(clearTimeout(a._transport_tref),a._transport_tref=null),a.readyState=y.OPEN,a.dispatchEvent(new e("open"))):a._didClose(1006,"Server lost session")},y.prototype._dispatchMessage=function(a){var b=this;if(b.readyState!==y.OPEN)return;b.dispatchEvent(new e("message",{data:a}))},y.prototype._dispatchHeartbeat=function(a){var b=this;if(b.readyState!==y.OPEN)return;b.dispatchEvent(new e("heartbeat",{}))},y.prototype._didClose=function(a,b,d){var f=this;if(f.readyState!==y.CONNECTING&&f.readyState!==y.OPEN&&f.readyState!==y.CLOSING)throw new Error("INVALID_STATE_ERR");f._ir&&(f._ir.nuke(),f._ir=null),f._transport&&(f._transport.doCleanup(),f._transport=null);var g=new e("close",{code:a,reason:b,wasClean:c.userSetCode(a)});if(!c.userSetCode(a)&&f.readyState===y.CONNECTING&&!d){if(f._try_next_protocol(g))return;g=new e("close",{code:2e3,reason:"All transports failed",wasClean:!1,last_event:g})}f.readyState=y.CLOSED,c.delay(function(){f.dispatchEvent(g)})},y.prototype._didMessage=function(a){var b=this,c=a.slice(0,1);switch(c){case"o":b._dispatchOpen();break;case"a":var d=JSON.parse(a.slice(1)||"[]");for(var e=0;e<d.length;e++)b._dispatchMessage(d[e]);break;case"m":var d=JSON.parse(a.slice(1)||"null");b._dispatchMessage(d);break;case"c":var d=JSON.parse(a.slice(1)||"[]");b._didClose(d[0],d[1]);break;case"h":b._dispatchHeartbeat()}},y.prototype._try_next_protocol=function(b){var d=this;d.protocol&&(d._debug("Closed transport:",d.protocol,""+b),d.protocol=null),d._transport_tref&&(clearTimeout(d._transport_tref),d._transport_tref=null);for(;;){var e=d.protocol=d._protocols.shift();if(!e)return!1;if(y[e]&&y[e].need_body===!0&&(!a.body||typeof a.readyState!="undefined"&&a.readyState!=="complete"))return d._protocols.unshift(e),d.protocol="waiting-for-load",c.attachEvent("load",function(){d._try_next_protocol()}),!0;if(!!y[e]&&!!y[e].enabled(d._options)){var f=y[e].roundTrips||1,g=(d._options.rto||0)*f||5e3;d._transport_tref=c.delay(g,function(){d.readyState===y.CONNECTING&&d._didClose(2007,"Transport timeouted")});var h=c.random_string(8),i=d._base_url+"/"+d._server+"/"+h;return d._debug("Opening transport:",e," url:"+i," RTO:"+d._options.rto),d._transport=new y[e](d,i,d._base_url),!0}d._debug("Skipping transport:",e)}},y.prototype.close=function(a,b){var d=this;if(a&&!c.userSetCode(a))throw new Error("INVALID_ACCESS_ERR");return d.readyState!==y.CONNECTING&&d.readyState!==y.OPEN?!1:(d.readyState=y.CLOSING,d._didClose(a||1e3,b||"Normal closure"),!0)},y.prototype.send=function(a){var b=this;if(b.readyState===y.CONNECTING)throw new Error("INVALID_STATE_ERR");return b.readyState===y.OPEN&&b._transport.doSend(c.quote(""+a)),!0},y.prototype._applyInfo=function(b,d,e){var f=this;f._options.info=b,f._options.rtt=d,f._options.rto=c.countRTO(d),f._options.info.null_origin=!a.domain;var g=c.probeProtocols();f._protocols=c.detectProtocols(g,e,b)};var z=y.websocket=function(a,d){var e=this,f=d+"/websocket";f.slice(0,5)==="https"?f="wss"+f.slice(5):f="ws"+f.slice(4),e.ri=a,e.url=f;var g=b.WebSocket||b.MozWebSocket;e.ws=new g(e.url),e.ws.onmessage=function(a){e.ri._didMessage(a.data)},e.unload_ref=c.unload_add(function(){e.ws.close()}),e.ws.onclose=function(){e.ri._didMessage(c.closeFrame(1006,"WebSocket connection broken"))}};z.prototype.doSend=function(a){this.ws.send("["+a+"]")},z.prototype.doCleanup=function(){var a=this,b=a.ws;b&&(b.onmessage=b.onclose=null,b.close(),c.unload_del(a.unload_ref),a.unload_ref=a.ri=a.ws=null)},z.enabled=function(){return!!b.WebSocket||!!b.MozWebSocket},z.roundTrips=2;var A=function(){};A.prototype.send_constructor=function(a){var b=this;b.send_buffer=[],b.sender=a},A.prototype.doSend=function(a){var b=this;b.send_buffer.push(a),b.send_stop||b.send_schedule()},A.prototype.send_schedule_wait=function(){var a=this,b;a.send_stop=function(){a.send_stop=null,clearTimeout(b)},b=c.delay(25,function(){a.send_stop=null,a.send_schedule()})},A.prototype.send_schedule=function(){var a=this;if(a.send_buffer.length>0){var b="["+a.send_buffer.join(",")+"]";a.send_stop=a.sender(a.trans_url,b,function(b,c){a.send_stop=null,b===!1?a.ri._didClose(1006,"Sending error "+c):a.send_schedule_wait()}),a.send_buffer=[]}},A.prototype.send_destructor=function(){var a=this;a._send_stop&&a._send_stop(),a._send_stop=null};var B=function(b,d,e){var f=this;if(!("_send_form"in f)){var g=f._send_form=a.createElement("form"),h=f._send_area=a.createElement("textarea");h.name="d",g.style.display="none",g.style.position="absolute",g.method="POST",g.enctype="application/x-www-form-urlencoded",g.acceptCharset="UTF-8",g.appendChild(h),a.body.appendChild(g)}var g=f._send_form,h=f._send_area,i="a"+c.random_string(8);g.target=i,g.action=b+"/jsonp_send?i="+i;var j;try{j=a.createElement('<iframe name="'+i+'">')}catch(k){j=a.createElement("iframe"),j.name=i}j.id=i,g.appendChild(j),j.style.display="none";try{h.value=d}catch(l){c.log("Your browser is seriously broken. Go home! "+l.message)}g.submit();var m=function(a){if(!j.onerror)return;j.onreadystatechange=j.onerror=j.onload=null,c.delay(500,function(){j.parentNode.removeChild(j),j=null}),h.value="",e(!0)};return j.onerror=j.onload=m,j.onreadystatechange=function(a){j.readyState=="complete"&&m()},m},C=function(a){return function(b,c,d){var e=new a("POST",b+"/xhr_send",c);return e.onfinish=function(a,b){d(a===200||a===204,"http status "+a)},function(a){d(!1,a)}}},D=function(b,d){var e,f=a.createElement("script"),g,h=function(a){g&&(g.parentNode.removeChild(g),g=null),f&&(clearTimeout(e),f.parentNode.removeChild(f),f.onreadystatechange=f.onerror=f.onload=f.onclick=null,f=null,d(a),d=null)},i=!1,j=null;f.id="a"+c.random_string(8),f.src=b,f.type="text/javascript",f.charset="UTF-8",f.onerror=function(a){j||(j=setTimeout(function(){i||h(c.closeFrame(1006,"JSONP script loaded abnormally (onerror)"))},1e3))},f.onload=function(a){h(c.closeFrame(1006,"JSONP script loaded abnormally (onload)"))},f.onreadystatechange=function(a){if(/loaded|closed/.test(f.readyState)){if(f&&f.htmlFor&&f.onclick){i=!0;try{f.onclick()}catch(b){}}f&&h(c.closeFrame(1006,"JSONP script loaded abnormally (onreadystatechange)"))}};if(typeof f.async=="undefined"&&a.attachEvent)if(!/opera/i.test(navigator.userAgent)){try{f.htmlFor=f.id,f.event="onclick"}catch(k){}f.async=!0}else g=a.createElement("script"),g.text="try{var a = document.getElementById('"+f.id+"'); if(a)a.onerror();}catch(x){};",f.async=g.async=!1;typeof f.async!="undefined"&&(f.async=!0),e=setTimeout(function(){h(c.closeFrame(1006,"JSONP script loaded abnormally (timeout)"))},35e3);var l=a.getElementsByTagName("head")[0];return l.insertBefore(f,l.firstChild),g&&l.insertBefore(g,l.firstChild),h},E=y["jsonp-polling"]=function(a,b){c.polluteGlobalNamespace();var d=this;d.ri=a,d.trans_url=b,d.send_constructor(B),d._schedule_recv()};E.prototype=new A,E.prototype._schedule_recv=function(){var a=this,b=function(b){a._recv_stop=null,b&&(a._is_closing||a.ri._didMessage(b)),a._is_closing||a._schedule_recv()};a._recv_stop=F(a.trans_url+"/jsonp",D,b)},E.enabled=function(){return!0},E.need_body=!0,E.prototype.doCleanup=function(){var a=this;a._is_closing=!0,a._recv_stop&&a._recv_stop(),a.ri=a._recv_stop=null,a.send_destructor()};var F=function(a,d,e){var f="a"+c.random_string(6),g=a+"?c="+escape(h+"."+f),i=0,j=function(a){switch(i){case 0:delete b[h][f],e(a);break;case 1:e(a),i=2;break;case 2:delete b[h][f]}},k=d(g,j);b[h][f]=k;var l=function(){b[h][f]&&(i=1,b[h][f](c.closeFrame(1e3,"JSONP user aborted read")))};return l},G=function(){};G.prototype=new A,G.prototype.run=function(a,b,c,d,e){var f=this;f.ri=a,f.trans_url=b,f.send_constructor(C(e)),f.poll=new $(a,d,b+c,e)},G.prototype.doCleanup=function(){var a=this;a.poll&&(a.poll.abort(),a.poll=null)};var H=y["xhr-streaming"]=function(a,b){this.run(a,b,"/xhr_streaming",bd,c.XHRCorsObject)};H.prototype=new G,H.enabled=function(){return b.XMLHttpRequest&&"withCredentials"in new XMLHttpRequest&&!/opera/i.test(navigator.userAgent)},H.roundTrips=2,H.need_body=!0;var I=y["xdr-streaming"]=function(a,b){this.run(a,b,"/xhr_streaming",bd,c.XDRObject)};I.prototype=new G,I.enabled=function(){return!!b.XDomainRequest},I.roundTrips=2;var J=y["xhr-polling"]=function(a,b){this.run(a,b,"/xhr",bd,c.XHRCorsObject)};J.prototype=new G,J.enabled=H.enabled,J.roundTrips=2;var K=y["xdr-polling"]=function(a,b){this.run(a,b,"/xhr",bd,c.XDRObject)};K.prototype=new G,K.enabled=I.enabled,K.roundTrips=2;var L=function(){};L.prototype.i_constructor=function(a,b,d){var e=this;e.ri=a,e.origin=c.getOrigin(d),e.base_url=d,e.trans_url=b;var f=d+"/iframe.html";e.ri._options.devel&&(f+="?t="+ +(new Date)),e.window_id=c.random_string(8),f+="#"+e.window_id,e.iframeObj=c.createIframe(f,function(a){e.ri._didClose(1006,"Unable to load an iframe ("+a+")")}),e.onmessage_cb=c.bind(e.onmessage,e),c.attachMessage(e.onmessage_cb)},L.prototype.doCleanup=function(){var a=this;if(a.iframeObj){c.detachMessage(a.onmessage_cb);try{a.iframeObj.iframe.contentWindow&&a.postMessage("c")}catch(b){}a.iframeObj.cleanup(),a.iframeObj=null,a.onmessage_cb=a.iframeObj=null}},L.prototype.onmessage=function(a){var b=this;if(a.origin!==b.origin)return;var c=a.data.slice(0,8),d=a.data.slice(8,9),e=a.data.slice(9);if(c!==b.window_id)return;switch(d){case"s":b.iframeObj.loaded(),b.postMessage("s",JSON.stringify([y.version,b.protocol,b.trans_url,b.base_url]));break;case"t":b.ri._didMessage(e)}},L.prototype.postMessage=function(a,b){var c=this;c.iframeObj.post(c.window_id+a+(b||""),c.origin)},L.prototype.doSend=function(a){this.postMessage("m",a)},L.enabled=function(){var a=navigator&&navigator.userAgent&&navigator.userAgent.indexOf("Konqueror")!==-1;return(typeof b.postMessage=="function"||typeof b.postMessage=="object")&&!a};var M,N=function(a,d){parent!==b?parent.postMessage(M+a+(d||""),"*"):c.log("Can't postMessage, no parent window.",a,d)},O=function(){};O.prototype._didClose=function(a,b){N("t",c.closeFrame(a,b))},O.prototype._didMessage=function(a){N("t",a)},O.prototype._doSend=function(a){this._transport.doSend(a)},O.prototype._doCleanup=function(){this._transport.doCleanup()},c.parent_origin=undefined,y.bootstrap_iframe=function(){var d;M=a.location.hash.slice(1);var e=function(a){if(a.source!==parent)return;typeof c.parent_origin=="undefined"&&(c.parent_origin=a.origin);if(a.origin!==c.parent_origin)return;var e=a.data.slice(0,8),f=a.data.slice(8,9),g=a.data.slice(9);if(e!==M)return;switch(f){case"s":var h=JSON.parse(g),i=h[0],j=h[1],k=h[2],l=h[3];i!==y.version&&c.log('Incompatibile SockJS! Main site uses: "'+i+'", the iframe:'+' "'+y.version+'".');if(!c.flatUrl(k)||!c.flatUrl(l)){c.log("Only basic urls are supported in SockJS");return}if(!c.isSameOriginUrl(k)||!c.isSameOriginUrl(l)){c.log("Can't connect to different domain from within an iframe. ("+JSON.stringify([b.location.href,k,l])+")");return}d=new O,d._transport=new O[j](d,k,l);break;case"m":d._doSend(g);break;case"c":d&&d._doCleanup(),d=null}};c.attachMessage(e),N("s")};var P=function(a,b){var d=this;c.delay(function(){d.doXhr(a,b)})};P.prototype=new f(["finish"]),P.prototype.doXhr=function(a,b){var d=this,e=(new Date).getTime(),f=new b("GET",a+"/info"),g=c.delay(8e3,function(){f.ontimeout()});f.onfinish=function(a,b){clearTimeout(g),g=null;if(a===200){var c=(new Date).getTime()-e,f=JSON.parse(b);typeof f!="object"&&(f={}),d.emit("finish",f,c)}else d.emit("finish")},f.ontimeout=function(){f.close(),d.emit("finish")}};var Q=function(b){var d=this,e=function(){var a=new L;a.protocol="w-iframe-info-receiver";var c=function(b){if(typeof b=="string"&&b.substr(0,1)==="m"){var c=JSON.parse(b.substr(1)),e=c[0],f=c[1];d.emit("finish",e,f)}else d.emit("finish");a.doCleanup(),a=null},e={_options:{},_didClose:c,_didMessage:c};a.i_constructor(e,b,b)};a.body?e():c.attachEvent("load",e)};Q.prototype=new f(["finish"]);var R=function(){var a=this;c.delay(function(){a.emit("finish",{},2e3)})};R.prototype=new f(["finish"]);var S=function(a){if(c.isSameOriginUrl(a))return new P(a,c.XHRLocalObject);switch(c.isXHRCorsCapable()){case 1:return new P(a,c.XHRLocalObject);case 2:return new P(a,c.XDRObject);case 3:return new Q(a);default:return new R}},T=O["w-iframe-info-receiver"]=function(a,b,d){var e=new P(d,c.XHRLocalObject);e.onfinish=function(b,c){a._didMessage("m"+JSON.stringify([b,c])),a._didClose()}};T.prototype.doCleanup=function(){};var U=y["iframe-eventsource"]=function(){var a=this;a.protocol="w-iframe-eventsource",a.i_constructor.apply(a,arguments)};U.prototype=new L,U.enabled=function(){return"EventSource"in b&&L.enabled()},U.need_body=!0,U.roundTrips=3;var V=O["w-iframe-eventsource"]=function(a,b){this.run(a,b,"/eventsource",_,c.XHRLocalObject)};V.prototype=new G;var W=y["iframe-xhr-polling"]=function(){var a=this;a.protocol="w-iframe-xhr-polling",a.i_constructor.apply(a,arguments)};W.prototype=new L,W.enabled=function(){return b.XMLHttpRequest&&L.enabled()},W.need_body=!0,W.roundTrips=3;var X=O["w-iframe-xhr-polling"]=function(a,b){this.run(a,b,"/xhr",bd,c.XHRLocalObject)};X.prototype=new G;var Y=y["iframe-htmlfile"]=function(){var a=this;a.protocol="w-iframe-htmlfile",a.i_constructor.apply(a,arguments)};Y.prototype=new L,Y.enabled=function(){return L.enabled()},Y.need_body=!0,Y.roundTrips=3;var Z=O["w-iframe-htmlfile"]=function(a,b){this.run(a,b,"/htmlfile",bc,c.XHRLocalObject)};Z.prototype=new G;var $=function(a,b,c,d){var e=this;e.ri=a,e.Receiver=b,e.recv_url=c,e.AjaxObject=d,e._scheduleRecv()};$.prototype._scheduleRecv=function(){var a=this,b=a.poll=new a.Receiver(a.recv_url,a.AjaxObject),c=0;b.onmessage=function(b){c+=1,a.ri._didMessage(b.data)},b.onclose=function(c){a.poll=b=b.onmessage=b.onclose=null,a.poll_is_closing||(c.reason==="permanent"?a.ri._didClose(1006,"Polling error ("+c.reason+")"):a._scheduleRecv())}},$.prototype.abort=function(){var a=this;a.poll_is_closing=!0,a.poll&&a.poll.abort()};var _=function(a){var b=this,d=new EventSource(a);d.onmessage=function(a){b.dispatchEvent(new e("message",{data:unescape(a.data)}))},b.es_close=d.onerror=function(a,f){var g=f?"user":d.readyState!==2?"network":"permanent";b.es_close=d.onmessage=d.onerror=null,d.close(),d=null,c.delay(200,function(){b.dispatchEvent(new e("close",{reason:g}))})}};_.prototype=new d,_.prototype.abort=function(){var a=this;a.es_close&&a.es_close({},!0)};var ba,bb=function(){if(ba===undefined)if("ActiveXObject"in b)try{ba=!!(new ActiveXObject("htmlfile"))}catch(a){}else ba=!1;return ba},bc=function(a){var d=this;c.polluteGlobalNamespace(),d.id="a"+c.random_string(6,26),a+=(a.indexOf("?")===-1?"?":"&")+"c="+escape(h+"."+d.id);var f=bb()?c.createHtmlfile:c.createIframe,g;b[h][d.id]={start:function(){g.loaded()},message:function(a){d.dispatchEvent(new e("message",{data:a}))},stop:function(){d.iframe_close({},"network")}},d.iframe_close=function(a,c){g.cleanup(),d.iframe_close=g=null,delete b[h][d.id],d.dispatchEvent(new e("close",{reason:c}))},g=f(a,function(a){d.iframe_close({},"permanent")})};bc.prototype=new d,bc.prototype.abort=function(){var a=this;a.iframe_close&&a.iframe_close({},"user")};var bd=function(a,b){var c=this,d=0;c.xo=new b("POST",a,null),c.xo.onchunk=function(a,b){if(a!==200)return;for(;;){var f=b.slice(d),g=f.indexOf("\n");if(g===-1)break;d+=g+1;var h=f.slice(0,g);c.dispatchEvent(new e("message",{data:h}))}},c.xo.onfinish=function(a,b){c.xo.onchunk(a,b),c.xo=null;var d=a===200?"network":"permanent";c.dispatchEvent(new e("close",{reason:d}))}};return bd.prototype=new d,bd.prototype.abort=function(){var a=this;a.xo&&(a.xo.close(),a.dispatchEvent(new e("close",{reason:"user"})),a.xo=null)},y.getUtils=function(){return c},y.getIframeTransport=function(){return L},y}(),"_sockjs_onload"in window&&setTimeout(_sockjs_onload,1),typeof define=="function"&&define.amd&&define("sockjs",[],function(){return SockJS})

'use strict';


angular.module('app', [
    'ngRoute',
    
    
    //Angulr:
    //'ngAnimate',
    'ngAria',
    'textAngular',
    'xeditable',
    'ngCookies',
    'ngResource',
    'ngSanitize',
    'ngTouch',
    'ngStorage',
    'ngFileUpload',
    'angular-img-cropper',
    'ui.router',
    'ui.bootstrap',
    'ui.utils',
    'ui.load',
    'ui.jq',
    'oc.lazyLoad',

    'pascalprecht.translate',
    'ngMaterial',
    //'720kb.socialshare',
    'djds4rce.angular-socialshare',
    'angular-carousel',
    //'ngLoginSubmit',
    
    'hj.uiSrefFastclick',
    //'ng-fastclick',
     //HotelApp:
    'isteven-multi-select',
    //'hotelApp.shared',
    //'hotelApp.logService',
    'hotelApp.slideCtrl',
    //'hotelApp.checkInClient',

    'hotelApp.templates',
    
    //TODO Wugwn
    //'hotelApp.initTranslations',
    
    
    //'hotelApp.initTranslate',
    
    //DATA TRANSFER OBJECTS
    'hotelApp.customerDto',
    'hotelApp.hotelDto',
    'hotelApp.activityDto',
    //'hotelApp.userDto',
    //Help DTO Services
    'hotelApp.filterHotelCity',
    
    'hotelApp.hotelState',
    'hotelApp.hotelService',
    
    'hotelApp.hotelLoginService',
    'hotelApp.hotelCheckinService',
    'hotelApp.hotelNotification',
        
    "hotelApp.datepicker",

    //'hotelApp.serverCommunicatorService',
    //'hotelApp.loginCustomerService',
    //'hotelApp.registerCustomerService',
    'hotelApp.sessionCustomerService',
    'hotelApp.logoutCustomerService',
    //'hotelApp.checkinCustomerService',
    'hotelApp.checkIn',
    // page controllers:
    //'hotelApp.language',
    'hotelApp.login',
    //'hotelApp.checkIn',
    //'hotelApp.register',
    'hotelApp.werbung',
    //'hotelApp.profile',
    //'hotelApp.imageCrop',
    'hotelApp.hotel',
    'hotelApp.hotelCtrl',
    'hotelApp.activityCtrl',

    //'hotelApp.chat',
    //'hotelApp.chatList',
    //'hotelApp.wall',
    //'hotelApp.forgotpwd',
    //'hotelApp.activities',
    //'hotelApp.hotelList',
    
    //"hotelApp.fileUploader",
    //"hotelApp.chatService",
    //"hotelApp.wallService",
    //"hotelApp.fileUploadService",
    "hotelApp.notificationService"
    //"hotelApp.activityService"
    
])
    .
    run(function() {
        FastClick.attach(document.body);
    })
;

//##########################################################################
    //.config(configFunction)
    //.run(runFunction);


//configFunction.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];
//function configFunction($locationProvider, $stateProvider, $urlRouterProvider) {
//    $locationProvider.html5Mode(true);
//
//    $urlRouterProvider.otherwise("/");
//
//    $stateProvider
//
//        .state('home', {
//            url: '/',
//            templateUrl: 'views/home.html',
//            controller: function ($rootScope) {
//                $rootScope.title = 'Snoopex Computer Repairs and Upgrades Campbelltown and Wollongong';
//                $rootScope.metaDescription = 'Professional computer repairs, upgrades and custom built PCs. Providing professional computer repair services to the Campbelltown and Wollongong areas for over 20 years.';
//            }
//        })
//
//        // ... other routes excluded for brevity
//
//    ;
//}


// config

var app =
    angular.module('app')
        .config(
        [        '$controllerProvider', '$compileProvider', '$filterProvider', '$provide',
            function ($controllerProvider,   $compileProvider,   $filterProvider,   $provide) {

                // lazy controller, directive and service
                app.controller = $controllerProvider.register;
                app.directive  = $compileProvider.directive;
                app.filter     = $filterProvider.register;
                app.factory    = $provide.factory;
                app.service    = $provide.service;
                app.constant   = $provide.constant;
                app.value      = $provide.value;
            }
        ])
        .config(['$translateProvider', function($translateProvider){
            // Register a loader for the static files
            // So, the module will search missing translation tables under the specified urls.
            // Those urls are [prefix][langKey][suffix].
            $translateProvider.useStaticFilesLoader({
                prefix: 'angulr/l10n/',
                suffix: '.json'
            });
            // Tell the module what language to use by default
            $translateProvider.preferredLanguage('en');
            // Tell the module to store the language in the local storage
            $translateProvider.useLocalStorage();
        }]);
// lazyload config

angular.module('app')
    /**
   * jQuery plugin config use ui-jq directive , config the js and css files that required
   * key: function name of the jQuery plugin
   * value: array of the css js file located
   */
  .constant('JQ_CONFIG', {
        
        
      //easyPieChart:   [   'libs/jquery.easy-pie-chart/dist/jquery.easypiechart.fill.js'],
      //sparkline:      [   'libs/jquery.sparkline/dist/jquery.sparkline.retina.js'],
      //plot:           [   'libs/flot/jquery.flot.js',
      //                    'libs/flot/jquery.flot.pie.js', 
      //                    'libs/flot/jquery.flot.resize.js',
      //                    'libs/flot.tooltip/js/jquery.flot.tooltip.js',
      //                    'libs/flot.orderbars/js/jquery.flot.orderBars.js',
      //                    'libs/flot-spline/js/jquery.flot.spline.js'],
      //moment:         [   'libs/moment/moment.js'],
      //screenfull:     [   'libs/screenfull/dist/screenfull.min.js'],
      //slimScroll:     [   'libs/slimscroll/jquery.slimscroll.min.js'],
      //sortable:       [   'libs/html5sortable/jquery.sortable.js'],
      //nestable:       [   'libs/nestable/jquery.nestable.js',
      //                    'libs/nestable/jquery.nestable.css'],
      //filestyle:      [   'libs/bootstrap-filestyle/src/bootstrap-filestyle.js'],
      //slider:         [   'libs/bootstrap-slider/bootstrap-slider.js',
      //                    'libs/bootstrap-slider/bootstrap-slider.css'],
      //chosen:         [   'libs/chosen/chosen.jquery.min.js',
      //                    'libs/bootstrap-chosen/bootstrap-chosen.css'],
      //TouchSpin:      [   'libs/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min.js',
      //                    'libs/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min.css'],
      //wysiwyg:        [   'libs/bootstrap-wysiwyg/bootstrap-wysiwyg.js',
      //                    'libs/bootstrap-wysiwyg/external/jquery.hotkeys.js'],
      //dataTable:      [   'libs/datatables/media/js/jquery.dataTables.min.js',
      //                    'libs/plugins/integration/bootstrap/3/dataTables.bootstrap.js',
      //                    'libs/plugins/integration/bootstrap/3/dataTables.bootstrap.css'],
      //vectorMap:      [   'libs/bower-jvectormap/jquery-jvectormap-1.2.2.min.js', 
      //                    'libs/bower-jvectormap/jquery-jvectormap-world-mill-en.js',
      //                    'libs/bower-jvectormap/jquery-jvectormap-us-aea-en.js',
      //                    'libs/bower-jvectormap/jquery-jvectormap-1.2.2.css'],
      //footable:       [   'libs/footable/dist/footable.all.min.js',
      //                    'libs/footable/css/footable.core.css'],
      //fullcalendar:   [   'libs/moment/moment.js',
      //                    'libs/fullcalendar/dist/fullcalendar.min.js',
      //                    'libs/fullcalendar/dist/fullcalendar.css',
      //                    'libs/fullcalendar/dist/fullcalendar.theme.css'],
      //daterangepicker:[   'libs/moment/moment.js',
      //                    'libs/bootstrap-daterangepicker/daterangepicker.js',
      //                    'libs/bootstrap-daterangepicker/daterangepicker-bs3.css'],
      //tagsinput:      [   'libs/bootstrap-tagsinput/dist/bootstrap-tagsinput.js',
      //                    'libs/bootstrap-tagsinput/dist/bootstrap-tagsinput.css']


        easyPieChart:   [   'libs/jquery/jquery.easy-pie-chart/dist/jquery.easypiechart.fill.js'],
        sparkline:      [   'libs/jquery/jquery.sparkline/dist/jquery.sparkline.retina.js'],
        plot:           [   'libs/jquery/flot/jquery.flot.js',
            'libs/jquery/flot/jquery.flot.pie.js',
            'libs/jquery/flot/jquery.flot.resize.js',
            'libs/jquery/flot.tooltip/js/jquery.flot.tooltip.min.js',
            'libs/jquery/flot.orderbars/js/jquery.flot.orderBars.js',
            'libs/jquery/flot-spline/js/jquery.flot.spline.min.js'],
        moment:         [   'libs/jquery/moment/moment.js'],
        screenfull:     [   'libs/jquery/screenfull/dist/screenfull.min.js'],
        slimScroll:     [   'libs/jquery/slimscroll/jquery.slimscroll.min.js'],
        sortable:       [   'libs/jquery/html5sortable/jquery.sortable.js'],
        nestable:       [   'libs/jquery/nestable/jquery.nestable.js',
            'libs/jquery/nestable/jquery.nestable.css'],
        filestyle:      [   'libs/jquery/bootstrap-filestyle/src/bootstrap-filestyle.js'],
        slider:         [   'libs/jquery/bootstrap-slider/bootstrap-slider.js',
            'libs/jquery/bootstrap-slider/bootstrap-slider.css'],
        chosen:         [   'libs/jquery/chosen/chosen.jquery.min.js',
            'libs/jquery/chosen/bootstrap-chosen.css'],
        TouchSpin:      [   'libs/jquery/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min.js',
            'libs/jquery/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min.css'],
        wysiwyg:        [   'libs/jquery/bootstrap-wysiwyg/bootstrap-wysiwyg.js',
            'libs/jquery/bootstrap-wysiwyg/external/jquery.hotkeys.js'],
        dataTable:      [   'libs/jquery/datatables/media/js/jquery.dataTables.min.js',
            'libs/jquery/plugins/integration/bootstrap/3/dataTables.bootstrap.js',
            'libs/jquery/plugins/integration/bootstrap/3/dataTables.bootstrap.css'],
        vectorMap:      [   'libs/jquery/bower-jvectormap/jquery-jvectormap-1.2.2.min.js',
            'libs/jquery/bower-jvectormap/jquery-jvectormap-world-mill-en.js',
            'libs/jquery/bower-jvectormap/jquery-jvectormap-us-aea-en.js',
            'libs/jquery/bower-jvectormap/jquery-jvectormap.css'],
        footable:       [   'libs/jquery/footable/dist/footable.all.min.js',
            'libs/jquery/footable/css/footable.core.css'],
        fullcalendar:   [   'libs/jquery/moment/moment.js',
            'libs/jquery/fullcalendar/dist/fullcalendar.min.js',
            'libs/jquery/fullcalendar/dist/fullcalendar.css',
            'libs/jquery/fullcalendar/dist/fullcalendar.theme.css'],
        daterangepicker:[   'libs/jquery/moment/moment.js',
            'libs/jquery/bootstrap-daterangepicker/daterangepicker.js',
            'libs/jquery/bootstrap-daterangepicker/daterangepicker-bs3.css'],
        tagsinput:      [   'libs/jquery/bootstrap-tagsinput/dist/bootstrap-tagsinput.js',
            'libs/jquery/bootstrap-tagsinput/dist/bootstrap-tagsinput.css']  
    }
  )
    .constant('MODULE_CONFIG', [
            {
                name: 'ngGrid',
                files: [
                    'libs/ng-grid/build/ng-grid.min.js',
                    'libs/ng-grid/ng-grid.min.css',
                    'libs/ng-grid/ng-grid.bootstrap.css'
                ]
            },
            {
                name: 'ChatService',
                files: [
                    'angulr/js/services/chatService.js'
                ]
            },
            {
                name: 'ui.grid',
                files: [
                    'libs/angular-ui-grid/ui-grid.min.js',
                    'libs/angular-ui-grid/ui-grid.min.css',
                    'libs/angular-ui-grid/ui-grid.bootstrap.css'
                ]
            },
            {
                name: 'ui.select',
                files: [
                    'libs/angular-ui-select/dist/select.min.js',
                    'libs/angular-ui-select/dist/select.min.css'
                ]
            },
            {
                name:'angularFileUpload',
                files: [
                    'libs/angular-file-upload/angular-file-upload.js'
                ]
            },
            {
                name:'ui.calendar',
                files: ['libs/angular-ui-calendar/src/calendar.js']
            },
            {
                name: 'ngImgCrop',
                files: [
                    'libs/ngImgCrop/compile/minified/ng-img-crop.js',
                    'libs/ngImgCrop/compile/minified/ng-img-crop.css'
                ]
            }, 
            {
                name: 'ImageCropper',
                files: [
                    'angulr/js/lib/ng-img-crop.js',
                    'angulr/css/ng-img-crop/ng-img-crop.css'
                ]
            },
            {
                name: 'angularBootstrapNavTree',
                files: [
                    'libs/angular-bootstrap-nav-tree/dist/abn_tree_directive.js',
                    'libs/angular-bootstrap-nav-tree/dist/abn_tree.css'
                ]
            },
            {
                name: 'toaster',
                files: [
                    'libs/angularjs-toaster/toaster.js',
                    'libs/angularjs-toaster/toaster.css'
                ]
            },
            {
                name: 'textAngular',
                files: [
                    'libs/textAngular/dist/textAngular-sanitize.min.js',
                    'libs/textAngular/dist/textAngular.min.js'
                ]
            },
            {
                name: 'vr.directives.slider',
                files: [
                    'libs/venturocket-angular-slider/build/angular-slider.min.js',
                    'libs/venturocket-angular-slider/build/angular-slider.css'
                ]
            },
            {
                name: 'com.2fdevs.videogular',
                files: [
                    'libs/videogular/videogular.min.js'
                ]
            },
            {
                name: 'com.2fdevs.videogular.plugins.controls',
                files: [
                    'libs/videogular-controls/controls.min.js'
                ]
            },
            {
                name: 'com.2fdevs.videogular.plugins.buffering',
                files: [
                    'libs/videogular-buffering/buffering.min.js'
                ]
            },
            {
                name: 'com.2fdevs.videogular.plugins.overlayplay',
                files: [
                    'libs/videogular-overlay-play/overlay-play.min.js'
                ]
            },
            {
                name: 'com.2fdevs.videogular.plugins.poster',
                files: [
                    'libs/videogular-poster/poster.min.js'
                ]
            },
            {
                name: 'com.2fdevs.videogular.plugins.imaads',
                files: [
                    'libs/videogular-ima-ads/ima-ads.min.js'
                ]
            },
            {
                name: 'xeditable',
                files: [
                    'libs/angular-xeditable/dist/js/xeditable.min.js',
                    'libs/angular-xeditable/dist/css/xeditable.css'
                ]
            },
            {
                name: 'smart-table',
                files: [
                    'libs/angular-smart-table/dist/smart-table.min.js'
                ]
            },
            {
                name: 'angular-skycons',
                files: [
                    'libs/angular-skycons/angular-skycons.js'
                ]
            }
        ]
    )
        // oclazyload config
        .config(['$ocLazyLoadProvider', 'MODULE_CONFIG', function($ocLazyLoadProvider, MODULE_CONFIG) {
            // We configure ocLazyLoad to use the lib script.js as the async loader
            $ocLazyLoadProvider.config({
                debug:  false,
                events: true,
                modules: MODULE_CONFIG
            });
        }])
    ;
angular.module('hotelApp.templates', []).run(['$templateCache', function($templateCache) {
  "use strict";
  $templateCache.put("angulr/tpl/app.html",
    "<!------ #################### Material ###################### --->\n" +
    " \n" +
    " <!--//EUGEN: bottom menu fixed height-->\n" +
    " <div style=\"/*margin-bottom: 50px;*/ max-width: 800px;\" ng-class=\"{'pcContentWidth': !isSmartDevice}\">\n" +
    "\n" +
    "     <div ng-controller=\"ToasterDemoCtrl\">\n" +
    "         <toaster-container toaster-options=\"{'position-class': 'toast-top-right', 'close-button':true, 'timeOut': '20000'}\"></toaster-container>\n" +
    "     </div>\n" +
    "\n" +
    "     <div ng-init=\"app.settings.container = false;\" id=\"topHeaderElt\" class=\"scrollingSuperElt md-navbar navbar {{app.rootSettings.navbarHeaderColor}} md-whiteframe-z1\" data-ng-include=\" 'angulr/tpl/blocks/material.header.html' \" >\n" +
    "     </div>\n" +
    "     \n" +
    "     <div layout=\"row\" class=\"scrollingSuperElt\">\n" +
    "         <!-- menu -->\n" +
    "         <div flex id=\"app-aside-div\" style=\"z-index: 100;\" class=\"bg-black md-whiteframe-z0 md-aside md-content hidden-xs\" data-ng-include=\" 'angulr/tpl/blocks/material.aside.html' \">\n" +
    "         </div>\n" +
    "         <!-- / menu -->\n" +
    "    \n" +
    "         <!-- view -->\n" +
    "         <div flex layout=\"column\" id=\"angulrContent\" class=\"scrollingSuperElt\">\n" +
    "             <div ui-butterbar></div>\n" +
    "             <a href class=\"off-screen-toggle hide\" ui-toggle-class=\"off-screen\" data-target=\".md-aside\" ></a>\n" +
    "             <div id=\"mdContent\" class=\"md-content scrollingSuperElt\" ui-view></div>\n" +
    "         </div>\n" +
    "         <!-- / view -->\n" +
    "     </div>\n" +
    "\n" +
    "     <!-- footer, hide if checkin-state -->\n" +
    "     <!--<div style=\"position: fixed; bottom: 0; z-index: 99;\" class=\"app-footer navbar navbar-fixed-bottom bg-light lt b-t\" ng-class=\"{'m-n': app.hideAside, 'hide': app.hideFooter || !isSmartDevice}\" ui-view=\"footer\" ng-show=\"false && !app.hideFooter && (app.header.tabIndex!=2) && ( app.header.tabIndex!=0)\">-->\n" +
    "     <!--</div>-->\n" +
    "     \n" +
    "     <div data-ng-include=\" 'angulr/tpl/hotel/blocks/impressumBottomBlock.html' \" ng-if=\"::!isSmartDevice\"/>\n" +
    "\n" +
    "     <!-- /footer -->\n" +
    "\n" +
    " </div>\n" +
    "\n" +
    " ");
  $templateCache.put("angulr/tpl/blocks/aside.html",
    "<!--<div class=\"aside-wrap\">-->\n" +
    "  <!--&lt;!&ndash; if you want to use a custom scroll when aside fixed, use the slimScroll-->\n" +
    "    <!--<div class=\"navi-wrap\" ui-jq=\"slimScroll\" ui-options=\"{height:'100%', size:'8px'}\">-->\n" +
    "  <!--&ndash;&gt;-->\n" +
    "  <!--<div class=\"navi-wrap\">  -->\n" +
    "    <!--&lt;!&ndash; user &ndash;&gt;-->\n" +
    "    <!--<div class=\"clearfix hidden-xs text-center hide\" id=\"aside-user\">-->\n" +
    "      <!--<div class=\"dropdown wrapper\" dropdown>-->\n" +
    "        <!--<div style=\"float: left;\">-->\n" +
    "            <!--<a ui-sref=\"app.me\">-->\n" +
    "              <!--<span class=\"thumb-lg w-auto-folded avatar m-t-sm\" style=\"float: left; margin-right: 5px;\">-->\n" +
    "                <!--&lt;!&ndash;<img src=\"{{getProfileImageUrl()}}\" class=\"img-full\" alt=\"...\">&ndash;&gt;-->\n" +
    "                <!--<img ng-src=\"{{hotelState.profileData.avatarUrl}}\" class=\"img-full\" alt=\"...\">-->\n" +
    "              <!--</span>-->\n" +
    "            <!--</a>-->\n" +
    "         <!--</div>-->\n" +
    "         <!--<div style=\"float: left;\">-->\n" +
    "          <!--<a href class=\"dropdown-toggle hidden-folded\" dropdown-toggle>-->\n" +
    "            <!--<span class=\"clear\">-->\n" +
    "              <!--<span class=\"block m-t-sm\">-->\n" +
    "                <!--<strong class=\"font-bold text-lt\">{{hotelState..profileData.firstName}} {{hotelState.profileData.lastName}}</strong> -->\n" +
    "                <!--<b class=\"caret\"></b>-->\n" +
    "              <!--</span>-->\n" +
    "              <!--&lt;!&ndash;<span class=\"text-muted text-xs block\">{{profileData.jobTitle}} {{profileData.jobDescriptor}}</span>&ndash;&gt;-->\n" +
    "            <!--</span>-->\n" +
    "          <!--</a>-->\n" +
    "        <!--</div>-->\n" +
    "       <!-- -->\n" +
    "        <!--&lt;!&ndash; dropdown &ndash;&gt;-->\n" +
    "        <!--<ul class=\"dropdown-menu animated fadeInRight w hidden-folded\">-->\n" +
    "          <!--&lt;!&ndash;<li class=\"wrapper b-b m-b-sm bg-info m-t-n-xs\">&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<span class=\"arrow top hidden-folded arrow-info\"></span>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<div>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;<p>300mb of 500mb used</p>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<progressbar value=\"60\" type=\"white\" class=\"progress-xs m-b-none dker\"></progressbar>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;</li>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;<li>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<a href>Settings</a>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;</li>&ndash;&gt;-->\n" +
    "          <!--<li>-->\n" +
    "            <!--<a ui-sref=\"app.me\">Profile</a>-->\n" +
    "          <!--</li>-->\n" +
    "          <!--&lt;!&ndash;<li>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<a href>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;<span class=\"badge bg-danger pull-right\">3</span>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;Notifications&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;</a>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;</li>&ndash;&gt;-->\n" +
    "          <!--<li class=\"divider\"></li>-->\n" +
    "          <!--<li ng-show=\"profileData.hotelId>0\">-->\n" +
    "            <!--<a ng-click=\"resetCheckin()\">CheckOut</a>-->\n" +
    "          <!--</li>-->\n" +
    "          <!--<li>-->\n" +
    "            <!--<a ui-sref=\"access.login\" ng-click=\"resetLogin()\">Logout</a>-->\n" +
    "          <!--</li>-->\n" +
    "        <!--</ul>-->\n" +
    "        <!--&lt;!&ndash; / dropdown &ndash;&gt;-->\n" +
    "      <!--</div>-->\n" +
    "      <!--<div class=\"line dk hidden-folded\"></div>-->\n" +
    "    <!--</div>-->\n" +
    "    <!--&lt;!&ndash; / user &ndash;&gt;-->\n" +
    "\n" +
    "    <!--&lt;!&ndash; nav &ndash;&gt;-->\n" +
    "    <!--<nav ui-nav class=\"navi clearfix\" ng-include=\"'angulr/tpl/blocks/nav.html'\"></nav>-->\n" +
    "    <!--&lt;!&ndash; nav &ndash;&gt;-->\n" +
    "\n" +
    "    <!--&lt;!&ndash; aside footer &ndash;&gt;-->\n" +
    "    <!--<div class=\"wrapper m-t\">-->\n" +
    "      <!--&lt;!&ndash;<div class=\"text-center-folded\">&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;<span class=\"pull-right pull-none-folded\">60%</span>&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;<span class=\"hidden-folded\" translate=\"aside.MILESTONE\">Milestone</span>&ndash;&gt;-->\n" +
    "      <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "      <!--&lt;!&ndash;<progressbar value=\"60\" class=\"progress-xxs m-t-sm dk\" type=\"info\"></progressbar>&ndash;&gt;-->\n" +
    "      <!--&lt;!&ndash;<div class=\"text-center-folded\">&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;<span class=\"pull-right pull-none-folded\">35%</span>&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;<span class=\"hidden-folded\" translate=\"aside.RELEASE\">Release</span>&ndash;&gt;-->\n" +
    "      <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "      <!--&lt;!&ndash;<progressbar value=\"35\" class=\"progress-xxs m-t-sm dk\" type=\"primary\"></progressbar>&ndash;&gt;-->\n" +
    "    <!--</div>-->\n" +
    "    <!--&lt;!&ndash; / aside footer &ndash;&gt;-->\n" +
    "  <!--</div>-->\n" +
    "<!--</div>-->");
  $templateCache.put("angulr/tpl/blocks/aside.music.html",
    "<div class=\"aside-wrap\">\n" +
    "  <div class=\"app-aside-footer dk\">    \n" +
    "    <div class=\"dropdown dropup\" dropdown>\n" +
    "      <a href class=\"pull-right wrapper m-r-xs\" ng-click=\"app.settings.asideFolded = !app.settings.asideFolded\">\n" +
    "        <i class=\"fa {{app.settings.asideFolded ? 'fa-indent' : 'fa-dedent'}} fa-fw\"></i>\n" +
    "      </a>\n" +
    "      <a href class=\"dropdown-toggle clear hidden-folded wrapper-sm padder\" dropdown-toggle>\n" +
    "        <span class=\"thumb-xxs avatar pull-left m-r-sm\">\n" +
    "          <img src=\"angulr/img/a0.jpg\" alt=\"...\">\n" +
    "        </span>\n" +
    "        <span class=\"hidden-sm hidden-md m-t-xs text-ellipsis\">John.Smith</span>\n" +
    "      </a>      \n" +
    "      <!-- dropdown -->\n" +
    "      <ul class=\"dropdown-menu fadeInRight w\"><!-- Eugen weg: animated -->\n" +
    "        <li class=\"wrapper b-b m-b-sm bg-light m-t-n-xs\">\n" +
    "          <div>\n" +
    "            <p>300mb of 500mb used</p>\n" +
    "          </div>\n" +
    "          <progressbar value=\"60\" class=\"progress-xs m-b-none bg-white\"></progressbar>\n" +
    "        </li>\n" +
    "        <li>\n" +
    "          <a href>\n" +
    "            <span class=\"badge bg-danger pull-right\">30%</span>\n" +
    "            <span>Settings</span>\n" +
    "          </a>\n" +
    "        </li>\n" +
    "        <li>\n" +
    "          <a ui-sref=\"app.page.profile\">Profile</a>\n" +
    "        </li>\n" +
    "        <li>\n" +
    "          <a ui-sref=\"app.docs\">\n" +
    "            <span class=\"label bg-info pull-right\">new</span>\n" +
    "            Help\n" +
    "          </a>\n" +
    "        </li>\n" +
    "        <li class=\"divider\"></li>\n" +
    "        <li>\n" +
    "          <a ui-sref=\"app.checkIn\">CheckOut</a>\n" +
    "        </li>        \n" +
    "        <li>\n" +
    "          <a ui-sref=\"access.login\">Logout</a>\n" +
    "        </li>\n" +
    "      </ul>\n" +
    "      <!-- / dropdown -->\n" +
    "    </div>\n" +
    "  </div>\n" +
    "  <div class=\"navi-wrap\">\n" +
    "    <!-- nav -->\n" +
    "    <nav ui-nav class=\"navi clearfix\">\n" +
    "      <!-- list -->\n" +
    "      <ul class=\"nav dk\">\n" +
    "        <li class=\"hidden-folded padder m-t m-b-sm text-muted text-u-c text-xs\">\n" +
    "          <span>Discovery</span>\n" +
    "        </li>\n" +
    "        <li ui-sref-active=\"active\">\n" +
    "          <a ui-sref=\"music.home\">\n" +
    "            <i class=\"icon-disc icon\"></i>\n" +
    "            <span>Recommendation</span>\n" +
    "          </a>\n" +
    "        </li>\n" +
    "        <li ui-sref-active=\"active\">\n" +
    "          <a ui-sref=\"music.genres\">\n" +
    "            <i class=\"icon-list icon\"></i>\n" +
    "            <span>Genres</span>\n" +
    "          </a>\n" +
    "        </li>\n" +
    "        <li ui-sref-active=\"active\">\n" +
    "          <a ui-sref=\"music.mtv\">\n" +
    "            <i class=\"icon-social-youtube icon\"></i>\n" +
    "            <span>MTV</span>\n" +
    "          </a>\n" +
    "        </li>\n" +
    "      </ul>\n" +
    "      <ul class=\"nav\">\n" +
    "        <li class=\"hidden-folded padder m-t m-b-sm text-muted text-u-c text-xs\">\n" +
    "          <span>Your Music</span>\n" +
    "        </li>\n" +
    "        <li ui-sref-active=\"active\">\n" +
    "          <a ui-sref=\"music.playlist({fold:'bookmarkd'})\">\n" +
    "            <i class=\"icon-star icon\"></i>\n" +
    "            <span>Bookmarked</span>\n" +
    "          </a>\n" +
    "        </li>\n" +
    "        <li ui-sref-active=\"active\">\n" +
    "          <a ui-sref=\"music.playlist({fold:'loved'})\">\n" +
    "            <i class=\"icon-heart icon\"></i>\n" +
    "            <span>Loved</span>\n" +
    "          </a>\n" +
    "        </li>\n" +
    "        <li ui-sref-active=\"active\">\n" +
    "          <a ui-sref=\"music.playlist({fold:'history'})\">\n" +
    "            <i class=\"icon-clock icon\"></i>\n" +
    "            <span>History</span>\n" +
    "          </a>\n" +
    "        </li>\n" +
    "        <li class=\"hidden-folded padder m-t m-b-sm text-muted text-u-c text-xs\">\n" +
    "          <span>Playlists</span>\n" +
    "        </li>\n" +
    "        <li ui-sref-active=\"active\">\n" +
    "          <a ui-sref=\"music.playlist({fold:'nature'})\">\n" +
    "            <b class=\"badge bg-info pull-right\">3</b>\n" +
    "            <i class=\"icon-playlist icon\"></i>\n" +
    "            <span>Nature</span>\n" +
    "          </a>\n" +
    "        </li>\n" +
    "        <li ui-sref-active=\"active\">\n" +
    "          <a ui-sref=\"music.playlist({fold:'soundtracks'})\">\n" +
    "            <b class=\"badge dk pull-right\">5</b>\n" +
    "            <i class=\"icon-playlist icon\"></i>\n" +
    "            <span>Soundtracks</span>\n" +
    "          </a>\n" +
    "        </li>\n" +
    "      </ul>\n" +
    "      <!-- / list -->\n" +
    "    </nav>\n" +
    "    <!-- nav -->    \n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/blocks/aside.right.html",
    "<!--<div ng-if=\"loggedIn\">-->\n" +
    "\n" +
    "<!-- aside right -->\n" +
    "  Chat Inhalt\n" +
    "  <div class=\"app-aside-right pos-fix no-padder w-md w-auto-xs bg-white b-l fadeInRight\" ng-controller=\"ChatCtrl\"><!-- Eugen weg: animated -->\n" +
    "      <!--style=\"top:auto;\">-->\n" +
    "    <div class=\"vbox\">\n" +
    "      <div class=\"wrapper b-b b-t b-light m-b\">\n" +
    "        <a href class=\"pull-right text-muted text-md\" ui-toggle-class=\"show\" target=\".app-aside-right\"><i class=\"icon-close\"></i></a>\n" +
    "        Chat\n" +
    "      </div>\n" +
    "      <div class=\"row-row\">\n" +
    "        <div class=\"cell\">\n" +
    "          <div class=\"cell-inner padder\">\n" +
    "            <!-- chat list -->\n" +
    "            <!--<div class=\"m-b\">-->\n" +
    "              <!--<a href class=\"pull-left thumb-xs avatar\"><img src=\"angulr/img/build/a2.jpg\" alt=\"...\"></a>-->\n" +
    "              <!--<div class=\"clear\">-->\n" +
    "                <!--<div class=\"pos-rlt wrapper-sm b b-light r m-l-sm\">-->\n" +
    "                  <!--<span class=\"arrow left pull-up\"></span>-->\n" +
    "                  <!--<p class=\"m-b-none\">Hi John, What's up...</p>-->\n" +
    "                <!--</div>-->\n" +
    "                <!--<small class=\"text-muted m-l-sm\"><i class=\"fa fa-ok text-success\"></i> 2 minutes ago</small>-->\n" +
    "              <!--</div>-->\n" +
    "            <!--</div>-->\n" +
    "            <!--<div class=\"m-b\">-->\n" +
    "              <!--<a href class=\"pull-right thumb-xs avatar\"><img src=\"angulr/img/build/a3.jpg\" class=\"img-circle\" alt=\"...\"></a>-->\n" +
    "              <!--<div class=\"clear\">-->\n" +
    "                <!--<div class=\"pos-rlt wrapper-sm bg-light r m-r-sm\">-->\n" +
    "                  <!--<span class=\"arrow right pull-up arrow-light\"></span>-->\n" +
    "                  <!--<p class=\"m-b-none\">Lorem ipsum dolor :)</p>-->\n" +
    "                <!--</div>-->\n" +
    "                <!--<small class=\"text-muted\">1 minutes ago</small>-->\n" +
    "              <!--</div>-->\n" +
    "            <!--</div>-->\n" +
    "            <!--<div class=\"m-b\">-->\n" +
    "              <!--<a href class=\"pull-left thumb-xs avatar\"><img src=\"angulr/img/build/a2.jpg\" alt=\"...\"></a>-->\n" +
    "              <!--<div class=\"clear\">-->\n" +
    "                <!--<div class=\"pos-rlt wrapper-sm b b-light r m-l-sm\">-->\n" +
    "                  <!--<span class=\"arrow left pull-up\"></span>-->\n" +
    "                  <!--<p class=\"m-b-none\">Great!</p>-->\n" +
    "                <!--</div>-->\n" +
    "                <!--<small class=\"text-muted m-l-sm\"><i class=\"fa fa-ok text-success\"></i>Just Now</small>-->\n" +
    "              <!--</div>-->\n" +
    "            <!--</div>-->\n" +
    "\n" +
    "              <chat-box></chat-box>\n" +
    "              \n" +
    "            <!-- / chat list -->\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"wrapper m-t b-t b-light\">\n" +
    "        <form class=\"m-b-none\">\n" +
    "          <div class=\"input-group\">\n" +
    "            <input type=\"text\" class=\"form-control\" placeholder=\"Say something\" required ng-max='50' ng-model='message' focus>\n" +
    "            <!--<input type='text' style='width: 80%' required ng-max='50' ng-model='message' focus>-->\n" +
    "            <span class=\"input-group-btn\">\n" +
    "              <button class=\"btn btn-default\" type=\"button\" ng-enable='form.$valid' ng-click=\"sendMessage(message)\">SEND</button>\n" +
    "            </span>\n" +
    "          </div>\n" +
    "        </form>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "  <!-- / aside right -->\n" +
    "<!--</di-v>-->");
  $templateCache.put("angulr/tpl/blocks/header.html",
    "<!--&lt;!&ndash; navbar header &ndash;&gt;-->\n" +
    "      <!--<div class=\"navbar-header box-shadow {{app.rootSettings.navbarHeaderColor}}\">-->\n" +
    "        <!--&lt;!&ndash;<button class=\"pull-right visible-xs dk\" ui-toggle-class=\"show\" data-target=\".navbar-collapse\">&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;<i class=\"glyphicon glyphicon-cog\"></i>&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;</button>&ndash;&gt;-->\n" +
    "        <!--<button class=\"pull-right visible-xs topRightMenuButton\" ng-click=\"setHeaderColor()\" ui-toggle-class=\"off-screen\" data-target=\".app-aside\" ui-scroll-to=\"app\">-->\n" +
    "          <!--<i class=\"glyphicon glyphicon-align-justify\"></i>-->\n" +
    "        <!--</button>-->\n" +
    "        <!--&lt;!&ndash; brand &ndash;&gt;-->\n" +
    "        <!--<div style=\"display: flex; justify-content: flex-start;\">-->\n" +
    "\n" +
    "          <!--<i class=\"fa fa-angle-left\"  ng-click=\"mainStepBack();\" id=\"hback\" ng-class=\"{'hide': !app.header.showBackArrow, 'arrow-left': true}\"/>-->\n" +
    "        <!-- -->\n" +
    "          <!--&lt;!&ndash;<a ng-href=\"{{app.titleUrl}}\" class=\"navbar-brand text-lt\" style=\"max-height: 40px;\">&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<img src=\"angulr/img/build/logoWhite.png\" style=\"background-color: white;border-radius: 3px;border-width: 1px;border-style: solid;\" alt=\".\" ng-class=\"{'hide': showBackArrow}\">&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;</a> &ndash;&gt;-->\n" +
    "          <!-- -->\n" +
    "          <!--<a ng-click=\"clickLoading(null, null, app.titleUrl)\" class=\"thumb-xs avatar headerAvatar\" ng-class=\"{'hide': !app.header.titleAvatarSrc || !isSmartDevice}\">-->\n" +
    "            <!--<img ng-src=\"{{app.header.titleAvatarSrc}}\" style=\" background-color: white;\">-->\n" +
    "            <!--<i class=\"on md b-white right customerOnlineStatus\" ng-show=\"hotelNotification.notificationObj.hotelOnlineGuestIds[localState.userData.id]\"></i>-->\n" +
    "            <!--<i class=\"offline md b-white right customerOnlineStatus\" ng-hide=\"hotelNotification.notificationObj.hotelOnlineGuestIds[localState.userData.id]\"></i>-->\n" +
    "          <!--</a>-->\n" +
    "          <!-- -->\n" +
    "          <!--<div ng-hide=\"app.header.showBackArrow\" style=\"margin-left: 27px;\"></div>-->\n" +
    "          <!-- -->\n" +
    "          <!--&lt;!&ndash;<div style=\"text-overflow: ellipsis; max-width: 100px; white-space: nowrap;\">&ndash;&gt;-->\n" +
    "            <!--<a ng-click=\"clickLoading(null, null, app.header.titleUrl)\" class=\"hidden-folded m-l-xs headerTitle text-ellipsis\" style=\"max-width: 80%;color: white;\">{{app.header.showTitle}}</a>-->\n" +
    "          <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "          <!-- -->\n" +
    "          <!--<span ng-show=\"app.header.showTitleStaff\" class=\"bg-orange-border\" style=\" margin-left: 5px;color: #f1592a;margin-top: 7px;padding: 5px;padding-bottom: 24px;border-radius: 50px;\">{{'system.hotelStaff' | translate}}</span>-->\n" +
    "\n" +
    "\n" +
    "        <!--</div>-->\n" +
    "       <!-- -->\n" +
    "        <!--&lt;!&ndash; / brand &ndash;&gt;-->\n" +
    "      <!--</div>-->\n" +
    "      <!--&lt;!&ndash; / navbar header &ndash;&gt;-->\n" +
    "\n" +
    "      <!--&lt;!&ndash;&lt;!&ndash; navbar collapse &ndash;&gt;&ndash;&gt;-->\n" +
    "      <!--&lt;!&ndash;<div class=\"collapse pos-rlt navbar-collapse box-shadow {{app.settings.navbarCollapseColor}}\" ng-show=\"!isSmartDevice\">&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash; buttons &ndash;&gt;&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;<div class=\"nav navbar-nav hidden-xs\" style=\"display: flex;\">&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;<a href class=\"btn no-shadow navbar-btn\" ng-click=\"app.settings.asideFolded = !app.settings.asideFolded\">&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<i class=\"fa {{app.settings.asideFolded ? 'fa-indent' : 'fa-dedent'}} fa-fw\"></i>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;</a>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;<div ng-show=\"showProfile\">&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<a href class=\"btn no-shadow navbar-btn\" ui-toggle-class=\"show\" target=\"#aside-user\">&ndash;&gt;-->\n" +
    "               <!--&lt;!&ndash;<i class=\"icon-user fa-fw\"></i>&ndash;&gt;-->\n" +
    "             <!--&lt;!&ndash;</a>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash; &ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash; / buttons &ndash;&gt;&ndash;&gt;-->\n" +
    "\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash;&lt;!&ndash; link and dropdown &ndash;&gt;&ndash;&gt;&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash;<ul class=\"nav navbar-nav hidden-sm\">&ndash;&gt;&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;&lt;!&ndash;<li class=\"dropdown pos-stc\" dropdown>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;<a href class=\"dropdown-toggle\" dropdown-toggle>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<span>Mega</span> &ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<span class=\"caret\"></span>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;<div class=\"dropdown-menu wrapper w-full bg-white\">&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<div class=\"row\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<div class=\"col-sm-4\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<div class=\"m-l-xs m-t-xs m-b-xs font-bold\">Pages <span class=\"badge badge-sm bg-success\">10</span></div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<div class=\"row\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;<div class=\"col-xs-6\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;<ul class=\"list-unstyled l-h-2x\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Profile</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Post</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Search</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Invoice</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;</ul>&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;<div class=\"col-xs-6\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;<ul class=\"list-unstyled l-h-2x\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Price</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Lock screen</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Sign in</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Sign up</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;</ul>&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<div class=\"col-sm-4 b-l b-light\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<div class=\"m-l-xs m-t-xs m-b-xs font-bold\">UI Kits <span class=\"label label-sm bg-primary\">12</span></div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<div class=\"row\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;<div class=\"col-xs-6\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;<ul class=\"list-unstyled l-h-2x\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Buttons</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Icons <span class=\"badge badge-sm bg-warning\">1000+</span></a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Grid</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Widgets</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;</ul>&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;<div class=\"col-xs-6\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;<ul class=\"list-unstyled l-h-2x\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Bootstap</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Sortable</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Portlet</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Timeline</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;</ul>&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<div class=\"col-sm-4 b-l b-light\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<div class=\"m-l-xs m-t-xs m-b-sm font-bold\">Analysis</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<div class=\"text-center\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;<div class=\"inline\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;<div ui-jq=\"easyPieChart\" ui-options=\"{&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;percent: 65,&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;lineWidth: 50,&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;trackColor: '{{app.color.light}}',&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;barColor: '{{app.color.info}}',&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;scaleColor: false,&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;size: 100,&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;rotate: 90,&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;lineCap: 'butt',&ndash;&gt;&ndash;&gt;-->\n" +
    "                          <!--&lt;!&ndash;&lt;!&ndash;animate: 2000&ndash;&gt;&ndash;&gt;-->\n" +
    "                        <!--&lt;!&ndash;&lt;!&ndash;}\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;&lt;!&ndash;<li class=\"dropdown\" dropdown>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;<a href class=\"dropdown-toggle\" dropdown-toggle>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<i class=\"fa fa-fw fa-plus visible-xs-inline-block\"></i>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<span translate=\"header.navbar.new.NEW\">New</span> <span class=\"caret\"></span>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;<ul class=\"dropdown-menu\" role=\"menu\">&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<li><a href=\"#\" translate=\"header.navbar.new.PROJECT\">Projects</a></li>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<a href>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<span class=\"badge bg-info pull-right\">5</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<span translate=\"header.navbar.new.TASK\">Task</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<li><a href translate=\"header.navbar.new.USER\">User</a></li>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<li class=\"divider\"></li>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<a href>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<span class=\"badge bg-danger pull-right\">4</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<span translate=\"header.navbar.new.EMAIL\">Email</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;</ul>&ndash;&gt;&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash;</ul>&ndash;&gt;&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash;&lt;!&ndash; / link and dropdown &ndash;&gt;&ndash;&gt;&ndash;&gt;-->\n" +
    "\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash;&lt;!&ndash; search form &ndash;&gt;&ndash;&gt;&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash;<form class=\"navbar-form navbar-form-sm navbar-left shift\" ui-shift=\"prependTo\" target=\".navbar-collapse\" role=\"search\" ng-controller=\"TypeaheadDemoCtrl\">&ndash;&gt;&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;&lt;!&ndash;<div class=\"form-group\">&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;<div class=\"input-group\">&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<input type=\"text\" ng-model=\"selected\" typeahead=\"state for state in states | filter:$viewValue | limitTo:8\" class=\"form-control input-sm bg-light no-border rounded padder\" placeholder=\"Search projects...\">&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<span class=\"input-group-btn\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<button type=\"submit\" class=\"btn btn-sm bg-light rounded\"><i class=\"fa fa-search\"></i></button>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash;</form>&ndash;&gt;&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash;&lt;!&ndash; / search form &ndash;&gt;&ndash;&gt;&ndash;&gt;-->\n" +
    "\n" +
    "         <!--&lt;!&ndash; &ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash; #### nabar right &ndash;&gt;&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;<div ng-show=\"!isSmartDevice\">    &ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;<ul class=\"nav navbar-nav navbar-right\" >&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;<li class=\"dropdown hidden-sm\" is-open=\"lang.isopen\" dropdown>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<a href class=\"dropdown-toggle\" dropdown-toggle>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;{{selectLang}} <b class=\"caret\"></b>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;</a>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash; dropdown &ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<ul class=\"dropdown-menu animated fadeInRight w\">&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;<li ng-repeat=\"(langKey, label) in langs\">&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<a ng-click=\"setLang(langKey, $event)\" href>{{label}}</a>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;</li>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;</ul>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash; / dropdown &ndash;&gt;&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;</li>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;<li class=\"hidden-xs\">&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<a ui-fullscreen></a>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;</li>&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;&lt;!&ndash;<li class=\"dropdown\" dropdown ng-show=\"showProfile\">&ndash;&gt;&ndash;&gt;-->\n" +
    "\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;<a href class=\"dropdown-toggle\" dropdown-toggle>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<i class=\"icon-bell fa-fw\"></i>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<span class=\"visible-xs-inline\">Notifications</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<span class=\"badge badge-sm up bg-danger pull-right-xs\">2</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;&lt;!&ndash; dropdown &ndash;&gt;&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;<div class=\"dropdown-menu w-xl animated fadeInUp\">&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<div class=\"panel bg-white\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<div class=\"panel-heading b-light bg-light\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<strong>You have <span>2</span> notifications</strong>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<div class=\"list-group\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<a href class=\"media list-group-item\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;<span class=\"pull-left thumb-sm\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;<img src=\"angulr/img/build/a0.jpg\" alt=\"...\" class=\"img-circle\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;<span class=\"media-body block m-b-none\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;Use awesome animate.css<br>&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;<small class=\"text-muted\">10 minutes ago</small>&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<a href class=\"media list-group-item\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;<span class=\"media-body block m-b-none\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;1.0 initial released<br>&ndash;&gt;&ndash;&gt;-->\n" +
    "                      <!--&lt;!&ndash;&lt;!&ndash;<small class=\"text-muted\">1 hour ago</small>&ndash;&gt;&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;&lt;!&ndash;</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<div class=\"panel-footer text-sm\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<a href class=\"pull-right\"><i class=\"fa fa-cog\"></i></a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<a href=\"#notes\" data-toggle=\"class:show animated fadeInRight\">See all the notifications</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash;&lt;!&ndash; / dropdown &ndash;&gt;&ndash;&gt;&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;<li class=\"dropdown\" dropdown ng-show=\"showProfile\">&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<a href class=\"dropdown-toggle clear\" dropdown-toggle>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;<span class=\"thumb-sm avatar pull-right m-t-n-sm m-b-n-sm m-l-sm\" >&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<img ng-src=\"{{getProfileImageUrl()}}\" style=\"border-radius: 500px;\" alt=\"...\">&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<i class=\"on md b-white bottom\"></i>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;</span>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;<span class=\"hidden-sm hidden-md\">{{profileData.firstName}} {{profileData.lastName}}</span> <b class=\"caret\"></b>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;</a>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash; dropdown &ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<ul class=\"dropdown-menu animated fadeInRight w\">&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<li class=\"wrapper b-b m-b-sm bg-light m-t-n-xs\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<p>300mb of 500mb used</p>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<progressbar value=\"60\" class=\"progress-xs m-b-none bg-white\"></progressbar>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<a href>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<span class=\"badge bg-danger pull-right\">30%</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<span>Settings</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;<li>&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<a ui-sref=\"app.me\">Profile</a>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;</li>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;<li>&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<a ui-sref=\"app.docs\">&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;<span class=\"label bg-info pull-right\">new</span>&ndash;&gt;&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;&lt;!&ndash;Help&ndash;&gt;&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;</a>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;&lt;!&ndash;</li>&ndash;&gt;&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;<li class=\"divider\"></li>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;<li ng-show=\"profileData.hotelId>0\">&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<a ng-click=\"resetCheckin()\">CheckOut</a>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;</li> &ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;<li>&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<a ui-sref=\"access.login\" ng-click=\"resetLogin()\">Logout</a>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;</li>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;</ul>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;&lt;!&ndash; / dropdown &ndash;&gt;&ndash;&gt;-->\n" +
    "          <!--&lt;!&ndash;</li>&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;</ul>&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;&lt;!&ndash; / ####navbar right &ndash;&gt;&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "\n" +
    "      <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "      <!--&lt;!&ndash;&lt;!&ndash; / navbar collapse &ndash;&gt;&ndash;&gt;-->\n" +
    "      <!-- -->\n" +
    "      <!-- -->\n" +
    "      <!--<div style=\"display: none\" id=\"imageCache\">-->\n" +
    "        <!-- -->\n" +
    "        <!--<div id=\"activityImageCache\"></div>-->\n" +
    "        <!--<div id=\"hotelImageCache\"></div>-->\n" +
    "        <!--<div id=\"menuImageCache\">-->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/chat-inactive.png\">-->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/chat-active.png\">          -->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/hotel-inactive.png\">-->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/hotel-active.png\">          -->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/wall-inactive.png\">-->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/wall-active.png\">          -->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/me-inactive.png\">-->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/me-active.png\">          -->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/checkout-inactive.png\">-->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/checkout-active.png\">          -->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/logout-inactive.png\">-->\n" +
    "          <!--<img src=\"angulr/img/build/menu/bottom/language-inactive.png\">-->\n" +
    "          <!--<img src=\"angulr/img/build/loading/loader.gif\">-->\n" +
    "        <!--</div>-->\n" +
    "        <!--<div id=\"profileImageCache\">-->\n" +
    "          <!--<img src=\"angulr/img/build/avatar/incognito-m.png\">-->\n" +
    "          <!--<img src=\"angulr/img/build/avatar/incognito-f.png\">-->\n" +
    "          <!--<img src=\"angulr/img/build/staff.png\">-->\n" +
    "        <!--</div>-->\n" +
    "      <!--</div>-->\n" +
    "");
  $templateCache.put("angulr/tpl/blocks/header.music.html",
    "<!-- navbar header -->\n" +
    "      <div class=\"navbar-header {{app.settings.navbarHeaderColor}}\">\n" +
    "        <button class=\"pull-right visible-xs dk\" ui-toggle-class=\"show\" data-target=\".navbar-collapse\">\n" +
    "          <i class=\"glyphicon glyphicon-cog\"></i>\n" +
    "        </button>\n" +
    "        <button class=\"pull-right visible-xs\" ui-toggle-class=\"off-screen\" data-target=\".app-aside\" ui-scroll-to=\"app\">\n" +
    "          <i class=\"glyphicon glyphicon-align-justify\"></i>\n" +
    "        </button>\n" +
    "        <!-- brand -->\n" +
    "        <a href=\"#/\" class=\"navbar-brand text-lt\">\n" +
    "          <i class=\"fa fa-play-circle\"></i>\n" +
    "          <img src=\"angulr/img/logo.png\" alt=\".\" class=\"hide\">\n" +
    "          <span class=\"hidden-folded m-l-xs\">MUSIC</span>\n" +
    "        </a>\n" +
    "        <!-- / brand -->\n" +
    "      </div>\n" +
    "      <!-- / navbar header -->\n" +
    "\n" +
    "      <!-- navbar collapse -->\n" +
    "      <div class=\"collapse pos-rlt navbar-collapse {{app.settings.navbarCollapseColor}}\">\n" +
    "        <!-- search form -->\n" +
    "        <form class=\"navbar-form navbar-form-sm navbar-left no-padder\" role=\"search\" ng-controller=\"TypeaheadDemoCtrl\">\n" +
    "          <div class=\"form-group\">\n" +
    "            <div class=\"input-group w-lg w-auto-xs\">\n" +
    "              <input type=\"text\" ng-model=\"selected\" typeahead=\"state for state in states | filter:$viewValue | limitTo:8\" class=\"form-control input-sm bg-light no-border padder\" placeholder=\"Search songs and artists...\">\n" +
    "              <span class=\"input-group-btn\">\n" +
    "                <button type=\"submit\" class=\"btn btn-sm bg-light\"><i class=\"fa fa-search\"></i></button>\n" +
    "              </span>\n" +
    "            </div>\n" +
    "          </div>\n" +
    "        </form>\n" +
    "        <!-- / search form -->\n" +
    "        <!-- nabar right -->\n" +
    "        <ul class=\"nav navbar-nav navbar-right\">\n" +
    "          <li class=\"hidden-xs\">\n" +
    "            <a ui-fullscreen></a>\n" +
    "          </li>\n" +
    "          <li class=\"dropdown\" dropdown>\n" +
    "            <a href class=\"dropdown-toggle\" dropdown-toggle>\n" +
    "              <i class=\"icon-bell fa-fw\"></i>\n" +
    "              <span class=\"visible-xs-inline\">Notifications</span>\n" +
    "              <span class=\"badge badge-sm up bg-danger pull-right-xs\">2</span>\n" +
    "            </a>\n" +
    "            <!-- dropdown -->\n" +
    "            <div class=\"dropdown-menu w-xl animated fadeInUp\">\n" +
    "              <div class=\"panel bg-white\">\n" +
    "                <div class=\"panel-heading b-light bg-light\">\n" +
    "                  <strong>You have <span>2</span> notifications</strong>\n" +
    "                </div>\n" +
    "                <div class=\"list-group\">\n" +
    "                  <a href class=\"media list-group-item\">\n" +
    "                    <span class=\"pull-left thumb-sm\">\n" +
    "                      <img src=\"angulr/img/a0.jpg\" alt=\"...\" class=\"img-circle\">\n" +
    "                    </span>\n" +
    "                    <span class=\"media-body block m-b-none\">\n" +
    "                      Use awesome animate.css<br>\n" +
    "                      <small class=\"text-muted\">10 minutes ago</small>\n" +
    "                    </span>\n" +
    "                  </a>\n" +
    "                  <a href class=\"media list-group-item\">\n" +
    "                    <span class=\"media-body block m-b-none\">\n" +
    "                      1.0 initial released<br>\n" +
    "                      <small class=\"text-muted\">1 hour ago</small>\n" +
    "                    </span>\n" +
    "                  </a>\n" +
    "                </div>\n" +
    "                <div class=\"panel-footer text-sm\">\n" +
    "                  <a href class=\"pull-right\"><i class=\"fa fa-cog\"></i></a>\n" +
    "                  <a href=\"#notes\" data-toggle=\"class:show animated fadeInRight\">See all the notifications</a>\n" +
    "                </div>\n" +
    "              </div>\n" +
    "            </div>\n" +
    "            <!-- / dropdown -->\n" +
    "          </li>\n" +
    "          <li class=\"bg-light\">\n" +
    "            <a href class=\"bg-info text-white\" tooltip-placement=\"left\" tooltip=\"Upload\"><i class=\"fa fa-plus fa-fw\"></i></a>\n" +
    "          </li>\n" +
    "        </ul>\n" +
    "        <!-- / navbar right -->\n" +
    "\n" +
    "      </div>\n" +
    "      <!-- / navbar collapse -->\n" +
    "");
  $templateCache.put("angulr/tpl/blocks/material.aside.html",
    "<div style=\"position: absolute;\" ng-if=\"::isSmartDevice\">\n" +
    "    <a class=\"hidden-folded m-l-xs headerTitle text-ellipsis\" style=\"color: white; text-decoration: none; margin-left: 35px;\">Hotelico</a>\n" +
    "</div>\n" +
    "\n" +
    "<div ng-style=\"::isSmartDevice && {'margin-top': '55px', 'width': '1px'}\"/>\n" +
    "  \n" +
    "<div class=\"clearfix\" id=\"aside-user\" ng-show=\"hotelState.profileData.id>0\">\n" +
    "  <div class=\"wrapper\" style=\"/*background-color: #445454;*/padding-bottom: 0px;\">\n" +
    "   \n" +
    "    <ul class=\"nav\" style=\"margin-left: -10px;\">\n" +
    "\n" +
    "      <li  ui-sref-active=\"active\" class=\"leftMenuMe\">\n" +
    "        <a ui-sref=\"app.me\" class=\"menuALeft\" style=\"padding-top: 0px; display: flex; display: -webkit-flex; display: -moz-flex;display: -ms-flexbox;align-items: center;\">\n" +
    "          <!--<i class=\"icon-user icon menuIconLeft\"></i>-->\n" +
    "          <div class=\"thumb-md w-auto-folded avatar m-t-sm\" style=\"background-color: #fff;     flex-shrink: 0;   flex-basis: 66px;\">\n" +
    "            <img ng-src=\"{{hotelState.profileData.avatarUrl}}\" class=\"img-full\" alt=\"...\">\n" +
    "          </div>\n" +
    "          <!--<b class=\"badge bg-success pull-right\">30%</b>-->\n" +
    "          <div class=\"menuLabelLeft\" ng-style=\"::!isSmartDevice && {'max-width': '149px'}\" style=\"margin-left: 5px;word-wrap: break-word; white-space: pre-wrap;display: block;text-overflow: ellipsis;white-space: inherit;\">\n" +
    "            {{hotelState.profileData.firstName}} {{hotelState.profileData.lastName}}\n" +
    "            <span class=\"label bg-orange hotelStaff inline\" ng-show=\"hotelState.profileData.hotelStaff\" style=\"position: relative;margin: 0;top: -2px;\">{{::'system.hotelStaff' | translate}}</span>\n" +
    "            <span class=\"label bg-orange hotelStaff inline\" ng-show=\"hotelState.profileData.admin\" style=\"position: relative;margin: 0;top: -2px;\">{{::'system.admin' | translate}}</span>\n" +
    "          </div>\n" +
    "          \n" +
    "          <!--<span class=\"menuLabelLeft\" style=\"margin-left: 5px;\" ng-show=\"hotelState.profileData.admin\">Admin</span>-->\n" +
    "        </a>\n" +
    "      </li>\n" +
    "    </ul>\n" +
    "    \n" +
    "    <!--<a ui-sref=\"app.me\">-->\n" +
    "    <!--<span class=\"thumb-md w-auto-folded avatar m-t-sm\" style=\"background-color: #fff;\">-->\n" +
    "    <!--<img src=\"{{getProfileImageUrl()}}\" class=\"img-full\" alt=\"...\">-->\n" +
    "     <!-- -->\n" +
    "    <!--</span>-->\n" +
    "    <!--</a>-->\n" +
    "    \n" +
    "    \n" +
    "    <a href class=\"hidden-folded\" ui-toggle-class=\"show\" target=\"#user\">\n" +
    "        \n" +
    "      <span class=\"block m-t-sm auto\">\n" +
    "        <span class=\"pull-right\">\n" +
    "          <i class=\"fa fa-fw fa-caret-down text\"></i>\n" +
    "          <i class=\"fa fa-fw fa-caret-up text-active\"></i>\n" +
    "        </span>\n" +
    "        <strong class=\"font-bold text-lt\">User Settings</strong> \n" +
    "      </span>\n" +
    "      <!--<span class=\"text-xs block\">{{hotelState.profileData.jobTitle}} {{hotelState.profileData.jobDescriptor}}</span>-->\n" +
    "    </a>\n" +
    "\n" +
    "    \n" +
    "    \n" +
    "  </div>\n" +
    "</div>\n" +
    "<!-- / user -->\n" +
    "\n" +
    "<!-- nav -->\n" +
    "<nav class=\"navi hide\" id=\"user\" >\n" +
    "  <ul class=\"nav\" ng-show=\"hotelState.profileData && hotelState.profileData.id>0\">\n" +
    "    <li ui-sref-active=\"active\">\n" +
    "      <a ui-sref=\"app.avatar\">\n" +
    "        <i class=\"glyphicon glyphicon-user icon\"></i>\n" +
    "        <span>Change Avatar</span>\n" +
    "      </a>\n" +
    "    </li>\n" +
    "    <!--<li ui-sref-active=\"active\">-->\n" +
    "    <!--<a ng-click=\"resetCheckin()\">-->\n" +
    "    <!--<i class=\"glyphicon glyphicon-cog icon\"></i>-->\n" +
    "    <!--<span>Checkout</span>-->\n" +
    "    <!--</a>-->\n" +
    "    <!--</li>-->\n" +
    "    <!--<li class=\"m-b-sm\">-->\n" +
    "    <!--<a ui-sref=\"access.signin\">-->\n" +
    "    <!--<i class=\"glyphicon glyphicon-log-out icon\"></i>-->\n" +
    "    <!--<span>Logout</span>-->\n" +
    "    <!--</a>-->\n" +
    "    <!--</li>-->\n" +
    "  </ul>\n" +
    "</nav>\n" +
    "\n" +
    "<li class=\"line dk\"></li>\n" +
    "<nav ui-nav class=\"navi clearfix\" ng-include=\"'angulr/tpl/blocks/nav.html'\"></nav>\n" +
    "<!-- nav -->\n" +
    "\n" +
    "<!-- aside footer -->\n" +
    "<!--<div class=\"wrapper m-t\">-->\n" +
    "  <!--<div class=\"text-center-folded\">-->\n" +
    "    <!--&lt;!&ndash;<span class=\"pull-right pull-none-folded\">60%</span>&ndash;&gt;-->\n" +
    "    <!--&lt;!&ndash;<span class=\"hidden-folded\" translate=\"aside.MILESTONE\">Impressum</span>&ndash;&gt;-->\n" +
    "      <!--<a class=\"text-muted\"  ui-sref=\"app.impressum\">Impressum</a>-->\n" +
    "  <!--</div>-->\n" +
    "  <!--&lt;!&ndash;<progressbar value=\"60\" class=\"progress-xxs m-t-sm dk\" type=\"info\"></progressbar>&ndash;&gt;-->\n" +
    "  <!--&lt;!&ndash;<div class=\"text-center-folded\">&ndash;&gt;-->\n" +
    "    <!--&lt;!&ndash;<span class=\"pull-right pull-none-folded\">35%</span>&ndash;&gt;-->\n" +
    "    <!--&lt;!&ndash;<span class=\"hidden-folded\" translate=\"aside.RELEASE\">Release</span>&ndash;&gt;-->\n" +
    "  <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "  <!--&lt;!&ndash;<progressbar value=\"35\" class=\"progress-xxs m-t-sm dk\" type=\"primary\"></progressbar>&ndash;&gt;-->\n" +
    "<!--</div>-->\n" +
    "");
  $templateCache.put("angulr/tpl/blocks/material.header.html",
    "<div layout=\"column\" style=\"justify-content: flex-start;\" class=\"angulrHeader\">\n" +
    "<!-- navbar header -->\n" +
    "      <div class=\"navbar-header\" style=\"\">\n" +
    "        <!--<button class=\"pull-right visible-xs dk\" ui-toggle-class=\"show\" data-target=\".navbar-collapse\">-->\n" +
    "          <!--<i class=\"glyphicon glyphicon-cog\"></i>-->\n" +
    "        <!--</button>-->\n" +
    "        <button class=\"pull-right visible-xs topRightMenuButton\" ng-click=\"setHeaderColor()\" ui-toggle-class=\"off-screen\" data-target=\".md-aside\" ui-scroll-to=\"app\">\n" +
    "          <i class=\"glyphicon glyphicon-align-justify\"></i>\n" +
    "        </button>\n" +
    "        <!-- brand -->\n" +
    "        <!--<a href=\"#/\" class=\"navbar-brand text-lt\">-->\n" +
    "          <!--<i class=\"fa fa-btc\"></i>-->\n" +
    "          <!--<img src=\"img/logo.png\" alt=\".\" class=\"hide\">-->\n" +
    "          <!--<span class=\"hidden-folded m-l-xs\">{{app.name}}</span>-->\n" +
    "        <!--</a>-->\n" +
    "          <!-- / brand -->\n" +
    "\n" +
    "          <!-- brand -->\n" +
    "          <div layout=\"row\" style=\"justify-content: flex-start; white-space: nowrap; flex-wrap: nowrap;\">\n" +
    "\n" +
    "              <i class=\"fa fa-angle-left\"  ng-click=\"mainStepBack();\" id=\"hback\" ng-class=\"{'hide': !app.header.showBackArrow, 'arrow-left': true}\"/>\n" +
    "\n" +
    "              <!--<a ng-href=\"{{app.titleUrl}}\" class=\"navbar-brand text-lt\" style=\"max-height: 40px;\">-->\n" +
    "              <!--<img src=\"angulr/img/build/logoWhite.png\" style=\"background-color: white;border-radius: 3px;border-width: 1px;border-style: solid;\" alt=\".\" ng-class=\"{'hide': showBackArrow}\">-->\n" +
    "              <!--</a> -->\n" +
    "\n" +
    "              <a ng-click=\"clickLoading(null, null, app.header.titleUrl)\" class=\"thumb-xs avatar headerAvatar\" ng-class=\"{'hide': !app.header.titleAvatarSrc || !isSmartDevice}\">\n" +
    "                  <img ng-src=\"{{app.header.titleAvatarSrc}}\" style=\" background-color: white;\">\n" +
    "                  <i class=\"offline md b-white right customerOnlineStatus\" ng-hide=\"app.header.showTitleStaff || app.header.chatPartnerId && hotelNotification.notificationObj.hotelOnlineGuestIds[app.header.chatPartnerId]\"></i>\n" +
    "                  <i class=\"on md b-white right customerOnlineStatus\" ng-show=\"app.header.showTitleStaff || app.header.chatPartnerId && hotelNotification.notificationObj.hotelOnlineGuestIds[app.header.chatPartnerId]\"></i>\n" +
    "              </a>\n" +
    "\n" +
    "              <div ng-hide=\"app.header.showBackArrow\" style=\"margin-left: 27px;\"></div>\n" +
    "\n" +
    "              <!--<div style=\"text-overflow: ellipsis; max-width: 100px; white-space: nowrap;\">-->\n" +
    "              <a ng-click=\"clickLoading(null, null, app.header.titleUrl)\" class=\"hidden-folded m-l-xs headerTitle text-ellipsis\" style=\"max-width: 80%;color: white;\">{{app.header.showTitle}}</a>\n" +
    "              <!--</div>-->\n" +
    "\n" +
    "              <!--<span ng-show=\"app.header.showTitleStaff && isSmartDevice\" class=\"bg-orange-border\" style=\" margin-left: 5px;color: #f1592a;margin-top: 7px;padding: 5px;padding-bottom: 24px;border-radius: 50px;\">-->\n" +
    "                  <!--{{'system.hotelStaff' | translate}}-->\n" +
    "              <!--</span>-->\n" +
    "\n" +
    "              <span ng-show=\"app.header.showTitleStaff && isSmartDevice\" class=\"label bg-orange inline hotelStaff\" ng-show=\"nextCustomer.hotelStaff\" style=\"margin-left: 4px;margin-top: 10px;\">{{::'system.hotelStaff' | translate}}</span>\n" +
    "\n" +
    "\n" +
    "          </div>\n" +
    "\n" +
    "          <!-- / brand -->\n" +
    "          \n" +
    "      </div>\n" +
    "      <!-- / navbar header -->\n" +
    "\n" +
    "      <!--&lt;!&ndash; navbar collapse &ndash;&gt;-->\n" +
    "      <!--<div class=\"collapse navbar-collapse box-shadow blue\">-->\n" +
    "\n" +
    "        <!--&lt;!&ndash; link and dropdown &ndash;&gt;-->\n" +
    "        <!--<ul class=\"nav navbar-nav hidden-sm\">-->\n" +
    "          <!--<li class=\"dropdown pos-stc\" dropdown>-->\n" +
    "            <!--<a href class=\"dropdown-toggle\" dropdown-toggle>-->\n" +
    "              <!--<span>Mega</span> -->\n" +
    "              <!--<span class=\"caret\"></span>-->\n" +
    "            <!--</a>-->\n" +
    "            <!--<div class=\"dropdown-menu wrapper w-full bg-white\">-->\n" +
    "              <!--<div class=\"row\">-->\n" +
    "                <!--<div class=\"col-sm-4\">-->\n" +
    "                  <!--<div class=\"m-l-xs m-t-xs m-b-xs font-bold\">Pages <span class=\"badge badge-sm bg-success\">10</span></div>-->\n" +
    "                  <!--<div class=\"row\">-->\n" +
    "                    <!--<div class=\"col-xs-6\">-->\n" +
    "                      <!--<ul class=\"list-unstyled l-h-2x\">-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Profile</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Post</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Search</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Invoice</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                      <!--</ul>-->\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"col-xs-6\">-->\n" +
    "                      <!--<ul class=\"list-unstyled l-h-2x\">-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Price</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Lock screen</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Sign in</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Sign up</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                      <!--</ul>-->\n" +
    "                    <!--</div>-->\n" +
    "                  <!--</div>-->\n" +
    "                <!--</div>-->\n" +
    "                <!--<div class=\"col-sm-4 b-l b-light\">-->\n" +
    "                  <!--<div class=\"m-l-xs m-t-xs m-b-xs font-bold\">UI Kits <span class=\"label label-sm bg-primary\">12</span></div>-->\n" +
    "                  <!--<div class=\"row\">-->\n" +
    "                    <!--<div class=\"col-xs-6\">-->\n" +
    "                      <!--<ul class=\"list-unstyled l-h-2x\">-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Buttons</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Icons <span class=\"badge badge-sm bg-warning\">1000+</span></a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Grid</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Widgets</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                      <!--</ul>-->\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"col-xs-6\">-->\n" +
    "                      <!--<ul class=\"list-unstyled l-h-2x\">-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Bootstap</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Sortable</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Portlet</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                        <!--<li>-->\n" +
    "                          <!--<a href><i class=\"fa fa-fw fa-angle-right text-muted m-r-xs\"></i>Timeline</a>-->\n" +
    "                        <!--</li>-->\n" +
    "                      <!--</ul>-->\n" +
    "                    <!--</div>-->\n" +
    "                  <!--</div>-->\n" +
    "                <!--</div>-->\n" +
    "                <!--<div class=\"col-sm-4 b-l b-light\">-->\n" +
    "                  <!--<div class=\"m-l-xs m-t-xs m-b-sm font-bold\">Analysis</div>-->\n" +
    "                  <!--<div class=\"text-center\">-->\n" +
    "                    <!--<div class=\"inline\">-->\n" +
    "                      <!--<div ui-jq=\"easyPieChart\" ui-options=\"{-->\n" +
    "                          <!--percent: 65,-->\n" +
    "                          <!--lineWidth: 50,-->\n" +
    "                          <!--trackColor: '{{app.color.light}}',-->\n" +
    "                          <!--barColor: '{{app.color.info}}',-->\n" +
    "                          <!--scaleColor: false,-->\n" +
    "                          <!--size: 100,-->\n" +
    "                          <!--rotate: 90,-->\n" +
    "                          <!--lineCap: 'butt',-->\n" +
    "                          <!--animate: 2000-->\n" +
    "                        <!--}\">-->\n" +
    "                      <!--</div>-->\n" +
    "                    <!--</div>-->\n" +
    "                  <!--</div>-->\n" +
    "                <!--</div>-->\n" +
    "              <!--</div>-->\n" +
    "            <!--</div>-->\n" +
    "          <!--</li>-->\n" +
    "          <!--<li class=\"dropdown\" dropdown>-->\n" +
    "            <!--<a href class=\"dropdown-toggle\" dropdown-toggle>-->\n" +
    "              <!--<i class=\"fa fa-fw fa-plus visible-xs-inline-block\"></i>-->\n" +
    "              <!--<span translate=\"header.navbar.new.NEW\">New</span> <span class=\"caret\"></span>-->\n" +
    "            <!--</a>-->\n" +
    "            <!--<ul class=\"dropdown-menu\" role=\"menu\">-->\n" +
    "              <!--<li><a href=\"#\" translate=\"header.navbar.new.PROJECT\">Projects</a></li>-->\n" +
    "              <!--<li>-->\n" +
    "                <!--<a href>-->\n" +
    "                  <!--<span class=\"badge bg-info pull-right\">5</span>-->\n" +
    "                  <!--<span translate=\"header.navbar.new.TASK\">Task</span>-->\n" +
    "                <!--</a>-->\n" +
    "              <!--</li>-->\n" +
    "              <!--<li><a href translate=\"header.navbar.new.USER\">User</a></li>-->\n" +
    "              <!--<li class=\"divider\"></li>-->\n" +
    "              <!--<li>-->\n" +
    "                <!--<a href>-->\n" +
    "                  <!--<span class=\"badge bg-danger pull-right\">4</span>-->\n" +
    "                  <!--<span translate=\"header.navbar.new.EMAIL\">Email</span>-->\n" +
    "                <!--</a>-->\n" +
    "              <!--</li>-->\n" +
    "            <!--</ul>-->\n" +
    "          <!--</li>-->\n" +
    "        <!--</ul>-->\n" +
    "        <!--&lt;!&ndash; / link and dropdown &ndash;&gt;-->\n" +
    "\n" +
    "        <!--&lt;!&ndash; search form &ndash;&gt;-->\n" +
    "        <!--<form class=\"navbar-form navbar-form-sm navbar-left shift\" ui-shift=\"prependTo\" target=\".navbar-collapse\" role=\"search\" ng-controller=\"TypeaheadDemoCtrl\">-->\n" +
    "          <!--<div class=\"form-group\">-->\n" +
    "            <!--<div class=\"input-group\">-->\n" +
    "              <!--<input type=\"text\" ng-model=\"selected\" typeahead=\"state for state in states | filter:$viewValue | limitTo:8\" class=\"form-control input-sm bg-light no-border rounded padder\" placeholder=\"Search projects...\">-->\n" +
    "              <!--<span class=\"input-group-btn\">-->\n" +
    "                <!--<button type=\"submit\" class=\"btn btn-sm bg-light rounded\"><i class=\"fa fa-search\"></i></button>-->\n" +
    "              <!--</span>-->\n" +
    "            <!--</div>-->\n" +
    "          <!--</div>-->\n" +
    "        <!--</form>-->\n" +
    "        <!--&lt;!&ndash; / search form &ndash;&gt;-->\n" +
    "\n" +
    "        <!--&lt;!&ndash; nabar right &ndash;&gt;-->\n" +
    "        <!--<ul class=\"nav navbar-nav navbar-right\">-->\n" +
    "          <!--<li class=\"dropdown hidden-sm\" is-open=\"lang.isopen\" dropdown>-->\n" +
    "            <!--<a href class=\"dropdown-toggle\" dropdown-toggle>-->\n" +
    "              <!--{{selectLang}} <b class=\"caret\"></b>-->\n" +
    "            <!--</a>-->\n" +
    "            <!--&lt;!&ndash; dropdown &ndash;&gt;-->\n" +
    "            <!--<ul class=\"dropdown-menu animated fadeInRight w\">-->\n" +
    "              <!--<li ng-repeat=\"(langKey, label) in langs\">-->\n" +
    "                <!--<a ng-click=\"setLang(langKey, $event)\" href>{{label}}</a>-->\n" +
    "              <!--</li>-->\n" +
    "            <!--</ul>-->\n" +
    "            <!--&lt;!&ndash; / dropdown &ndash;&gt;-->\n" +
    "          <!--</li>-->\n" +
    "          <!--<li class=\"hidden-xs\">-->\n" +
    "            <!--<a ui-fullscreen></a>-->\n" +
    "          <!--</li>-->\n" +
    "          <!--<li class=\"dropdown\" dropdown>-->\n" +
    "            <!--<a href class=\"dropdown-toggle\" dropdown-toggle>-->\n" +
    "              <!--<i class=\"icon-bell fa-fw\"></i>-->\n" +
    "              <!--<span class=\"visible-xs-inline\">Notifications</span>-->\n" +
    "              <!--<span class=\"badge badge-sm up bg-danger pull-right-xs\">2</span>-->\n" +
    "            <!--</a>-->\n" +
    "            <!--&lt;!&ndash; dropdown &ndash;&gt;-->\n" +
    "            <!--<div class=\"dropdown-menu w-xl animated fadeInUp\">-->\n" +
    "              <!--<div class=\"panel bg-white\">-->\n" +
    "                <!--<div class=\"panel-heading b-light bg-light\">-->\n" +
    "                  <!--<strong>You have <span>2</span> notifications</strong>-->\n" +
    "                <!--</div>-->\n" +
    "                <!--<div class=\"list-group\">-->\n" +
    "                  <!--<a href class=\"list-group-item\">-->\n" +
    "                    <!--<span class=\"pull-left m-r thumb-sm\">-->\n" +
    "                      <!--<img src=\"img/a0.jpg\" alt=\"...\" class=\"img-circle\">-->\n" +
    "                    <!--</span>-->\n" +
    "                    <!--<span class=\"clear block m-b-none\">-->\n" +
    "                      <!--Use awesome animate.css<br>-->\n" +
    "                      <!--<small class=\"text-muted\">10 minutes ago</small>-->\n" +
    "                    <!--</span>-->\n" +
    "                  <!--</a>-->\n" +
    "                  <!--<a href class=\"list-group-item\">-->\n" +
    "                    <!--<span class=\"clear block m-b-none\">-->\n" +
    "                      <!--1.0 initial released<br>-->\n" +
    "                      <!--<small class=\"text-muted\">1 hour ago</small>-->\n" +
    "                    <!--</span>-->\n" +
    "                  <!--</a>-->\n" +
    "                <!--</div>-->\n" +
    "                <!--<div class=\"panel-footer text-sm\">-->\n" +
    "                  <!--<a href class=\"pull-right\"><i class=\"fa fa-cog\"></i></a>-->\n" +
    "                  <!--<a href=\"#notes\" data-toggle=\"class:show animated fadeInRight\">See all the notifications</a>-->\n" +
    "                <!--</div>-->\n" +
    "              <!--</div>-->\n" +
    "            <!--</div>-->\n" +
    "            <!--&lt;!&ndash; / dropdown &ndash;&gt;-->\n" +
    "          <!--</li>-->\n" +
    "          <!--<li class=\"dropdown\" dropdown>-->\n" +
    "            <!--<a href class=\"dropdown-toggle clear\" dropdown-toggle>-->\n" +
    "              <!--<span class=\"thumb-sm avatar pull-right m-t-n-sm m-b-n-sm m-l-sm\">-->\n" +
    "                <!--<img src=\"img/a0.jpg\" alt=\"...\">-->\n" +
    "                <!--<i class=\"on md b-white bottom\"></i>-->\n" +
    "              <!--</span>-->\n" +
    "              <!--<span class=\"hidden-sm hidden-md\">John.Smith</span> <b class=\"caret\"></b>-->\n" +
    "            <!--</a>-->\n" +
    "            <!--&lt;!&ndash; dropdown &ndash;&gt;-->\n" +
    "            <!--<ul class=\"dropdown-menu animated fadeInRight w\">-->\n" +
    "              <!--<li class=\"wrapper b-b m-b-sm bg-light m-t-n-xs\">-->\n" +
    "                <!--<div>-->\n" +
    "                  <!--<p>300mb of 500mb used</p>-->\n" +
    "                <!--</div>-->\n" +
    "                <!--<progressbar value=\"60\" class=\"progress-xs m-b-none bg-white\"></progressbar>-->\n" +
    "              <!--</li>-->\n" +
    "              <!--<li>-->\n" +
    "                <!--<a href>-->\n" +
    "                  <!--<span class=\"badge bg-danger pull-right\">30%</span>-->\n" +
    "                  <!--<span>Settings</span>-->\n" +
    "                <!--</a>-->\n" +
    "              <!--</li>-->\n" +
    "              <!--<li>-->\n" +
    "                <!--<a ui-sref=\"app.page.profile\">Profile</a>-->\n" +
    "              <!--</li>-->\n" +
    "              <!--<li>-->\n" +
    "                <!--<a ui-sref=\"app.docs\">-->\n" +
    "                  <!--<span class=\"label bg-info pull-right\">new</span>-->\n" +
    "                  <!--Help-->\n" +
    "                <!--</a>-->\n" +
    "              <!--</li>-->\n" +
    "              <!--<li class=\"divider\"></li>-->\n" +
    "              <!--<li>-->\n" +
    "                <!--<a ui-sref=\"access.signin\">Logout</a>-->\n" +
    "              <!--</li>-->\n" +
    "            <!--</ul>-->\n" +
    "            <!--&lt;!&ndash; / dropdown &ndash;&gt;-->\n" +
    "          <!--</li>-->\n" +
    "        <!--</ul>-->\n" +
    "        <!--&lt;!&ndash; / navbar right &ndash;&gt;-->\n" +
    "\n" +
    "      <!--</div>-->\n" +
    "      <!--&lt;!&ndash; / navbar collapse &ndash;&gt;-->\n" +
    "\n" +
    "\n" +
    "      <!--<div style=\"display: none\" id=\"imageCache\">-->\n" +
    "\n" +
    "          <!--<div id=\"activityImageCache\"></div>-->\n" +
    "          <!--<div id=\"hotelImageCache\"></div>-->\n" +
    "          <!--<div id=\"menuImageCache\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/chat-inactive.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/chat-active.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/hotel-inactive.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/hotel-active.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/wall-inactive.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/wall-active.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/me-inactive.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/me-active.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/checkout-inactive.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/checkout-active.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/logout-inactive.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/language-inactive.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/loading/loader.gif\">-->\n" +
    "          <!--</div>-->\n" +
    "          <!--<div id=\"profileImageCache\">-->\n" +
    "              <!--<img src=\"angulr/img/build/avatar/incognito-m.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/avatar/incognito-f.png\">-->\n" +
    "              <!--<img src=\"angulr/img/build/staff.png\">-->\n" +
    "          <!--</div>-->\n" +
    "      <!--</div>-->\n" +
    "\n" +
    "      \n" +
    "      <div id=\"headerTabDiv\" ng-style=\"!isSmartDevice && { 'margin-left' : '250px', 'margin-right': '10px' }\" ng-show=\"app.header.showTab\">\n" +
    "          <md-tabs md-selected=\"app.header.tabIndex\" md-stretch-tabs=\"always\" >\n" +
    "               \n" +
    "              <md-tab id=\"tab0\" class=\"\" aria-controls=\"tab0-content\" >\n" +
    "                  <!--md-on-select=\"hotelState.selectHeaderTab(0, app.header.tabIndex);\">-->\n" +
    "                 <!--{{'system.allHotelsTab' | translate}}-->\n" +
    "                  <span>{{'tab.activities' | translate}}</span>\n" +
    "                  <!--<span ng-show=\"!hotelState.profileData.checkedIn\">Check-In</span>-->\n" +
    "\n" +
    "              </md-tab>\n" +
    "               \n" +
    "              <md-tab id=\"tab1\" aria-controls=\"tab1-content\" >\n" +
    "                  <!--md-on-select=\"hotelState.selectHeaderTab(1, app.header.tabIndex);\"> -->\n" +
    "                   <span ng-class=\"{'tabPseudoDisabled': !hotelState.profileData.checkedIn}\">{{'tab.chat' | translate}}</span>\n" +
    "                   <!--<span ng-show=\"!hotelState.profileData.checkedIn\">Check-In</span>-->\n" +
    "\n" +
    "              </md-tab>\n" +
    "              <md-tab id=\"tab2\" aria-controls=\"tab2-content\" >\n" +
    "                  <!--<span ng-hide=\"$state.current.name=='app.chatList' && app.header.tabIndex==2\">&nbsp;&nbsp;&nbsp;{{'system.aboutHotelico' | translate}}&nbsp;&nbsp;&nbsp;</span>-->\n" +
    "                  <!--<span ng-show=\"$state.current.name=='app.chatList' && app.header.tabIndex==2\">{{'system.contacts' | translate}}</span>-->\n" +
    "                  <!--<span ng-show=\"!hotelState.profileData.checkedIn && $state.current.name=='app.activityList'\">{{'tab.allActivities' | translate}}</span>-->\n" +
    "                  <span ng-hide=\"!hotelState.profileData.checkedIn && $state.current.name=='app.activityList'\" ng-class=\"{'tabPseudoDisabled': !hotelState.profileData.checkedIn}\">{{'tab.lobby' | translate}}</span>\n" +
    "\n" +
    "              </md-tab>\n" +
    "          </md-tabs>\n" +
    "\n" +
    "          <!--<ng-switch on=\"tabData.selectedIndex\">-->\n" +
    "              <!--<div role=\"tabpanel\"-->\n" +
    "                   <!--id=\"tab1-content\"-->\n" +
    "                   <!--aria-labelledby=\"tab1\"-->\n" +
    "                   <!--ng-switch-when=\"0\"-->\n" +
    "                   <!--md-swipe-left=\"next()\"-->\n" +
    "                   <!--md-swipe-right=\"previous()\"  class=\"wrapper blue\">-->\n" +
    "                  <!--All Hotels content-->\n" +
    "              <!--</div>-->\n" +
    "              <!--<div role=\"tabpanel\"-->\n" +
    "                   <!--id=\"tab2-content\"-->\n" +
    "                   <!--aria-labelledby=\"tab2\"-->\n" +
    "                   <!--ng-switch-when=\"1\"-->\n" +
    "                   <!--md-swipe-left=\"next()\"-->\n" +
    "                   <!--md-swipe-right=\"previous()\"  class=\"wrapper teal\">-->\n" +
    "                 <!--My Hotel Content-->\n" +
    "              <!--</div>-->\n" +
    "              <!--&lt;!&ndash;<div role=\"tabpanel\"&ndash;&gt;-->\n" +
    "                   <!--&lt;!&ndash;id=\"tab3-content\"&ndash;&gt;-->\n" +
    "                   <!--&lt;!&ndash;aria-labelledby=\"tab3\"&ndash;&gt;-->\n" +
    "                   <!--&lt;!&ndash;ng-switch-when=\"2\"&ndash;&gt;-->\n" +
    "                   <!--&lt;!&ndash;md-swipe-left=\"next()\"&ndash;&gt;-->\n" +
    "                   <!--&lt;!&ndash;md-swipe-right=\"previous()\"  class=\"wrapper cyan\">&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;View for Item #3<br/>&ndash;&gt;-->\n" +
    "                  <!--&lt;!&ndash;data.selectedIndex = 2&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "          <!--</ng-switch>-->\n" +
    "\n" +
    "          <!--<div class=\"b-t wrapper\" layout=\"row\" layout-sm=\"column\" layout-align=\"left center\">-->\n" +
    "              <!--<md-input-container>-->\n" +
    "                  <!--<label for=\"selectedIndex\">Selected Index</label>-->\n" +
    "                  <!--<input type=\"number\" id=\"selectedIndex\" ng-model=\"data.selectedIndex\">-->\n" +
    "              <!--</md-input-container>-->\n" +
    "              <!--<div flex></div>-->\n" +
    "              <!--<md-checkbox ng-model=\"data.secondLocked\" aria-label=\"Disabled\">-->\n" +
    "                  <!--Disabled Item Two-->\n" +
    "              <!--</md-checkbox>-->\n" +
    "\n" +
    "          <!--</div>-->\n" +
    "           \n" +
    "      </div>\n" +
    "  </div>");
  $templateCache.put("angulr/tpl/blocks/material.layout.html",
    "<div ng-init=\"app.settings.container = false;\" class=\"md-navbar navbar blue md-whiteframe-z1\" data-ng-include=\" 'angulr/tpl/blocks/material.header.html' \" >\n" +
    "	</div>\n" +
    "	<div layout=\"row\">\n" +
    "	  <!-- menu -->\n" +
    "	  <div flex class=\"bg-white md-whiteframe-z0 md-aside md-content hidden-xs\" data-ng-include=\" 'angulr/tpl/blocks/material.aside.html' \">\n" +
    "	  </div>\n" +
    "	  <!-- / menu -->\n" +
    "\n" +
    "	  <!-- view -->\n" +
    "	  <div flex layout=\"column\">\n" +
    "	  	<div ui-butterbar></div>\n" +
    "    	<a href class=\"off-screen-toggle hide\" ui-toggle-class=\"off-screen\" data-target=\".md-aside\" ></a>\n" +
    "	  	<div class=\"md-content\" ui-view></div>\n" +
    "	  </div>\n" +
    "	  <!-- / view -->\n" +
    "	</div>\n" +
    "");
  $templateCache.put("angulr/tpl/blocks/material.nav.html",
    "<!--&lt;!&ndash; list &ndash;&gt;-->\n" +
    "<!--<ul class=\"nav\">-->\n" +
    "  <!--<li class=\"hidden-folded padder m-t m-b-sm text-muted text-xs\">-->\n" +
    "    <!--<span translate=\"aside.nav.HEADER\">Navigation</span>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li>-->\n" +
    "    <!--<a ui-sref=\"app.dashboard-v3\" md-ink-ripple class=\"auto\">-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-stats icon\"></i>-->\n" +
    "      <!--<span class=\"font-bold\" translate=\"aside.nav.DASHBOARD\">Dashboard</span>-->\n" +
    "    <!--</a>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li ui-sref-active=\"active\">-->\n" +
    "    <!--<a ui-sref=\"app.calendar\" md-ink-ripple>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-calendar icon\"></i>-->\n" +
    "      <!--<span class=\"font-bold\" translate=\"aside.nav.CALENDAR\">Calendar</span>-->\n" +
    "    <!--</a>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li ui-sref-active=\"active\">-->\n" +
    "    <!--<a ui-sref=\"app.mail.list\" md-ink-ripple>-->\n" +
    "      <!--<b class=\"badge bg-info pull-right\">9</b>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-envelope icon\"></i>-->\n" +
    "      <!--<span class=\"font-bold\" translate=\"aside.nav.EMAIL\">Email</span>-->\n" +
    "    <!--</a>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li>-->\n" +
    "    <!--<a href md-ink-ripple class=\"auto\">-->\n" +
    "      <!--<span class=\"pull-right text-muted\">-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-right text\"></i>-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-down text-active\"></i>-->\n" +
    "      <!--</span>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-th-large icon\"></i>-->\n" +
    "      <!--<span class=\"font-bold\">Apps</span>-->\n" +
    "    <!--</a>-->\n" +
    "    <!--<ul class=\"nav nav-sub dk\">-->\n" +
    "      <!--<li class=\"nav-sub-header\">-->\n" +
    "        <!--<a href md-ink-ripple>-->\n" +
    "          <!--<span>Apps</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.todo\">-->\n" +
    "          <!--<span md-ink-ripple>Todo</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.note\">-->\n" +
    "          <!--<span md-ink-ripple>Note</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "    <!--</ul>-->\n" +
    "  <!--</li>-->\n" +
    "\n" +
    "  <!--<li class=\"line dk\"></li>-->\n" +
    "\n" +
    "  <!--<li class=\"hidden-folded padder m-t m-b-sm text-muted text-xs\">-->\n" +
    "    <!--<span translate=\"aside.nav.components.COMPONENTS\">Components</span>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li ng-class=\"{active:$state.includes('app.material')}\">-->\n" +
    "    <!--<a href md-ink-ripple class=\"auto\">-->\n" +
    "      <!--<span class=\"pull-right text-muted\">-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-right text\"></i>-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-down text-active\"></i>-->\n" +
    "      <!--</span>-->\n" +
    "      <!--<i class=\"pull-right up\"><b class=\"badge bg-success\">14</b></i>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-th icon\"></i>-->\n" +
    "      <!--<span class=\"font-normal\">Material</span>-->\n" +
    "    <!--</a>-->\n" +
    "    <!--<ul class=\"nav nav-sub\">-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a md-ink-ripple ui-sref=\"app.material.button\">Button</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a md-ink-ripple ui-sref=\"app.material.icon\">Icon</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a md-ink-ripple ui-sref=\"app.material.color\">Color</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a md-ink-ripple ui-sref=\"app.material.card\">Card</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a md-ink-ripple ui-sref=\"app.material.form\">Form</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a md-ink-ripple ui-sref=\"app.material.list\">List</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a md-ink-ripple ui-sref=\"app.material.ngmaterial\">NgMaterial</a>-->\n" +
    "      <!--</li>-->\n" +
    "    <!--</ul>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li ng-class=\"{active:$state.includes('app.ui')}\">-->\n" +
    "    <!--<a href md-ink-ripple class=\"auto\">-->\n" +
    "      <!--<span class=\"pull-right text-muted\">-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-right text\"></i>-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-down text-active\"></i>-->\n" +
    "      <!--</span>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-briefcase icon\"></i>-->\n" +
    "      <!--<span translate=\"aside.nav.components.ui_kits.UI_KITS\">UI Kits</span>-->\n" +
    "    <!--</a>-->\n" +
    "    <!--<ul class=\"nav nav-sub dk\">-->\n" +
    "      <!--<li class=\"nav-sub-header\">-->\n" +
    "        <!--<a href>-->\n" +
    "          <!--<span translate=\"aside.nav.components.ui_kits.UI_KITS\">UI Kits</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.buttons\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.ui_kits.BUTTONS\">Buttons</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.icons\">-->\n" +
    "          <!--<b class=\"badge bg-info pull-right\">3</b>-->\n" +
    "          <!--<span translate=\"aside.nav.components.ui_kits.ICONS\">Icons</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.grid\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.ui_kits.GRID\">Grid</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.widgets\">-->\n" +
    "          <!--<b class=\"badge bg-success pull-right\">13</b>-->\n" +
    "          <!--<span translate=\"aside.nav.WIDGETS\">Widgets</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.bootstrap\">-->\n" +
    "          <!--<b class=\"badge bg-primary pull-right\">16</b>-->\n" +
    "          <!--<span translate=\"aside.nav.components.ui_kits.BOOTSTRAP\">Bootstrap</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.sortable\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.ui_kits.SORTABLE\">Sortable</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.scroll\">-->\n" +
    "          <!--<span>Scroll</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.portlet\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.ui_kits.PORTLET\">Portlet</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.timeline\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.ui_kits.TIMELINE\">Timeline</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.tree\">-->\n" +
    "          <!--<span>Tree</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.ui.toaster\">-->\n" +
    "          <!--<span>Toaster</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li>-->\n" +
    "        <!--<a href md-ink-ripple class=\"auto\">-->\n" +
    "          <!--<span class=\"pull-right text-muted\">-->\n" +
    "            <!--<i class=\"fa fa-fw fa-angle-right text\"></i>-->\n" +
    "            <!--<i class=\"fa fa-fw fa-angle-down text-active\"></i>-->\n" +
    "          <!--</span>-->\n" +
    "          <!--<b class=\"label bg-info pull-right\">2</b>-->\n" +
    "          <!--<span>Maps</span>-->\n" +
    "        <!--</a>-->\n" +
    "        <!--<ul class=\"nav dker\">-->\n" +
    "          <!--<li ui-sref-active=\"active\">-->\n" +
    "            <!--<a ui-sref=\"app.ui.jvectormap\">-->\n" +
    "              <!--<span translate=\"aside.nav.components.ui_kits.VECTOR_MAP\">Vector Map</span>-->\n" +
    "            <!--</a>-->\n" +
    "          <!--</li>-->\n" +
    "          <!--<li ui-sref-active=\"active\">-->\n" +
    "            <!--<a ui-sref=\"app.ui.googlemap\">-->\n" +
    "              <!--<span>Google Map</span>-->\n" +
    "            <!--</a>-->\n" +
    "          <!--</li>-->\n" +
    "        <!--</ul>-->\n" +
    "      <!--</li>-->\n" +
    "    <!--</ul>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li ng-class=\"{active:$state.includes('app.table')}\">-->\n" +
    "    <!--<a href md-ink-ripple class=\"auto\">-->\n" +
    "      <!--<span class=\"pull-right text-muted\">-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-right text\"></i>-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-down text-active\"></i>-->\n" +
    "      <!--</span>-->\n" +
    "      <!--<b class=\"label bg-primary pull-right\">2</b>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-list\"></i>-->\n" +
    "      <!--<span translate=\"aside.nav.components.table.TABLE\">Table</span>-->\n" +
    "    <!--</a>-->\n" +
    "    <!--<ul class=\"nav nav-sub dk\">-->\n" +
    "      <!--<li class=\"nav-sub-header\">-->\n" +
    "        <!--<a href>-->\n" +
    "          <!--<span translate=\"aside.nav.components.table.TABLE\">Table</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.table.static\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.table.TABLE_STATIC\">Table static</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.table.datatable\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.table.DATATABLE\">Datatable</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.table.footable\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.table.FOOTABLE\">Footable</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.table.grid\">-->\n" +
    "          <!--<span>ngGrid</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.table.uigrid\">-->\n" +
    "          <!--<span>uiGrid</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.table.smart\">-->\n" +
    "          <!--<span>Smart table</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.table.editable\">-->\n" +
    "          <!--<span>Editable</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "    <!--</ul>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li ng-class=\"{active:$state.includes('app.form')}\">-->\n" +
    "    <!--<a href md-ink-ripple class=\"auto\">-->\n" +
    "      <!--<span class=\"pull-right text-muted\">-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-right text\"></i>-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-down text-active\"></i>-->\n" +
    "      <!--</span>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-edit\"></i>-->\n" +
    "      <!--<span translate=\"aside.nav.components.form.FORM\">Form</span>-->\n" +
    "    <!--</a>-->\n" +
    "    <!--<ul class=\"nav nav-sub dk\">-->\n" +
    "      <!--<li class=\"nav-sub-header\">-->\n" +
    "        <!--<a href>-->\n" +
    "          <!--<span translate=\"aside.nav.components.form.FORM\">Form</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.form.elements\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.form.FORM_ELEMENTS\">Form elements</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.form.validation\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.form.FORM_VALIDATION\">Form validation</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.form.wizard\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.form.FORM_WIZARD\">Form wizard</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.form.fileupload\">-->\n" +
    "          <!--<span>File upload</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.form.imagecrop\">-->\n" +
    "          <!--<span>Image crop</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.form.select\">-->\n" +
    "          <!--<span>Select</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.form.slider\">-->\n" +
    "          <!--<span>Slider</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.form.editor\">-->\n" +
    "          <!--<span>Editor</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.form.xeditable\">-->\n" +
    "          <!--<span>Xeditable</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "    <!--</ul>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li ui-sref-active=\"active\">-->\n" +
    "    <!--<a ui-sref=\"app.chart\" md-ink-ripple>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-signal\"></i>-->\n" +
    "      <!--<span translate=\"aside.nav.components.CHART\">Chart</span>-->\n" +
    "    <!--</a>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li ng-class=\"{active:$state.includes('app.page')}\">-->\n" +
    "    <!--<a href md-ink-ripple class=\"auto\">-->\n" +
    "      <!--<span class=\"pull-right text-muted\">-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-right text\"></i>-->\n" +
    "        <!--<i class=\"fa fa-fw fa-angle-down text-active\"></i>-->\n" +
    "      <!--</span>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-file icon\"></i>-->\n" +
    "      <!--<span translate=\"aside.nav.components.pages.PAGES\">Pages</span>-->\n" +
    "    <!--</a>-->\n" +
    "    <!--<ul class=\"nav nav-sub dk\">-->\n" +
    "      <!--<li class=\"nav-sub-header\">-->\n" +
    "        <!--<a href>-->\n" +
    "          <!--<span translate=\"aside.nav.components.pages.PAGES\">Pages</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.page.profile\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.pages.PROFILE\">Profile</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.page.post\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.pages.POST\">Post</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.page.search\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.pages.SEARCH\">Search</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.page.invoice\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.pages.INVOICE\">Invoice</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li ui-sref-active=\"active\">-->\n" +
    "        <!--<a ui-sref=\"app.page.price\">-->\n" +
    "          <!--<span>Price</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li>-->\n" +
    "        <!--<a ui-sref=\"lockme\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.pages.LOCK_SCREEN\">Lock screen</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li>-->\n" +
    "        <!--<a ui-sref=\"access.signin\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.pages.SIGNIN\">Signin</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li>-->\n" +
    "        <!--<a ui-sref=\"access.signup\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.pages.SIGNUP\">Signup</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li>-->\n" +
    "        <!--<a ui-sref=\"access.forgotpwd\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.pages.FORGOT_PASSWORD\">Forgot password</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "      <!--<li>-->\n" +
    "        <!--<a ui-sref=\"access.404\">-->\n" +
    "          <!--<span translate=\"aside.nav.components.pages.404\">404</span>-->\n" +
    "        <!--</a>-->\n" +
    "      <!--</li>-->\n" +
    "    <!--</ul>-->\n" +
    "  <!--</li>-->\n" +
    "\n" +
    "  <!--<li class=\"line dk hidden-folded\"></li>-->\n" +
    "\n" +
    "  <!--<li class=\"hidden-folded padder m-t m-b-sm text-muted text-xs\">          -->\n" +
    "    <!--<span translate=\"aside.nav.your_stuff.YOUR_STUFF\">Your Stuff</span>-->\n" +
    "  <!--</li>  -->\n" +
    "  <!--<li>-->\n" +
    "    <!--<a ui-sref=\"app.page.profile\">-->\n" +
    "      <!--<i class=\"icon-user icon text-success-lter\"></i>-->\n" +
    "      <!--<b class=\"badge bg-success pull-right\">30%</b>-->\n" +
    "      <!--<span translate=\"aside.nav.your_stuff.PROFILE\">Profile</span>-->\n" +
    "    <!--</a>-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li>-->\n" +
    "    <!--<a ui-sref=\"app.docs\">-->\n" +
    "      <!--<i class=\"icon-question icon\"></i>-->\n" +
    "      <!--<span translate=\"aside.nav.your_stuff.DOCUMENTS\">Documents</span>-->\n" +
    "    <!--</a>-->\n" +
    "  <!--</li>-->\n" +
    "<!--</ul>-->\n" +
    "<!--&lt;!&ndash; / list &ndash;&gt;-->\n" +
    "");
  $templateCache.put("angulr/tpl/blocks/nav.html",
    "<!-- list -->\n" +
    "<ul class=\"nav\">\n" +
    "  <!--<li class=\"hidden-folded padder m-t m-b-sm text-muted text-xs\">-->\n" +
    "    <!--&lt;!&ndash;<span translate=\"nav.navigation\">&ndash;&gt;-->\n" +
    "      <!--&lt;!&ndash;&lt;!&ndash;Navigation&ndash;&gt;&ndash;&gt;-->\n" +
    "    <!--&lt;!&ndash;</span>&ndash;&gt;-->\n" +
    "  <!--</li>-->\n" +
    "  <!--<li  ui-sref-active=\"active\" class=\"leftMenuMe\">-->\n" +
    "    <!--<a ui-sref=\"app.me\" class=\"menuALeft\">-->\n" +
    "      <!--&lt;!&ndash;<i class=\"icon-user icon menuIconLeft\"></i>&ndash;&gt;-->\n" +
    "      <!--<div class=\"menuIconLeft iconMe\"/>-->\n" +
    "      <!--&lt;!&ndash;<b class=\"badge bg-success pull-right\">30%</b>&ndash;&gt;-->\n" +
    "      <!--<span class=\"menuLabelLeft\" translate=\"system.profile\">My Profile</span>-->\n" +
    "    <!--</a>-->\n" +
    "  <!--</li>-->\n" +
    "  \n" +
    "  <li ui-sref-active=\"active\" class=\"leftMenuHotel\" ng-show=\"!hotelState.profileData.logged && hotelState.profileData.checkedIn\">\n" +
    "    <a ui-sref=\"app.hotelPreview\" class=\"menuALeft\">\n" +
    "      <b class=\"badge bg-orange pull-right\" ng-show=\"hotelNotification.notificationObj.hotelUnreadActivitiesNumber && hotelState.profileData.id>0\">{{hotelNotification.notificationObj.hotelUnreadActivitiesNumber}}</b>\n" +
    "      <!--<b class=\"badge bg-orange pull-right\" ng-show=\"hotelsCounterNumber && hotelState.profileData.id=0\">{{hotelsCounterNumber}}</b>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-briefcase icon navIconItem\"></i>-->\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/hotel-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <div class=\"menuIconLeft iconActivity\"/>\n" +
    "\n" +
    "      <span class=\"font-bold menuLabelLeft\" translate=\"system.activities\">Hotel</span>\n" +
    "    </a>\n" +
    "  </li>\n" +
    "  \n" +
    "  <li ui-sref-active=\"active\" class=\"leftMenuHotel\" ng-show=\"hotelState.profileData.logged && hotelState.profileData.checkedIn\">\n" +
    "    <a ui-sref=\"app.hotel\" class=\"menuALeft\">\n" +
    "      <b class=\"badge bg-orange pull-right\" ng-show=\"hotelNotification.notificationObj.hotelUnreadActivitiesNumber && hotelState.profileData.id>0\">{{hotelNotification.notificationObj.hotelUnreadActivitiesNumber}}</b>\n" +
    "      <!--<b class=\"badge bg-orange pull-right\" ng-show=\"hotelsCounterNumber && hotelState.profileData.id=0\">{{hotelsCounterNumber}}</b>-->\n" +
    "      <!--<i class=\"glyphicon glyphicon-briefcase icon navIconItem\"></i>-->\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/hotel-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <div class=\"menuIconLeft iconActivity\"/>\n" +
    "\n" +
    "      <span class=\"font-bold menuLabelLeft\" translate=\"system.activities\">Hotel</span>\n" +
    "    </a>\n" +
    "  </li>\n" +
    "  \n" +
    "  <li ui-sref-active=\"active\" class=\"leftMenuHotel\" ng-show=\"!hotelState.profileData.checkedIn\">\n" +
    "    <a ui-sref=\"app.activityList\" class=\"menuALeft\">\n" +
    "      \n" +
    "      <div class=\"menuIconLeft iconActivity\"/>\n" +
    "\n" +
    "      <span class=\"font-bold menuLabelLeft\" translate=\"tab.allActivities\">All Activities</span>\n" +
    "    </a>\n" +
    "  </li>\n" +
    "\n" +
    "  <li  ui-sref-active=\"active\" class=\"leftMenuCheckout\" ng-show=\"hotelState.profileData && !hotelState.profileData.checkedIn && (!hotelState.profileData.hotelStaff)\">\n" +
    "    <a ui-sref=\"app.checkin\" class=\"menuALeft\">\n" +
    "      <!--<i class=\"fa fa-sign-out navIconItem\"></i>-->\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/checkout-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <div class=\"menuIconLeft iconCheckout\"/>\n" +
    "      <span class=\"menuLabelLeft\" translate=\"system.checkin\">Checkin</span>\n" +
    "    </a>\n" +
    "  </li>\n" +
    "  \n" +
    "  <!--<li ui-sref-active=\"active\" ng-show=\"hotelState.currentHotelId && hotelState.currentHotel.id>0\">-->\n" +
    "    <!--<a ui-sref=\"app.editActivity\">-->\n" +
    "      <!--<b class=\"badge bg-info pull-right\" ng-show=\"hotelUnreadActivitiesNumber\">{{hotelUnreadActivitiesNumber}}</b>-->\n" +
    "      <!--&lt;!&ndash;<i class=\"fa fa-weibo navIconItem\"></i>&ndash;&gt;-->\n" +
    "      <!--<img src=\"angulr/img/build/menu/iconHotelLeft.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <!--<span class=\"font-bold menuLabelLeft\" translate=\"system.activities\">Activities</span>-->\n" +
    "    <!--</a>-->\n" +
    "  <!--</li>-->\n" +
    "  <li ui-sref-active=\"active\" class=\"leftMenuChat\">\n" +
    "    <!--<a ng-click=\"clickLoading('app.chatList', null, null, {hotelScope: hotelState.profileData.checkedIn && app.header.tabIndex==1})\" class=\"menuALeft uiSrefLink\">-->\n" +
    "    <a ng-click=\"clickLoading('app.chatList', null, null, {hotelScope: hotelState.profileData.checkedIn})\" class=\"menuALeft uiSrefLink\">\n" +
    "      <b class=\"badge bg-orange pull-right menuNotificationLeft\" ng-show=\"hotelNotification.notificationObj.unreadChatsCounter && hotelState.profileData.id>0\">{{hotelNotification.notificationObj.unreadChatsCounter}}</b>\n" +
    "      <!--<i class=\"fa fa-comments-o navIconItem\"></i>-->\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/chat-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <div class=\"menuIconLeft iconChat\"/>\n" +
    "      <!--<span class=\"font-bold menuLabelLeft\" translate=\"system.contacts\" ng-hide=\"app.header.tabIndex==1\">Contacts</span>-->\n" +
    "      <span class=\"font-bold menuLabelLeft\" translate=\"system.chat\">Chat</span>\n" +
    "    </a>\n" +
    "    <a ui-sref=\"app.chatList\" style=\"display: none;\"></a>\n" +
    "  </li>\n" +
    "    \n" +
    "  <li ui-sref-active=\"active\" class=\"leftMenuWall\"  ng-show=\"hotelState.profileData.checkedIn\">\n" +
    "    <a ng-click=\"clickLoading('app.wall')\" class=\"menuALeft uiSrefLink\">\n" +
    "      <!--<b class=\"badge bg-info pull-right\">9</b>-->\n" +
    "      \n" +
    "      <b class=\"badge bg-orange pull-right menuNotificationLeft\" ng-show=\"hotelNotification.notificationObj.hotelUnreadWallNumber && hotelState.profileData.id>0\">{{hotelNotification.notificationObj.hotelUnreadWallNumber}}</b>\n" +
    "\n" +
    "      \n" +
    "      <!--<i class=\"fa fa-comment-o  navIconItem\"></i>-->\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/wallpost-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <div class=\"menuIconLeft iconWall\"/>\n" +
    "      <span ui-sref=\"app.wall\" class=\"font-bold menuLabelLeft\" translate=\"system.wall\">Wall</span>\n" +
    "    </a>\n" +
    "    <a ui-sref=\"app.wall\" style=\"display: none;\"></a>\n" +
    "  </li>\n" +
    "    \n" +
    "  <li  ui-sref-active=\"active\" class=\"leftMenuCheckout\" ng-show=\"hotelState.profileData.checkedIn && (!hotelState.profileData.hotelStaff)\">\n" +
    "    <a ng-click=\"checkinService.resetCheckin()\" class=\"menuALeft uiSrefLink\">\n" +
    "      <!--<i class=\"fa fa-sign-out navIconItem\"></i>-->\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/checkout-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <div class=\"menuIconLeft iconCheckout\"/>\n" +
    "      <span class=\"menuLabelLeft\" translate=\"system.checkout\">Checkout</span>\n" +
    "    </a>\n" +
    "  </li> \n" +
    "        \n" +
    "    \n" +
    "        <li  ui-sref-active=\"active\" class=\"leftMenuLogout\" ng-show=\"hotelState.profileData && hotelState.profileData.id>0\">\n" +
    "          <a ng-click=\"loginService.resetLogin()\" class=\"menuALeft uiSrefLink\">\n" +
    "            <!--<i class=\"fa fa-chain-broken navIconItem\"></i>-->\n" +
    "            <img ng-src=\"angulr/img/build/menu/bottom/logout-inactive.png\" class=\"menuIconLeft\"/>\n" +
    "            <span class=\"menuLabelLeft\" translate=\"system.logout\">Logout</span>\n" +
    "          </a>\n" +
    "        </li> \n" +
    "    \n" +
    "       <li  ui-sref-active=\"active\" class=\"leftMenuLogout\" ng-show=\"!hotelState.profileData.logged || hotelState.profileData.id==0\">\n" +
    "          <a ui-sref=\"access.login\" class=\"menuALeft\">\n" +
    "            <!--<i class=\"fa fa-chain-broken navIconItem\"></i>-->\n" +
    "            <img ng-src=\"angulr/img/build/menu/bottom/logout-inactive.png\" class=\"menuIconLeft\"/>\n" +
    "            <span class=\"menuLabelLeft\" translate=\"Login\">Login</span>\n" +
    "          </a>\n" +
    "        </li>\n" +
    "\n" +
    "  <li class=\"leftMenuLanguage\">\n" +
    "    <a ui-sref=\"app.language\" class=\"menuALeft\">\n" +
    "      <b  class=\"badge bg-orange-border pull-right menuNotificationLeft\" style=\"position: absolute;right: 5px; border-width: 2px;\">{{hotelState.prefferedLanguage.charAt(0).toUpperCase() + hotelState.prefferedLanguage.slice(1)}}</b>\n" +
    "      <!--<i class=\"fa fa-chain-broken navIconItem\"></i>-->\n" +
    "      <img ng-src=\"angulr/img/build/menu/bottom/language-inactive.png\" class=\"menuIconLeft\"/>\n" +
    "      <span class=\"menuLabelLeft\" translate=\"system.language\">language</span>\n" +
    "\n" +
    "    </a>\n" +
    "    <!--<a id=\"languageSelector\" editable-select=\"languages\" e-ng-options=\"s.value as s.text for s in languages\">-->\n" +
    "    <!--{{ app.rootSettings.prefferedLanguage }}-->\n" +
    "    <!--</a>-->\n" +
    "  </li>\n" +
    "\n" +
    "  <li class=\"line dk\" ng-show=\"hotelState.profileData\"></li>\n" +
    "\n" +
    "\n" +
    "  <li  ui-sref-active=\"active\" >\n" +
    "    <a ui-sref=\"app.feedback\" class=\"menuALeft\">\n" +
    "      <!--<b  class=\"badge bg-orange-border pull-right menuNotificationLeft\" style=\"position: absolute;right: 5px; border-width: 2px;\">{{gelLanguageKey()}}</b>-->\n" +
    "      <i style=\"font-size: 30px;margin-left: 5px;margin-right: 11px;\" class=\"fa fa-envelope-o navIconItem\"></i>\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/language-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <span class=\"menuLabelLeft\" translate=\"system.feedback\">Feedback</span>\n" +
    "\n" +
    "    </a>\n" +
    "    <!--<a id=\"languageSelector\" editable-select=\"languages\" e-ng-options=\"s.value as s.text for s in languages\">-->\n" +
    "    <!--{{ app.rootSettings.prefferedLanguage }}-->\n" +
    "    <!--</a>-->\n" +
    "  </li>\n" +
    "\n" +
    "\n" +
    "\n" +
    "  <li  ui-sref-active=\"active\" ng-if=\"hotelState.profileData.checkedIn && (hotelState.profileData.hotelStaff || hotelState.profileData.admin)\">\n" +
    "    <a ui-sref=\"app.feed\" class=\"menuALeft\">\n" +
    "      <!--<b  class=\"badge bg-orange-border pull-right menuNotificationLeft\" style=\"position: absolute;right: 5px; border-width: 2px;\">{{gelLanguageKey()}}</b>-->\n" +
    "      <i style=\"font-size: 30px;margin-left: 5px;margin-right: 11px;\" class=\"fa fa-rss navIconItem\"></i>\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/language-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <span class=\"menuLabelLeft\" translate=\"system.hotelFeed\">HotelFeed</span>\n" +
    "      \n" +
    "    </a>\n" +
    "    <!--<a id=\"languageSelector\" editable-select=\"languages\" e-ng-options=\"s.value as s.text for s in languages\">-->\n" +
    "      <!--{{ app.rootSettings.prefferedLanguage }}-->\n" +
    "    <!--</a>-->\n" +
    "  </li>\n" +
    "\n" +
    "  <li  ui-sref-active=\"active\" class=\"leftMenuLogout\" ng-show=\"!hotelState.profileData.logged || hotelState.profileData.id==0\">\n" +
    "    <a ui-sref=\"access.hotelLogin\" class=\"menuALeft\">\n" +
    "      <!--<i class=\"fa fa-chain-broken navIconItem\"></i>-->\n" +
    "      <div class=\"menuIconLeft iconHotel\"/>\n" +
    "      <span class=\"menuLabelLeft\" translate=\"Hotel Login\">Hotel Login</span>\n" +
    "    </a>\n" +
    "  </li>\n" +
    "  \n" +
    "  <li  ui-sref-active=\"active\" ng-if=\"hotelState.profileData.checkedIn && (hotelState.profileData.hotelStaff || hotelState.profileData.admin)\">\n" +
    "    <a ui-sref=\"app.editHotel\" class=\"menuALeft\">\n" +
    "      <!--<b  class=\"badge bg-orange-border pull-right menuNotificationLeft\" style=\"position: absolute;right: 5px; border-width: 2px;\">{{gelLanguageKey()}}</b>-->\n" +
    "      <i style=\"font-size: 30px;margin-left: 5px;margin-right: 11px;\" class=\"fa fa-pencil-square-o navIconItem\"></i>\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/language-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <span class=\"menuLabelLeft\" translate=\"page.hotel.updateHotelInfo\">Update HotelInfo</span>\n" +
    "      \n" +
    "    </a>\n" +
    "    <!--<a id=\"languageSelector\" editable-select=\"languages\" e-ng-options=\"s.value as s.text for s in languages\">-->\n" +
    "      <!--{{ app.rootSettings.prefferedLanguage }}-->\n" +
    "    <!--</a>-->\n" +
    "  </li> \n" +
    "  \n" +
    "  <li  ui-sref-active=\"active\" >\n" +
    "    <a ui-sref=\"app.about\" class=\"menuALeft\">\n" +
    "      <i style=\"font-size: 30px;margin-left: 5px;margin-right: 11px;\" class=\"fa fa-info-circle navIconItem\"></i>\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/language-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <span class=\"menuLabelLeft\" translate=\"system.about\">About</span>\n" +
    "      \n" +
    "    </a>\n" +
    "    <!--<a id=\"languageSelector\" editable-select=\"languages\" e-ng-options=\"s.value as s.text for s in languages\">-->\n" +
    "      <!--{{ app.rootSettings.prefferedLanguage }}-->\n" +
    "    <!--</a>-->\n" +
    "  </li> \n" +
    "    \n" +
    "  \n" +
    "  <li  ui-sref-active=\"active\" ng-if=\"::isSmartDevice\">\n" +
    "    <a ui-sref=\"app.impressum\" class=\"menuALeft\">\n" +
    "      <i style=\"font-size: 30px;margin-left: 5px;margin-right: 11px;\" class=\"fa fa-info navIconItem\"></i>\n" +
    "      <!--<img src=\"angulr/img/build/menu/bottom/language-inactive.png\" class=\"menuIconLeft\"/>-->\n" +
    "      <span class=\"menuLabelLeft\">Impressum</span>\n" +
    "      \n" +
    "    </a>\n" +
    "    <!--<a id=\"languageSelector\" editable-select=\"languages\" e-ng-options=\"s.value as s.text for s in languages\">-->\n" +
    "      <!--{{ app.rootSettings.prefferedLanguage }}-->\n" +
    "    <!--</a>-->\n" +
    "  </li>\n" +
    "  <!--<li>-->\n" +
    "    <!--<a ui-sref=\"app.form.imagecrop\">-->\n" +
    "      <!-- -->\n" +
    "      <!--&lt;!&ndash;<b class=\"badge bg-success pull-right\">30%</b>&ndash;&gt;-->\n" +
    "      <!--<span translate=\"system.profile\">My cccc</span>-->\n" +
    "    <!--</a>-->\n" +
    "  <!--</li>-->\n" +
    "  \n" +
    "  <!--<li>-->\n" +
    "    <!--<a ui-sref=\"app.docs\">-->\n" +
    "      <!--<i class=\"icon-question icon\"></i>-->\n" +
    "      <!--<span translate=\"aside.nav.your_stuff.DOCUMENTS\">Documents</span>-->\n" +
    "    <!--</a>-->\n" +
    "  <!--</li>-->\n" +
    "</ul>\n" +
    "<!-- / list -->\n" +
    "");
  $templateCache.put("angulr/tpl/blocks/page_footer.html",
    "<p>\n" +
    "  <small class=\"text-muted\">Web app framework base on Bootstrap and AngularJS<br>&copy; 2015</small>\n" +
    "</p>");
  $templateCache.put("angulr/tpl/blocks/settings.html",
    "<!--&lt;!&ndash; settings &ndash;&gt;-->\n" +
    "  <!--<button class=\"btn btn-default no-shadow pos-abt\" ui-toggle-class=\"active\" target=\".settings\">-->\n" +
    "    <!--<i class=\"fa fa-spin fa-gear\"></i>-->\n" +
    "  <!--</button>-->\n" +
    "  <!--<div class=\"panel-heading\">-->\n" +
    "    <!--Settings-->\n" +
    "  <!--</div>-->\n" +
    "  <!--<div class=\"panel-body\"> -->\n" +
    "    <!--<div class=\"m-b-sm\">-->\n" +
    "      <!--<label class=\"i-switch bg-info pull-right\">-->\n" +
    "        <!--<input type=\"checkbox\" ng-model=\"app.settings.headerFixed\">-->\n" +
    "        <!--<i></i>-->\n" +
    "      <!--</label>-->\n" +
    "      <!--Fixed header -->\n" +
    "    <!--</div>-->\n" +
    "    <!--<div class=\"m-b-sm\">-->\n" +
    "      <!--<label class=\"i-switch bg-info pull-right\">-->\n" +
    "        <!--<input type=\"checkbox\" ng-model=\"app.settings.asideFixed\">-->\n" +
    "        <!--<i></i>-->\n" +
    "      <!--</label>-->\n" +
    "      <!--Fixed aside -->\n" +
    "    <!--</div>-->\n" +
    "    <!--<div class=\"m-b-sm\">-->\n" +
    "      <!--<label class=\"i-switch bg-info pull-right\">-->\n" +
    "        <!--<input type=\"checkbox\" ng-model=\"app.settings.asideFolded\">-->\n" +
    "        <!--<i></i>-->\n" +
    "      <!--</label>-->\n" +
    "      <!--Folded aside -->\n" +
    "    <!--</div>-->\n" +
    "    <!--<div class=\"m-b-sm\">-->\n" +
    "      <!--<label class=\"i-switch bg-info pull-right\">-->\n" +
    "        <!--<input type=\"checkbox\" ng-model=\"app.settings.asideDock\">-->\n" +
    "        <!--<i></i>-->\n" +
    "      <!--</label>-->\n" +
    "      <!--Dock aside-->\n" +
    "    <!--</div>-->\n" +
    "    <!--<div>-->\n" +
    "      <!--<label class=\"i-switch bg-info pull-right\">-->\n" +
    "        <!--<input type=\"checkbox\" ng-model=\"app.settings.container\">-->\n" +
    "        <!--<i></i>-->\n" +
    "      <!--</label>-->\n" +
    "      <!--Boxed layout-->\n" +
    "    <!--</div>-->\n" +
    "  <!--</div>-->\n" +
    "  <!--<div class=\"wrapper b-t b-light bg-light lter r-b\">-->\n" +
    "    <!--<div class=\"row row-sm\">-->\n" +
    "      <!--<div class=\"col-xs-6\">-->\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-black'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-white-only'; -->\n" +
    "          <!--app.settings.asideColor='bg-black';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" name=\"a\" ng-model=\"app.settings.themeID\" value=\"1\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-black header\"></b>-->\n" +
    "            <!--<b class=\"bg-white header\"></b>-->\n" +
    "            <!--<b class=\"bg-black\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-dark'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-white-only'; -->\n" +
    "          <!--app.settings.asideColor='bg-dark';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" name=\"a\" ng-model=\"app.settings.themeID\" value=\"13\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-dark header\"></b>-->\n" +
    "            <!--<b class=\"bg-white header\"></b>-->\n" +
    "            <!--<b class=\"bg-dark\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-white-only'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-white-only'; -->\n" +
    "          <!--app.settings.asideColor='bg-black';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"2\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-white header\"></b>-->\n" +
    "            <!--<b class=\"bg-white header\"></b>-->\n" +
    "            <!--<b class=\"bg-black\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-primary'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-white-only'; -->\n" +
    "          <!--app.settings.asideColor='bg-dark';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"3\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-primary header\"></b>-->\n" +
    "            <!--<b class=\"bg-white header\"></b>-->\n" +
    "            <!--<b class=\"bg-dark\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-info'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-white-only'; -->\n" +
    "          <!--app.settings.asideColor='bg-black';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"4\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-info header\"></b>-->\n" +
    "            <!--<b class=\"bg-white header\"></b>-->\n" +
    "            <!--<b class=\"bg-black\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-success'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-white-only'; -->\n" +
    "          <!--app.settings.asideColor='bg-dark';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"5\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-success header\"></b>-->\n" +
    "            <!--<b class=\"bg-white header\"></b>-->\n" +
    "            <!--<b class=\"bg-dark\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-danger'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-white-only'; -->\n" +
    "          <!--app.settings.asideColor='bg-dark';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"6\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-danger header\"></b>-->\n" +
    "            <!--<b class=\"bg-white header\"></b>-->\n" +
    "            <!--<b class=\"bg-dark\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "      <!--</div>-->\n" +
    "      <!--<div class=\"col-xs-6\">-->\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-black'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-black'; -->\n" +
    "          <!--app.settings.asideColor='bg-white b-r';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"7\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-black header\"></b>-->\n" +
    "            <!--<b class=\"bg-black header\"></b>-->\n" +
    "            <!--<b class=\"bg-white\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-dark'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-dark'; -->\n" +
    "          <!--app.settings.asideColor='bg-light';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" name=\"a\" ng-model=\"app.settings.themeID\" value=\"14\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-dark header\"></b>-->\n" +
    "            <!--<b class=\"bg-dark header\"></b>-->\n" +
    "            <!--<b class=\"bg-light\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-info dker'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-info dker'; -->\n" +
    "          <!--app.settings.asideColor='bg-light dker b-r';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"8\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-info dker header\"></b>-->\n" +
    "            <!--<b class=\"bg-info dker header\"></b>-->\n" +
    "            <!--<b class=\"bg-light dker\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-primary'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-primary'; -->\n" +
    "          <!--app.settings.asideColor='bg-dark';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"9\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-primary header\"></b>-->\n" +
    "            <!--<b class=\"bg-primary header\"></b>-->\n" +
    "            <!--<b class=\"bg-dark\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-info dker'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-info dk'; -->\n" +
    "          <!--app.settings.asideColor='bg-black';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"10\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-info dker header\"></b>-->\n" +
    "            <!--<b class=\"bg-info dk header\"></b>-->\n" +
    "            <!--<b class=\"bg-black\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "\n" +
    "        <!--<label class=\"i-checks block m-b\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-success'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-success';-->\n" +
    "          <!--app.settings.asideColor='bg-dark';-->\n" +
    "          <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"11\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-success header\"></b>-->\n" +
    "            <!--<b class=\"bg-success header\"></b>-->\n" +
    "            <!--<b class=\"bg-dark\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "        <!-- -->\n" +
    "        <!--<label class=\"i-checks block\" ng-click=\"-->\n" +
    "          <!--app.settings.navbarHeaderColor='bg-danger dker bg-gd'; -->\n" +
    "          <!--app.settings.navbarCollapseColor='bg-danger dker bg-gd'; -->\n" +
    "          <!--app.settings.asideColor='bg-dark';-->\n" +
    "         <!--\">-->\n" +
    "          <!--<input type=\"radio\" ng-model=\"app.settings.themeID\" value=\"12\">-->\n" +
    "          <!--<span class=\"block bg-light clearfix pos-rlt\">-->\n" +
    "            <!--<span class=\"active pos-abt w-full h-full bg-black-opacity text-center\">-->\n" +
    "              <!--<i class=\"glyphicon glyphicon-ok text-white m-t-xs\"></i>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<b class=\"bg-danger dker header\"></b>-->\n" +
    "            <!--<b class=\"bg-danger dker header\"></b>-->\n" +
    "            <!--<b class=\"bg-dark\"></b>-->\n" +
    "          <!--</span>-->\n" +
    "        <!--</label>-->\n" +
    "      <!--</div>-->\n" +
    "    <!--</div>-->\n" +
    "  <!--</div>-->\n" +
    "<!--&lt;!&ndash; /settings &ndash;&gt;-->");
  $templateCache.put("angulr/tpl/hotel/blocks/addActivityAccardion.html",
    "<accordion close-others=\"oneAtATime\">\n" +
    "    <accordion-group is-open=\"accordionStatus.newActivityOpen\" is-disabled=\"accordionStatus.isNewActivityDisabled\" class=\"b-info\">\n" +
    "        <accordion-heading>\n" +
    "            <div>\n" +
    "                <i ng-class=\"::localState.newActivityAccordionIconClass\"></i>  &nbsp; {{::'page.activities.addActivity' | translate }} <i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.newActivityOpen, 'fa-angle-right': !accordionStatus.newActivityOpen}\"></i>\n" +
    "            </div>\n" +
    "        </accordion-heading>\n" +
    "\n" +
    "\n" +
    "        <form class=\"m-b-none ng-pristine ng-valid \" ng-submit=\"submitNewActivity()\" name=\"newActivityForm\">\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.activities.activityTitle' | translate}}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" ng-model=\"localState.newActivity.title\" placeholder=\"{{::'page.activities.activityTitle' | translate}}\" required>\n" +
    "\n" +
    "            </div>\n" +
    "           \n" +
    "            <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.activities.activityShortDescription' | translate}}</label>\n" +
    "                    <div style=\"  /*margin-bottom: -20px;*/\">\n" +
    "                        <!--<small>{{::'system.restLength' | translate}}:</small> -->\n" +
    "                        <span class=\"count\" ng-bind=\"localState.maxActivityShortDescription - localState.newActivity.shortDescription.length\" ng-class=\"{danger: localState.newActivity.shortDescription.length > localState.maxActivityShortDescription}\">{{::localState.maxActivityShortDescription}}</span>\n" +
    "                    </div>\n" +
    "                \n" +
    "                <textarea class=\"form-control\" rows=\"5\" ng-model=\"localState.newActivity.shortDescription\" placeholder=\"{{::'page.activities.activityShortDescription' | translate}}\"></textarea>\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.activities.activityDescription' | translate}}</label>\n" +
    "                    <div style=\"  margin-bottom: -20px;\">\n" +
    "                        <!--<small>{{::'system.restLength' | translate}}:</small> -->\n" +
    "                        <span class=\"count\" ng-bind=\"localState.maxActivityDescription - localState.newActivity.description.length\" ng-class=\"{danger: localState.newActivity.description.length > localState.maxActivityDescription}\">{{::localState.maxActivityDescription}}</span>\n" +
    "                    </div>\n" +
    "                \n" +
    "                <div text-angular ng-model=\"localState.newActivity.description\" class=\"btn-groups\"  ta-toolbar=\"[['bold', 'italics', 'underline', 'ul', 'ol', 'redo', 'undo', 'clear']]\" ></div>\n" +
    "                <!--<textarea class=\"form-control\" rows=\"5\" ng-model=\"localState.newActivity.description\" placeholder=\"{{::'page.activities.activityDescription' | translate}}\"></textarea>-->\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.activities.validFrom' | translate}}</label>\n" +
    "\n" +
    "                <div class=\"input-group\"  ng-controller=\"DatepickerCheckinCtrl\">\n" +
    "                    <input type=\"text\" placeholder=\"DD.MM.YYYY\"  class=\"form-control\" datepicker-popup=\"{{format}}\" ng-model=\"localState.newActivity.validFrom\" is-open=\"opened\" datepicker-options=\"dateOptions\" ng-required=\"true\" close-text=\"Close\" required/>\n" +
    "                                        <span class=\"input-group-btn\">\n" +
    "                                        <button type=\"button\" class=\"btn btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n" +
    "                                    </span>\n" +
    "                </div>\n" +
    "\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.activities.validTo' | translate}}</label>\n" +
    "                <div class=\"input-group\"  ng-controller=\"DatepickerCheckinCtrl\">\n" +
    "                    <input type=\"text\" placeholder=\"DD.MM.YYYY\"  class=\"form-control\" datepicker-popup=\"{{format}}\" ng-model=\"localState.newActivity.validTo\" is-open=\"opened\" datepicker-options=\"dateOptions\" ng-required=\"true\" close-text=\"Close\" required/>\n" +
    "                                        <span class=\"input-group-btn\">\n" +
    "                                        <button type=\"button\" class=\"btn btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n" +
    "                                    </span>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            \n" +
    "            <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.activities.activityLogo' | translate}}</label>\n" +
    "\n" +
    "                <input ng-model=\"newActivityFile\"\n" +
    "                       onchange=\"angular.element(this).scope().newFile_changed(this, 'activity', angular.element(this).scope().localState.newActivity.activityId)\"\n" +
    "                       type=\"file\" accept=\"image/*\" />\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <button type=\"submit\" class=\"btn btn-block btn-lg btn-success\" ng-disabled=\"localState.newActivity.shortDescription.length > localState.maxShortDescription || localState.newActivity.shortDescription.length === 0\">{{::'page.activities.addActivity' | translate }}</button>\n" +
    "            </div>\n" +
    "        </form>\n" +
    "\n" +
    "    </accordion-group>\n" +
    "</accordion>");
  $templateCache.put("angulr/tpl/hotel/blocks/chatListCustomer.html",
    "<li class=\"list-group-item chatListCol\">\n" +
    "    <a href ui-sref=\"app.chat({receiverId: nextCustomer.id})\">\n" +
    "        <div ng-click=\"clickLoading(null, null, '#/app/chat/'+nextCustomer.id)\" style=\"cursor: pointer;\">\n" +
    "            <a href ui-sref=\"app.user({userId: nextCustomer.id})\" class=\"avatar thumb-sm m-r\">\n" +
    "                <!--<img src=\"{{getProfileImageUrl(nextCustomer.id)}}\" class=\"r r-2x\">-->\n" +
    "                <img ng-src=\"{{nextCustomer.avatarUrl}}\" class=\"r r-2x\">\n" +
    "                <i class=\"on md b-white right customerOnlineStatus\" ng-show=\"hotelNotification.notificationObj.hotelOnlineGuestIds[nextCustomer.id]\"></i>\n" +
    "                <i class=\"offline md b-white right customerOnlineStatus\" ng-hide=\"hotelNotification.notificationObj.hotelOnlineGuestIds[nextCustomer.id]\"></i>\n" +
    "            </a>\n" +
    "            <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" ng-class=\"hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]? ' unreadMessageTime text-muted chatMessageTime': 'text-muted chatMessageTime' \">\n" +
    "                {{hotelNotification.notificationObj.lastMessageTimesToMe[nextCustomer.id]}}\n" +
    "            </a>\n" +
    "            <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" ng-class=\"hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]? ' unreadMessageTime text-muted chatMessageArrow': 'text-muted chatMessageArrow' \" ui-toggle-class=\"show\">\n" +
    "                <i class=\"fa fa-angle-right\"></i>\n" +
    "            </a>\n" +
    "            <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" class=\"text-muted unreadMessagesCounter\" ui-toggle-class=\"show\">\n" +
    "                                             <span style=\"margin-left: 4px;\" class=\"badge bg-success\" ng-show=\"hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]\">\n" +
    "                                              +{{hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]}}\n" +
    "                                            </span>\n" +
    "            </a>\n" +
    "\n" +
    "            <div class=\"chatUserInfo\">\n" +
    "                <small class=\"text-muted clear text-ellipsis lastMessageFrom\">\n" +
    "                    <!-- eugen: ng-class=\"unreadChatProSenderCount[nextCustomer.id]? 'unreadChatMessage':''\" -->\n" +
    "                    <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\">\n" +
    "\n" +
    "                        <a ng-show=\"nextCustomer.hotelName && nextCustomer.city\" class=\"text-ellipsis lastChatMessagesToMe\" style=\"text-decoration: underline; padding-top: 5px; padding-bottom: 5px;\" ui-sref=\"app.hotelList({filterCity: nextCustomer.hotelCity, filterHotelId: nextCustomer.hotelId})\">{{nextCustomer.hotelCity}}, {{nextCustomer.hotelName}}</a>\n" +
    "                        <span ng-hide=\"nextCustomer.hotelName\" class=\"text-ellipsis lastChatMessagesToMe\">{{nextCustomer.city}}</span>\n" +
    "                        <!--{{hotelNotification.notificationObjlastMessagesToMe[nextCustomer.id]}}-->\n" +
    "                    </a>\n" +
    "                </small>\n" +
    "\n" +
    "                <a href ui-sref=\"app.chat({receiverId: nextCustomer.id})\" class=\"chatListCustomerName\">\n" +
    "                    {{nextCustomer.firstName}} {{nextCustomer.lastName}}\n" +
    "                    <span class=\"label bg-orange inline hotelStaff\" ng-show=\"nextCustomer.hotelStaff\" style=\"margin-left: 3px;\">{{::'system.hotelStaff' | translate}}</span>\n" +
    "\n" +
    "                    <div class=\"inline chatUserLanguages\" ng-hide=\"!nextCustomer.languages || nextCustomer.hotelStaff\">\n" +
    "                        <!--<div class=\"col-xs-6\">-->\n" +
    "                                                        <span ng-repeat=\"nextLanguage in nextCustomer.languages\">\n" +
    "                                                            <img class=\"language-flag\" src=\"angulr/icons/flags/{{nextLanguage}}.png\"\n" +
    "                                                                 alt=\"{{nextLanguage}}\"/>\n" +
    "                                                        </span>\n" +
    "                        <!--</div>-->\n" +
    "                    </div>\n" +
    "                </a>\n" +
    "            </div>\n" +
    "\n" +
    "        </div>\n" +
    "    </a>\n" +
    "</li>");
  $templateCache.put("angulr/tpl/hotel/blocks/editActivityAccardion.html",
    "<accordion close-others=\"oneAtATime\">\n" +
    "    <!--<accordion-group is-open=\"accordionStatus.openEditActivities[showActivity.activityId]\" is-disabled=\"accordionStatus.isFirstDisabled\" class=\"b-info\">-->\n" +
    "    <accordion-group is-open=\"accordionStatus.openEditActivity\" is-disabled=\"accordionStatus.isFirstDisabled\" class=\"b-info\">\n" +
    "        <accordion-heading style=\"white-space: nowrap;\">\n" +
    "            <i class=\"fa fa-edit\"></i>  &nbsp; {{'page.activities.editActivity' | translate }} <i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.openEditActivity, 'fa-angle-right': !accordionStatus.openEditActivity}\"></i>\n" +
    "        </accordion-heading>\n" +
    "        <!--<accordion-heading>-->\n" +
    "        <!--&lt;!&ndash;<i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.infoHotelOpen, 'fa-angle-right': !accordionStatus.infoHotelOpen}\"></i>&ndash;&gt;-->\n" +
    "        <!--<div class=\"text-center\">-->\n" +
    "        <!--&lt;!&ndash;<i class=\"glyphicon glyphicon-align-justify\"></i> Offer Description&ndash;&gt;-->\n" +
    "        <!--<button style=\"margin: 0;\" class=\"btn m-b-xs w-xs btn-orangeBorder btn-rounded\" ng-click=\"openEditActivity(showActivity.activityId)\"><span ng-show=\"accordionStatus.openEditActivities[showActivity.activityId]\">Cancel</span><span ng-hide=\"accordionStatus.openEditActivities[showActivity.activityId]\">Edit</span></button>-->\n" +
    "        <!-- -->\n" +
    "        <!--</div>-->\n" +
    "        <!--&lt;!&ndash;<i class=\"fa fa-pencil-square-o\"></i> &nbsp; {{::'page.hotel.updateHotelInfo' | translate }} &ndash;&gt;-->\n" +
    "        <!--</accordion-heading>-->\n" +
    "\n" +
    "        <form class=\"m-b-none ng-pristine ng-valid\" ng-submit=\"submitActivityChange(showActivity)\" name=\"activityForm\">\n" +
    "\n" +
    "            \n" +
    "            \n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{'page.activities.activityTitle' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "                <input type=\"text\" class=\"form-control focusModal\" ng-model=\"showActivity.title\" placeholder=\"{{'page.activities.activityTitle' | translate}}\" required>\n" +
    "\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"form-group\" id=\"img{{showActivity.activityId}}\">\n" +
    "                <label>{{::'page.activities.activityLogo' | translate}} (visible first after saving)</label>\n" +
    "\n" +
    "                <input ng-model=\"newActivityFile\" ngf-fix-orientation=\"true\"\n" +
    "                       onchange=\"angular.element(this).scope().newFile_changed(this, 'activity')\"\n" +
    "                       type=\"file\" accept=\"image/*\"/>\n" +
    "                <!--<input type=\"button\" ng-click=\"uploadFilesX()\">-->\n" +
    "            </div>\n" +
    "\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{'page.activities.activityShortDescription' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "                <textarea  class=\"form-control focusModal\" rows=\"5\" ng-model=\"showActivity.shortDescription\" placeholder=\"{{'page.activities.activityShortDescription' | translate}}\" required></textarea>\n" +
    "            </div>\n" +
    "            \n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{'page.activities.activityDescription' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "                <div  text-angular ng-model=\"showActivity.description\" class=\"btn-groups focusModal\"  ta-toolbar=\"[['bold', 'italics', 'underline', 'ul', 'ol', 'redo', 'undo']]\" required></div>\n" +
    "                <!--<textarea class=\"form-control\" rows=\"5\" ng-model=\"newactivity.description\" placeholder=\"{{'page.activities.activityDescription' | translate}}\"></textarea>-->\n" +
    "            </div>\n" +
    "            \n" +
    "            <div class=\"form-group\">\n" +
    "                <label class=\"control-label\" style=\"white-space: nowrap;\">{{::'page.activities.isActive' | translate}}: </label>\n" +
    "                <div class=\"\">\n" +
    "                    <div class=\"btn-group\">\n" +
    "                        <label class=\"i-switch m-t-xs m-r\">\n" +
    "                            <input type=\"checkbox\" checked=\"true\" ng-model=\"showActivity.active\">\n" +
    "                            <i></i>\n" +
    "                        </label>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "\n" +
    "            </div>\n" +
    "            \n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{'page.activities.validFrom' | translate}} <span class=\"requiredField\">*</span></label>\n" +
    "\n" +
    "                <div class=\"input-group\"  ng-controller=\"DatepickerCheckinCtrl\">\n" +
    "                    <input  type=\"text\" placeholder=\"DD.MM.YYYY\"  class=\"form-control focusModal\" datepicker-popup=\"{{format}}\" ng-model=\"showActivity.validFrom\" is-open=\"opened\" datepicker-options=\"dateOptions\" ng-required=\"true\" close-text=\"Close\" required/>\n" +
    "                                <span class=\"input-group-btn\">\n" +
    "                                <button type=\"button\" class=\"btn btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n" +
    "                                </span>\n" +
    "                </div>\n" +
    "\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{'page.activities.validTo' | translate}} <span class=\"requiredField\">*</span></label>\n" +
    "                <div class=\"input-group\"  ng-controller=\"DatepickerCheckinCtrl\">\n" +
    "                    <input  type=\"text\" placeholder=\"DD.MM.YYYY\"  class=\"form-control focusModal\" datepicker-popup=\"{{format}}\" ng-model=\"showActivity.validTo\" is-open=\"opened\" datepicker-options=\"dateOptions\" ng-required=\"true\" close-text=\"Close\" required/>\n" +
    "                                <span class=\"input-group-btn\">\n" +
    "                                <button type=\"button\" class=\"btn btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n" +
    "                                </span>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <button type=\"submit\" ng-disabled=\"(showActivity.shortDescription.length > localState.maxActivityShortDescription) || showActivity.shortDescription.length == 0\" class=\"btn btn-block btn-lg btn-success btn-addon\"><i class=\"fa fa-check-square-o\"></i>{{'page.activities.editActivity' | translate }}</button>\n" +
    "\n" +
    "                <!--<button style=\"width: 110px;\" class=\"btn btn-danger\" ng-click=\"removeActivity(showActivity.activityId)\"><i class=\"fa fa-trash-o\"></i>{{::'system.remove' | translate}}</button>-->\n" +
    "\n" +
    "            </div>\n" +
    "        </form>\n" +
    "    </accordion-group>\n" +
    "</accordion>");
  $templateCache.put("angulr/tpl/hotel/blocks/editHotelAccardion.html",
    "<accordion close-others=\"oneAtATime\">\n" +
    "\n" +
    "    <accordion-group is-open=\"accordionStatus.editHotelOpen\" is-disabled=\"accordionStatus.isEditHotelDisabled\" class=\"b-info\">\n" +
    "\n" +
    "        <accordion-heading>\n" +
    "            <i ng-class=\"::localState.editHotelAccordionIconClass\"></i> &nbsp; {{localState.editHotelAccordionTitle}} <i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.editHotelOpen, 'fa-angle-right': !accordionStatus.editHotelOpen}\"></i>\n" +
    "        </accordion-heading>\n" +
    "\n" +
    "        <form class=\"m-b-none ng-pristine ng-valid\" ng-submit=\"submitHotelChange(showHotel)\" name=\"hotelForm\">\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.hotelName' | translate }}<span class=\"requiredField\">*</span></label>\n" +
    "                <input type=\"text\" class=\"form-control\" ng-model=\"showHotel.name\" placeholder=\"{{::'page.hotel.hotelName' | translate }}\" required>\n" +
    "\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.activities.activityLogo' | translate}} (visible first after saving)</label>\n" +
    "\n" +
    "                <input ng-model=\"newActivityFile\"\n" +
    "                       onchange=\"angular.element(this).scope().newFile_changed(this, 'hotel', angular.element(this).scope().showHotel.creationTime)\"\n" +
    "                       type=\"file\" accept=\"image/*\" />\n" +
    "                <!--<input type=\"button\" ng-click=\"uploadFilesX()\">-->\n" +
    "            </div>\n" +
    "            \n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.hotelCode' | translate }}<span class=\"requiredField\">*</span></label>\n" +
    "                <!--<input type=\"text\" class=\"form-control\" ng-model=\"newHotel.pictureUrl\" placeholder=\"{{::'page.hotel.hotelLogo' | translate }}\">-->\n" +
    "                <input type=\"text\" class=\"form-control\" ng-model=\"showHotel.currentHotelAccessCode\" placeholder=\"{{::'page.hotel.hotelCode' | translate }}\" required>\n" +
    "\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.rating' | translate }}<span class=\"requiredField\">*</span></label>\n" +
    "                <input type=\"number\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.rating\" placeholder=\"{{::'page.hotel.rating' | translate }}\" required></in>\n" +
    "            </div> \n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.phone' | translate }}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.phone\" placeholder=\"{{::'page.hotel.phone' | translate }}\"></in>\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.fax' | translate }}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.fax\" placeholder=\"{{::'page.hotel.fax' | translate }}\"></in>\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.hotelEmail' | translate }}</label>\n" +
    "                <input type=\"email\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.email\" placeholder=\"{{::'page.hotel.hotelEmail' | translate }}\"></in>\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.street' | translate }}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.street\" placeholder=\"{{::'page.hotel.street' | translate }}\"></in>\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.house' | translate }}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.house\" placeholder=\"{{::'page.hotel.house' | translate }}\"></in>\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.city' | translate }}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.city\" placeholder=\"{{::'page.hotel.city' | translate }}\"></in>\n" +
    "            </div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.postalCode' | translate }}</label>\n" +
    "                <input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.postalCode\" placeholder=\"{{::'page.hotel.postalCode' | translate }}\"></in>\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.hotelDescription' | translate }}</label>\n" +
    "                <!--<div lazy-load=\"textAngular\">-->\n" +
    "                <div>\n" +
    "                    <!--<small>{{::'system.restLength' | translate}}:</small> -->\n" +
    "                    <span class=\"count\" ng-bind=\"localState.maxHotelDescription - showHotel.description.length\" ng-class=\"{danger: showHotel.description.length > localState.maxHotelDescription}\">1040</span>\n" +
    "                </div>\n" +
    "                <div text-angular ng-model=\"showHotel.description\" class=\"btn-groups\"   ta-toolbar=\"[['bold', 'italics', 'underline', 'ul', 'ol', 'redo', 'undo', 'clear']]\" ></div>\n" +
    "\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label>{{::'page.hotel.info' | translate }}</label>\n" +
    "                <!--<div lazy-load=\"textAngular\">-->\n" +
    "                <div>\n" +
    "                    <!--<small>{{::'system.restLength' | translate}}:</small> -->\n" +
    "                    <span class=\"count\" ng-bind=\"localState.maxHotelDescription - showHotel.info.length\" ng-class=\"{danger: showHotel.info.length > localState.maxHotelDescription}\">1040</span>\n" +
    "                </div>\n" +
    "                <div text-angular ng-model=\"showHotel.info\" class=\"btn-groups\"   ta-toolbar=\"[['bold', 'italics', 'underline', 'ul', 'ol', 'redo', 'undo', 'clear']]\" ></div>\n" +
    "\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <button type=\"submit\" ng-disabled=\"showHotel.description.length > localState.maxHotelDescription\" class=\"btn btn-block btn-lg btn-success btn-addon\"><i class=\"fa fa-check-square-o\"></i>{{::'page.hotel.updateHotelInfo' | translate }}</button>\n" +
    "            </div>\n" +
    "        </form>\n" +
    "    </accordion-group>\n" +
    "</accordion>");
  $templateCache.put("angulr/tpl/hotel/blocks/fullCheckinRequest.html",
    "<!--//TODO Problems: visualization Problems-->\n" +
    "<!--//TODO: if no hotelCode: chat flag, wall hide names -->\n" +
    "\n" +
    "<!--&lt;!&ndash;### START HotelCode &ndash;&gt;-->\n" +
    "<!--<div style=\"display: flex;  display: -webkit-flex;display: -moz-flex;display: -ms-flexbox; justify-content: center;border-width: 1px;-->\n" +
    "    <!--border-style: solid;-->\n" +
    "    <!--border-radius: 5px;-->\n" +
    "    <!--padding: 5px;-->\n" +
    "    <!--margin-bottom: 10px;-->\n" +
    "    <!--border-color: lightgray;\" ng-if=\"!hotelState.profileData.fullCheckin\">-->\n" +
    "\n" +
    "    <!--<span style=\"margin-right: 10px;margin-top: 3px;font-weight: bolder; \">Your hotel checkin is limited:</span>-->\n" +
    "\n" +
    "    <!--<button ng-click=\"openModal('checkin')\"  class=\"btn btn-orange\" style=\"padding: 2px;height: 25px;\">Input HotelCode</button>-->\n" +
    "\n" +
    "    <!--<i style=\"margin-top: -4px; padding-left: 8px; padding-right: 5px; /*position: absolute;*/\" class=\"fa fa-info-circle navIconItem hotelCitySelectInfo\" ng-click=\"openHotelCodePopup()\"></i>-->\n" +
    "\n" +
    "<!--</div>-->\n" +
    "<!--&lt;!&ndash;### END HotelCode&ndash;&gt;-->");
  $templateCache.put("angulr/tpl/hotel/blocks/impressumBottomBlock.html",
    "<div class=\"text-center\">\n" +
    "    <a class=\"text-muted\"  ui-sref=\"app.impressum\">Impressum</a> |\n" +
    "    <a class=\"text-muted\"  ui-sref=\"app.agb\">AGB</a> |\n" +
    "    <a class=\"text-muted\"  ui-sref=\"app.dse\">Datenschutzerkl&auml;rung</a>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/blocks/modal.editActivityForm.html",
    "<div class=\"modal-body wrapper-lg\" stop-event=\"touchend\" ng-controller=\"EditActivityContr\" ng-init=\"unlockModal();\">\n" +
    "  \n" +
    "   <a ng-click=\"cancel()\" style=\"position: absolute; top:0; right:5px;\"><i class=\"fa fa-times\"/></a>\n" +
    "    \n" +
    "    <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "    <div class=\"myFlex\" ng-style=\"!isSmartDevice && {'flex-direction':'row', '-webkit-flex-direction': 'row'} || isSmartDevice && {'flex-direction':'column', '-webkit-flex-direction': 'column'}\" ng-controller=\"activityCtrl\">  \n" +
    "    \n" +
    "      <!--<div class=\"row\">-->\n" +
    "      <div style=\"min-width: 50%;\"  >\n" +
    "        \n" +
    "          <!--<div class=\"col-sm-6 b-r\">-->\n" +
    "          <div class=\"b-r\">\n" +
    "              \n" +
    "              <!--<div style=\"display: flex;  display: -webkit-flex;display: -moz-flex;display: -ms-flexbox;justify-content: center; text-align: center;\">-->\n" +
    "                <!--{{:: 'page.checkin.youNeedLogin'| translate}}:-->\n" +
    "              <!--</div>-->\n" +
    "        \n" +
    "        \n" +
    "              <span  ng-if=\"!((hotelState.profileData.hotelStaff && hotelState.profileData.hotelId==showActivity.hotelId) || hotelState.profileData.admin)\">You are not a staff for the Hotel {{showActivity.hotelName}}!</span>\n" +
    "        \n" +
    "              <div >\n" +
    "    \n" +
    "                  <!--START HOTEL Edit-->\n" +
    "        \n" +
    "                  <div class=\"hotelEditElt\" ng-if=\"((hotelState.profileData.hotelStaff && hotelState.profileData.hotelId==showActivity.hotelId) || hotelState.profileData.admin)\" ng-show=\"showActivity.activityId\">\n" +
    "                      \n" +
    "                      <!--<div ng-if=\"editActivityId=='new'\" data-ng-include=\" 'angulr/tpl/hotel/blocks/addActivityAccardion.html' \" />-->\n" +
    "                      \n" +
    "                      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/editActivityAccardion.html' \" />\n" +
    "                      \n" +
    "                  </div>\n" +
    "                  \n" +
    "              </div>\n" +
    "    \n" +
    "              <!-- END HOTEL Edit -->\n" +
    "    \n" +
    "          </div>\n" +
    "          \n" +
    "          \n" +
    "      </div>\n" +
    "          \n" +
    "      <!--<div class=\"b-r\">-->\n" +
    "      <div style=\"min-width: 48%; margin-left: 10px;\">\n" +
    "            \n" +
    "          <!-- Start hotel view --->\n" +
    "          <div ng-show=\"localState.showActivityId && showActivity.activityId\">\n" +
    "    \n" +
    "             <b>{{::'system.editPreview' | translate}}:</b>\n" +
    "\n" +
    "              <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showActivityBlock.html' \" />\n" +
    "\n" +
    "          </div>\n" +
    "        \n" +
    "          <!-- END hotel view --->\n" +
    "    \n" +
    "      </div>  \n" +
    "        \n" +
    "   </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/blocks/modal.editHotelForm.html",
    "<div class=\"modal-body wrapper-lg\" stop-event=\"touchend\" ng-controller=\"EditHotelContr\" ng-init=\"unlockModal();\">\n" +
    "  \n" +
    "   <a ng-click=\"cancel()\" style=\"position: absolute; top:0; right:5px;\"><i class=\"fa fa-times\"/></a>\n" +
    "    \n" +
    "    <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "    <div class=\"myFlex\" ng-style=\"!isSmartDevice && {'flex-direction':'row', '-webkit-flex-direction': 'row'} || isSmartDevice && {'flex-direction':'column', '-webkit-flex-direction': 'column'}\" ng-controller=\"hotelCtrl\">  \n" +
    "    \n" +
    "      <!--<div class=\"row\">-->\n" +
    "      <div style=\"min-width: 50%;\" ng-if=\"hotelState.profileData.hotelStaff || hotelState.profileData.admin\" >\n" +
    "        \n" +
    "          <!--<div class=\"col-sm-6 b-r\">-->\n" +
    "          <div class=\"b-r\">\n" +
    "              \n" +
    "              <!--<div style=\"display: flex;  display: -webkit-flex;display: -moz-flex;display: -ms-flexbox;justify-content: center; text-align: center;\">-->\n" +
    "                <!--{{:: 'page.checkin.youNeedLogin'| translate}}:-->\n" +
    "              <!--</div>-->\n" +
    "        \n" +
    "        \n" +
    "              <span  ng-if=\"!((hotelState.profileData.hotelStaff && hotelState.profileData.hotelId==showHotel.id) || hotelState.profileData.admin || hotelState.tempCreationHotel && hotelState.tempCreationHotel.creationTime==showHotel.creationTime)\">You are not a staff for the Hotel {{showHotel.name}}!</span>\n" +
    "        \n" +
    "              <div >\n" +
    "    \n" +
    "                  <!--START HOTEL Edit-->\n" +
    "        \n" +
    "                  <div class=\"hotelEditElt\" ng-if=\"((hotelState.profileData.hotelStaff && hotelState.profileData.hotelId==showHotel.id) || hotelState.profileData.admin || hotelState.tempCreationHotel && hotelState.tempCreationHotel.creationTime==showHotel.creationTime)\" ng-show=\"showHotel.id\">\n" +
    "                      \n" +
    "                      <!--<div ng-if=\"editActivityId=='new'\" data-ng-include=\" 'angulr/tpl/hotel/blocks/addActivityAccardion.html' \" />-->\n" +
    "                      \n" +
    "                      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/editHotelAccardion.html' \" />\n" +
    "                      \n" +
    "                  </div>\n" +
    "                  \n" +
    "              </div>\n" +
    "    \n" +
    "              <!-- END HOTEL Edit -->\n" +
    "    \n" +
    "          </div>\n" +
    "          \n" +
    "          \n" +
    "      </div>\n" +
    "          \n" +
    "      <!--<div class=\"b-r\">-->\n" +
    "      <div ng-style=\"(hotelState.profileData.hotelStaff || hotelState.profileData.admin) &&{'min-width': '48%'}\" style=\"margin-left: 10px;\">\n" +
    "            \n" +
    "          <!-- Start hotel view --->\n" +
    "          <div ng-show=\"showHotel.id>0 || showHotel.id<0\">\n" +
    "    \n" +
    "             <b ng-show=\"hotelState.profileData.hotelStaff || hotelState.profileData.admin\">{{::'system.editPreview' | translate}}:</b>\n" +
    "\n" +
    "              <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showHotelBlock.html' \" />\n" +
    "\n" +
    "          </div>\n" +
    "        \n" +
    "          <!-- END hotel view --->\n" +
    "    \n" +
    "      </div>  \n" +
    "        \n" +
    "   </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/blocks/modal.hotelCodeForm.html",
    "<div class=\"modal-body wrapper-lg\" stop-event=\"touchend\" ng-controller=\"CheckInController\" ng-init=\"unlockModal();\">\n" +
    "  \n" +
    "  <a ng-click=\"cancel()\" style=\"position: absolute; top:0; right:5px;\"><i class=\"fa fa-times\"/></a>\n" +
    "  \n" +
    "  <div class=\"row\">\n" +
    "    <div class=\"col-sm-6 b-r\">\n" +
    "      <!--<div style=\"display: flex;  display: -webkit-flex;display: -moz-flex;display: -ms-flexbox;justify-content: center; text-align: center;\">-->\n" +
    "        <!--{{:: 'page.checkin.youNeedLogin'| translate}}:-->\n" +
    "      <!--</div>-->\n" +
    "\n" +
    "      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "      <div   >\n" +
    "\n" +
    "          <!--START HOTELCODE-->\n" +
    "\n" +
    "          <div id=\"checkinCode\" ng-class=\"{'unvisible': localState.selectedFilterHotel}\" class=\"myCenter\">\n" +
    "           \n" +
    "              <div style=\"margin-bottom: 25px;width: 90%;\">\n" +
    "                  <input stop-event=\"touchend\" ng-change=\"onHotelCodeInput();\" autocomplete=\"off\" ng-focus=\"hideFocus('none');localState.hotelcodeFocus=true; \" ng-blur=\"hideFocus('flex');localState.hotelcodeFocus=false\" type=\"text\" class=\"focusModal form-control\" ng-model=\"localState.selectedHotelCode\" id=\"hotelCode\" placeholder=\"{{'page.checkin.hotelCode' | translate}}\" style=\"height: 80px;font-size: 2em;display: block;margin: 0 auto;text-align: center;border-radius: 10px;outline: 0;\">\n" +
    "                  <div>\n" +
    "                     {{'page.checkin.askReception' | translate}}\n" +
    "                  </div>\n" +
    "                  <!--<button style=\"margin-top: 15px;\" ng-click=\"onCheckinSubmit()\" ng-disabled=\"localState.disableCheckin\" class=\"btn btn-lg btn-block btn-orange\" >{{localState.selectedFilterHotel.name}} {{'page.checkin.doCheckIn' | translate }}</button>-->\n" +
    "                  \n" +
    "                  <div class=\"myCenter\">\n" +
    "                      <div class=\"text-center bg-light lt b-t\" ng-show=\"(localState.selectedFilterHotel || localState.selectedHotelCode || localState.hotelcodeFocus)\" style=\"width: 100%; margin-top: 10px;\">\n" +
    "                          <button ng-click=\"onHotelCodeSubmit()\" ng-disabled=\"localState.disableCheckin || mainState.disableCheckin\" class=\"btn btn-lg btn-block btn-orange hiddenContent\">{{localState.selectedFilterHotel.name}} {{'page.checkin.doCheckIn' | translate }}</button>\n" +
    "                      </div>\n" +
    "                  </div>\n" +
    "                  \n" +
    "              </div>\n" +
    "    \n" +
    "              <!--<i style=\"margin-top: -4px;-->\n" +
    "              <!--padding-left: 8px;-->\n" +
    "              <!--padding-right: 5px;-->\n" +
    "              <!--position: absolute;\" class=\"fa fa-info-circle navIconItem hotelCitySelectInfo\" ng-click=\"openHotelCodePopup()\"></i>-->\n" +
    "\n" +
    "          </div>\n" +
    "\n" +
    "         \n" +
    "         \n" +
    "\n" +
    "\n" +
    "          <!-- END HOTELCODE -->\n" +
    "\n" +
    "      </div>\n" +
    "      \n" +
    "      <!-- END 3 CONTENT DIV --->\n" +
    "      \n" +
    "    </div>\n" +
    "      \n" +
    "    <div class=\"b-r\">\n" +
    "        TEXT......\n" +
    "    </div>  \n" +
    "    \n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/blocks/modal.loginform.html",
    "<div class=\"modal-body wrapper-lg loginBody\" stop-event=\"touchend\" ng-controller=\"LoginController\"\n" +
    "     ng-init=\"initLogin();unlockModal();\">\n" +
    "  \n" +
    "  <a ng-click=\"cancel()\" style=\"position: absolute; top:0; right:5px;\"><i class=\"fa fa-times\"/></a>\n" +
    "  \n" +
    "  <div class=\"row\">\n" +
    "    <div class=\"col-sm-6 b-r\">\n" +
    "\n" +
    "      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "      <div class=\"myCenter\" style=\"text-align: center;\">\n" +
    "        {{:: 'page.login.youNeedLogin'| translate}}:\n" +
    "      </div>\n" +
    "      <!--<p>Sign in to meet your friends.</p>-->\n" +
    "\n" +
    "      \n" +
    "      \n" +
    "      <!-- END 3 CONTENT DIV --->\n" +
    "      \n" +
    "    </div>\n" +
    "    <div class=\"col-sm-6\" ng-style=\"!isSmartDevice && {'margin-top' : '5px'}\">\n" +
    "\n" +
    "      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/socialLogin.html' \" />\n" +
    "\n" +
    "\n" +
    "      <!--<div class=\"wrapper text-center loginHeaderItems\" style=\"padding-left: 0; padding-right: 0;\">-->\n" +
    "      <!--<a href=\"\" ng-click=\"setLoginTabState('guest')\" ng-class=\"{'label bg-orange inline loginSelectedItem': loginTabState.guest}\">{{ 'page.login.guestTitle' | translate}}</a>-->\n" +
    "      <!--<span style=\"padding: 5px;\">|</span>-->\n" +
    "      <!--<a href=\"\" ng-click=\"setLoginTabState('login')\" ng-class=\"{'label bg-orange inline loginSelectedItem': loginTabState.login}\">{{ 'page.login.loginTitle' | translate}}</a>-->\n" +
    "      <!--<span style=\"padding: 5px;\">|</span>-->\n" +
    "      <!--<a href=\"\" ng-click=\"setLoginTabState('signup')\" ng-class=\"{'label bg-orange inline loginSelectedItem': loginTabState.signup}\">{{ 'page.login.signupTitle' | translate}}</a>-->\n" +
    "      <!--</div>-->\n" +
    "\n" +
    "\n" +
    "\n" +
    "      <div class=\"panel panel-default\" >\n" +
    "\n" +
    "        <md-content>\n" +
    "          <md-tabs md-stretch-tabs=\"always\" >\n" +
    "\n" +
    "            <md-tab label=\"{{ 'page.login.guestTitle' | translate}}\" id=\"loginTab0\" class=\"\" aria-controls=\"loginTab0-content\" >\n" +
    "              <md-content class=\"md-padding\">\n" +
    "\n" +
    "                <!-- START GUEST LOGIN (1) -->\n" +
    "                <!--ng-show=\"loginTabState.guest\"-->\n" +
    "                <div  class=\"panel-body\" >\n" +
    "\n" +
    "                  <form role=\"form\" name=\"loginGuestForm\" id=\"loginGuestForm\" class=\"form-validation\" ng-submit=\"guestRegister();\">\n" +
    "\n" +
    "                    <div class=\"list-group list-group-sm\">\n" +
    "                      <div class=\"list-group-item text-center\" style=\"height: 60px;padding: 0;margin: 0\">\n" +
    "                        <div style=\"width: 250px;display: table;margin: 0 auto;padding-top: 7px;\">\n" +
    "                          <div style=\"width: 100px; float: left;\">\n" +
    "                            <input stop-event=\"touchend\" type=\"text\" placeholder=\"{{' profile.firstName' | translate}}\" class=\"focusModal form-control no-border\" ng-model=\"localState.guestUser.firstName\" required>\n" +
    "                          </div>\n" +
    "                          <div style=\"float: left; margin-top: 7px; margin-left: 10px;\">\n" +
    "                            <label class=\"i-checks\">\n" +
    "                              <input type=\"radio\" value=\"m\" ng-model=\"localState.guestUser.sex\" ng-required=\"!localState.guestUser.sex\"><i></i> {{ 'profile.gender-m' | translate}} &nbsp;\n" +
    "                            </label>\n" +
    "                            <label class=\"i-checks\">\n" +
    "                              <input type=\"radio\" value=\"w\" ng-model=\"localState.guestUser.sex\" ng-required=\"!localState.guestUser.sex\"><i></i> {{ 'profile.gender-f' | translate}}\n" +
    "                            </label>\n" +
    "                          </div>\n" +
    "                        </div>\n" +
    "\n" +
    "                      </div>\n" +
    "\n" +
    "                      <button type=\"submit\" class=\"btn btn-lg btn-orange btn-social btn-block\" style=\"text-align: center;padding-left: 0;\">{{' page.login.guestRegister'\n" +
    "                        | translate }}</button>\n" +
    "                    </div>\n" +
    "\n" +
    "                    <!--<hr>-->\n" +
    "\n" +
    "                    <!--<div style=\"text-align: justify;\" class=\"text-center\">-->\n" +
    "                    <!--{{' page.login.guestMsg' | translate }}-->\n" +
    "                    <!--<br/>-->\n" +
    "                    <!--{{' page.login.guestMsg2' | translate }}-->\n" +
    "                    <!--</div>-->\n" +
    "\n" +
    "                  </form>\n" +
    "\n" +
    "                </div>\n" +
    "\n" +
    "                <!-- END GUEST LOGIN -->\n" +
    "\n" +
    "              </md-content>\n" +
    "            </md-tab>\n" +
    "\n" +
    "            <md-tab label=\"{{ 'page.login.loginTitle' | translate}}\" id=\"loginTab1\" aria-controls=\"loginTab1-content\" >\n" +
    "              <md-content class=\"md-padding\">\n" +
    "\n" +
    "                <!-- START LOGIN (2) -->\n" +
    "                <!--ng-show=\"loginTabState.login\"-->\n" +
    "                <div class=\"panel-body\" >\n" +
    "                  <!-- TODO Eugen: create Form hier!!! autofill-->\n" +
    "                  <form role=\"form\" name=\"hotelicoLoginForm\"  autocomplete=\"on\" class=\"form-validation\" ng-submit=\"loginPassword()\">\n" +
    "\n" +
    "                    <div class=\"list-group list-group-sm\">\n" +
    "                      <div class=\"list-group-item\">\n" +
    "                        <input stop-event=\"touchend\" type=\"email\" id=\"hotelicoLoginMail\" name=\"hotelicoLoginMail\" placeholder=\"{{' profile.email' | translate}}\" class=\"focusModal form-control no-border\" ng-model=\"localState.checkUser.email\" required autocomplete=\"on\">\n" +
    "                      </div>\n" +
    "                      <div class=\"list-group-item\">\n" +
    "                        <input stop-event=\"touchend\" type=\"password\" id=\"hotelicoLoginPassword\" name=\"hotelicoLoginPassword\" placeholder=\"{{' profile.password' | translate}}\" class=\"focusModal form-control no-border\" ng-model=\"localState.checkUser.password\" required autocomplete=\"on\">\n" +
    "                      </div>\n" +
    "                      <button type=\"submit\" class=\"btn btn-lg btn-orange btn-block\">{{' page.login.doLogin'\n" +
    "                        | translate }}</button>\n" +
    "                    </div>\n" +
    "                  </form>\n" +
    "\n" +
    "                  <div class=\"text-center m-t m-b\"><a ui-sref=\"app.forgotpwd\">Forgot password?</a></div>\n" +
    "\n" +
    "                </div>\n" +
    "                <!-- END LOGIN DIV -->\n" +
    "\n" +
    "              </md-content>\n" +
    "            </md-tab>\n" +
    "            <md-tab label=\"{{ 'page.login.signupTitle' | translate}}\" id=\"loginTab2\" aria-controls=\"loginTab2-content\" >\n" +
    "              <md-content class=\"md-padding\">\n" +
    "\n" +
    "                <!-- START REGISTER (3) -->\n" +
    "                <!--ng-show=\"loginTabState.signup\"-->\n" +
    "                <div class=\"panel-body\"  >\n" +
    "\n" +
    "                  <a ng-click=\"ok('app.register')\" class=\"btn btn-lg btn-orange btn-block\">{{' page.login.goToSignUp' | translate}}</a>\n" +
    "\n" +
    "                </div>\n" +
    "\n" +
    "                <!-- END REGISTER -->\n" +
    "\n" +
    "              </md-content>\n" +
    "            </md-tab>\n" +
    "          </md-tabs>\n" +
    "        </md-content>\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "      </div>\n" +
    "      \n" +
    "      <!--&lt;!&ndash;<h4>Not a member?</h4>&ndash;&gt;-->\n" +
    "      <!--&lt;!&ndash;<p>You can create an account <a href class=\"text-info\">here</a></p>&ndash;&gt;-->\n" +
    "      <!-- -->\n" +
    "      <!--<div data-ng-include=\" 'angulr/tpl/hotel/blocks/socialLogin.html' \" />-->\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/blocks/selectHotelCityBlock.html",
    "<div ng-controller=\"filterHotelCityCtrl\">\n" +
    "    <img src=\"angulr/icons/loader.gif\" ng-show=\"localState.showCityLoading\">\n" +
    "    \n" +
    "    <div ng-hide=\"localState.showCityLoading\" class=\"myCenter\" >\n" +
    "        <div class=\"hotelCityBlockWrapper\">\n" +
    "\n" +
    "            <div class=\"form-group\" style=\"margin-bottom: 0px;\">\n" +
    "                <!--<label class=\"col-sm-3 control-label text-left\">Default</label>-->\n" +
    "                <div>\n" +
    "                    <select ng-change=\"onChangeHotelCitySelector();\" class=\"form-control ng-pristine ng-valid ng-touched\" ng-model=\"localState.selectedCityHotel\" id=\"hotelCity\" ng-options=\"hotel as hotel.city for hotel in mainState.hotelCitiesArray | unique:'city'\" placeholder=\" {{::'page.checkin.hotelCityManualSelect' | translate}}\">\n" +
    "                    <option value=\"\" disabled> {{::'alert.info.chooseHotelCity' | translate}}</option>\n" +
    "                    </select>\n" +
    "                    <img src=\"angulr/icons/loader.gif\" ng-show=\"localState.showCityHotelLoading\">\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <!--<span ng-show=\"localState.selectedCityHotel\">Hotels in {{localState.selectedCityHotel.city}}:</span>-->\n" +
    "            \n" +
    "            <!--<select ng-change=\"onChangeFilterHotelSelector()\" ng-show=\"localState.selectedCityHotel && !localState.showCityHotelLoading\" style=\"margin-top: 5px;\" class=\"form-control ng-pristine ng-valid ng-touched\" ng-model=\"localState.selectedFilterHotel\" id=\"hotelListByCitySelector\" ng-options=\"hotel as hotel.name for hotel in localState.hotelsFilteredByCityArray\" placeholder=\" {{'page.checkin.hotelManualSelect' | translate}}\">-->\n" +
    "                <!--<option value=\"\" disabled><span ng-show=\"localState.selectedCityHotel.city\">Hotels in {{localState.selectedCityHotel.city}}</span></option>-->\n" +
    "                <!--&lt;!&ndash;<option value=\"\"> {{::'page.checkin.noHotelChoosed' | translate}}</option>&ndash;&gt;-->\n" +
    "            <!--</select>-->\n" +
    "\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <!--<label class=\"col-sm-3 control-label text-left\">With a clear button</label>-->\n" +
    "                <div>\n" +
    "                    <div class=\"input-group\">\n" +
    "\n" +
    "                        <select ng-change=\"onChangeFilterHotelSelector()\" ng-show=\"localState.selectedCityHotel && !localState.showCityHotelLoading\" style=\"margin-top: 5px;\" ng-style=\"localState.hotelSelectCheckinButtonShow && {'display':'block'}\" class=\"form-control ng-pristine ng-valid ng-touched\" ng-model=\"localState.selectedFilterHotel\" id=\"hotelListByCitySelector\" ng-options=\"hotel as hotel.name for hotel in localState.hotelsFilteredByCityArray\" placeholder=\" {{'page.checkin.hotelManualSelect' | translate}}\">\n" +
    "                            <option value=\"\" disabled><span ng-show=\"localState.selectedCityHotel.city\">Hotels in {{localState.selectedCityHotel.city}}</span></option>\n" +
    "                            <!--<option value=\"\"> {{::'page.checkin.noHotelChoosed' | translate}}</option>-->\n" +
    "                        </select>\n" +
    "\n" +
    "                        <span class=\"input-group-btn\" ng-show=\"localState.hotelSelectCheckinButtonShow && localState.selectedCityHotel && !localState.showCityHotelLoading\">\n" +
    "                          <button ng-click=\"onCheckinSubmit()\" class=\"btn btn-orange\" style=\"margin-top: 5px;\" ng-disabled=\"!localState.selectedFilterHotel\">\n" +
    "                              <span class=\"fa fa-chevron-right\"></span>\n" +
    "                          </button>\n" +
    "                        </span>\n" +
    "                        \n" +
    "\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            \n" +
    "            \n" +
    "        </div>\n" +
    "        <i style=\"position: absolute;\" class=\"fa fa-info-circle navIconItem hotelCitySelectInfo\" ng-click=\"openCityPopup()\"></i>\n" +
    "    </div>\n" +
    "    \n" +
    "   \n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/blocks/showActivityBlock.html",
    "<div class=\"panel b-a panel-default image-box-shadow activityBlock\" ng-show=\"::(showActivity.timeValid || hotelState.profileData.hotelStaff || hotelState.profileData.admin)\">\n" +
    "\n" +
    "    <div style=\"margin-top: -1px;\">\n" +
    "\n" +
    "        <div ng-if=\"localState.showActivityHotelLink\" class=\"bottom text-white\" style=\"padding: 5px;text-align: right;margin-bottom: -25px;height: 25px;z-index: 9;position: relative;\" >\n" +
    "            <!--ng-show=\"!localState.selectedFilterHotel\"-->\n" +
    "            <div class=\"hotelInfoOpacity\" ng-show=\"showActivity.pictureUrl\">\n" +
    "                <a class=\"text-muted clear text-ellipsis\" style=\"color: white;\" ui-sref=\"app.hotelList({filterCity: showActivity.hotelCity, filterHotelId: showActivity.hotelId})\">\n" +
    "                    <span style=\"text-decoration: underline; /*font-weight: bold;*/\"> <!-- ng-show=\"!localState.selectedFilterHotel.id\" -->\n" +
    "                        {{::showActivity.hotelName}}\n" +
    "                    </span> \n" +
    "                    <span ng-show=\"!localState.selectedCityHotel.id\">, {{::showActivity.hotelCity}}</span>\n" +
    "                </a>\n" +
    "                <div style=\"display: flex; display: -webkit-flex;display: -moz-flex;display: -ms-flexbox;justify-content: flex-end; font-size: 13px; color: #fff;\">\n" +
    "                    <div class=\"customersLinkInHotel\" ng-show=\"showActivity.hotelCustomerNumber>0\"> \n" +
    "                        <a class=\"clear text-ellipsis\" ng-click=\"clickLoading('app.chatList', null, null, {filterCity: showActivity.hotelCity, filterHotelId: showActivity.hotelId})\">  \n" +
    "                            <span style=\"margin-left: 5px; text-decoration: underline;\">\n" +
    "                                {{showActivity.hotelCustomerNumber}} guest<span ng-show=\"showActivity.hotelCustomerNumber>1\">s</span>\n" +
    "                            </span> \n" +
    "                            in Hotel \n" +
    "                        </a>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "               \n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"item m-l-n-xxs m-r-n-xxs\">\n" +
    "            <a >\n" +
    "                <img ng-src=\"{{showActivity.pictureUrl}}\" ng-show=\"showActivity.pictureUrl\" class=\"img-full\">\n" +
    "            </a>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <div layout=\"row\" ng-if=\"(hotelState.profileData.hotelStaff && hotelState.profileData.hotelId==showActivity.hotelId || hotelState.profileData.admin)\">\n" +
    "        <button style=\"margin-top: 0px;\" class=\"btn btn-block btn-sm btn-info btn-addon\" ng-click=\"editActivityId? submitActivityChange(showActivity) : openModal('editActivity', showActivity.activityId)\"><i class=\"fa fa-edit\"></i>{{::'system.edit' | translate}}</button>\n" +
    "        <button style=\"margin-top: 0px;\" class=\"btn btn-block btn-sm btn-danger btn-addon\" ng-click=\"removeActivity(showActivity.activityId)\"><i class=\"fa fa-trash-o\"></i> {{::'system.remove' | translate}}</button>\n" +
    "    </div>\n" +
    "\n" +
    "    <!--<div layout=\"row\" ng-if=\"!(hotelState.profileData.hotelStaff && hotelState.profileData.hotelId==showActivity.hotelId || hotelState.profileData.admin)\" style=\"justify-content: space-between;-webkit-justify-content: space-between;-moz-justify-content: space-between;\">-->\n" +
    "       <!-- -->\n" +
    "        <!--<div>-->\n" +
    "\n" +
    "            <!--&lt;!&ndash;<i class=\"fa fa-share-alt\"></i>&ndash;&gt;-->\n" +
    " <!-- -->\n" +
    "        <!--</div>-->\n" +
    "        <!--<div>-->\n" +
    "\n" +
    "            <!--&lt;!&ndash;<div facebook=\"\" class=\"facebookShare ng-isolate-scope\" data-title=\"title2\" data-picture-url=\"http://i.imgur.com/WACv9Cl.jpg\" data-url=\"https://www.youtube.com/watch?v=wxkdilIURrU\" data-shares=\"shares\"><div class=\"facebookButton\"><div class=\"pluginButton\"><div class=\"pluginButtonContainer\"><div class=\"pluginButtonImage\"><button type=\"button\"><i class=\"pluginButtonIcon img sp_plugin-button-2x sx_plugin-button-2x_favblue\"></i></button></div><span class=\"pluginButtonLabel\">Share</span></div></div></div><div class=\"facebookCount\"><div class=\"pluginCountButton pluginCountNum\"><span ng-transclude=\"\"><span class=\"ng-binding ng-scope\">16M</span></span></div><div class=\"pluginCountButtonNub\"><s></s><i></i></div></div></div>            &ndash;&gt;-->\n" +
    "            <!-- -->\n" +
    "            <!--&lt;!&ndash;//TODO angulaRS social share script!&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<button style=\"margin-top: 0px; padding-right: 15px;\" class=\"btn btn-sm btn-info btn-addon\"&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;socialshare&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;socialshare-provider=\"facebook\"&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash; &ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;socialshare-via=\"383626641847356\"&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;socialshare-text=\"{{showActivity.name}} at hotelico.de\"&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;socialshare-description=\"{{showActivity.shortDescription}}\"&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;socialshare-hashtags=\"hotelico, deals\"&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;socialshare-display=\"popup\"&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;socialshare-media=\"{{HOST}}{{showActivity.pictureUrl}}\"&ndash;&gt;-->\n" +
    "                    <!--&lt;!&ndash;socialshare-url=\"{{HOST}}#/app/activities/{{showActivity.entityId}}\">&ndash;&gt;-->\n" +
    "\n" +
    "                <!--&lt;!&ndash;<i class=\"fa fa-facebook\"></i>Share&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;&lt;!&ndash;<i class=\"fa fa-share-alt\"></i>{{::'page.activities.invite' | translate}}&ndash;&gt;&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;</button>&ndash;&gt;-->\n" +
    "            <!-- -->\n" +
    "           <!-- -->\n" +
    "\n" +
    "        <!--</div>-->\n" +
    "\n" +
    "    <!--</div>-->\n" +
    "    \n" +
    "    <a class=\"text-lt\" style=\"font-weight: bold; margin-left: 10px;\" ng-show=\"!showActivity.timeValid\">\n" +
    "        <span style=\"color:red;\">(not active now: {{showActivity.validFromString}} - {{showActivity.validToString}})</span>\n" +
    "    </a>\n" +
    "    \n" +
    "    <div layout=\"row\" style=\"justify-content: space-between; -webkit-justify-content: space-between; -moz-justify-content: space-between;-ms-justify-content: space-between;  margin-top: 8px; margin-right: 3px; margin-left: 10px; font-size: 22px;\">\n" +
    "\n" +
    "        <div ng-style=\"isSmartDevice && {'width':'75%'}\">\n" +
    "            <span class=\"text-lt\" style=\"font-weight: bold;\" ng-click=\"onActivityClick(showActivity.activityId)\">{{showActivity.title}}</span>\n" +
    "            <small class=\"text-muted clear text-ellipsis myEllipsis\"><span>{{showActivity.shortDescription}}</span></small>\n" +
    "        </div>\n" +
    "\n" +
    "        <div layout=\"column\" style=\";text-align: right;\">\n" +
    "\n" +
    "            <div>\n" +
    "                <button style=\"width: 100px; margin-top: 0px; padding-right: 15px;\" class=\"btn btn-sm btn-info\" ng-click=\"submitActivityAction(showActivity, 'subscribe')\" ng-hide=\"showActivity.subscribeByMe\">{{::'page.activities.subscribe' | translate}}</button></a>\n" +
    "                <button style=\"width: 100px; margin-top: 0px; padding-right: 15px;\" class=\"btn btn-sm btn-info\" ng-click=\"submitActivityAction(showActivity, 'unsubscribe')\" ng-show=\"showActivity.subscribeByMe\">{{::'page.activities.unsubscribe' | translate}}</button></a>\n" +
    "            </div>\n" +
    "            \n" +
    "            <div>\n" +
    "                <button style=\"width: 100px; margin-top: 0px; padding-right: 15px;\" class=\"btn btn-sm btn-info\" ng-click=\"submitActivityAction(showActivity, 'invite')\" ng-disabled=\"true\">{{::'page.activities.invite' | translate}}</button></a>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        \n" +
    "    </div>\n" +
    "\n" +
    "    <!--<div class=\"customersLinkInHotel\" ng-show=\"(showActivity.likeNumber>0)\">-->\n" +
    "        <!--<a class=\"text-muted clear text-ellipsis\"> {{showActivity.likeNumber}} interested </a>-->\n" +
    "    <!--</div>-->\n" +
    "\n" +
    "   \n" +
    "        <!--<a ui-sref=\"app.editActivity({activityId:showActivity.activityId})\" class=\"text-lt\" style=\"font-weight: bold;\">-->\n" +
    "        <!--&lt;!&ndash;<button class=\"btn m-b-xs w-xs btn-orangeBorder btn-rounded\">Open</button>&ndash;&gt;-->\n" +
    "        <!--</a>-->\n" +
    "    <!--</div>-->\n" +
    "    \n" +
    "    <div class=\"hotelDescrElt\">\n" +
    "\n" +
    "        <div style=\"text-align: right;margin-right: 1px;margin-bottom: -47px;margin-top: 16px; padding: 3px;\">\n" +
    "\n" +
    "            <a facebook-feed-share class=\"facebookShare\"\n" +
    "               data-url='{{HOST}}/#/app/activities/{{showActivity.entityId}}'\n" +
    "               data-shares='shares',\n" +
    "               data-description=\"Example text\"\n" +
    "               data-picture=\"{{HOST}}{{showActivity.pictureUrl}}\"\n" +
    "               data-name=\"{{showActivity.name}}\"\n" +
    "               data-caption=\"caption\"\n" +
    "               data-description=\"{{showActivity.shortDescription}}\"\n" +
    "                    >\n" +
    "                {{ shares }}\n" +
    "            </a>\n" +
    "\n" +
    "        </div>\n" +
    "        \n" +
    "        <accordion close-others=\"oneAtATime\" ng-show=\"showActivity.description\">\n" +
    "\n" +
    "            <accordion-group is-open=\"accordionStatus.openActivities[showActivity.activityId]\" is-disabled=\"false\">\n" +
    "\n" +
    "                <accordion-heading>\n" +
    "                    <!--<i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.infoHotelOpen, 'fa-angle-right': !accordionStatus.infoHotelOpen}\"></i>-->\n" +
    "                    <div class=\"text-center\">\n" +
    "                        <!--<i class=\"glyphicon glyphicon-align-justify\"></i> Offer Description-->\n" +
    "                        <button style=\"margin: 0;\" class=\"btn m-b-xs w-xs btn-orangeBorder btn-rounded\" ng-click=\"openActivity(showActivity.initId)\"><span ng-show=\"localState.openActivities[showActivity.initId]\">Hide</span><span ng-hide=\"localState.openActivities[showActivity.initId]\">Open</span></button>\n" +
    "                    </div>\n" +
    "                   \n" +
    "                </accordion-heading>\n" +
    "\n" +
    "                <div ng-bind-html=\"showActivity.description\" style=\"word-wrap: break-word;\"></div>\n" +
    "\n" +
    "                <hr>\n" +
    "               \n" +
    "\n" +
    "            </accordion-group>\n" +
    "        </accordion>\n" +
    "\n" +
    "       \n" +
    "        \n" +
    "        \n" +
    "    </div>\n" +
    "\n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/blocks/showAlertBlock.html",
    "<div class=\"m-b-md\" ng-show=\"mainState.successMsg || mainState.errorMsg || rootErrorMsg\">\n" +
    "    <alert ng-show=\"mainState.successMsg\" type=\"success\" close=\"closeMyAlert('successMsg')\">{{mainState.successMsg}}</alert>\n" +
    "    <alert ng-show=\"mainState.errorMsg\" type=\"warning\" close=\"closeMyAlert('errorMsg')\">{{mainState.errorMsg}}</alert>\n" +
    "    <alert ng-show=\"rootErrorMsg\" type=\"warning\" close=\"closeMyAlert('rootErrorMsg')\">{{rootErrorMsg}}</alert>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/blocks/showHotelBlock.html",
    "<!-- START HOTEL DESCR --->\n" +
    "<div class=\"panel b-a panel-default image-box-shadow\" ng-show=\"showHotel.id>0 || showHotel.id<0\">\n" +
    "\n" +
    "    <div ng-if=\"localState.showHotelBlockFullInfo\">\n" +
    "        \n" +
    "        <div ng-if=\"showHotel.rating>0\" class=\"bottom text-white\" style=\"padding: 5px;text-align: right;margin-bottom: -25px;height: 25px;z-index: 9;position: relative;\" >\n" +
    "            <!--ng-show=\"!localState.selectedFilterHotel\"-->\n" +
    "            <div class=\"hotelInfoOpacity\">\n" +
    "                <div class=\"top text-right padder w-full\">\n" +
    "                    <rating ng-model=\"showHotel.rating\" readonly=\"true\" max=\"5\" state-on=\"'fa fa-star text-orange'\" state-off=\"'fa fa-star-o text-orange'\"></rating>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <div style=\"margin-top: -1px;\">\n" +
    "\n" +
    "            <div class=\"item m-l-n-xxs m-r-n-xxs\" ng-click=\"onHotelCheckinClick(showHotel.id)\">\n" +
    "                <img ng-src=\"{{showHotel.pictureUrl}}\" ng-show=\"showHotel.pictureUrl\" class=\"img-full\">\n" +
    "            </div>\n" +
    "\n" +
    "        </div>\n" +
    "        \n" +
    "    </div>\n" +
    "    \n" +
    "\n" +
    "    <div class=\"myFlex\" style=\"justify-content: space-between; -webkit-justify-content: space-between; -moz-justify-content: space-between; -ms-justify-content:space-between; margin: 5px; font-size: 26px;\">\n" +
    "        <span class=\"text-lt\" style=\"font-weight: bold;\" ng-click=\"onHotelCheckinClick(showHotel.id)\">{{showHotel.name}}</span>\n" +
    "        <!--<a class=\"text-lt\" style=\"font-weight: bold;\" ui-sref=\"app.activityList({filterCity: showHotel.city, filterHotelId: showHotel.id})\" ng-show=\"!localState.hotelBlockInternActivities && showHotel.activityNumber>0\">{{showHotel.activityNumber}}<img style=\"margin-top: -5px; margin-right: 5px;\" src=\"angulr/img/build/menu/bottom/angebot-active.png\" /></a>-->\n" +
    "        <!--<a class=\"text-lt\" style=\"font-weight: bold;\" ng-click=\"scrollTo('activitiesAnchor')\" ng-show=\"localState.hotelBlockInternActivities && showHotel.activityNumber>0\">{{showHotel.activityNumber}}<img style=\"margin-top: -5px; margin-right: 5px;\" src=\"angulr/img/build/menu/bottom/angebot-active.png\" /></a>-->\n" +
    "    </div>\n" +
    "\n" +
    "    <div class=\"text-orange\"style=\"margin-left:5px; font-size: 20px;font-size: 17px;margin-top: -4px;\">\n" +
    "        <a class=\"text-lt\" style=\"text-decoration: underline;\" ui-sref=\"app.activityList({filterCity: showHotel.city, filterHotelId: showHotel.id})\" ng-show=\"!localState.hotelBlockInternActivities && showHotel.activityNumber>0\">{{showHotel.activityNumber}}\n" +
    "            <!--<img style=\"margin-top: -5px; margin-right: 5px;\" src=\"angulr/img/build/menu/bottom/angebot-active.png\" />-->\n" +
    "            <span ng-show=\"showHotel.activityNumber==1\">{{'system.activity' | translate}}</span>\n" +
    "            <span ng-show=\"showHotel.activityNumber>1\">{{'system.activities' | translate}}</span>\n" +
    "        </a>\n" +
    "                    <span ng-show=\"!localState.hotelBlockInternActivities && showHotel.activityNumber>0 && !localState.hotelBlockInternGuests && showHotel.customerNumber>0\">\n" +
    "                        , \n" +
    "                    </span>\n" +
    "        <a class=\"text-lt\" style=\"text-decoration: underline;\" ng-click=\"clickLoading('app.chatList', null, null, {hotelScope: hotelState.profileData.checkedIn && app.header.tabIndex==1, filterCity: showHotel.city, filterHotelId: showHotel.id})\" ng-show=\"!localState.hotelBlockInternGuests && showHotel.customerNumber>0\">{{showHotel.customerNumber}}\n" +
    "            <!--<img style=\"margin-top: -5px; margin-right: 5px;\" src=\"angulr/img/build/menu/bottom/angebot-active.png\" />-->\n" +
    "            <span ng-show=\"showHotel.customerNumber==1\">{{'system.guest' | translate}}</span>\n" +
    "            <span ng-show=\"showHotel.customerNumber>1\">{{'system.guests' | translate}}</span>\n" +
    "        </a>\n" +
    "    </div>\n" +
    "\n" +
    "    <div ng-if=\"hotelState.profileData.admin\" style=\"margin-top: 5px;display: flex; display: -webkit-flex;display: -moz-flex;display: -ms-flexbox;justify-content: flex-end;\">\n" +
    "        <!--<button style=\"width: 110px;\" class=\"btn m-b-xs btn-sm btn-info btn-addon\" ui-sref=\"app.editActivity({activityId: showActivity.activityId, edit: true})\"><i class=\"fa fa-edit\"></i>{{::'page.activities.edit' | translate}}</button>-->\n" +
    "        <!--<br/>-->\n" +
    "        <button style=\"width: 130px;\" class=\"btn m-b-xs btn-sm btn-orange btn-addon\" ng-click=\"removeHotel(showHotel.id)\"><i class=\"fa fa-trash-o\"></i>Hotel {{::'page.hotel.remove' | translate}}</button>\n" +
    "    </div>\n" +
    "    \n" +
    "    <div class=\"hotelDescrElt\" ng-if=\"localState.showHotelBlockFullInfo && showHotel.description\">\n" +
    "        <accordion close-others=\"oneAtATime\">\n" +
    "            \n" +
    "            <accordion-group is-open=\"accordionStatus.descriptionHotelOpen[showHotel.id]\" is-disabled=\"accordionStatus.isDescriptionHotelDisabled[showHotel.id]\">\n" +
    "\n" +
    "                <accordion-heading>\n" +
    "                    <i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.descriptionHotelOpen[showHotel.id], 'fa-angle-right': !accordionStatus.descriptionHotelOpen[showHotel.id]}\"></i>\n" +
    "                    <div class=\"text-center\">\n" +
    "                        <div class=\"hotelAccordion\">\n" +
    "                            <i class=\"glyphicon glyphicon-align-justify\"></i> {{'page.hotel.dataFacts' | translate }}\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    <!--<i class=\"fa fa-pencil-square-o\"></i> &nbsp; {{::'page.hotel.updateHotelInfo' | translate }} -->\n" +
    "                </accordion-heading>\n" +
    "\n" +
    "                <div ng-bind-html=\"showHotel.description\" style=\"word-wrap: break-word;\"></div>\n" +
    "\n" +
    "            </accordion-group>\n" +
    "            \n" +
    "        </accordion>\n" +
    "        \n" +
    "    </div>\n" +
    "\n" +
    "    <div class=\"hotelDescrElt\" ng-show=\"showHotel.info\">\n" +
    "        <accordion close-others=\"oneAtATime\">\n" +
    "\n" +
    "            <accordion-group is-open=\"accordionStatus.infoHotelOpen[showHotel.id]\" is-disabled=\"accordionStatus.isInfoHotelDisabled[showHotel.id]\">\n" +
    "\n" +
    "                <accordion-heading>\n" +
    "\n" +
    "                    <i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.infoHotelOpen[showHotel.id], 'fa-angle-right': !accordionStatus.infoHotelOpen[showHotel.id]}\"></i>\n" +
    "                    \n" +
    "                    <div class=\"text-center\">\n" +
    "                        <div class=\"hotelAccordion\">\n" +
    "                            <i class=\"glyphicon glyphicon-align-justify\"></i> {{'page.hotel.azInfos' | translate }}\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    <!--<i class=\"fa fa-pencil-square-o\"></i> &nbsp; {{::'page.hotel.updateHotelInfo' | translate }} -->\n" +
    "                \n" +
    "                </accordion-heading>\n" +
    "\n" +
    "                <div ng-bind-html=\"showHotel.info\" style=\"word-wrap: break-word;\"></div>\n" +
    "\n" +
    "            \n" +
    "            </accordion-group>\n" +
    "       \n" +
    "        </accordion>\n" +
    "        \n" +
    "    </div>\n" +
    "\n" +
    "    <!--<div class=\"hotelEditElt\" ng-if=\"(hotelState.profileData.hotelStaff && hotelState.profileData.hotelId==showHotel.id || hotelState.profileData.admin)\">-->\n" +
    "\n" +
    "        <!--<accordion close-others=\"oneAtATime\">-->\n" +
    "            <!--<accordion-group is-open=\"accordionStatus.openEditHotels[showHotel.id]\" is-disabled=\"accordionStatus.isFirstDisabled\" class=\"b-info\">-->\n" +
    "                <!--&lt;!&ndash;<accordion-heading>&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<i class=\"fa fa-edit\"></i>  &nbsp; {{'page.activities.editActivity' | translate }} <i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.open, 'fa-angle-right': !accordionStatus.open}\"></i>&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;</accordion-heading>&ndash;&gt;-->\n" +
    "                <!--<accordion-heading>-->\n" +
    "                    <!--&lt;!&ndash;<i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.infoHotelOpen, 'fa-angle-right': !accordionStatus.infoHotelOpen}\"></i>&ndash;&gt;-->\n" +
    "                    <!--<div class=\"text-center\">-->\n" +
    "                        <!--&lt;!&ndash;<i class=\"glyphicon glyphicon-align-justify\"></i> Offer Description&ndash;&gt;-->\n" +
    "                        <!--<button style=\"margin: 0;\" class=\"btn m-b-xs w-xs btn-orangeBorder btn-rounded\" ng-click=\"openEditHotel(showHotel)\"><span ng-show=\"accordionStatus.openEditHotels[showHotel.id]\">Cancel</span><span ng-hide=\"accordionStatus.openEditHotels[showHotel.id]\">Edit</span></button>-->\n" +
    "\n" +
    "                    <!--</div>-->\n" +
    "                    <!--&lt;!&ndash;<i class=\"fa fa-pencil-square-o\"></i> &nbsp; {{::'page.hotel.updateHotelInfo' | translate }} &ndash;&gt;-->\n" +
    "                <!--</accordion-heading>-->\n" +
    "\n" +
    "                <!--<form class=\"m-b-none ng-pristine ng-valid\" ng-submit=\"submitHotelChange(showHotel)\" name=\"hotelForm\">-->\n" +
    "\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.hotelName' | translate }}</label>-->\n" +
    "                        <!--<input type=\"text\" class=\"form-control\" ng-model=\"showHotel.name\" placeholder=\"{{::'page.hotel.hotelName' | translate }}\">-->\n" +
    "\n" +
    "                    <!--</div>-->\n" +
    "\n" +
    "                  <!-- -->\n" +
    "\n" +
    "\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.hotelCode' | translate }}</label>-->\n" +
    "                        <!--&lt;!&ndash;<input type=\"text\" class=\"form-control\" ng-model=\"newHotel.pictureUrl\" placeholder=\"{{::'page.hotel.hotelLogo' | translate }}\">&ndash;&gt;-->\n" +
    "                        <!--<input type=\"text\" class=\"form-control\" ng-model=\"showHotel.currentHotelAccessCode\" placeholder=\"{{::'page.hotel.hotelCode' | translate }}\">-->\n" +
    "\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.rating' | translate }}</label>-->\n" +
    "                        <!--&lt;!&ndash;<input type=\"text\" class=\"form-control\" ng-model=\"newHotel.pictureUrl\" placeholder=\"{{::'page.hotel.hotelLogo' | translate }}\">&ndash;&gt;-->\n" +
    "                        <!--<input type=\"text\" class=\"form-control\" ng-model=\"showHotel.rating\" placeholder=\"{{::'page.hotel.rating' | translate }}\">-->\n" +
    "\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.phone' | translate }}</label>-->\n" +
    "                        <!--<input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.phone\" placeholder=\"{{::'page.hotel.phone' | translate }}\"/>-->\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.fax' | translate }}</label>-->\n" +
    "                        <!--<input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.fax\" placeholder=\"{{::'page.hotel.fax' | translate }}\"/>-->\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.hotelEmail' | translate }}</label>-->\n" +
    "                        <!--<input type=\"email\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.email\" placeholder=\"{{::'page.hotel.hotelEmail' | translate }}\"/>-->\n" +
    "                    <!--</div>-->\n" +
    "\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.street' | translate }}</label>-->\n" +
    "                        <!--<input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.street\" placeholder=\"{{::'page.hotel.street' | translate }}\"/>-->\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.house' | translate }}</label>-->\n" +
    "                        <!--<input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.house\" placeholder=\"{{::'page.hotel.house' | translate }}\">-->\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.city' | translate }}</label>-->\n" +
    "                        <!--<input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.city\" placeholder=\"{{::'page.hotel.city' | translate }}\"/>-->\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.postalCode' | translate }}</label>-->\n" +
    "                        <!--<input type=\"text\" class=\"form-control\" rows=\"5\" ng-model=\"showHotel.postalCode\" placeholder=\"{{::'page.hotel.postalCode' | translate }}\"/>-->\n" +
    "                    <!--</div>-->\n" +
    "\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.hotelDescription' | translate }}</label>-->\n" +
    "                        <!--&lt;!&ndash;<div lazy-load=\"textAngular\">&ndash;&gt;-->\n" +
    "                        <!--<div>-->\n" +
    "                            <!--&lt;!&ndash;<small>{{::'system.restLength' | translate}}:</small> &ndash;&gt;-->\n" +
    "                            <!--<span class=\"count\" ng-bind=\"localState.maxHotelDescription - showHotel.description.length\" ng-class=\"{danger: showHotel.description.length > localState.maxHotelDescription}\">1040</span>-->\n" +
    "                        <!--</div>-->\n" +
    "                        <!--<div text-angular ng-model=\"showHotel.description\" class=\"btn-groups\"  ta-toolbar=\"[['bold', 'italics', 'underline', 'ul', 'ol', 'redo', 'undo', 'clear']          ]\" ></div>-->\n" +
    "\n" +
    "                    <!--</div>-->\n" +
    "\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<label>{{::'page.hotel.info' | translate }}</label>-->\n" +
    "                        <!--&lt;!&ndash;<div lazy-load=\"textAngular\">&ndash;&gt;-->\n" +
    "                        <!--<div>-->\n" +
    "                            <!--&lt;!&ndash;<small>{{::'system.restLength' | translate}}:</small> &ndash;&gt;-->\n" +
    "                            <!--<span class=\"count\" ng-bind=\"localState.maxHotelDescription - showHotel.info.length\" ng-class=\"{danger: showHotel.info.length > localState.maxHotelDescription}\">1040</span>-->\n" +
    "                        <!--</div>-->\n" +
    "                        <!--<div text-angular ng-model=\"showHotel.info\" class=\"btn-groups\"   ta-toolbar=\"[['bold', 'italics', 'underline', 'ul', 'ol', 'redo', 'undo', 'clear']          ]\" ></div>-->\n" +
    "\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"form-group\" id=\"img{{showHotel.id}}\">-->\n" +
    "                        <!--<label>{{::'page.activities.activityLogo' | translate}}</label>-->\n" +
    "\n" +
    "                        <!--<input ng-model=\"newHotelFile\"-->\n" +
    "                               <!--onchange=\"angular.element(this).scope().newFile_changed(this, 'hotel')\"-->\n" +
    "                               <!--type=\"file\" accept=\"image/*\" />-->\n" +
    "                        <!--&lt;!&ndash;<input type=\"button\" ng-click=\"uploadFilesX()\">&ndash;&gt;-->\n" +
    "                    <!--</div>-->\n" +
    "                    <!--<div class=\"form-group\">-->\n" +
    "                        <!--<button type=\"submit\" ng-disabled=\"showHotel.description.length > localState.maxHotelDescription\" class=\"btn btn-success\">{{::'page.hotel.updateHotelInfo' | translate }}</button>-->\n" +
    "                    <!--</div>-->\n" +
    "                <!--</form>-->\n" +
    "            <!--</accordion-group>-->\n" +
    "        <!--</accordion>-->\n" +
    "    <!--</div>-->\n" +
    "\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/blocks/showHotelPreviewBlock.html",
    "<!-- START HOTEL DESCR --->\n" +
    "<div class=\"panel b-a panel-default image-box-shadow\" ng-show=\"previewHotel.id>0 || previewHotel.id<0\">\n" +
    "    \n" +
    "    <div layout=\"row\" style=\"font-size: 25px;\">\n" +
    "        \n" +
    "        <div ng-click=\"onHotelCheckinClick(previewHotel.id)\">\n" +
    "            <div ng-if=\"previewHotel.rating>0\" class=\"bottom text-white\" style=\"padding: 5px;text-align: right;margin-bottom: -10px;height: 10px;z-index: 9;position: relative;top: -2px;left: -7px; font-size: 12px;\" >\n" +
    "                <!--ng-show=\"!localState.selectedFilterHotel\"-->\n" +
    "                <div class=\"hotelInfoOpacity\">\n" +
    "                    <div class=\"top text-right padder w-full\" style=\"padding-left: 5px; padding-right: 5px;\">\n" +
    "                        <rating ng-model=\"previewHotel.rating\" readonly=\"true\" max=\"5\" state-on=\"'fa fa-star text-orange'\" state-off=\"'fa fa-star-o text-orange'\"></rating>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <img ng-src=\"{{previewHotel.previewPictureUrl}}\" ng-show=\"previewHotel.previewPictureUrl\" style=\"width: 100px;\">\n" +
    "        </div>\n" +
    "        \n" +
    "        <div style=\"flex-grow: 1; margin-left: 3px;\" layout=\"column\">\n" +
    "            <div style=\"flex-grow: 1;\" layout=\"column\" ng-click=\"onHotelCheckinClick(previewHotel.id)\">\n" +
    "                <div layout=\"row\" >\n" +
    "                    <span class=\"text-lt\" style=\"font-weight: bold;\" >{{previewHotel.name}}</span>\n" +
    "                    \n" +
    "                </div>\n" +
    "                \n" +
    "                <div class=\"text-orange\" layout=\"column\" style=\"margin-left:5px; font-size: 20px;font-size: 17px;margin-top: -4px;\">\n" +
    "                    <!--ui-sref=\"app.activityList({filterCity: previewHotel.city, filterHotelId: previewHotel.id})\"-->\n" +
    "                   \n" +
    "                    <!--<span ng-show=\"!localState.hotelBlockInternActivities && previewHotel.activityNumber>0 && !localState.hotelBlockInternGuests && previewHotel.customerNumber>0\">-->\n" +
    "                        <!--, -->\n" +
    "                    <!--</span>-->\n" +
    "                    <!--ng-click=\"clickLoading('app.chatList', null, null, {hotelScope: hotelState.profileData.checkedIn && app.header.tabIndex==1, filterCity: previewHotel.city, filterHotelId: previewHotel.id})\"-->\n" +
    "                    <a class=\"text-lt\" style=\"text-decoration: underline;\"  ng-show=\"!localState.hotelBlockInternGuests && previewHotel.customerNumber>0\">{{previewHotel.customerNumber}}\n" +
    "                        <!--<img style=\"margin-top: -5px; margin-right: 5px;\" src=\"angulr/img/build/menu/bottom/angebot-active.png\" />-->\n" +
    "                        <span ng-show=\"previewHotel.customerNumber==1\">{{'system.guest' | translate}}</span>\n" +
    "                        <span ng-show=\"previewHotel.customerNumber>1\">{{'system.guests' | translate}}</span>\n" +
    "                    </a>\n" +
    "                    \n" +
    "                    <a class=\"text-lt\" style=\"text-decoration: underline;\"  ng-show=\"!localState.hotelBlockInternActivities && previewHotel.activityNumber>0\">{{previewHotel.activityNumber}}\n" +
    "                        <!--<img style=\"margin-top: -5px; margin-right: 5px;\" src=\"angulr/img/build/menu/bottom/angebot-active.png\" />-->\n" +
    "                        <span ng-show=\"previewHotel.activityNumber==1\">{{'system.activity' | translate}}</span>\n" +
    "                        <span ng-show=\"previewHotel.activityNumber>1\">{{'system.activities' | translate}}</span>\n" +
    "                    </a>\n" +
    "                </div> \n" +
    "               \n" +
    "             </div>\n" +
    "            \n" +
    "            <!--<div style=\"font-size: 16px;margin-left: 5px;\" ng-show=\"previewHotel.currentHotelAccessCode=='demo'\" ng-click=\"onHotelCheckinClick(previewHotel.id)\">-->\n" +
    "\n" +
    "                <!--<i class=\"fa fa-info-circle \"></i> {{'page.checkin.tryDemo' | translate}}-->\n" +
    "                <!-- -->\n" +
    "            <!--</div> -->\n" +
    "            \n" +
    "            <div layout=\"row\" style=\"font-size: 18px;margin-left: 5px; justify-content: space-between; -webkit-justify-content: space-between; -moz-justify-content: space-between; \" ng-show=\"previewHotel.currentHotelAccessCode!='demo'\">\n" +
    "                 \n" +
    "                <div   ng-click=\"openModal('editHotel', previewHotel.id)\" is-disabled=\"accordionStatus.isInfoHotelDisabled[previewHotel.id]\">\n" +
    "                    <i class=\"fa fa-info-circle \"></i> Details\n" +
    "                </div>\n" +
    "                \n" +
    "                <div ng-click=\"onHotelCheckinClick(previewHotel.id)\">\n" +
    "                    <span ng-show=\"previewHotel.kmFromMe\"  style=\"font-size: 14px; font-weight: bold;\">({{previewHotel.kmFromMe}} km)</span>\n" +
    "                </div>\n" +
    "\n" +
    "            </div>\n" +
    "            \n" +
    "            <!--<div class=\"hotelDescrElt\" ng-if=\"previewHotel.description\" style=\"font-size: 15px;\">-->\n" +
    "\n" +
    "                <!--<div class=\"text-center\" > -->\n" +
    "                    <!--<div class=\"hotelAccordion\" ng-click=\"accordionStatus.infoHotelOpen[previewHotel.id] = !accordionStatus.infoHotelOpen[previewHotel.id];\" is-disabled=\"accordionStatus.isInfoHotelDisabled[previewHotel.id]\">-->\n" +
    "                        <!--<i class=\"glyphicon glyphicon-align-justify\"></i> {{'page.hotel.dataFacts' | translate }}-->\n" +
    "                    <!--</div>-->\n" +
    "                <!--</div>-->\n" +
    "                <!-- -->\n" +
    "\n" +
    "            <!--</div>-->\n" +
    "\n" +
    "            <!--<div class=\"hotelDescrElt\" ng-show=\"previewHotel.info\">-->\n" +
    "                <!--<accordion close-others=\"oneAtATime\">-->\n" +
    "\n" +
    "                    <!--<accordion-group is-open=\"accordionStatus.infoHotelOpen[previewHotel.id]\" is-disabled=\"accordionStatus.isInfoHotelDisabled[previewHotel.id]\">-->\n" +
    "\n" +
    "                        <!--<accordion-heading>-->\n" +
    "\n" +
    "\n" +
    "                            <!--<div class=\"text-center\">-->\n" +
    "                                <!--<div class=\"hotelAccordion\">-->\n" +
    "                                    <!--<i class=\"glyphicon glyphicon-align-justify\"></i> {{'page.hotel.azInfos' | translate }}-->\n" +
    "                                <!--</div>-->\n" +
    "                            <!--</div>-->\n" +
    "                            <!--&lt;!&ndash;<i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.infoHotelOpen[previewHotel.id], 'fa-angle-right': !accordionStatus.infoHotelOpen[previewHotel.id]}\"></i>&ndash;&gt;-->\n" +
    "\n" +
    "                        <!--</accordion-heading>-->\n" +
    "\n" +
    "                        <!--<div ng-bind-html=\"previewHotel.info\" style=\"word-wrap: break-word; font-size: 14px;\"></div>-->\n" +
    "\n" +
    "\n" +
    "                    <!--</accordion-group>-->\n" +
    "\n" +
    "                <!--</accordion>-->\n" +
    "\n" +
    "            <!--</div>-->\n" +
    "        \n" +
    "        </div>\n" +
    "        <div layout=\"column\" class=\"myCenter\" ng-click=\"onHotelCheckinClick(previewHotel.id);\">\n" +
    "            <i class=\"fa fa-angle-right\" style=\"padding:5px; color: #888; font-size: 24px;\"></i>\n" +
    "        </div>\n" +
    "   </div>\n" +
    "   <!--<div ng-show=\"accordionStatus.infoHotelOpen[previewHotel.id]\" style=\"border-top-width:1px; border-top-style: inherit; border-top-color: lightgray; \">-->\n" +
    "       <!--<div ng-bind-html=\"previewHotel.info\" style=\"word-wrap: break-word; font-size: 14px; margin: 5px;\"></div>-->\n" +
    "   <!--</div> -->\n" +
    "\n" +
    "    \n" +
    "    \n" +
    "\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/blocks/socialLogin.html",
    "<div class=\"panel panel-default\">\n" +
    "    <!--<div class=\"panel-heading font-bold\">Or login with social networks:</div>-->\n" +
    "    <div class=\"panel-body\">\n" +
    "\n" +
    "        <a ng-click=\"loginService.loginSocial('facebook','facebookLoginId')\" id=\"facebookLoginId\" class=\"btn btn-block btn-social btn-facebook\">\n" +
    "            <i class=\"fa fa-facebook\"></i>\n" +
    "            Login with Facebook\n" +
    "        </a>\n" +
    "        \n" +
    "        <!--<a ng-click=\"loginService.loginSocial('linkedIn','linkedinLoginId')\" id=\"linkedinLoginId\" class=\"btn btn-block btn-social btn-linkedin\">-->\n" +
    "            <!--<i class=\"fa fa-linkedin\"></i>-->\n" +
    "            <!--Login with LinkedIn-->\n" +
    "        <!--</a>-->\n" +
    "        \n" +
    "    </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_404.html",
    "<div class=\"container w-xxl w-auto-xs\" ng-init=\"app.settings.container = false;\">\n" +
    "  <div class=\"text-center m-b-lg\">\n" +
    "    <h1 class=\"text-shadow text-white\">404</h1>\n" +
    "  </div>\n" +
    "  <div class=\"list-group bg-info auto m-b-sm m-b-lg\">\n" +
    "    <a href=\"#/\" class=\"list-group-item\">\n" +
    "      <i class=\"fa fa-chevron-right text-muted\"></i>\n" +
    "      <i class=\"fa fa-fw fa-mail-forward m-r-xs\"></i> Goto application\n" +
    "    </a>\n" +
    "    <a ui-sref=\"app.signin\" class=\"list-group-item\">\n" +
    "      <i class=\"fa fa-chevron-right text-muted\"></i>\n" +
    "      <i class=\"fa fa-fw fa-sign-in m-r-xs\"></i> Sign in\n" +
    "    </a>\n" +
    "    <a ui-sref=\"app.signup\" class=\"list-group-item\">\n" +
    "      <i class=\"fa fa-chevron-right text-muted\"></i>\n" +
    "      <i class=\"fa fa-fw fa-unlock-alt m-r-xs\"></i> Sign up\n" +
    "    </a>\n" +
    "  </div>\n" +
    "  <div class=\"text-center\" ng-include=\"'angulr/tpl/blocks/page_footer.html'\">\n" +
    "    {% include 'blocks/page_footer.html' %}\n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_about.html",
    "<div class=\"hbox hbox-auto-xs\" ng-init=\"\n" +
    "  app.settings.asideFixed = true;\n" +
    "  app.settings.asideDock = false;\n" +
    "  app.settings.container = false;\n" +
    "	 app.hideFooter = true;\n" +
    "	 app.header.showTab = false;\n" +
    "	 app.header.showBackArrow = true;\n" +
    "	 app.rootSettings.darkBg = true;\n" +
    "\n" +
    "  \">\n" +
    "\n" +
    "	<!--<div class=\"bg-light lter b-b wrapper-md\">-->\n" +
    "		<!--<h1 class=\"m-n font-thin h3\">hotelico.de About</h1>-->\n" +
    "	<!--</div>-->\n" +
    "	<div class=\"wrapper-md\">\n" +
    "		<div class=\"row\">\n" +
    "			<div style=\"padding: 5px;\">\n" +
    "				<!--class=\"col-sm-9\">-->\n" +
    "\n" +
    "				<span class=\"localHeader\">Lust auf Gesellschaft im Hotel?</span>\n" +
    "				<br/>\n" +
    "				M&ouml;chtest Du Sonderangebote f&uuml;r Hotel-Services und das Restaurant bekommen?\n" +
    "\n" +
    "				Brauchst du Information rund um das Hotel und die Umgebung?\n" +
    "				<br><br>\n" +
    "				Dann gebe in dem Tab \"Check-in\" den Hotel-Code ein (erh&auml;ltlich an der Rezeption), chatte mit\n" +
    "\n" +
    "				anderen G&auml;sten und nutze zusammen mit denen die Sonderangebote des Hotels.\n" +
    "				<br><br>\n" +
    "				Suchst du nach einem Hotel?\n" +
    "				<br><br>\n" +
    "\n" +
    "				In dem Tab \"Alle Hotels\" bekommst Du eine &uuml;bersicht &uuml;ber teilnehmende Hotels.\n" +
    "\n" +
    "				Du kannst dir Angebote und Veranstaltungen dort ansehen,\n" +
    "\n" +
    "				mit der Rezeption, mit aktuellen oder ehemaligen Hotelg&auml;sten chatten.\n" +
    "\n" +
    "				Sich ein Feedback &uuml;ber das Hotel einholen oder direkt zusammen mit Hotelg&auml;sten ein\n" +
    "\n" +
    "				Treffen/Ausflug schon mal einplanen.\n" +
    "				\n" +
    "				<br><br>\n" +
    "				\n" +
    "				Unser Hotelnetz erweitert sich kontinuierlich weiter.\n" +
    "\n" +
    "				Und wir vergr&ouml;&szlig;ern den Funktionsumfang von Hotelico.\n" +
    "\n" +
    "				Als n&auml;chstes geplante Funktionen:\n" +
    "				\n" +
    "				<ul>\n" +
    "					<li>Auswahl der Hotels nach sozialem Bewertungsfaktor</li>\n" +
    "					<li>Bewertungen der Angebote</li>\n" +
    "					<li>Smartphone als Zimmerschl&uuml;ssel</li>\n" +
    "					<li>Navigation innerhalb des Hotels</li>\n" +
    "				</ul>\n" +
    "\n" +
    "			</div>\n" +
    "		</div>\n" +
    "\n" +
    "	</div>\n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/page_activityList.html",
    "<div id=\"minPaddingPage\" ng-controller=\"ActivityListController\" class=\"bg-light lter wrapper-md\" ng-init=\"\n" +
    "app.hideFooter = false;\n" +
    "app.header.showTab = true;\n" +
    "app.header.tabIndex = 0;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "hotelState.checkHeaderTab();\n" +
    "\">\n" +
    "  <!--<h1 class=\"m-n font-thin h3\"></h1>-->\n" +
    "  \n" +
    "  <div class=\"wrapper-md\" style=\"padding-top: 0;\">\n" +
    "  <div class=\"row\">\n" +
    "    <!--<div class=\"col-sm-9\">-->\n" +
    "    <div>\n" +
    "      <!--ng-class=\"::{'col-sm-9': !isSmartDevice}\">-->\n" +
    "\n" +
    "      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "    <div class=\"wrapper text-center\" style=\"padding-top: 0px;\">\n" +
    "      \n" +
    "      <div   style=\"text-align: left; margin-top: 10px;\">\n" +
    "\n" +
    "        <!--<div style=\"white-space: pre-line;\">{{::'page.hotel.activityFilterLabel' | translate}}:</div>-->\n" +
    "        <div data-ng-include=\" 'angulr/tpl/hotel/blocks/selectHotelCityBlock.html' \" />\n" +
    "        \n" +
    "      </div>\n" +
    "      \n" +
    "      <hr/>\n" +
    "      \n" +
    "      <span class=\"hotelicoHeader\" ng-show=\"localState.filterActivities.length>0\">\n" +
    "          {{::'page.hotel.activities' | translate}} \n" +
    "          <span ng-show=\"localState.selectedFilterHotel\"> in {{localState.selectedFilterHotel.name}}</span>\n" +
    "          <span ng-show=\"!localState.selectedFilterHotel && localState.selectedCityHotel\"> in {{localState.selectedCityHotel.city}}</span>\n" +
    "          :\n" +
    "      </span>\n" +
    "      \n" +
    "    </div>\n" +
    "\n" +
    "      <!-- ACTIVITES START -->\n" +
    "      \n" +
    "\n" +
    "      <!-- LIST ALL ACTIVITIES -->\n" +
    "      <div id=\"activityPart\" ng-controller=\"activityCtrl\">\n" +
    "\n" +
    "        <div class=\"list-group list-group-lg list-group-sp\">\n" +
    "          <div ng-repeat=\"showActivity in localState.filterActivities | orderBy: 'validTo'  track by showActivity.activityId\">\n" +
    "  \n" +
    "            <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showActivityBlock.html' \" />\n" +
    "  \n" +
    "          </div>\n" +
    "\n" +
    "          <div class=\"nothingFoundMsg\" ng-show=\"localState.noActivityFound\">{{::'page.activities.noActivityFound' | translate}}</div>\n" +
    "          <div class=\"nothingFoundMsg\" ng-show=\"localState.activitiesLoading\">{{::'system.loading' | translate}}...</div>\n" +
    "\n" +
    "\n" +
    "        </div>\n" +
    "        \n" +
    "      </div>\n" +
    "\n" +
    "      <!-- END ACTIVITES START -->\n" +
    "      \n" +
    "      \n" +
    "    </div>\n" +
    "    \n" +
    "    <!--<hr>-->\n" +
    "    <!-- -->\n" +
    "    <!--<div class=\"col-sm-3\">-->\n" +
    "\n" +
    "      <!--<h5 class=\"font-bold\">{{::'page.hotel.hotelGuests' | translate}} ({{::hotelCustomers.length}})</h5>-->\n" +
    "\n" +
    "\n" +
    "      <!--<div class=\"list-group list-group-lg list-group-sp\">-->\n" +
    "\n" +
    "        <!--&lt;!&ndash;<div ng-repeat=\"nextCustomer in hotelStaffCustomers | orderBy: 'checkinFrom' as filtered_result track by nextCustomer.id\">&ndash;&gt;-->\n" +
    "\n" +
    "          <!--&lt;!&ndash;<div ng-show=\"nextCustomer.hotelStaff\">&ndash;&gt;-->\n" +
    "\n" +
    "            <!--<li class=\"list-group-item\" >-->\n" +
    "              <!--<a ui-sref=\"app.user({userId: staffCustomer.id})\" class=\"thumb-sm m-r avatar\" style=\"    margin-left: -10px;\">-->\n" +
    "                <!--<img src=\"{{::getProfileImageUrl(staffCustomer.id)}}\" class=\"r r-2x\">-->\n" +
    "                <!--<i class=\"on md b-white right customerOnlineStatus\"></i>-->\n" +
    "                <!--&lt;!&ndash;<i class=\"on md b-white right customerOnlineStatus\" ng-show=\"hotelNotification.notificationObjhotelOnlineGuestIds[nextCustomer.id]\"></i>&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<i class=\"offline md b-white right customerOnlineStatus\" ng-hide=\"hotelNotification.notificationObjhotelOnlineGuestIds[nextCustomer.id]\"></i>&ndash;&gt;-->\n" +
    "              <!--</a>-->\n" +
    "            <!-- -->\n" +
    "            <!--<span class=\"pull-right label inline\" style=\"margin-top: 10px;position: absolute;right: 16px;bottom: 21px;\">     -->\n" +
    "              <!--&lt;!&ndash;target=\".app-aside-right\"&ndash;&gt;-->\n" +
    "              <!--<a ui-sref=\"app.chat({receiverId: staffCustomer.id})\" class=\"text-muted\" ui-toggle-class=\"show\" >-->\n" +
    "                <!--<i style=\"color: #1c2b36; font-size: 20px;\" class=\"fa fa-comments-o pull-right text-sm\"></i>-->\n" +
    "                <!--<span style=\"margin-top: 2px;\" class=\"badge bg-success\" ng-show=\"hotelNotification.notificationObjunreadChatProSenderCount[staffCustomer.id]\">-->\n" +
    "                  <!--+{{hotelNotification.notificationObjunreadChatProSenderCount[staffCustomer.id]}}-->\n" +
    "                <!--</span>-->\n" +
    "              <!--</a>-->\n" +
    "            <!--</span>-->\n" +
    "              <!--<small class=\"text-muted clear text-ellipsis customerLastSeen\" ng-show=\"hotelNotification.notificationObjlastSeenOnlineHotelGuests[staffCustomer.id]\">last seen {{hotelNotification.notificationObjlastSeenOnlineHotelGuests[staffCustomer.id]}}</small>-->\n" +
    "\n" +
    "              <!--<a class=\"hotelCustomerName\" ui-sref=\"app.user({userId: staffCustomer.id})\">{{staffCustomer.firstName}} {{staffCustomer.lastName}} -->\n" +
    "                <!--&lt;!&ndash;<span ng-show=\"nextCustomer.age && !nextCustomer.hotelStaff\">({{nextCustomer.age}})</span>&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<span ng-hide=\"!nextCustomer.jobTitle || nextCustomer.hotelStaff\">({{nextCustomer.jobTitle}})</span>&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<span class=\"label bg-primary inline\" ng-show=\"nextCustomer.hotelStaff\">Hotel Staff</span>&ndash;&gt;-->\n" +
    "\n" +
    "              <!--</a>-->\n" +
    "              <!--<small class=\"clear text-ellipsis hotelCustomerJob\">-->\n" +
    "                <!--&lt;!&ndash;{{nextCustomer.status}}&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<span ng-hide=\"!nextCustomer.jobTitle || nextCustomer.hotelStaff\">{{nextCustomer.jobTitle}}</span>&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<span ng-hide=\"!nextCustomer.company || nextCustomer.hotelStaff\"><span style=\"margin-left: -3px;\" ng-hide=\"!nextCustomer.jobTitle\">, </span>{{nextCustomer.company}}</span>&ndash;&gt;-->\n" +
    "                <!--<span class=\"label bg-orange hotelStaff inline\" style=\"position: relative;top:-3px;margin-left: 0px;\">{{'system.hotelStaff' | translate}}</span>-->\n" +
    "              <!--</small>-->\n" +
    "\n" +
    "            <!--</li>-->\n" +
    "            <!--&lt;!&ndash;<a href class=\"text-muted\" style=\"position: absolute; bottom: 58px; right: 11px;\" ui-toggle-class=\"show\" target=\".app-aside-right\"><i class=\"fa fa-comment-o pull-right text-sm\"></i></a>&ndash;&gt;-->\n" +
    "\n" +
    "          <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "        <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "        <!-- -->\n" +
    "        <!--<div ng-repeat=\"nextCustomer in hotelCustomers | orderBy: 'checkinFrom' as filtered_result track by nextCustomer.id\">-->\n" +
    "          <!-- -->\n" +
    "          <!--&lt;!&ndash;<div ng-show=\"nextCustomer.id!=profileId && !nextCustomer.hotelStaff\">&ndash;&gt;-->\n" +
    "\n" +
    "          <!--<li class=\"list-group-item\" >-->\n" +
    "            <!--<a ui-sref=\"app.user({userId: nextCustomer.id})\" class=\"thumb-sm m-r avatar\" style=\"    margin-left: -10px;\">-->\n" +
    "              <!--<img src=\"{{getProfileImageUrl(nextCustomer.id)}}\" class=\"r r-2x\">-->\n" +
    "              <!--<i class=\"on md b-white right customerOnlineStatus\" ng-show=\"hotelNotification.notificationObjhotelOnlineGuestIds[nextCustomer.id]\"></i>-->\n" +
    "              <!--<i class=\"offline md b-white right customerOnlineStatus\" ng-hide=\"hotelNotification.notificationObjhotelOnlineGuestIds[nextCustomer.id]\"></i>-->\n" +
    "            <!--</a>-->\n" +
    "            <!-- -->\n" +
    "            <!--<span class=\"pull-right label inline\" style=\"margin-top: 10px;position: absolute;right: 16px;bottom: 21px;\">     -->\n" +
    "              <!--&lt;!&ndash;target=\".app-aside-right\"&ndash;&gt;-->\n" +
    "              <!--<a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" class=\"text-muted\" ui-toggle-class=\"show\" >-->\n" +
    "                <!--<i style=\"color: #1c2b36; font-size: 20px;\" class=\"fa fa-comments-o pull-right text-sm\"></i>-->\n" +
    "                <!--<span style=\"margin-top: 2px;\" class=\"badge bg-success\" ng-show=\"hotelNotification.notificationObjunreadChatProSenderCount[nextCustomer.id]\">-->\n" +
    "                  <!--+{{hotelNotification.notificationObjunreadChatProSenderCount[nextCustomer.id]}}-->\n" +
    "                <!--</span>-->\n" +
    "              <!--</a>-->\n" +
    "            <!--</span>-->\n" +
    "            <!--<small class=\"text-muted clear text-ellipsis customerLastSeen\" ng-show=\"hotelNotification.notificationObjlastSeenOnlineHotelGuests[nextCustomer.id]\">last seen {{hotelNotification.notificationObjlastSeenOnlineHotelGuests[nextCustomer.id]}}</small>-->\n" +
    "\n" +
    "            <!--<a class=\"hotelCustomerName\" ui-sref=\"app.user({userId: nextCustomer.id})\">{{nextCustomer.firstName}} {{nextCustomer.lastName}} -->\n" +
    "              <!--&lt;!&ndash;<span ng-hide=\"!nextCustomer.jobTitle || nextCustomer.hotelStaff\">({{nextCustomer.jobTitle}})</span>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;<span class=\"label bg-primary inline\" ng-show=\"nextCustomer.hotelStaff\">Hotel Staff</span>&ndash;&gt;-->\n" +
    "\n" +
    "            <!--</a>-->\n" +
    "            <!--<small class=\"clear text-ellipsis hotelCustomerJob\">-->\n" +
    "              <!--&lt;!&ndash;{{nextCustomer.status}}&ndash;&gt;-->\n" +
    "              <!--<span ng-hide=\"!nextCustomer.jobTitle\">{{nextCustomer.jobTitle}}</span>-->\n" +
    "              <!--<span ng-hide=\"!nextCustomer.company\"><span style=\"margin-left: -3px;\" ng-hide=\"!nextCustomer.jobTitle\">, </span>{{nextCustomer.company}}</span>-->\n" +
    "              <!--&lt;!&ndash;<span class=\"label bg-primary inline\" ng-show=\"nextCustomer.hotelStaff\">{{'system.hotelStaff' | translate}}</span>&ndash;&gt;-->\n" +
    "            <!--</small>-->\n" +
    "\n" +
    "          <!--</li>-->\n" +
    "          <!--&lt;!&ndash;<a href class=\"text-muted\" style=\"position: absolute; bottom: 58px; right: 11px;\" ui-toggle-class=\"show\" target=\".app-aside-right\"><i class=\"fa fa-comment-o pull-right text-sm\"></i></a>&ndash;&gt;-->\n" +
    "\n" +
    "          <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "        <!--</div>-->\n" +
    "         <!-- -->\n" +
    "      <!--</div>-->\n" +
    "      <!-- -->\n" +
    "    <!--</div>-->\n" +
    "\n" +
    "    <div ng-if=\"!hotelState.profileData.checkedIn\" class=\" text-center app-footer navbar navbar-fixed-bottom bg-light lt b-t\" ng-style=\" ::(isSmartDevice && {'margin': '5px', 'position': 'fixed', 'margin-top': '8px', 'margin-bottom': '2px'}) || (!isSmartDevice && { 'position': 'initial', 'margin-top': '8px', 'margin-left': '0', 'background-color': 'transparent'})\" style=\"background-color: #fff;\">\n" +
    "      <!--ng-hide=\"(localState.selectedFilterHotel || localState.selectedHotelCode || localState.hotelcodeFocus)\" >-->\n" +
    "      <button ui-sref=\"app.checkin\" class=\"btn btn-lg btn-block  btn-blue\">\n" +
    "        <!--{{'page.checkin.demoCheckin' | translate }}-->\n" +
    "        Back to Hotel-Selection\n" +
    "      </button>\n" +
    "    </div>\n" +
    "\n" +
    "  </div>\n" +
    "</div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_agb.html",
    "<div class=\"hbox hbox-auto-xs\" ng-init=\"\n" +
    "  app.settings.asideFixed = true;\n" +
    "  app.settings.asideDock = false;\n" +
    "  app.settings.container = false;\n" +
    "  app.hideAside = false;\n" +
    "  app.hideFooter = false;\n" +
    "  app.header.showTab = false;\n" +
    "  app.header.showBackArrow = true;\n" +
    "  app.rootSettings.darkBg = true;\n" +
    "  \">\n" +
    "\n" +
    "	<div class=\"bg-light lter b-b wrapper-md\">\n" +
    "		<h1 class=\"m-n font-thin h3\">hotelico.de AGB</h1>\n" +
    "	</div>\n" +
    "	<div class=\"wrapper-md\">\n" +
    "		<div class=\"row\">\n" +
    "			<div style=\"padding: 5px;\">\n" +
    "				\n" +
    "				<!--class=\"col-sm-9\">-->\n" +
    "\n" +
    "				<p class=\"c9 c13\"><span class=\"c11\">Teilnahmebedingungen</span></p><p class=\"c9 c8 c17\"><span class=\"c5\">&sect; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c1\">Anwendungsbereich und Leistungsumfang</span></p><ol class=\"c4 lst-kix_list_6-0 start\" start=\"1\"><li class=\"c2\"><span class=\"c0\">Diese Teilnahmebedingungen, die gelegentlichen Ver&auml;nderungen unterliegen, gelten f&uuml;r die Nutzung aller Dienstleistungen des Hotelico Konsortiums, vertreten durch seinen Federf&uuml;hrer Favoso Consulting GmbH &amp; Co. Team KG, nachfolgend &quot;Hotelico&quot; genannt. Die Angaben zum Konsortium werden durch das Impressum in seiner jeweils aktuellen Fassung erg&auml;nzt. Bestandteil der Teilnahmebedingungen ist ferner die Datenschutzerkl&auml;rung [LINK] in ihrer jeweils geltenden Fassung.</span></li><li class=\"c2 c8\"><span class=\"c0\">Hotelico betreibt im Rahmen ihrer technischen und betrieblichen M&ouml;glichkeiten Telemedien im Internet. F&uuml;r die Nutzung der Dienste k&ouml;nnen jeweils spezielle Voraussetzungen erforderlich sein; der Kunde verpflichtet sich, diese Voraussetzungen zu erf&uuml;llen. Telemedien von Hotelico sind nur insoweit &ouml;ffentlich, wie sie weder durch technische Mittel, gleich welcher Art, noch durch inhaltliche Hinweise in ihrer Nutzung beschr&auml;nkt sind.</span></li><li class=\"c2 c8\"><span class=\"c0\">Jede nat&uuml;rliche voll gesch&auml;ftsf&auml;hige Person, die Hotelgast ist, k&uuml;nftig in einem angeschlossenen Hotel &uuml;bernachten und dann anl&auml;sslich ihres Aufenthaltes mobil auf die vor Ort zur Verf&uuml;gung stehenden Angebote zugreifen oder sich mit angemeldeten Reisenden vor, w&auml;hrend oder nach einer Reise austauschen m&ouml;chte, kann Mitglied der Plattform &bdquo;hotelico.de&ldquo; werden. Hotelbetreiber und ihre G&auml;ste (letztere &bdquo;Nutzer&ldquo; und beide insgesamt nachfolgend auch &bdquo;Kunden&ldquo; genannt) &nbsp;melden sich dort &uuml;ber das Internet oder mobile Endger&auml;te an, um Informationen auszutauschen oder Angebote bereitzustellen, die sich an Teilnehmer richten, welche sich real oder virtuell in einer Hotelumgebung aufhalten (nachfolgend &bdquo;der Service&ldquo;).</span></li><li class=\"c2\"><span class=\"c0\">Mit der Nutzung des Service &nbsp;&ndash; ganz gleich durch welche Mittel &ndash; oder die Inanspruchnahme eines Zugriffscodes, den ein Nutzer in einem angeschlossenen Hotel erh&auml;lt, best&auml;tigt dieser, dass er diese Teilnahmebedingungen sowie die Datenschutzerkl&auml;rung gelesen und verstanden hat und beiden zustimmt. </span></li><li class=\"c2\"><span class=\"c0\">Sofern Hotelico diese Teilnahmebedingungen aktualisiert, wird die neue Version erst Vertragsbestandteil, wenn der Kunde der neuen Version zugestimmt hat. Hierf&uuml;r gen&uuml;gt es, dass der Kunde die neue Version der Teilnahmebedingungen per E-Mail &uuml;bermittelt erh&auml;lt und nicht binnen vier Wochen widerspricht, worauf Hotelico bei &Uuml;bersendung der ge&auml;nderten Teilnahmebedingungen nochmals ausdr&uuml;cklich hinweisen wird.</span></li><li class=\"c2\"><span class=\"c0\">Entgegenstehende oder von diesen Teilnahmebedingungen abweichende Bedingungen von Kunden erkennen wir nicht an, es sei denn, wir h&auml;tten ausdr&uuml;cklich schriftlich ihrer Geltung zugestimmt. Diese Teilnahmebedingungen gelten auch dann, wenn wir in Kenntnis entgegenstehender oder abweichender Bedingungen des Kunden vorbehaltlos Leistungen erbringen.</span></li></ol><p class=\"c3\"><span class=\"c5\">&sect; 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c1\">Rechte und Obliegenheiten des Kunden</span></p><ol class=\"c4 lst-kix_list_10-0 start\" start=\"1\"><li class=\"c2\"><span class=\"c0\">Jeder Kunde darf f&uuml;r sich bei hotelico.de nur ein Profil erstellen. Das Profil darf nur und ausschlie&szlig;lich vom Ersteller genutzt werden.</span></li><li class=\"c2\"><span class=\"c0\">Jeder Kunde ist f&uuml;r den Inhalt seiner Zugangsdaten allein verantwortlich. Pers&ouml;nliche Daten jeder Art sind unter Verschluss zu halten und d&uuml;rfen nicht an Dritte weiter gegeben sowie nur gegen Zugriff Dritter gesichert abgelegt werden; etwaige Sch&auml;den gehen zu Lasten des berechtigten Nutzers, soweit dieser nicht nachweisen kann, mit der gebotenen Sorgfalt gehandelt zu haben.</span></li><li class=\"c2\"><span class=\"c0\">Der Service steht nur zur privaten und nichtkommerziellen Nutzung zur Verf&uuml;gung. Daher ist es nicht gestattet, Inhalte oder Informationen, Software, Produkte oder Dienstleistungen, die auf der Webseite oder mobil verf&uuml;gbar sind, zu gewerblichen oder wettbewerblichen Zwecken zu vertreiben, mit Unterseiten von Webseiten zu verlinken, zu vervielf&auml;ltigen, zu extrahieren, neu zu ver&ouml;ffentlichen oder sonst anderweitig hochzuladen oder sie zu reproduzieren. Ohne die Erlaubnis von Hotelico ist dem Nutzer jede Werbung auf der Plattform hotelico.de &ndash; gleich in welcher Form &ndash; untersagt. Davon ausgenommen ist die Werbung des Hotelbetreibers f&uuml;r sein jeweiliges Hotel. Die Nutzung personenbezogener Daten anderer Nutzer, insbesondere Namen, Telefonnummern, E-Mail und sonstige Adressdaten, Zugangsdaten zu sozialen Netzen und Bilder ist nur mit deren Zustimmung erlaubt und die gewerbliche Nutzung ist untersagt. Die Bewerbung von anderen Plattformen ist nicht erlaubt.</span></li><li class=\"c2\"><span class=\"c0\">Jeder Kunde ist f&uuml;r die von ihm produzierten, hochgeladenen und ver&ouml;ffentlichten Inhalte selbst verantwortlich. Hotelico stellt mit hotelico.de eine Plattform zum Austausch von Individual- und Gruppenkommunikation sowie von Dienstleistungen zur Verf&uuml;gung, nimmt an diesen aber nicht teil und ist f&uuml;r deren Inhalt insofern als Infrastrukturanbieter auch nicht verantwortlich.</span></li><li class=\"c2\"><span class=\"c0\">Jeder Kunde stellt sicher und erkl&auml;rt hiermit, dass ihm f&uuml;r alle von ihm eingestellten Inhalte die entsprechenden Nutzungsrechte zustehen und Rechte Dritter (gewerbliche Schutzrechte, Urheberrechte und Pers&ouml;nlichkeitsrechte) der Nutzung nicht entgegenstehen. Die Person, die eine Datei hochgeladen hat, gew&auml;hrleistet, dass sie keine Viren, Trojaner, sonstige infizierte Bestandteile, keine pornografischen, illegalen, obsz&ouml;nen, beleidigenden, unzul&auml;ssigen oder unangemessenen Materialien enth&auml;lt. Bei der Einstellung und &ouml;ffentlichen Zug&auml;nglichmachung von Bilddateien, die neben dem jeweiligen Kunden noch andere Personen zeigen, erfolgt dies nur mit der Zustimmung dieser Person.</span></li><li class=\"c2\"><span class=\"c0\">Es ist nicht gestattet, andere Nutzer in unangemessener Weise anzusprechen (unaufgeforderter Massenversand elektronischer Nachrichten &ndash; SPAM -, Kettenbriefe, Schneeballsysteme, Anwerbungen, Beleidigungen, Drohungen, Diskriminierungen, der Versuch der Gruppenbildung zu unlauteren Zwecken etc.). Es ist ferner nicht gestattet, andere Nutzer unangemessen zum Gegenstand von Kommunikation mit Dritten auf der Plattform werden zu lassen (&uuml;ble Nachrede). Bei Verst&ouml;&szlig;en gegen diese Vorschrift kann sich der betroffene Nutzer an das Service-Team von Hotelico wenden und Hotelico ist berechtigt, die Nutzung des Verursachers ohne Ank&uuml;ndigung zu beenden.</span></li><li class=\"c2\"><span class=\"c0\">Die Informationen, die f&uuml;r den Nutzer auf der Plattform hotelico.de abrufbar sind, beruhen auf Daten, die von Hotelbetreibern zur Verf&uuml;gung gestellt werden. Diese haben selbst&auml;ndigen Zugang zum System und tragen somit alleinige Verantwortung daf&uuml;r, dass der Umfang, die Verf&uuml;gbarkeit, die Qualit&auml;t, gegebenenfalls die Bepreisung der von ihnen angebotenen Leistungen und alle anderen Informationen, die sich auf ein Hotel beziehen, zutreffend und aktuell sind. Obwohl Hotelico bei der Auswahl der Hotelbetreiber gewissenhaft vorgeht, ist es nicht m&ouml;glich, die Richtigkeit dieser Informationen zu &uuml;berpr&uuml;fen und zu garantieren. Der Service von Hotelico stellt keine Empfehlung oder Best&auml;tigung der Qualit&auml;t, des Serviceniveaus, der Qualifizierung oder der Klassifikation eines Hotels oder der Richtigkeit von Bewertungen anderer Nutzer des Systems dar. F&uuml;r die Richtigkeit solcher Angaben sind stets die Hotelbetreiber und f&uuml;r die &Uuml;berpr&uuml;fung der jeweilige Nutzer verantwortlich, der die Leistung in Anspruch nehmen m&ouml;chte. Hotelico er&uuml;brigt als Plattform zur Vermittlung von Kommunikation und Dienstleistung anl&auml;sslich des Hotelaufenthalts nicht die gebotene Sorgfalt bei der Hotelauswahl.</span></li><li class=\"c2 c8\"><span class=\"c0\">Bei Nichtzahlung kostenpflichtiger Dienstleistungen ist Hotelico berechtigt, den Kunden mit sofortiger Wirkung von der Nutzung des betreffenden Dienstes oder aller Dienste, auch der anderen kostenpflichtigen und der kostenlosen, auszuschlie&szlig;en. Das schlie&szlig;t ausdr&uuml;cklich Dienstleistungen ein, die &ndash; ungeachtet der Vermittlerrolle von Hotelico &ndash; &uuml;ber die Plattform vertraglich vereinbart und erbracht, aber sodann nachweislich nicht verg&uuml;tet werden. In diesem Zusammenhang entstandene Kosten sind von dem Kunden als Schadensersatz zu ersetzen.</span></li><li class=\"c2\"><span class=\"c0\">Ist Beratungsleistung vereinbart, hat der Kunde sicherzustellen, dass sie am vereinbarten Ort zur vereinbarten Zeit erbracht werden kann. Ist die Leistungserbringung aus Gr&uuml;nden nicht m&ouml;glich, die der Kunde zu vertreten hat, kann einseitig ein neuer Termin mitgeteilt werden. Dem Kunden f&auml;llt der damit verbundene Mehraufwand zur Last. &sect; 3 Absatz 2 bleibt unber&uuml;hrt.</span></li></ol><p class=\"c3\"><span class=\"c5\">&sect; 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c1\">Rechte und Obliegenheiten von Hotelico</span></p><ol class=\"c4 lst-kix_list_2-0 start\" start=\"1\"><li class=\"c2\"><span class=\"c0\">Es besteht kein Anspruch auf eine dauerhafte Verf&uuml;gbarkeit von hotelico.de. Sofern f&uuml;r Hotelico aus von ihr nicht zu vertretenden Gr&uuml;nden (beispielsweise Ausfall externer Computernetze, Stromausf&auml;lle, h&ouml;here Gewalt), eine Leistungserbringung nicht oder nicht rechtzeitig m&ouml;glich ist, darf Hotelico die ihr obliegenden Leistungen um die Dauer des hindernden Ereignisses zuz&uuml;glich einer angemessenen Anlauffrist aufschieben.</span></li><li class=\"c2\"><span class=\"c0\">Ist die Leistungserbringung bei Beratungsleistungen aus Gr&uuml;nden nicht m&ouml;glich, die Hotelico nicht zu vertreten hat, wird ein neuer Termin vereinbart, der den Interessen beider Parteien m&ouml;glichst gerecht wird.</span></li><li class=\"c2\"><span class=\"c0\">Hotelico selbst schuldet nur dann Waren oder &uuml;ber den beschriebenen Service hinaus die Bereitstellung technischer Ressourcen, wenn dies ausdr&uuml;cklich vereinbart ist. Sind Waren geschuldet und werden diese nicht von Hotelico selbst zugestellt, geht die Gefahr auf den Kunden &uuml;ber, sobald Hotelico die Lieferung der Transportperson ausgeh&auml;ndigt hat.</span></li><li class=\"c2\"><span class=\"c0\">Bei positiver Kenntnis dar&uuml;ber, dass auf der Plattform hotelico.de durch Inhalte von Nutzern oder durch Verlinkung Rechte verletzt werden, wird Hotelico diese Inhalte oder Verlinkung innerhalb einer angemessenen Zeit entfernen und alle m&ouml;glichen und zumutbaren Vorkehrungen treffen, um eine identische Rechtsverletzung f&uuml;r die Zukunft zu unterbinden. Dateien, die den Kriterien in &sect; 2 Absatz (5) nicht entsprechen, werden nicht ver&ouml;ffentlicht oder k&ouml;nnen durch Hotelico zu jeder Zeit ohne vorherige Mitteilung entfernt werden.</span></li></ol><p class=\"c3\"><span class=\"c5\">&sect; 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c1\">Zustandekommen von Vertr&auml;gen</span></p><ol class=\"c4 lst-kix_list_4-0 start\" start=\"1\"><li class=\"c2\"><span class=\"c0\">Der Vertrag &uuml;ber die Nutzung von hotelico.de kommt mit der Registrierung zustande. Er ist jederzeit beidseitig auch ohne Angabe von Gr&uuml;nden k&uuml;ndbar. Der Zugang zu hotelico.de selbst ist f&uuml;r Nutzer kostenfrei, jedoch k&ouml;nnen &uuml;ber die Plattform kostenpflichtige Leistungen angeboten werden.</span></li><li class=\"c2\"><span class=\"c0\">Werden Produkte und Dienstleistungen von anderen Nutzern &uuml;ber hotelico.de oder anl&auml;sslich der Nutzung von hotelico.de angeboten, die kostenpflichtig sind, kommt ein Vertrag dar&uuml;ber nicht mit Hotelico, sondern stets mit dem jeweiligen Anbieter zustande. Sofern der Nutzer ein entsprechendes Vertragsverh&auml;ltnis eingeht, wirkt Hotelico ausschlie&szlig;lich als Vermittler zwischen ihm und dem jeweiligen Anbieter mit und stellt beiden Seiten die zum Vertragsabschluss notwendige technische Grundlage zur Verf&uuml;gung.</span></li><li class=\"c2\"><span class=\"c0\">Werden sonstige Leistungen von Hotelico online angeboten, kommt der Vertrag sp&auml;testens mit deren Nutzung zustande. Im &Uuml;brigen kommen Vertr&auml;ge vorbehaltlich einer gesonderten Regelung mit Zugang einer Auftragsbest&auml;tigung, sp&auml;testens mit Bereitstellung der Leistung zustande. Alle Angebote von Hotelico sind freibleibend, sofern im Angebot nicht ausdr&uuml;cklich etwas Abweichendes bestimmt wird.</span></li><li class=\"c2\"><span class=\"c0\">Bestellungen, die ein Kunde &uuml;ber ein Telemedium bei Hotelico &ndash; also nicht bei Nutzern oder Hotelbetreibern auf der Plattform hotelico.de &ndash; durchf&uuml;hrt, stellen ein unverbindliches Angebot dar, das Hotelico unverz&uuml;glich auf elektronischem Wege best&auml;tigt. Die Bestellbest&auml;tigung ist nur dann eine Angebotsannahme, wenn sie einen entsprechenden Hinweis enth&auml;lt, anderenfalls bleibt sie unverbindlich.</span></li></ol><p class=\"c3\"><span class=\"c5\">&sect; 5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c1\">Haftung</span></p><ol class=\"c4 lst-kix_list_9-0 start\" start=\"1\"><li class=\"c2\"><span class=\"c0\">Im Rahmen der gesetzlichen Vorschriften haftet weder das Hotelico-Konsortium, seine Mitglieder, der Federf&uuml;hrer Favoso Consulting GmbH &amp; Co. Team KG, noch Mitglieder der Gesch&auml;ftsleitung oder Vertreter, Partnerunternehmen, Bevollm&auml;chtigte oder andere Personen, die in die Entwicklung oder den Betrieb von hotelico.de oder ihres Inhaltes eingebunden sind oder auf eine andere Weise die Seite und ihre Inhalte zur Verf&uuml;gung stellen, f&uuml;r</span></li></ol><ol class=\"c4 lst-kix_list_11-0 start\" start=\"1\"><li class=\"c10 c9\"><span class=\"c0\">Schadensersatzverpflichtungen, konkrete oder mittelbare Sch&auml;den sowie Folgesch&auml;den, den Ausfall von Einnahmen, Gewinnen oder Leistungen, den Untergang von Anspr&uuml;chen oder Vertr&auml;gen und etwaigen Ansehensverlust,</span></li><li class=\"c10 c9\"><span class=\"c0\">Ungenauigkeiten bei beschreibenden Informationen einschlie&szlig;lich der Informationen zu kostenpflichtigen Angeboten in Bezug auf Hotels,</span></li><li class=\"c9 c10\"><span class=\"c0\">den Inhalt und die Qualit&auml;t der angebotenen Dienstleistungen oder der Produkte von Hotelbetreibern oder anderer Nutzer,</span></li><li class=\"c10 c9\"><span class=\"c0\">Sch&auml;den (mittelbare, unmittelbare, Folgesch&auml;den oder Schadensersatzverpflichtungen) und Verluste oder Kosten, die aufgrund der Nutzung oder der nicht m&ouml;glichen Nutzung der Telemedien von Hotelico entstehen oder</span></li><li class=\"c9 c16\"><span class=\"c0\">K&ouml;rper-, Eigentums- oder andere Sch&auml;den, gleich ob unmittelbar, mittelbar, Folgesch&auml;den oder Schadensersatzverpflichtungen und Verluste oder Aufwendungen, die infolge der Inanspruchnahme von Leistungen entstehen, die auf hotelico.de durch Dritte &ndash; Hotelbetreiber oder Nutzer &ndash; angeboten worden sind.</span></li></ol><ol class=\"c4 lst-kix_list_9-0\" start=\"2\"><li class=\"c2\"><span class=\"c0\">Der Kunde nimmt zur Kenntnis und erkl&auml;rt sich damit einverstanden, dass nicht Hotelico, sondern in jedem Fall der Hotelbetreiber oder sonstige Anbieter kostenpflichtiger Leistungen auf hotelico.de oder anl&auml;sslich der Nutzung von hotelico.de f&uuml;r die Vereinnahmung von Entgelten und daf&uuml;r verantwortlich ist, darauf anfallende Steuern an die zust&auml;ndige Steuerbeh&ouml;rde abzuf&uuml;hren. Hotelico steht daf&uuml;r nicht ein.</span></li><li class=\"c2\"><span class=\"c0\">Der Nutzer stellt Hotelico von s&auml;mtlichen Anspr&uuml;chen frei, die Dritte gegen Hotelico aufgrund einer Verletzung durch den Nutzer geltend machen, wenn es sich bei der Verletzung um einen Versto&szlig; gegen gesetzliche Vorschriften, gegen Rechte Dritter oder gegen die Teilnahmebedingungen handelt. Der Nutzer hat dann die Kosten einer notwendigen Rechtsverteidigung von Hotelico zu tragen. Dar&uuml;ber hinausgehende Schadensersatzanspr&uuml;che von Hotelico gegen den Nutzer bleiben davon unber&uuml;hrt. Die Verpflichtung in diesem Absatz (3) gilt nicht, wenn der Nutzer die Verletzung nicht zu vertreten hat.</span></li></ol><p class=\"c3\"><span class=\"c5\">&sect; 6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c1\">Rechte, Datenschutz</span></p><ol class=\"c4 lst-kix_list_7-0 start\" start=\"1\"><li class=\"c2\"><span class=\"c0\">Die Inhalte des Systems, die Software, die f&uuml;r die Dienstleistungen von Hotelico und insbesondere die Plattform hotelico.de genutzt wird und auf dieser verf&uuml;gbar ist, die Darstellung und der Aufbau unserer Web-Pr&auml;senz sowie die der darin enthaltene Vermittlungsplattform f&uuml;r Kontakte und Dienstleistungen sind &ndash; soweit es sich nicht ausdr&uuml;cklich um gekennzeichnete Angebote und Inhalte von Hotelbetreibern handelt &ndash; Eigentum von Hotelico und ihren Partnern und unterliegen deren jeweiligem Urheberrecht. Der Kunde ist ohne unsere ausdr&uuml;ckliche schriftliche Erlaubnis nicht berechtigt, Inhalte oder die Marke &quot;Hotelico&quot; [DURCH LOGO ERSETZEN] zu kopieren, zu verlinken, zu ver&ouml;ffentlichen, daf&uuml;r zu werben, sie zu vermarkten, zu integrieren, zu benutzen, zu verbinden oder anderweitig zu nutzen. </span></li><li class=\"c2\"><span class=\"c0\">Durch das Hochladen von Dateien stimmt der Kunde zu, dass Hotelico diese Dateien auf ihrer Webseite und der mobilen Version davon &ndash; einschlie&szlig;lich etwaiger Apps sowie f&uuml;r Werbematerial und Ver&ouml;ffentlichungen &ndash; nach eigenem Ermessen verwenden kann. Er gew&auml;hrt Hotelico ein nicht exklusives, weltweites, unwiderrufliches, uneingeschr&auml;nktes, unbefristetes Recht, die Dateien entsprechend zu nutzen, zu reproduzieren, anzuzeigen, zu verbreiten, zu unterlizenzieren, zu kommunizieren und verf&uuml;gbar zu machen.</span></li><li class=\"c2\"><span class=\"c0\">S&auml;mtliche von Kunden &uuml;bermittelte Daten unterliegen der Datenschutzregelung von Hotelico. Unter der Adresse [LINK] kann jederzeit Einblick in diese Datenschutzerkl&auml;rung genommen werden.</span></li></ol><p class=\"c3 c9\"><span class=\"c5\">&sect; 7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c1\">Sonstiges</span></p><ol class=\"c4 lst-kix_list_5-0 start\" start=\"1\"><li class=\"c2\"><span class=\"c0\">Ein Recht zur Aufrechnung steht dem Kunden nur wegen unbestrittener oder rechtskr&auml;ftig festgestellter Gegenanspr&uuml;che zu. Ein Zur&uuml;ckbehaltungsrecht besteht f&uuml;r den Kunden nur hinsichtlich Gegenanspr&uuml;chen aus demselben Rechtsverh&auml;ltnis.</span></li><li class=\"c2\"><span class=\"c0\">Kommt der Kunde in Annahmeverzug oder verletzt er schuldhaft sonstige Mitwirkungspflichten, so ist Hotelico berechtigt, den ihr insoweit entstehenden Schaden, einschlie&szlig;lich etwaiger Mehraufwendungen, ersetzt zu verlangen. Weitergehende Anspr&uuml;che oder Rechte bleiben vorbehalten. Ist eine Lieferung oder Leistung geschuldet, geht in diesem Fall die Gefahr eines zuf&auml;lligen Unterganges oder einer zuf&auml;lligen Verschlechterung der geschuldeten Sache oder Leistung in dem Zeitpunkt auf den Kunden &uuml;ber, in dem dieser in Annahme- oder Schuldnerverzug geraten ist.</span></li><li class=\"c2\"><span class=\"c0\">Hotelico ist berechtigt, sich bei der Erbringung ihrer Dienste der Leistungen Dritter zu bedienen.</span></li><li class=\"c2\"><span class=\"c0\">Nebenabreden oder Abweichungen von diesen Teilnahmebedingungen bed&uuml;rfen der Schriftform, wobei eine best&auml;tigte E-Mail oder ein best&auml;tigtes Telefax ausreichend ist.</span></li><li class=\"c2\"><span class=\"c0\">Gerichtsstand und Erf&uuml;llungsort ist der jeweilige Sitz von Hotelico, wenn der Vertragspartner Kaufmann, eine juristische Person des &ouml;ffentlichen Rechts oder &ouml;ffentlich-rechtliches Sonderverm&ouml;gen ist. Hotelico ist jedoch berechtigt, den Kunden auch am Gericht seines Wohn-/ Gesch&auml;ftssitzes zu verklagen.</span></li><li class=\"c2\"><span class=\"c0\">Es gilt das Recht der Bundesrepublik Deutschland unter Ausschluss der Regelungen des internationalen Privatrechts (IPR) und des UN-Kaufrechts (CISG). Diese Rechtswahl gilt gegen&uuml;ber Verbrauchern jedoch nur insoweit, als nicht zwingende Bestimmungen des Rechts des Staates, in dem der Verbraucher seinen gew&ouml;hnlichen Aufenthalt hat, entgegenstehen.</span></li><li class=\"c2\"><span class=\"c0\">Sollten einzelne Bestimmungen dieser Teilnahmebedingungen unwirksam sein oder werden, ber&uuml;hrt dies die G&uuml;ltigkeit der &uuml;brigen Bestimmungen dieser Vereinbarung nicht. Bei Nichtigkeit einzelner oder mehrerer Bestimmungen gelten dann die gesetzlichen Regelungen.</span></li></ol><div><p class=\"c6\"><span class=\"c0\"></span></p><p class=\"c7\"><span class=\"c0\">-</span><span class=\"c14\">&nbsp;</span><span class=\"c14\">&nbsp;-</span></p><p class=\"c12\"><span class=\"c0\"></span></p></div>\n" +
    "			\n" +
    "			</div>\n" +
    "		</div>\n" +
    "\n" +
    "	</div>\n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/page_avatar.html",
    "<div class=\"bg-light lter b-b wrapper-md\">\n" +
    "    <h1 class=\"m-n font-thin h3\">Avatar Image</h1>\n" +
    "</div>\n" +
    "<div class=\"wrapper-md\" ng-controller=\"ImageCropCtrl\"  ng-init=\"\n" +
    "app.hideFooter = true;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "\n" +
    "   \n" +
    "   \n" +
    "\n" +
    "    <div ng-show=\"!cropper.sourceImage\">\n" +
    "        <br/>\n" +
    "        <!--<input type=\"file\" name=\"fileInput\" id=\"fileInput\" onchange=\"angular.element(this).scope().fileChanged(event)\" />-->\n" +
    "        <input type=\"file\" accept=\"image/*\" img-cropper-fileread image=\"cropper.sourceImage\"/>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "    <div ng-show=\"cropper.sourceImage && !localState.loading\" style=\"overflow: hidden;\">\n" +
    "        <div>\n" +
    "            <canvas width=\"325\" height=\"300\" id=\"canvas\" image-cropper image=\"cropper.sourceImage\" cropped-image=\"cropper.croppedImage\" crop-width=\"200\" crop-height=\"200\" min-width=\"50\" min-height=\"50\" keep-aspect=\"true\" crop-area-bounds=\"bounds\"></canvas>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <div ng-show=\"cropper.sourceImage && cropper.croppedImage && !localState.loading\" style=\"display:flex;  display: -webkit-flex;display: -moz-flex;display: -ms-flexbox; justify-content: space-between; width: 325px;\">\n" +
    "         \n" +
    "        <!--<button ng-click=\"initCrop = true\">Crop</button>-->\n" +
    "        <!--<div style=\"margin-top: 5px;\">-->\n" +
    "            <button  ng-click=\"uploadAvatar()\" class=\"btn-orange\">{{::'system.save' | translate}} Avatar</button>\n" +
    "            <!--<br/>-->\n" +
    "            <!--<button ng-click=\"clear()\">Clear</button>-->\n" +
    "        <!--</div>-->\n" +
    "\n" +
    "        <button ng-click=\"clear()\" style=\"margin-left: 10px;\">{{::'system.cancel' | translate}}</button>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "    <div ng-show=\"localState.loading\">\n" +
    "\n" +
    "        <h2 ng-show=\"localState.loading && !localState.loadComplete\">{{::'page.avatar.loading' | translate}}</h2>\n" +
    "        <h2 ng-show=\"localState.loadComplete\">{{::'page.avatar.loadComplete' | translate}}:</h2>\n" +
    "\n" +
    "        <!--<div>Cropped Image (Left: {{bounds.left}} Right: {{bounds.right}} Top: {{bounds.top}} Bottom: {{bounds.bottom}})</div>-->\n" +
    "        <div ng-show=\"cropper.croppedImage!=null\">\n" +
    "            <img ng-src=\"{{cropper.croppedImage}}\" />\n" +
    "        </div>\n" +
    "        \n" +
    "        <button ng-click=\"goBack()\" style=\"margin-top: 10px;\">{{::'system.back' | translate}}</button>\n" +
    "\n" +
    "        <!--<p>The data-result-blob property is a Blob object, which is necessary in some upload libraries like <a href=\"https://github.com/nervgh/angular-file-upload\" target=\"_blank\">Angular File Upload</a></p>-->\n" +
    "        <!--<p>Image using the data uri:</p>-->\n" +
    "        <!--<img ng-src=\"{{result}}\"></img>-->\n" +
    "        <!--<p>The Base64 String used in the image above:</p>-->\n" +
    "        <!--<textarea class=\"result-datauri\">{{ result }}</textarea>-->\n" +
    "        <!--<div style=\"margin-top: 5px;\">-->\n" +
    "            <!--<button ng-show=\"resultBlob\" ng-click=\"uploadAvatar()\" class=\"btn-orange\">Set Avatar</button>-->\n" +
    "            <!--&lt;!&ndash;<br/>&ndash;&gt;-->\n" +
    "            <!--&lt;!&ndash;<button ng-click=\"clear()\">Clear</button>&ndash;&gt;-->\n" +
    "        <!--</div>-->\n" +
    "        \n" +
    "\n" +
    "\n" +
    "    </div>\n" +
    "    \n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_chat.html",
    "<style media=\"screen\" type=\"text/css\">\n" +
    "    .app:before {  background-color: white !important;}\n" +
    "</style>\n" +
    "\n" +
    "<div style=\"height: 100%;\" class=\"hbox hbox-auto-xs bg-white-only\" ng-controller=\"ChatContr\" ng-init=\"\n" +
    "app.hideFooter = true;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.header.tabIndex = 1;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "\n" +
    "    <!-- modal -->\n" +
    "    <!--<div class=\"panel b-a\">-->\n" +
    "        <!--<script type=\"text/ng-template\" id=\"myModalContent.html\">-->\n" +
    "            <!--<div ng-include=\"'angulr/tpl/hotel/chat_modal.html'\"></div>-->\n" +
    "        <!--</script>-->\n" +
    "        <!--<button class=\"btn btn-success\" ng-click=\"openModal()\">Open me!</button>-->\n" +
    "    <!--</div>-->\n" +
    "    <!-- /modal -->\n" +
    "    \n" +
    "    <div class=\"hbox hbox-auto-xs hbox-auto-sm\">\n" +
    "        <!-- main -->\n" +
    "        <div ng-class=\"{'col' : isSmartDevice}\">\n" +
    "            \n" +
    "            <!-- / main -->\n" +
    "            <!-- right col -->\n" +
    "            <div ng-class=\"{'col w-md bg-white-only b-l bg-auto no-border-xs': isSmartDevice, 'bg-white-only bg-auto no-border-xs' : !isSmartDevice}\">\n" +
    "                <div ng-class=\"{'app-aside-right pos-fix no-padder w-md w-auto-xs bg-white b-l fadeInRight chatWindow' : isSmartDevice, 'bg-white b-l chatWindow' : !isSmartDevice}\" ng-style=\" ::isSmartDevice? {'height':'90%'}:{'height':'90%'}\"><!-- Eugen weg: animated -->\n" +
    "                    <!--style=\"top:auto;\">-->\n" +
    "                    <div class=\"vbox\" ng-style=\"::isSmartDevice? {}:{'height':'90vh'}\">\n" +
    "                        <div class=\"b-b b-t b-light m-b\" ng-hide=\"::isSmartDevice\" style=\"padding: 5px 15px;\">\n" +
    "                            <a ui-sref=\"app.chatList({hotelScope: localState.chatPartner.hotelId == hotelState.profileData.hotelId})\" class=\"pull-right text-muted text-md\"><i class=\"fa fa-times\"></i></a>\n" +
    "                            Chat with:\n" +
    "\n" +
    "                            <!--<a href ui-sref=\"app.user({userId: localState.chatPartner.id})\" class=\"avatar thumb-sm m-r\">-->\n" +
    "                                <!--&lt;!&ndash;<img src=\"{{getProfileImageUrl(nextCustomer.id)}}\" class=\"r r-2x\">&ndash;&gt;-->\n" +
    "                                <!--<img ng-src=\"{{localState.chatPartner.avatarUrl}}\" class=\"r r-2x\" style=\"height: 20px; margin-right: 5px;\">-->\n" +
    "                                <!--<i class=\"on md b-white right customerOnlineStatus\" ng-show=\"hotelNotification.notificationObj.hotelOnlineGuestIds[localState.chatPartner.id]\"></i>-->\n" +
    "                                <!--<i class=\"offline md b-white right customerOnlineStatus\" ng-hide=\"localState.chatPartner.hotelStaff || hotelNotification.notificationObj.hotelOnlineGuestIds[localState.chatPartner.id]\"></i>-->\n" +
    "                            <!--</a>-->\n" +
    "                            \n" +
    "                            \n" +
    "                            <!--<a ui-sref=\"app.user({userId: chatPartner.id})\"  class=\"thumb-xs avatar\"><img src=\"{{getProfileImageUrl(chatPartner.id)}}\" alt=\"...\"></a>-->\n" +
    "                            <a ui-sref=\"app.user({userId: localState.chatPartner.id})\">                            \n" +
    "                                <img ng-src=\"{{localState.chatPartner.avatarUrl}}\" class=\"r r-2x\" alt=\"...\" style=\"height: 20px; margin-right: 2px;\">\n" +
    "                                <span  style=\"text-decoration: underline;\">{{::localState.chatPartner.firstName}} {{::localState.chatPartner.lastName}}</span>\n" +
    "                            </a>\n" +
    "                            <span class=\"label bg-orange inline hotelStaff\" ng-show=\"localState.chatPartner.hotelStaff\" style=\"margin-left: 5px; margin-top: 3px;\">{{::'system.hotelStaff' | translate}}</span>\n" +
    "                            <i class=\"offline md b-white right customerOnlineStatus\" ng-hide=\"hotelNotification.notificationObj.hotelOnlineGuestIds[localState.chatPartner.id]\" style=\"background-color: red;position: absolute;height: 4px;width: 4px;border-radius: 5px;\"></i>\n" +
    "                            <i class=\"on md b-white right customerOnlineStatus\" ng-show=\"localState.chatPartner.hotelStaff || hotelNotification.notificationObj.hotelOnlineGuestIds[localState.chatPartner.id]\" style=\"background-color: #27c24c;position: absolute;height: 4px;width: 4px;border-radius: 5px;\"></i>\n" +
    "                            <div style=\"display: none\"><a id=\"resendButton\" ng-href=\"resend()\"></a></div>\n" +
    "                        </div>\n" +
    "                        <div class=\"row-row\" >\n" +
    "                            <div id=\"chatContainer\" class=\"cell\" scroll-to-bottom='localState.messages.length+localState.waitingMessages.length*2'>\n" +
    "                                <div class=\"cell-inner padder\" style=\"margin:5px; padding: 0px;\">\n" +
    "                                    <!-- chat list -->\n" +
    "                                    <div  ng-repeat=\"(key, nextMessage) in hotelState.chatHistoryByPartnerId[localState.receiverId] | orderBy:'creationTime':false track by nextMessage.entityId\" ng-class=\"{'leftMessage' :hotelState.profileData.id!=nextMessage.senderId, 'rightMessage': hotelState.profileData.id==nextMessage.senderId}\">\n" +
    "\n" +
    "                                        <div style=\"margin-bottom: 5px;\">\n" +
    "                                            <!--<a href=\"\" class=\"pull-left thumb-xs avatar\"><img src=\"{{getProfileImageUrl(message.senderId)}}\" alt=\"...\"></a>-->\n" +
    "\n" +
    "                                            <div class=\"clear\">\n" +
    "                                                <div ng-class=\"{'pos-rlt wrapper-sm b b-light r m-l-sm senderChatMessage': hotelState.profileData.id!=nextMessage.senderId, 'pos-rlt wrapper-sm bg-light r m-r-sm receiverChatMessage': hotelState.profileData.id == nextMessage.senderId}\">\n" +
    "                                                    <span ng-class=\"{'arrow left pull-up' :hotelState.profileData.id!=nextMessage.senderId, 'arrow right pull-up arrow-light': hotelState.profileData.id==nextMessage.senderId}\"></span>\n" +
    "\n" +
    "                                                    <div style=\"vertical-align: top;word-wrap: break-word;\" ng-class=\"{'staffMessage': nextMessage.hotelStaff, 'm-b-none': true}\" >{{nextMessage.message}}</div>\n" +
    "                                                    \n" +
    "                                                    <small class=\"text-muted\" style=\"float: right;margin-top: -5px; display: flex; display: -webkit-flex;display: -moz-flex;display: -ms-flexbox;\">\n" +
    "                                                        <time style=\"color:#000;\">{{::nextMessage.sendTimeString}}</time>\n" +
    "                                                        <!--Eugen: seenByReceiver-->\n" +
    "                                                        <div ng-show=\"!nextMessage.seenByReceiver && !nextMessage.delieveredToReceiver && hotelState.profileData.id==nextMessage.senderId\" style=\"margin-left: 2px;margin-top: -3px;\"><img src=\"angulr/img/build/chat/delieveredToServer.png\"/></div>\n" +
    "                                                        <div ng-show=\"!nextMessage.seenByReceiver && nextMessage.delieveredToReceiver && hotelState.profileData.id==nextMessage.senderId\" style=\"margin-left: 2px;margin-top: -3px;\"><img src=\"angulr/img/build/chat/delieveredToReceiver.png\"/></div>\n" +
    "                                                        <div ng-show=\"nextMessage.seenByReceiver && hotelState.profileData.id==nextMessage.senderId\" style=\"margin-left: 2px;margin-top: -3px;\"><img src=\"angulr/img/build/chat/seenByReceiver.png\"/></div>\n" +
    "                                                    </small>\n" +
    "                                                </div>\n" +
    "                                                \n" +
    "                                            </div>\n" +
    "                                        </div>\n" +
    "\n" +
    "                                    </div>\n" +
    "\n" +
    "                                    <div ng-repeat=\"(key, nextMessage) in localState.waitingMessages | orderBy:'creationTime':false track by nextMessage.messageId\" ng-class=\"{'leftMessage' :hotelState.profileData.id!=nextMessage.senderId, 'rightMessage': hotelState.profileData.id==nextMessage.senderId}\">\n" +
    "\n" +
    "                                        <div style=\"margin-bottom: 5px;\">\n" +
    "                                            <!--<a href=\"\" class=\"pull-left thumb-xs avatar\"><img src=\"{{getProfileImageUrl(message.senderId)}}\" alt=\"...\"></a>-->\n" +
    "\n" +
    "                                            <div class=\"clear\">\n" +
    "                                                <div ng-class=\"{'pos-rlt wrapper-sm b b-light r m-l-sm senderChatMessage': hotelState.profileData.id!=nextMessage.senderId, 'pos-rlt wrapper-sm bg-light r m-r-sm receiverChatMessage': hotelState.profileData.id==nextMessage.senderId}\">\n" +
    "                                                    <span ng-class=\"{'arrow left pull-up' : hotelState.profileData.id!=nextMessage.senderId, 'arrow right pull-up arrow-light': hotelState.profileData.id==nextMessage.senderId}\"></span>\n" +
    "\n" +
    "                                                    <div style=\"vertical-align: top;word-wrap: break-word;\" ng-class=\"{'staffMessage': nextMessage.hotelStaff, 'm-b-none': true}\" > \n" +
    "                                                        <img src=\"angulr/icons/loader.gif\" style=\"margin-right: 5px;\" ng-hide=\"localState.showResend\">\n" +
    "                                                        <i class=\"fa fa-exclamation text-muted\"  ng-show=\"localState.showResend\"/>\n" +
    "                                                        {{nextMessage.decodeMessage}}\n" +
    "                                                    </div>\n" +
    "\n" +
    "                                                     \n" +
    "                                                    \n" +
    "                                                    <small class=\"text-muted\" style=\"position: relative;float: right;margin-top: -15px; z-index: 9999;\" ng-show=\"localState.showResend\">\n" +
    "                                                        <div ng-click=\"resendChatRessource(nextMessage)\" class=\"btn btn-default btn-xs\">\n" +
    "                                                            <i class=\"fa fa-repeat text-muted\" ></i> Retry\n" +
    "                                                        </div>\n" +
    "                                                        <div  ng-click=\"removeWaitingMessage(nextMessage)\" class=\"btn btn-default btn-xs\">\n" +
    "                                                            <i class=\"fa fa-trash-o text-muted\" ></i> Remove\n" +
    "                                                        </div >\n" +
    "                                                        <!--<time>{{message.sendTimeString}}</time>-->\n" +
    "                                                    </small>\n" +
    "                                                </div>\n" +
    "\n" +
    "                                            </div>\n" +
    "                                        </div>\n" +
    "\n" +
    "                                    </div>\n" +
    "\n" +
    "                                    <chat-box></chat-box>\n" +
    "\n" +
    "                                    <!-- / chat list -->\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                        <div class=\"wrapper m-t b-t b-light\" style=\"margin-bottom: 25px;margin-top:0;padding-top: 0px;\">\n" +
    "                            <form class=\"m-b-none ng-pristine ng-valid\" ng-submit=\"addMessage()\" name=\"messageForm\">\n" +
    "                                <div class=\"input-group\">\n" +
    "                                    <input type=\"text\" id=\"chatInput\" autocomplete=\"off\" ng-focus=\"focusChatInput()\" class=\"form-control\" placeholder=\"Say something\" ng-model=\"localState.newMessage\">\n" +
    "    <span class=\"input-group-btn\">\n" +
    "    <button class=\"btn btn-orange\" ng-disabled=\"localState.newMessage.length > max\"> <i class=\"fa fa-angle-right\" style=\"font-size: 18px;\"/></button>\n" +
    "    </span>\n" +
    "                                </div>\n" +
    "                                <div style=\"  margin-bottom: -20px;\">\n" +
    "                                    <span class=\"count\" ng-bind=\"localState.max - localState.newMessage.length\" ng-class=\"{danger: localState.newMessage.length > localState.max}\">{{::localState.max}}</span>\n" +
    "                                </div>\n" +
    "                            </form>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <!-- / right col -->\n" +
    "        </div>\n" +
    "    </div>\n" +
    "    </div>\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/page_chatList.html",
    "<div style=\"height: 100%;\" ng-controller=\"ChatListContr\" class=\"hbox hbox-auto-xs\" ng-init=\"\n" +
    "app.hideFooter = false;\n" +
    "app.header.showTab = true;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.header.tabIndex = 1;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "<!-- Eugen: tabIndex set from js -->\n" +
    "    <div class=\"row\" ng-show=\"!localState.showChatDiv\">\n" +
    "       \n" +
    "        <div class=\"col-md-6\" ng-style=\"::!isSmartDevice && {'min-width': '590px', 'width': '100%'}\">\n" +
    "       \n" +
    "            <div class=\"panel no-border\">\n" +
    "\n" +
    "                <!-- CHAT FILTER SELECTOR --->\n" +
    "                \n" +
    "                <div class=\"wrapper b-t b-light\" ng-show=\"!localState.hotelScope\" style=\"border-top: 0px;\">\n" +
    "\n" +
    "                    <!--{{'page.chat.citySelect' | translate}}:                 -->\n" +
    "                    <img src=\"angulr/icons/loader.gif\" ng-show=\"localState.showCityLoading\">\n" +
    "                    <select ng-change=\"onChangeCustomerCitySelector();\" class=\"form-control ng-pristine ng-valid ng-touched\" ng-model=\"localState.selectedCustomerCity\" id=\"customerCity\" ng-options=\"customer as customer.city for customer in localState.customerCitiesArray | unique:'city'\" placeholder=\" {{'page.chat.customerCityManualSelect' | translate}}\">\n" +
    "                        <option value=\"\" disabled selected> {{'page.chat.citySelect' | translate}}</option>\n" +
    "                        <!--<option value=\"\" > {{::'page.checkin.allCityChoosed' | translate}}</option>-->\n" +
    "                    </select>\n" +
    "                    \n" +
    "                    <span ng-show=\"localState.selectedCustomerCity && localState.filteredHotelsNOTEmpty\">Hotels in {{localState.selectedCustomerCity.city}}:</span>\n" +
    "                    <img src=\"angulr/icons/loader.gif\" ng-show=\"localState.showCityHotelLoading && localState.filteredHotelsNOTEmpty\">\n" +
    "                    <select ng-change=\"onChangeFilterHotelSelector();\" ng-show=\"localState.selectedCustomerCity && localState.filteredHotelsNOTEmpty\" class=\"form-control ng-pristine ng-valid ng-touched\" ng-model=\"localState.selectedFilterHotel\" id=\"hotel\" ng-options=\"hotel as hotel.name for hotel in localState.hotelsFilteredByCityArray\" placeholder=\" {{::'page.checkin.hotelManualSelect' | translate}}\">\n" +
    "                        <!--<option value=\"\" disabled selected>Hotels in {{selectedCustomerCity.city}}</option>-->\n" +
    "                        <option value=\"\"> {{::'page.checkin.allHotelsChoosed' | translate}}</option>\n" +
    "                    </select>\n" +
    "\n" +
    "\n" +
    "                </div>\n" +
    "                \n" +
    "                <!-- CUSTOMERS IN HOTEL AND STAFF --->\n" +
    "                <div class=\"myCenter m-t\">\n" +
    "                    <span ng-show=\"localState.hotelScope && hotelState.hotelCustomers.length==0 && localState.filteredHotelCustomers.length==0\">{{::'page.chat.noPartnerFound' | translate }}</span>\n" +
    "                </div>\n" +
    "\n" +
    "                <div ng-show=\"localState.hotelScope && hotelState.hotelCustomers.length>0\"> \n" +
    "                    \n" +
    "                    <div class=\"panel-heading wrapper b-b b-light\">\n" +
    "                        <h4 class=\"font-thin m-t-none m-b-none text-muted\" ng-show=\"hotelState.profileData.checkedIn\"><!--{{::currentHotel.name}}--> {{::'page.chat.chatListHeader' | translate}}:</h4>\n" +
    "                    </div>\n" +
    "                    \n" +
    "                    <ul class=\"list-group list-group-lg m-b-none\" ng-repeat=\"(key, staffCustomer) in localState.filterHotelStaffCustomers | orderBy: 'lastMessageTimeToMe':true  track by staffCustomer.id\" >\n" +
    "\n" +
    "                        <li class=\"list-group-item chatListCol\">\n" +
    "                            <a href ui-sref=\"app.chat({receiverId: staffCustomer.id})\" style=\"display: flex; display: -webkit-flex;display: -moz-flex;display: -ms-flexbox;\">\n" +
    "                                <div ng-click=\"clickLoading(null, null, '#/app/chat/'+staffCustomer.id)\" style=\"cursor: pointer;\">\n" +
    "                                    <a href ui-sref=\"app.user({userId: staffCustomer.id})\" class=\"avatar thumb-sm m-r\">\n" +
    "                                       \n" +
    "                                        <img ng-src=\"angulr/img/build/avatar/staff.png\" class=\"r r-2x\">\n" +
    "                                        <i class=\"on md b-white right customerOnlineStatus\"></i>\n" +
    "                                        \n" +
    "                                    </a>\n" +
    "                                    <a ui-sref=\"app.chat({receiverId: staffCustomer.id})\" ng-class=\"hotelNotification.notificationObj.unreadChatProSenderCount[staffCustomer.id]? ' unreadMessageTime text-muted chatMessageTime': 'text-muted chatMessageTime' \">\n" +
    "                                        {{hotelNotification.notificationObj.lastMessageTimesToMe[staffCustomer.id]}}\n" +
    "                                    </a>\n" +
    "                                    <a ui-sref=\"app.chat({receiverId: staffCustomer.id})\" ng-class=\"hotelNotification.notificationObj.unreadChatProSenderCount[staffCustomer.id]? ' unreadMessageTime text-muted chatMessageArrow': 'text-muted chatMessageArrow' \" ui-toggle-class=\"show\">\n" +
    "                                        <i class=\"fa fa-angle-right\"></i>\n" +
    "                                    </a>\n" +
    "                                    <a ui-sref=\"app.chat({receiverId: staffCustomer.id})\" class=\"text-muted unreadMessagesCounter\" ui-toggle-class=\"show\">\n" +
    "                                         <span style=\"margin-left: 4px;\" class=\"badge bg-success\" ng-show=\"hotelNotification.notificationObj.unreadChatProSenderCount[staffCustomer.id]\">\n" +
    "                                          +{{hotelNotification.notificationObj.unreadChatProSenderCount[staffCustomer.id]}}\n" +
    "                                        </span>\n" +
    "                                    </a>\n" +
    "                                   \n" +
    "                                    <div class=\"chatUserInfo\">\n" +
    "    \n" +
    "                                        <small class=\"text-muted clear text-ellipsis lastMessageFrom\">\n" +
    "                                            <!-- eugen: ng-class=\"unreadChatProSenderCount[nextCustomer.id]? 'unreadChatMessage':''\" -->\n" +
    "                                            <a class=\"lastMessageFromText\" ui-sref=\"app.chat({receiverId: staffCustomer.id})\">\n" +
    "                                                <div ng-show=\"hotelNotification.notificationObj.lastMessageSeenByCustomer[staffCustomer.id]\" style=\"margin-left: 2px;margin-top: -3px;\"><img src=\"angulr/img/build/chat/seenByReceiver.png\"/></div>\n" +
    "                                                <div ng-show=\"!hotelNotification.notificationObj.lastMessageSeenByCustomer[staffCustomer.id] && hotelNotification.notificationObj.lastMessageDelieveredToCustomer[staffCustomer.id]\" style=\"margin-left: 2px;margin-top: -3px;\"><img src=\"angulr/img/build/chat/delieveredToReceiver.png\"/></div>\n" +
    "                                                \n" +
    "                                                <!--<div ng-show=\"!hotelNotification.notificationObj.lastMessageSeenByCustomer[staffCustomer.id] && !hotelNotification.notificationObj.lastMessageDelieveredToCustomer[staffCustomer.id]\" style=\"margin-left: 2px;margin-top: -3px;\"><img src=\"angulr/img/build/chat/delieveredToServer.png\"/></div>-->\n" +
    "                                                \n" +
    "                                                {{hotelNotification.notificationObj.lastMessagesToMe[staffCustomer.id]}}\n" +
    "                                            </a>\n" +
    "                                        </small>\n" +
    "        \n" +
    "                                        <a href ui-sref=\"app.chat({receiverId: staffCustomer.id})\" class=\"chatListCustomerName\">\n" +
    "                                            {{hotelState.currentHotel.name}}\n" +
    "                                            <span class=\"label bg-orange hotelStaff inline\">{{::'system.hotelStaff' | translate}}</span>\n" +
    "                                        </a>\n" +
    "                                    </div>\n" +
    "                                </div>\n" +
    "                            </a>\n" +
    "                        </li>\n" +
    "\n" +
    "                    </ul>\n" +
    "\n" +
    "                    \n" +
    "                    <ul class=\"list-group list-group-lg m-b-none\" ng-repeat=\"(key, nextCustomer) in localState.filteredHotelCustomers | orderBy: 'lastMessageTimeToMe':true track by nextCustomer.id\" >\n" +
    "                    \n" +
    "                        <li class=\"list-group-item chatListCol\">\n" +
    "                            <a href ui-sref=\"app.chat({receiverId: nextCustomer.id})\" style=\"display: flex; display: -webkit-flex;display: -moz-flex;display: -ms-flexbox;\">\n" +
    "                                <div ng-click=\"clickLoading(null, null, '#/app/chat/'+nextCustomer.id)\" style=\"cursor: pointer;\">\n" +
    "                                    <a href ui-sref=\"app.user({userId: nextCustomer.id})\" class=\"avatar thumb-sm m-r\">\n" +
    "                                        <!--<img src=\"{{::getProfileImageUrl(nextCustomer.id)}}\" class=\"r r-2x\">-->\n" +
    "                                        <img ng-src=\"{{nextCustomer.avatarUrl}}\" class=\"r r-2x\">\n" +
    "                                        <i class=\"on md b-white right customerOnlineStatus\" ng-show=\"hotelNotification.notificationObj.hotelOnlineGuestIds[nextCustomer.id]\"></i>\n" +
    "                                        <i class=\"offline md b-white right customerOnlineStatus\" ng-hide=\"hotelNotification.notificationObj.hotelOnlineGuestIds[nextCustomer.id]\"></i>\n" +
    "                                    </a>\n" +
    "                                    <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" ng-class=\"hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]? ' unreadMessageTime text-muted chatMessageTime': 'text-muted chatMessageTime' \">\n" +
    "                                        {{hotelNotification.notificationObj.lastMessageTimesToMe[nextCustomer.id]}}\n" +
    "                                    </a>\n" +
    "                                    <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" ng-class=\"hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]? ' unreadMessageTime text-muted chatMessageArrow': 'text-muted chatMessageArrow' \" ui-toggle-class=\"show\">\n" +
    "                                        <i class=\"fa fa-angle-right\"></i>\n" +
    "                                    </a>\n" +
    "                                    <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" class=\"text-muted unreadMessagesCounter\" ui-toggle-class=\"show\">\n" +
    "                                         <span style=\"margin-left: 4px;\" class=\"badge bg-success\" ng-show=\"hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]\">\n" +
    "                                          +{{hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]}}\n" +
    "                                        </span>\n" +
    "                                    </a>\n" +
    "                                    \n" +
    "                                    <div class=\"chatUserInfo\">\n" +
    "\n" +
    "                                        <small class=\"text-muted clear text-ellipsis lastMessageFrom\">\n" +
    "                                            <!-- eugen: ng-class=\"unreadChatProSenderCount[nextCustomer.id]? 'unreadChatMessage':''\" -->\n" +
    "                                            <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" class=\"text-ellipsis lastChatMessagesToMe\">\n" +
    "                                                <div ng-show=\"hotelNotification.notificationObj.lastMessageSeenByCustomer[nextCustomer.id]\" style=\"margin-left: 2px;margin-top: -2px;\"><img src=\"angulr/img/build/chat/seenByReceiver.png\"/></div>\n" +
    "                                                <div ng-show=\"!hotelNotification.notificationObj.lastMessageSeenByCustomer[nextCustomer.id] && hotelNotification.notificationObj.lastMessageDelieveredToCustomer[nextCustomer.id]\" style=\"margin-left: 2px;margin-top: -2px;\"><img src=\"angulr/img/build/chat/delieveredToReceiver.png\"/></div>\n" +
    "                                                \n" +
    "                                                <!--<div ng-show=\"hotelNotification.notificationObj.lastMessagesToMe[nextCustomer.id] && !hotelNotification.notificationObj.lastMessageSeenByCustomer[nextCustomer.id] && !hotelNotification.notificationObj.lastMessageDelieveredToCustomer[nextCustomer.id]\" style=\"margin-left: 2px;margin-top: -2px;\"><img src=\"angulr/img/build/chat/delieveredToServer.png\"/></div>-->\n" +
    "                                                \n" +
    "                                                {{hotelNotification.notificationObj.lastMessagesToMe[nextCustomer.id]}}\n" +
    "                                            </a>  \n" +
    "                                        </small>\n" +
    "            \n" +
    "                                        <a href ui-sref=\"app.chat({receiverId: nextCustomer.id})\" class=\"chatListCustomerName\">\n" +
    "                                            {{nextCustomer.firstName}} {{nextCustomer.lastName}}\n" +
    "                                        </a>\n" +
    "                                   </div>\n" +
    "                                </div>\n" +
    "                            </a>\n" +
    "                        </li>\n" +
    "                        \n" +
    "                    </ul>\n" +
    "                    \n" +
    "                </div>\n" +
    "                \n" +
    "                <!-- (OUTER) CONTACTS THAT ARE NOT IN HOTEL -->\n" +
    "\n" +
    "                <div ng-show=\"localState.hotelScope && localState.filteredOutOfHotelContactCustomers.length>0\">\n" +
    "                    <div class=\"panel-heading wrapper b-b b-light\">\n" +
    "                        <h4 class=\"font-thin m-t-none m-b-none text-muted\" ng-show=\"hotelScope && localState.filteredOutOfHotelContactCustomers.length>0\">{{::'page.chat.notHotelPartners' | translate }}</h4>\n" +
    "                        <h4 class=\"font-thin m-t-none m-b-none text-muted\" ng-show=\"!hotelScope\">{{::'page.chat.allYourChatPartners' | translate }}</h4>\n" +
    "                    </div>\n" +
    "\n" +
    "                    <span ng-show=\"localState.filteredOutOfHotelContactCustomers.length==0\">{{::'page.chat.noPartnerFound' | translate }}</span>\n" +
    "                    \n" +
    "                    <ul class=\"list-group list-group-lg m-b-none\" ng-repeat=\"(key, nextCustomer) in localState.filteredOutOfHotelContactCustomers | orderBy: 'lastMessageTimeToMe':true  track by nextCustomer.id\" >\n" +
    "    \n" +
    "                        <li class=\"list-group-item chatListCol\">\n" +
    "                            <a href ui-sref=\"app.chat({receiverId: nextCustomer.id})\">\n" +
    "                                <div ng-click=\"clickLoading(null, null, '#/app/chat/'+nextCustomer.id)\" style=\"cursor: pointer;\">\n" +
    "                                    <a href ui-sref=\"app.user({userId: nextCustomer.id})\" class=\"avatar thumb-sm m-r\">\n" +
    "                                        <!--<img src=\"{{getProfileImageUrl(nextCustomer.id)}}\" class=\"r r-2x\">-->\n" +
    "                                        <img ng-src=\"{{nextCustomer.avatarUrl}}\" class=\"r r-2x\">\n" +
    "                                        <i class=\"on md b-white right customerOnlineStatus\" ng-show=\"hotelNotification.notificationObj.hotelOnlineGuestIds[nextCustomer.id]\"></i>\n" +
    "                                        <i class=\"offline md b-white right customerOnlineStatus\" ng-hide=\"hotelNotification.notificationObj.hotelOnlineGuestIds[nextCustomer.id]\"></i>\n" +
    "                                    </a>\n" +
    "                                    <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" ng-class=\"hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]? ' unreadMessageTime text-muted chatMessageTime': 'text-muted chatMessageTime' \">\n" +
    "                                        {{hotelNotification.notificationObj.lastMessageTimesToMe[nextCustomer.id]}}\n" +
    "                                    </a>\n" +
    "                                    <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" ng-class=\"hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]? ' unreadMessageTime text-muted chatMessageArrow': 'text-muted chatMessageArrow' \" ui-toggle-class=\"show\">\n" +
    "                                        <i class=\"fa fa-angle-right\"></i>\n" +
    "                                    </a>\n" +
    "                                    <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" class=\"text-muted unreadMessagesCounter\" ui-toggle-class=\"show\">\n" +
    "                                             <span style=\"margin-left: 4px;\" class=\"badge bg-success\" ng-show=\"hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]\">\n" +
    "                                              +{{hotelNotification.notificationObj.unreadChatProSenderCount[nextCustomer.id]}}\n" +
    "                                            </span>\n" +
    "                                    </a>\n" +
    "                                    \n" +
    "                                    <div class=\"chatUserInfo\">\n" +
    "\n" +
    "                                        <small class=\"text-muted clear text-ellipsis lastMessageFrom\">\n" +
    "                                            <!-- eugen: ng-class=\"unreadChatProSenderCount[nextCustomer.id]? 'unreadChatMessage':''\" -->\n" +
    "                                            <a ui-sref=\"app.chat({receiverId: nextCustomer.id})\" class=\"lastChatMessagesToMe text-ellipsis\">\n" +
    "                                                <div ng-show=\"hotelNotification.notificationObj.lastMessageSeenByCustomer[nextCustomer.id]\" style=\"margin-left: 2px;margin-top: -2px;\"><img src=\"angulr/img/build/chat/seenByReceiver.png\"/></div>\n" +
    "                                                <div ng-show=\"!hotelNotification.notificationObj.lastMessageSeenByCustomer[nextCustomer.id] && hotelNotification.notificationObj.lastMessageDelieveredToCustomer[nextCustomer.id]\" style=\"margin-left: 2px;margin-top: -2px;\"><img src=\"angulr/img/build/chat/delieveredToReceiver.png\"/></div>\n" +
    "                                                \n" +
    "                                                <!--<div ng-show=\"hotelNotification.notificationObj.lastMessagesToMe[nextCustomer.id] && !hotelNotification.notificationObj.lastMessageSeenByCustomer[nextCustomer.id] && !hotelNotification.notificationObj.lastMessageDelieveredToCustomer[nextCustomer.id]\" style=\"margin-left: 2px;margin-top: -2px;\"><img src=\"angulr/img/build/chat/delieveredToServer.png\"/></div>-->\n" +
    "                                                {{hotelNotification.notificationObj.lastMessagesToMe[nextCustomer.id]}}\n" +
    "                                            </a>\n" +
    "                                        </small>\n" +
    "                \n" +
    "                                        <a href ui-sref=\"app.chat({receiverId: nextCustomer.id})\" class=\"chatListCustomerName\">\n" +
    "                                            {{nextCustomer.firstName}} {{nextCustomer.lastName}}\n" +
    "                                        </a>\n" +
    "                                 </div>\n" +
    "                                </div>\n" +
    "                            </a>\n" +
    "                        </li>\n" +
    "                            \n" +
    "                    </ul>\n" +
    "                </div>\n" +
    "\n" +
    "                <!-- (ALL) CONTACTS [IGNORE HOTEL] -->\n" +
    "                \n" +
    "                <div ng-show=\"!localState.hotelScope\">\n" +
    "\n" +
    "                    <div class=\"panel-heading wrapper b-b b-light\">\n" +
    "                        <!--<h4 class=\"font-thin m-t-none m-b-none text-muted\" ng-show=\"app.header.tabIndex==1 && localState.filteredAllContactCustomers.length>0\">{{::'page.chat.notHotelPartners' | translate }}</h4>-->\n" +
    "                        <h4 class=\"font-thin m-t-none m-b-none text-muted\" style=\"border-bottom: 0;\" ng-show=\"!hotelScope\">{{::'page.chat.allYourChatPartners' | translate }}</h4>\n" +
    "                    </div>\n" +
    "\n" +
    "                    <div class=\"nothingFoundMsg\" ng-show=\"localState.noContactFound || localState.filteredAllContactCustomers.length==0\">{{::'page.chat.noPartnerFound' | translate}}<br>{{::'page.chat.tryCheckin' | translate}}</div>\n" +
    "\n" +
    "                    <ul class=\"list-group list-group-lg m-b-none\" ng-repeat=\"(key, nextCustomer) in localState.filteredAllContactCustomers | orderBy: 'lastMessageTimeToMe':true track by nextCustomer.id\" >\n" +
    "\n" +
    "                        <div data-ng-include=\" 'angulr/tpl/hotel/blocks/chatListCustomer.html' \" />\n" +
    "\n" +
    "                    </ul>\n" +
    "                    \n" +
    "                    \n" +
    "                </div>\n" +
    "                \n" +
    "                <!-- OTHER VIP Contacts in system-->\n" +
    "                \n" +
    "                <div class=\"vipCustomers\" ng-show=\"!localState.hotelScope\">\n" +
    "\n" +
    "                    <accordion close-others=\"oneAtATime\">\n" +
    "\n" +
    "                        <accordion-group is-open=\"accordionStatus.chatVipOpen\" is-disabled=\"accordionStatus.isChatVipDisabled\" ng-click=\"loadVipChat();\">\n" +
    "\n" +
    "                            <accordion-heading >\n" +
    "                                <div class=\"headerAccordion\" ng-click=\"switchVipCustomers();\">\n" +
    "                                    <i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.chatVipOpen, 'fa-angle-right': !accordionStatus.chatVipOpen}\"></i>\n" +
    "                                    <!--<div class=\"panel-heading wrapper b-b b-light\">-->\n" +
    "                                    <h4 class=\"font-thin m-t-none m-b-none text-muted\" style=\"color: #f1592a;\">\n" +
    "                                        {{::'page.chat.allChatCustomers' | translate }}\n" +
    "                                        <span ng-show=\"accordionStatus.chatVipOpen && localState.filterCity!='-1' && (!localState.filterHotelId || localState.filterHotelId=='-1' || localState.filterHotelId==-1)\">in {{localState.filterCity}}</span>\n" +
    "                                        <span ng-show=\"accordionStatus.chatVipOpen && (localState.filterHotelId && localState.filterHotelId!='-1' && localState.filterHotelId!=-1 && localState.selectedFilterHotel)\">in {{localState.selectedFilterHotel.name}}</span>\n" +
    "                                        <img src=\"angulr/icons/loader.gif\" ng-show=\"localState.showAllCustomersLoading && accordionStatus.chatVipOpen\"></h4>\n" +
    "                                    <!--</div>-->\n" +
    "                                </div>\n" +
    "                            </accordion-heading>\n" +
    "\n" +
    "                            <ul class=\"list-group list-group-lg m-b-none\" ng-repeat=\"(key, nextCustomer) in localState.filteredOtherCustomers | orderBy: 'city':false  track by nextCustomer.id\" >\n" +
    "\n" +
    "                                <div data-ng-include=\" 'angulr/tpl/hotel/blocks/chatListCustomer.html' \" />\n" +
    "\n" +
    "                            </ul>\n" +
    "                            \n" +
    "                            <div ng-show=\"localState.filteredOtherCustomers.length>=25\" style=\"width: 100%;\" class=\"myCenter\">\n" +
    "                                <a href=\"#\"  ng-click=\"loadMoreVip();\"><b>more...</b></a>\n" +
    "\n" +
    "                            </div>\n" +
    "\n" +
    "                            <div class=\"nothingFoundMsg\" ng-show=\"localState.noOtherContactFound\">{{::'page.chat.noOuterContactsFound' | translate}}</div>\n" +
    "\n" +
    "\n" +
    "                        </accordion-group>\n" +
    "                    </accordion>\n" +
    "                    \n" +
    "                </div>\n" +
    "               \n" +
    "            </div>\n" +
    "            \n" +
    "        </div>\n" +
    "        \n" +
    "    </div>\n" +
    "    \n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/page_checkIn.html",
    "<div ng-controller=\"CheckInController\" ng-init=\"\n" +
    "app.hideAside = true; \n" +
    "app.hideFooter = true;\n" +
    "app.header.showTab = true;\n" +
    "app.header.tabIndex = 0;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\" style=\"border-color: transparent;min-height: 600px;\" class=\"myCenter\"> \n" +
    "    \n" +
    "    <div class=\"panel panel-default\" id=\"checkinPanel\" style=\"/*border-color: transparent;*/border-color: #fff;box-shadow:none;-webkit-box-shadow:none;background-color: inherit;\"> <!-- ng-show=\"localState.ready\" -->\n" +
    "      \n" +
    "        <!--<div class=\"panel-heading\">-->\n" +
    "        <!--<h3 class=\"panel-title\">{{'page.checkin.title' | translate}} ({{'page.checkin.askReception' | translate}})</h3>-->\n" +
    "      <!--</div>-->\n" +
    "        \n" +
    "        <div class=\"panel-body\" id=\"checkinBody\" style=\"border-color: transparent; padding: 5px;\">\n" +
    "\n" +
    "          <!--<div id=\"langDiv\" ng-style=\" ::isSmartDevice && {'width': '100%'}\" class=\"container w-xxl w-auto-xs hideOnFocus myFlex\" style=\"justify-content: space-between; padding: 0;\">-->\n" +
    "\n" +
    "              <!--<div class=\"text-center\" ui-sref=\"access.hotelLogin\" style=\"padding: 5px;\">-->\n" +
    "                  <!--<a id=\"hotelLoginId\" ui-sref=\"access.hotelLogin\" style=\"white-space: nowrap;\">{{'page.login.hotelLoginPreview' | translate }} <span style=\"text-decoration: underline;\">{{'page.login.hotelLoginLink' | translate}}</span></a>-->\n" +
    "              <!--</div>-->\n" +
    "\n" +
    "              <!--<div style=\"margin-top: 5px;\" isteven-multi-select id=\"selectSystemLanguages\" input-model=\"localState.availableSystemLanguages\" output-model=\"localState.selectSystemLanguage\" button-label=\"icon langKeyLabel\" item-label=\"icon name\" tick-property=\"ticked\" max-labels=\"5\" max-height=\"320px\" search-property=\"name\" output-properties=\"name\" helper-elements=\"filter\" selection-mode=\"single\"></div>-->\n" +
    "\n" +
    "              <!--</div>-->\n" +
    "              \n" +
    "              <!--<div class=\"text-center\" ui-sref=\"access.hotelLogin\" style=\"padding: 5px;\">-->\n" +
    "                  <!--<a id=\"hotelLoginId\" ui-sref=\"access.hotelLogin\" style=\"white-space: nowrap;\">{{'page.login.hotelLoginPreview' | translate }} <span style=\"text-decoration: underline;\">{{'page.login.hotelLoginLink' | translate}}</span></a>-->\n" +
    "              <!--</div>-->\n" +
    "              \n" +
    "              <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "    \n" +
    "              <!--<div class=\"b-b pull-in hideOnFocus\" style=\"margin-top: 5px;\"></div>-->\n" +
    "    \n" +
    "              <!--<button id=\"sendButton\" class=\"button-primary\" ng-click=\"sendPush();\">Send me a push notification</button>-->\n" +
    "\n" +
    "\n" +
    "              <div id=\"checkinHeader\" class=\"myCenter text-orange hideOnFocus\" style=\"margin-bottom: 15px;\">\n" +
    "                  <!--<div style=\"white-space: pre-line; font-size: 20px; font-weight: bolder; text-align: center;\">{{'page.checkin.topHeader' | translate}}</div>-->\n" +
    "    \n" +
    "                  <div data-ng-controller=\"SlideCtrl\" style=\"width: 100%;\" >\n" +
    "                      <div class=\"carousel-demo\" style=\"width: 100%;\">\n" +
    "                          <!--index: <input type=\"number\" class=\"tiny\" ng-model=\"carouselIndex2\">-->\n" +
    "                          <ul rn-carousel rn-carousel-index=\"carouselIndex2\" rn-carousel-auto-slide=\"100\" rn-carousel-pause-on-hover  class=\"carousel2 \">\n" +
    "                              <!--rn-carousel-buffered-->\n" +
    "                              <li ng-repeat=\"slide in slides2 track by slide.id\" ng-class=\"'id-' + slide.id\">\n" +
    "                                  <div  style=\"font-size: 20px; text-align: center; position: absolute; height: 55px; margin-top: -55px; width: 100%;\">\n" +
    "                                      {{ slide.label }}\n" +
    "                                  </div>\n" +
    "                                  <div ng-style=\"{'background-image': 'url(' + slide.img + ')', 'color' : slide.color }\" class=\"bgimage\">\n" +
    "                                      \n" +
    "                                  </div>\n" +
    "                              </li>\n" +
    "                          </ul>\n" +
    "                          <div rn-carousel-indicators ng-if=\"slides2.length > 1\" slides=\"slides2\" rn-carousel-index=\"carouselIndex2\">\n" +
    "                              \n" +
    "                          </div>\n" +
    "                      </div>\n" +
    "                  </div>\n" +
    "                  \n" +
    "              </div>\n" +
    "    \n" +
    "              <form class=\"form-horizontal\" >\n" +
    "              \n" +
    "                    <div class=\"form-group\">\n" +
    "                        \n" +
    "                        <div class=\"col-lg-12\" ng-class=\"{'notDisplay': localState.hideCodeInput}\">\n" +
    "    \n" +
    "                            \n" +
    "                                <div id=\"checkinCode\" ng-class=\"{'unvisible': localState.selectedFilterHotel}\" class=\"myCenter\">\n" +
    "                                     \n" +
    "                                    <div style=\"margin-bottom: 25px;width: 90%;\">\n" +
    "                                        <input ng-change=\"onHotelCodeInput();\" autocomplete=\"off\" ng-focus=\"hideFocus('none');localState.hotelcodeFocus=true; \" ng-blur=\"hideFocus('flex');localState.hotelcodeFocus=false\" type=\"text\" class=\"form-control\" ng-model=\"localState.selectedHotelCode\" id=\"hotelCode\" placeholder=\"{{'page.checkin.hotelCode' | translate}}\" style=\"height: 80px;font-size: 2em;display: block;margin: 0 auto;text-align: center;border-radius: 10px;outline: 0;\">\n" +
    "                                        <div>\n" +
    "                                            {{'page.checkin.askReception' | translate}}\n" +
    "                                        </div>\n" +
    "                                        <!--<button style=\"margin-top: 15px;\" ng-click=\"onCheckinSubmit()\" ng-disabled=\"localState.disableCheckin\" class=\"btn btn-lg btn-block btn-orange\" >{{localState.selectedFilterHotel.name}} {{'page.checkin.doCheckIn' | translate }}</button>-->\n" +
    "    \n" +
    "                                    </div>\n" +
    "    \n" +
    "                                    <i style=\"margin-top: -4px;padding-left: 8px;padding-right: 5px;position: absolute;\" class=\"fa fa-info-circle navIconItem hotelCitySelectInfo\" ng-click=\"openHotelCodePopup()\"></i>\n" +
    "    \n" +
    "                                </div>\n" +
    "                                \n" +
    "                            \n" +
    "                            \n" +
    "                                <!--<div ng-show=\"localState.selectedFilterHotel\">-->\n" +
    "                                    <!--<div data-ng-include=\" 'angulr/tpl/hotel/blocks/showHotelBlock.html' \" />-->\n" +
    "                                <!--</div>-->\n" +
    "                                \n" +
    "                        </div>\n" +
    "                        \n" +
    "                    </div>\n" +
    "              \n" +
    "                    <!--<div class=\"line b-b line-dashed line-lg pull-in\"></div>-->\n" +
    "\n" +
    "                    <div class=\"hiddenContent\">\n" +
    "                    \n" +
    "                        <div ng-style=\"!localState.showManualCheckin && {'visibilty':'hidden'} \">\n" +
    "    \n" +
    "                            <div layout=\"row\" style=\"justify-content: center;margin-bottom: 15px;\">\n" +
    "                                \n" +
    "                                <div style=\"width: 100%;\">\n" +
    "                                    <div data-ng-include=\" 'angulr/tpl/hotel/blocks/selectHotelCityBlock.html' \" />\n" +
    "                                </div>\n" +
    "    \n" +
    "                                <!--<div class=\"text-center navbar bg-light lt b-t\" ng-show=\"(localState.selectedFilterHotel)\" style=\"margin-top: 10px;\">-->\n" +
    "                                    <!--<button ng-click=\"onCheckinSubmit()\" ng-disabled=\"localState.disableCheckin\" class=\"btn btn-lg btn-block btn-orange hiddenContent\">{{localState.selectedFilterHotel.name}} {{'page.checkin.doCheckIn' | translate }}</button>-->\n" +
    "                                <!--</div>-->\n" +
    "                                \n" +
    "                                <!--<div ng-style=\"!localState.selectedFilterHotel && {'visibility' : 'hidden'} \" style=\"margin-top: 39px;margin-left: -39px;\">-->\n" +
    "                                    <!--<button ng-click=\"onCheckinSubmit()\" class=\"btn btn-sm  btn-orange\" tabindex=\"0\" aria-disabled=\"false\">-->\n" +
    "                                         <!-- -->\n" +
    "                                        <!--<i class=\"fa fa-sign-in\" style=\"font-size: 20px;\" ></i>-->\n" +
    "                                    <!--</button>-->\n" +
    "                                <!--</div>-->\n" +
    "    \n" +
    "                               \n" +
    "                                \n" +
    "                            </div>\n" +
    "    \n" +
    "                            <div  ng-repeat=\"(key, previewHotel) in localState.filterHotels | orderBy: 'id':true  track by previewHotel.id\" style=\"margin: 5px;\">\n" +
    "    \n" +
    "                                <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showHotelPreviewBlock.html' \" />\n" +
    "    \n" +
    "                            </div>\n" +
    "    \n" +
    "                            <div ng-style=\" ::!isSmartDevice && {'height':'150px'}\"></div>\n" +
    "    \n" +
    "                            \n" +
    "                            \n" +
    "                            \n" +
    "                            <!--<div class=\"text-center app-footer navbar navbar-fixed-bottom bg-light lt b-t\" ng-show=\"(localState.selectedFilterHotel || localState.selectedHotelCode || localState.hotelcodeFocus)\" ng-style=\" ::(isSmartDevice && {'position': 'fixed', 'margin-top': '8px', 'margin-bottom': '7px'}) || (!isSmartDevice && { 'position': 'relative', 'margin-top': '8px', 'margin-left': '0'})\">-->\n" +
    "                                <!--<button ng-click=\"onCheckinSubmit()\" ng-disabled=\"localState.disableCheckin\" class=\"btn btn-lg btn-block btn-orange hiddenContent\">{{localState.selectedFilterHotel.name}} {{'page.checkin.doCheckIn' | translate }}</button>-->\n" +
    "                            <!--</div>-->\n" +
    "                            <!--<div class=\" text-center app-footer navbar navbar-fixed-bottom bg-light lt b-t\" ng-style=\" ::(isSmartDevice && {'margin': '5px', 'position': 'fixed', 'margin-top': '8px', 'margin-bottom': '2px'}) || (!isSmartDevice && { 'position': 'initial', 'margin-top': '8px', 'margin-left': '0', 'background-color': 'transparent'})\" style=\"background-color: #fff;\">-->\n" +
    "                                <!--&lt;!&ndash;ng-hide=\"(localState.selectedFilterHotel || localState.selectedHotelCode || localState.hotelcodeFocus)\" >&ndash;&gt;-->\n" +
    "                                <!--<button ng-click=\"onCheckinSubmit('demo')\" ng-disabled=\"localState.disableCheckin || mainState.disableCheckin\" class=\"btn btn-sm  btn-blue hiddenContent\">-->\n" +
    "                                    <!--&lt;!&ndash;{{'page.checkin.demoCheckin' | translate }}&ndash;&gt;-->\n" +
    "                                    <!--Demo Hotel-->\n" +
    "                                <!--</button>-->\n" +
    "                            <!--</div> -->\n" +
    "                    \n" +
    "\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    " \n" +
    "              </form>\n" +
    "          \n" +
    "           \n" +
    "        </div>\n" +
    "\n" +
    "        <!--<div style=\"position: fixed; bottom: 13px; width:100%\" class=\"hiddenContent\">-->\n" +
    "            <!-- -->\n" +
    "            <!--<div class=\" b-b line-lg pull-in\"></div>-->\n" +
    "\n" +
    "            <!--<div style=\"width: 100%; margin-top: 18px;\">-->\n" +
    "                <!--<button ng-click=\"onCheckinSubmit('demo')\" ng-disabled=\"localState.disableCheckin\" class=\"btn btn-lg btn-block btn-blue\">{{'page.checkin.demoCheckin' | translate }}</button>-->\n" +
    "            <!--</div>-->\n" +
    "        <!--</div>-->\n" +
    "        \n" +
    "        \n" +
    "     \n" +
    "    \n" +
    "    \n" +
    "    </div> \n" +
    "</div> ");
  $templateCache.put("angulr/tpl/hotel/page_dse.html",
    "<div class=\"hbox hbox-auto-xs\" ng-init=\"\n" +
    "  app.settings.asideFixed = true;\n" +
    "  app.settings.asideDock = false;\n" +
    "  app.settings.container = false;\n" +
    "  app.hideAside = false;\n" +
    "  app.hideFooter = false;\n" +
    "  app.header.showTab = false;\n" +
    "  app.header.showBackArrow = true;\n" +
    "  app.rootSettings.darkBg = true;\n" +
    "  \">\n" +
    "\n" +
    "	<div class=\"bg-light lter b-b wrapper-md\">\n" +
    "		<h1 class=\"m-n font-thin h3\">hotelico.de Datenschutzerkl&auml;rung</h1>\n" +
    "	</div>\n" +
    "	<div class=\"wrapper-md\">\n" +
    "		<div class=\"row\">\n" +
    "			<div style=\"padding: 5px;\">\n" +
    "				<!--class=\"col-sm-9\">-->\n" +
    "\n" +
    "				<p class=\"c2\"><span class=\"c10 c17\">Hotelico ist sich der Bedeutung der von Ihnen &ndash; ihren Kunden &ndash; &uuml;bermittelten personenbezogenen Daten bewusst und behandelt s&auml;mtliche Informationen streng vertraulich. Mehr &uuml;ber uns erfahren Sie im Impressum, das Sie auf dieser Internet-Pr&auml;senz ebenfalls leicht erreichen. Die nachfolgende Erkl&auml;rung soll allgemein einen &Uuml;berblick dar&uuml;ber geben, wie wir den Schutz der pers&ouml;nlichen Daten unserer Kunden gew&auml;hrleisten.</span></p><p class=\"c8\"><span class=\"c1\">&sect; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c6\">Grundsatz</span></p><p class=\"c12\"><span class=\"c10\">Unter keinen Umst&auml;nden werden von Hotelico Kundendaten zu Werbezwecken an Dritte vermietet, verkauft oder aus sonstigen Gr&uuml;nden ohne Benachrichtigung und ausdr&uuml;ckliche Einwilligung des Kunden weitergegeben.</span></p><p class=\"c5\"><span class=\"c1\">&sect; 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c6\">Datenerfassung</span></p><ol class=\"c3 lst-kix_list_1-0 start\" start=\"1\"><li class=\"c11 c15\"><span class=\"c10\">Es steht dem Nutzer frei, sich als Gast anzumelden und auf die Preisgabe seiner Identit&auml;t g&auml;nzlich zu verzichten; gegebenenfalls kann er dann nicht von allen Leistungen profitieren, die wir ihm auf der Plattform zur Verf&uuml;gung stellen. Im &Uuml;brigen kann er sich unter einem Pseudonym registrieren.</span></li><li class=\"c11 c15\"><span class=\"c10\">Von Hotelico werden nur die personenbezogenen Daten des Kunden erfasst, die zur Durchf&uuml;hrung der angebotenen Dienstleistungen notwendig sind. Es kann notwendig sein, diese Daten mit solchen zu kombinieren, &uuml;ber die wir bereits verf&uuml;gen.</span></li><li class=\"c11 c15\"><span class=\"c10\">Im &Uuml;brigen erfolgt die Erhebung der Daten ausschlie&szlig;lich mit ausdr&uuml;cklicher Einwilligung des betroffenen Kunden. Dieser wird vor der Abgabe der Einwilligung zur Datenerfassung &uuml;ber den Zweck der Speicherung und die weitere Verwendung der Daten informiert. Es werden in jedem Fall nur die Daten gespeichert, die vom Kunden auf der Website oder unter Verwendung seines mobilen Endger&auml;tes eingegeben werden.</span></li></ol><p class=\"c5\"><span class=\"c1\">&sect; 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c6\">Daten&uuml;bertragung / -weiterleitung</span></p><p class=\"c12\"><span class=\"c10\">F&uuml;r die &Uuml;bertragung aller vom Kunden eingegebenen sicherheitsrelevanten Daten &uuml;ber das Internet, die aufgrund dieser Erkl&auml;rung erfasst werden, verwendet Hotelico jeweils aktuelle Technologien, die einen Schutz vor unbefugtem Zugriff durch Dritte gew&auml;hrleisten k&ouml;nnen.</span></p><p class=\"c5\"><span class=\"c1\">&sect; 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c6\">Speicherung, Verwendung und notwendige Weitergabe der Daten</span></p><p class=\"c12\"><span class=\"c10\">Die Speicherung der personenbezogenen Kundendaten erfolgt auf Rechnersystemen, deren Sicherheitsstandards stets auf dem Stand der Technik gehalten werden und deren Zugriff durch geeignete Sicherheitsmechanismen gesch&uuml;tzt ist. Die Verwendung und Weitergabe der Daten erfolgt ausschlie&szlig;lich zur Erf&uuml;llung der vereinbarten Dienstleistungen und bezieht sich immer nur auf die Daten, die zur weiteren Bearbeitung notwendig sind.</span></p><p class=\"c5\"><span class=\"c1\">&sect; 5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c6\">Cookies</span></p><ol class=\"c3 lst-kix_list_2-0 start\" start=\"1\"><li class=\"c11\"><span class=\"c10\">Im Rahmen unserer Website k&ouml;nnen sogenannte Session-Cookies eingesetzt werden. Solche Cookies legen Daten zur technischen Steuerung im Speicher Ihres Browsers ab. Sie enthalten jedoch keine pers&ouml;nlichen Daten und werden nach dem Schlie&szlig;en Ihres Browsers wieder gel&ouml;scht. Wir legen gegebenenfalls auch Cookies auf Ihrem Computer ab, die nach Beendigung der Sitzung nicht gel&ouml;scht werden. Dieses Vorgehen erm&ouml;glicht es, dass Ihr Computer bei dem n&auml;chsten Besuch wieder erkannt wird. Solche Cookies erlauben es uns, die Website Ihren Bed&uuml;rfnissen anzupassen und Ihnen auf diese Weise einen besseren Dienst anzubieten.</span></li><li class=\"c11\"><span class=\"c10\">Sie k&ouml;nnen Ihren Browser so einstellen, dass er Cookies ablehnt oder Sie von deren Speicherung informiert werden.</span></li></ol><p class=\"c5\"><span class=\"c1\">&sect; 6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c6\">Belehrung &uuml;ber Auskunft, &Auml;nderung und L&ouml;schung der Daten</span></p><ol class=\"c3 lst-kix_list_3-0 start\" start=\"1\"><li class=\"c11\"><span class=\"c10\">Wir eben Ihnen gern unentgeltlich und in Schriftform Auskunft &uuml;ber Ihre bei uns gespeicherten personenbezogenen Daten. Jeder Kunde ist jederzeit berechtigt, kostenlos Auskunft &uuml;ber die bei Hotelico &uuml;ber ihn gespeicherten personenbezogenen Daten sowie die Art ihrer Verwendung zu verlangen. Ein entsprechendes Auskunftsverlangen ist an das Support Team von Hotelico zu stellen und wird unverz&uuml;glich schriftlich beantwortet. Die Ansprechpartner sind jeweils im Impressum benannt.</span></li><li class=\"c11\"><span class=\"c10\">Sie k&ouml;nnen jederzeit Ihr Einverst&auml;ndnis bez&uuml;glich der Speicherung Ihrer personenbezogenen Daten schriftlich oder elektronisch widerrufen. Auf Anforderung des Kunden kann &uuml;ber das Support Team jederzeit die &Auml;nderung und L&ouml;schung seiner bei Hotelico gespeicherten personenbezogenen Daten erfolgen.</span></li></ol><p class=\"c5\"><span class=\"c1\">&sect; 7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c6\">Sonstige Ma&szlig;nahmen zum Datenschutz</span></p><p class=\"c12\"><span class=\"c10\">S&auml;mtliche Mitarbeiter von Hotelico, die Zugriff auf die personenbezogenen Daten der Kunden nehmen, sind &uuml;ber die gesetzlichen Bestimmungen des Datenschutzes informiert und zur Verschwiegenheit verpflichtet. Eine Weitergabe der vertraulichen Kundendaten an &ouml;ffentliche Stellen erfolgt ausschlie&szlig;lich auf schriftliche Vorlage einer vollstreckbaren beh&ouml;rdlichen oder gerichtlichen Anordnung und nur soweit Hotelico hierzu gesetzlich verpflichtet ist.</span></p><p class=\"c5\"><span class=\"c1\">&sect; 8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c6\">Datenschutz Minderj&auml;hriger</span></p><p class=\"c12\"><span class=\"c10\">Das Angebot dieser Website richtet sich nicht an Minderj&auml;hrige. Wir gehen daher davon aus, dass uns keine personenbezogenen Daten dieser Altersgruppe &uuml;berlassen werden.</span></p><p class=\"c5\"><span class=\"c1\">&sect; 9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"c6\">&Auml;nderung der Datenschutzbestimmungen</span></p><p class=\"c12\"><span class=\"c10\">Hotelico beh&auml;lt sich vor, insbesondere aufgrund der Entwicklung neuer technischer Sicherheitsstandards, diese Datenschutzerkl&auml;rung zu &auml;ndern. Die &Auml;nderung wird an geeigneter Stelle durch einen deutlichen Hinweis bekannt gegeben.</span></p><div><p class=\"c13 c14\"><span class=\"c10\"></span></p><p class=\"c13\"><span class=\"c10\">-</span><span class=\"c0\">&nbsp;</span><span class=\"c0\">&nbsp;-</span></p><p class=\"c9\"><span class=\"c10\"></span></p></div>\n" +
    "			</div>\n" +
    "		</div>\n" +
    "\n" +
    "	</div>\n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/page_editActivity.html",
    "<div class=\"hbox hbox-auto-xs\" ng-controller=\"EditActivityContr\" ng-init=\"\n" +
    "  app.settings.asideFixed = true;\n" +
    "  app.settings.asideDock = false;\n" +
    "  app.settings.container = false;\n" +
    "  app.hideAside = false;\n" +
    "  app.hideFooter = false;\n" +
    "    app.header.showTab = false;\n" +
    "    app.header.showBackArrow = true;\n" +
    "    app.rootSettings.darkBg = true;\n" +
    "    \">\n" +
    "    \n" +
    "<div class=\"bg-light lter b-b wrapper-md\">\n" +
    "  <h1 class=\"m-n font-thin h3\">{{'page.activities.editTitle' | translate }} <span ng-show=\"showActivity\">: {{showActivity.title}}</span></h1>\n" +
    "</div>\n" +
    "<div class=\"wrapper-md\">\n" +
    "  <div class=\"row\">\n" +
    "    <div style=\"padding: 5px;\">\n" +
    "        <!--class=\"col-sm-9\">-->\n" +
    "\n" +
    "        <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "        \n" +
    "        <span  ng-if=\"!((hotelState.profileData.hotelStaff && hotelState.profileData.hotelId==showActivity.hotelId) || hotelState.profileData.admin)\">You are not a staff for the Hotel {{showActivity.hotelName}}!</span>\n" +
    "        \n" +
    "        <div data-ng-controller=\"activityCtrl\">\n" +
    "\n" +
    "            <div class=\"hotelEditElt\" ng-if=\"((hotelState.profileData.hotelStaff && hotelState.profileData.hotelId==showActivity.hotelId) || hotelState.profileData.admin)\" ng-show=\"showActivity.activityId\">\n" +
    "                 \n" +
    "                <accordion close-others=\"oneAtATime\">\n" +
    "                    <accordion-group is-open=\"accordionStatus.openEditActivities[showActivity.activityId]\" is-disabled=\"accordionStatus.isFirstDisabled\" class=\"b-info\">\n" +
    "                    <accordion-heading>\n" +
    "                    <i class=\"fa fa-edit\"></i>  &nbsp; {{'page.activities.editActivity' | translate }} <i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.openEditActivities[showActivity.activityId], 'fa-angle-right': !accordionStatus.openEditActivities[showActivity.activityId]}\"></i>\n" +
    "                    </accordion-heading>\n" +
    "                        <!--<accordion-heading>-->\n" +
    "                            <!--&lt;!&ndash;<i class=\"pull-right fa fa-angle-right\" ng-class=\"{'fa-angle-down': accordionStatus.infoHotelOpen, 'fa-angle-right': !accordionStatus.infoHotelOpen}\"></i>&ndash;&gt;-->\n" +
    "                            <!--<div class=\"text-center\">-->\n" +
    "                            <!--&lt;!&ndash;<i class=\"glyphicon glyphicon-align-justify\"></i> Offer Description&ndash;&gt;-->\n" +
    "                            <!--<button style=\"margin: 0;\" class=\"btn m-b-xs w-xs btn-orangeBorder btn-rounded\" ng-click=\"openEditActivity(showActivity.activityId)\"><span ng-show=\"accordionStatus.openEditActivities[showActivity.activityId]\">Cancel</span><span ng-hide=\"accordionStatus.openEditActivities[showActivity.activityId]\">Edit</span></button>-->\n" +
    "            <!-- -->\n" +
    "                            <!--</div>-->\n" +
    "                            <!--&lt;!&ndash;<i class=\"fa fa-pencil-square-o\"></i> &nbsp; {{::'page.hotel.updateHotelInfo' | translate }} &ndash;&gt;-->\n" +
    "                        <!--</accordion-heading>-->\n" +
    "        \n" +
    "                        <form class=\"m-b-none ng-pristine ng-valid\" ng-submit=\"submitActivityChange(showActivity)\" name=\"activityForm\">\n" +
    "        \n" +
    "                        <div class=\"form-group\">\n" +
    "                        <label>{{'page.activities.activityTitle' | translate}}</label>\n" +
    "                        <input type=\"text\" class=\"form-control\" ng-model=\"showActivity.title\" placeholder=\"{{'page.activities.activityTitle' | translate}}\" required>\n" +
    "        \n" +
    "                        </div>\n" +
    "        \n" +
    "        \n" +
    "                        <div class=\"form-group\" id=\"img{{showActivity.activityId}}\">\n" +
    "                        <label>{{::'page.activities.activityLogo' | translate}}</label>\n" +
    "        \n" +
    "                        <input ng-model=\"newActivityFile\" ngf-fix-orientation=\"true\"\n" +
    "                        onchange=\"angular.element(this).scope().newFile_changed(this, 'activity')\"\n" +
    "                        type=\"file\" accept=\"image/*\" />\n" +
    "                        <!--<input type=\"button\" ng-click=\"uploadFilesX()\">-->\n" +
    "                        </div>\n" +
    "        \n" +
    "        \n" +
    "                        <div class=\"form-group\">\n" +
    "                        <label>{{'page.activities.activityShortDescription' | translate}}</label>\n" +
    "                        <textarea class=\"form-control\" rows=\"5\" ng-model=\"showActivity.shortDescription\" placeholder=\"{{'page.activities.activityShortDescription' | translate}}\" required></textarea>\n" +
    "                        </div>\n" +
    "                        <div class=\"form-group\">\n" +
    "                        <label>{{'page.activities.activityDescription' | translate}}</label>\n" +
    "                        <div text-angular ng-model=\"showActivity.description\" class=\"btn-groups\"  ta-toolbar=\"[\n" +
    "                        ['bold', 'italics', 'underline', 'strikeThrough', 'ul', 'ol', 'redo', 'undo', 'clear'],\n" +
    "                        ['justifyLeft', 'justifyCenter', 'justifyRight', 'indent', 'outdent'],\n" +
    "                        ['html', 'insertImage','insertLink', 'insertVideo', 'wordcount', 'charcount']\n" +
    "                        ]\" required></div>\n" +
    "                        <!--<textarea class=\"form-control\" rows=\"5\" ng-model=\"newactivity.description\" placeholder=\"{{'page.activities.activityDescription' | translate}}\"></textarea>-->\n" +
    "                        </div>\n" +
    "                        <div class=\"form-group\">\n" +
    "                        <label>{{'page.activities.validFrom' | translate}}</label>\n" +
    "        \n" +
    "                        <div class=\"input-group\"  ng-controller=\"DatepickerCheckinCtrl\">\n" +
    "                        <input type=\"text\" placeholder=\"DD.MM.YYYY\"  class=\"form-control\" datepicker-popup=\"{{format}}\" ng-model=\"showActivity.validFrom\" is-open=\"opened\" datepicker-options=\"dateOptions\" ng-required=\"true\" close-text=\"Close\" required/>\n" +
    "                        <span class=\"input-group-btn\">\n" +
    "                        <button type=\"button\" class=\"btn btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n" +
    "                        </span>\n" +
    "                        </div>\n" +
    "        \n" +
    "                        </div>\n" +
    "                        <div class=\"form-group\">\n" +
    "                        <label>{{'page.activities.validTo' | translate}}</label>\n" +
    "                        <div class=\"input-group\"  ng-controller=\"DatepickerCheckinCtrl\">\n" +
    "                        <input type=\"text\" placeholder=\"DD.MM.YYYY\"  class=\"form-control\" datepicker-popup=\"{{format}}\" ng-model=\"showActivity.validTo\" is-open=\"opened\" datepicker-options=\"dateOptions\" ng-required=\"true\" close-text=\"Close\" required/>\n" +
    "                        <span class=\"input-group-btn\">\n" +
    "                        <button type=\"button\" class=\"btn btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n" +
    "                        </span>\n" +
    "                        </div>\n" +
    "                        </div>\n" +
    "                        <div class=\"form-group\">\n" +
    "                        <button type=\"submit\" class=\"btn btn-success\" ng-disabled=\"(showActivity.shortDescription.length > localState.maxActivityShortDescription) || showActivity.shortDescription.length == 0\">{{'page.activities.editActivity' | translate }}</button>\n" +
    "                         \n" +
    "                        <button style=\"width: 110px;\" class=\"btn btn-danger\" ng-click=\"removeActivity(showActivity.activityId)\"><i class=\"fa fa-trash-o\"></i>{{::'system.remove' | translate}}</button>\n" +
    "        \n" +
    "                        </div>\n" +
    "                        </form>\n" +
    "                    </accordion-group>\n" +
    "                </accordion>\n" +
    "            </div>\n" +
    "\n" +
    "            <div ng-show=\"localState.showActivityId && showActivity.activityId\">\n" +
    "\n" +
    "                <b>{{::'system.editPreview' | translate}}:</b>\n" +
    "\n" +
    "                <div class=\"panel panel-default\">\n" +
    "                    <div class=\"b-a panel-default\" style=\"min-height: 150px;\">\n" +
    "\n" +
    "                        <div>\n" +
    "                            <div class=\"item m-l-n-xxs m-r-n-xxs\">\n" +
    "                                <a ui-sref=\"app.editActivity({activityId:nextActivity.activityId})\">\n" +
    "                                    <img ng-src=\"{{showActivity.pictureUrl}}\" ng-show=\"showActivity.pictureUrl\" class=\"img-full\">\n" +
    "                                </a>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "\n" +
    "                        <div style=\"display: flex; display: -webkit-flex;display: -moz-flex;display: -ms-flexbox; justify-content: space-between; margin: 10px; font-size: 22px;\">\n" +
    "                            <a ui-sref=\"app.editActivity({activityId:nextActivity.activityId})\" class=\"text-lt\" style=\"font-weight: bold;\">\n" +
    "                                {{showActivity.title}}\n" +
    "                            </a>\n" +
    "                        </div>\n" +
    "\n" +
    "                        <div style=\"margin-left: 10px;margin-right: 10px;word-wrap: break-word;\">\n" +
    "                            <small class=\"text-muted clear text-ellipsis emphasize\" >{{showActivity.shortDescription}}</small>\n" +
    "\n" +
    "                        </div>\n" +
    "\n" +
    "                        <div  style=\"margin: 10px;word-wrap: break-word;\">\n" +
    "\n" +
    "\n" +
    "                            <div ng-bind-html=\"showActivity.description\"></div>\n" +
    "\n" +
    "                            <hr>\n" +
    "                            <!--<span>{{'page.activities.customerCounter' | translate}}: {{showActivity.customerCounter}}</span>-->\n" +
    "\n" +
    "                            <div style=\"margin-top: 5px;\" ng-show=\"(hotelState.profileData.hotelStaff || hotelState.profileData.admin)\">\n" +
    "                                <button style=\"width: 110px;\" class=\"btn m-b-xs btn-sm btn-info btn-addon\" ng-click=\"accordionStatus.openEditActivities[showActivity.activityId]=true;\"><i class=\"fa fa-edit\"></i>{{'system.edit' | translate}}</button>\n" +
    "                                <br/>\n" +
    "                                <button style=\"width: 110px;\" class=\"btn m-b-xs btn-sm btn-danger btn-addon\" ng-click=\"removeActivity(showActivity.activityId)\"><i class=\"fa fa-trash-o\"></i>{{'system.remove' | translate}}</button>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "                \n" +
    "            </div>\n" +
    "\n" +
    "        </div>\n" +
    "            \n" +
    "    </div>\n" +
    "    \n" +
    "  </div>\n" +
    "</div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_editHotel.html",
    "<div id=\"minPaddingPage\" ng-controller=\"HotelController\" class=\"bg-light lter b-b wrapper-md\" ng-init=\"\n" +
    "app.hideFooter = false;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = false;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "\n" +
    "  <div class=\"wrapper-md\" style=\"padding-top: 0;\" >\n" +
    "    \n" +
    "    <div class=\"row\">\n" +
    "      \n" +
    "      <div>\n" +
    "        <!--ng-class=\"::{'col-sm-9': !isSmartDevice}\">-->\n" +
    "\n" +
    "        <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "        <!--<button id=\"sendButton\" class=\"button-primary\" ng-click=\"send()\">Send me a push notification</button>-->\n" +
    "\n" +
    "        <!-- START HOTEL -->\n" +
    "        \n" +
    "        <div id=\"hotelPart\" ng-show=\"hotelState.profileData.checkedIn\" ng-controller=\"hotelCtrl\">\n" +
    "\n" +
    "            <!--<div data-ng-include=\" 'angulr/tpl/hotel/blocks/fullCheckinRequest.html' \" />-->\n" +
    "\n" +
    "            <!-- START HOTEL accordion -->\n" +
    "  \n" +
    "          <!--<div class=\"staffContent\" ng-if=\"(hotelState.profileData.hotelStaff  && hotelState.profileData.hotelId==showHotel.id|| hotelState.profileData.admin)\">-->\n" +
    "              <!--<div data-ng-include=\" 'angulr/tpl/hotel/blocks/editHotelAccardion.html' \" />-->\n" +
    "          <!--</div>-->\n" +
    "          <button ng-click=\"openModal('editHotel', showHotel.id)\" style=\"margin-bottom: 15px;\"  class=\"btn btn-lg btn-block btn-blue\">'{{showHotel.name}}' {{'system.edit' | translate }}</button>\n" +
    "\n" +
    "          <!-- / END hotel accordion -->\n" +
    "          <b>{{::'system.editPreview' | translate}}:</b>\n" +
    "\n" +
    "          <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showHotelBlock.html' \" />\n" +
    "\n" +
    "        </div>\n" +
    "        \n" +
    "        <!-- END HOTEL -->\n" +
    "        \n" +
    "      </div>\n" +
    "      \n" +
    "    </div>\n" +
    "    \n" +
    "  </div>\n" +
    "  \n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_feed.html",
    "<div class=\"bg-light lter b-b wrapper-md\" ng-init=\"\n" +
    "app.hideFooter = true;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\" ng-if=\"hotelState.profileData.hotelStaff || hotelState.profileData.admin\">\n" +
    "  <!--<h1 class=\"m-n font-thin h3\"></h1>-->\n" +
    "    <div class=\"bg-light lter b-b wrapper-md\">\n" +
    "        <h1 class=\"m-n font-thin h3\">{{hotelState.profileData.hotelName}} Feed</h1>\n" +
    "    </div>\n" +
    "<div class=\"wrapper-md\" ng-controller=\"FeedController\">\n" +
    "  <div class=\"row\">\n" +
    "\n" +
    "      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "\n" +
    "      <div ng-show=\"successMsg\" style=\"display: flex;justify-content: center; margin-bottom: 10px;\">\n" +
    "            <a ui-sref=\"app.hotel\" class=\"btn btn-sm btn-success\">{{'page.feedback.tohotel' | translate }}</a>\n" +
    "        </div>\n" +
    "        \n" +
    "        <div class=\"panel panel-default\">\n" +
    "            <div class=\"panel-body\" id=\"feedBody\">\n" +
    "\n" +
    "                <!--<div style=\"display: flex;\">-->\n" +
    "                    <label>{{localState.selectedFeedCustomers.length}} {{'page.feed.receivers' | translate }}:</label>\n" +
    "\n" +
    "                    <div isteven-multi-select id=\"feedCustomers\" input-model=\"localState.availableFeedCustomers\" output-model=\"localState.selectedFeedCustomers\" button-label=\"icon name\" item-label=\"icon name\" tick-property=\"ticked\" max-height=\"320px\" search-property=\"name\" output-properties=\"name id\" orientation=\"horizontal\" helper-elements=\"all none filter\"></div>\n" +
    "\n" +
    "                <!--</div>-->\n" +
    "                \n" +
    "                  <label>{{'page.feed.textLabel' | translate }}:</label>\n" +
    "                    \n" +
    "                  <br>\n" +
    "                    \n" +
    "                  <div text-angular ng-model=\"localState.feedText\" ta-toolbar=\"[]\" class=\"btn-groups\"></div>\n" +
    "\n" +
    "                  <button type=\"submit\" class=\"btn btn-lg btn-orange btn-block\" ng-click=\"submitFeed();\"  ng-disabled=\"!localState.feedText && localState.selectedFeedCustomers.length>0\" >{{'page.feed.button' | translate }}</button>\n" +
    "\n" +
    "            \n" +
    "            </div>\n" +
    " \n" +
    "      </div>\n" +
    "    \n" +
    "  </div>\n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_feedback.html",
    "<div class=\"bg-light lter b-b wrapper-md\" ng-init=\"\n" +
    "app.hideFooter = true;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "  <!--<h1 class=\"m-n font-thin h3\"></h1>-->\n" +
    "    <div class=\"bg-light lter b-b wrapper-md\">\n" +
    "        <h1 class=\"m-n font-thin h3\">Feedback</h1>\n" +
    "    </div>\n" +
    "<div class=\"wrapper-md\" ng-controller=\"FeedbackController\">\n" +
    "  <div class=\"row\">\n" +
    "\n" +
    "      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "\n" +
    "      <div ng-show=\"successMsg\" class=\"myCenter\" style=\"margin-bottom: 10px;\">\n" +
    "            <a ui-sref=\"app.hotel\" class=\"btn btn-sm btn-success\">{{'page.feedback.tohotel' | translate }}</a>\n" +
    "        </div>\n" +
    "        \n" +
    "      <!--<div class=\"panel b-a\" >-->\n" +
    "\n" +
    "\n" +
    "        <div class=\"panel panel-default\">\n" +
    "            <div class=\"panel-body\">\n" +
    "\n" +
    "                  <label>{{'page.feedback.header' | translate }}:</label>\n" +
    "                    <br>\n" +
    "                     <div ng-hide=\"hotelState.profileData.id>0\">\n" +
    "                         <input type=\"text\" class=\"form-control\" placeholder=\"{{::'profile.firstName' | translate}}\"  ng-model=\"localState.anonymName\">\n" +
    "                         <input type=\"text\" class=\"form-control\" placeholder=\"{{::'profile.email' | translate}}\"  ng-model=\"localState.anonymMail\">\n" +
    "\n" +
    "                     </div>\n" +
    "                    <br>\n" +
    "                  <div text-angular ng-model=\"localState.feedbackText\" ta-toolbar=\"[]\" class=\"btn-groups\"></div>\n" +
    "\n" +
    "                    <!--<textarea style=\"width: 100%\"-->\n" +
    "                            <!--ng-model=\"profileData.feedback\">-->\n" +
    "                    <!--</textarea>-->\n" +
    "                  <button type=\"submit\" class=\"btn btn-lg btn-orange btn-block\" ng-click=\"submitFeedback();\"  ng-disabled=\"!localState.feedbackText\" >{{'page.feedback.button' | translate }}</button>\n" +
    "\n" +
    "              </div>\n" +
    " \n" +
    "      </div>\n" +
    "    \n" +
    "  </div>\n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_forgotpwd.html",
    "<div ng-class=\"isSmartDevice? 'wrapper-md' : 'container w-xxl w-auto-xs' \" data-ng-controller=\"ForgotpwdController\" ng-init=\"\n" +
    "app.settings.container = false;\n" +
    " app.hideFooter = true;\n" +
    " app.header.showTab = false;\n" +
    " app.header.showBackArrow = true;\n" +
    " app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "  <a href class=\"navbar-brand block m-t\">{{app.name}}</a>\n" +
    "  <div class=\"m-b-lg\">\n" +
    "    <div class=\"wrapper text-center\">\n" +
    "      <strong ng-hide=\"showNewPasswordField\">Input your email to reset your password</strong>\n" +
    "      <strong ng-show=\"showNewPasswordField\">Input your new password (minimum 8 characters)</strong>\n" +
    "    </div>\n" +
    "\n" +
    "    <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "    \n" +
    "    <form name=\"requestReset\" ng-init=\"isCollapsed=true\" ng-su ng-hide=\"showNewPasswordField\" ng-submit=\"sendResetCode()\">\n" +
    "      <div class=\"list-group list-group-sm\" >\n" +
    "        <div class=\"list-group-item\">\n" +
    "          <input type=\"email\" placeholder=\"Email\" ng-model=\"resetInfo.email\" class=\"form-control no-border\" required>\n" +
    "        </div>\n" +
    "       \n" +
    "      </div>\n" +
    "      \n" +
    "      <button type=\"submit\" ng-disabled=\"requestReset.$invalid\" class=\"btn btn-lg btn-orange btn-block\">Reset password</button>\n" +
    "\n" +
    "    </form>\n" +
    "\n" +
    "    <form name=\"resetPassword\" ng-show=\"showNewPasswordField\">\n" +
    "      \n" +
    "      <div class=\"list-group list-group-sm\">\n" +
    "\n" +
    "        <div class=\"list-group-item\">\n" +
    "          <input type=\"password\" placeholder=\"Password\" ng-model=\"resetInfo.password\" class=\"form-control no-border\" required>\n" +
    "        </div>\n" +
    "        <div class=\"list-group-item\">\n" +
    "          <input type=\"password\" placeholder=\"Repeat Password\" ng-model=\"resetInfo.repeatPassword\" class=\"form-control no-border\" required>\n" +
    "        </div>\n" +
    "        \n" +
    "      </div>\n" +
    "      <button type=\"submit\" ng-click=\"submitNewPassword()\"  ng-disabled=\"resetPassword.$invalid || resetInfo.password!=resetInfo.repeatPassword || resetInfo.password.length<7\" class=\"btn btn-lg btn-primary btn-block\" >Set new password</button>\n" +
    "\n" +
    "\n" +
    "    </form>\n" +
    "    \n" +
    "    <div collapse=\"isCollapsed\" class=\"m-t\">\n" +
    "      <div class=\"alert alert-success\">\n" +
    "        <p>A reset link sent to {{resetInfo.email}}, please check it in 24 hours. \n" +
    "          <div class=\"myCenter\">\n" +
    "          <!--//TODO Eugen-->\n" +
    "            <a ui-sref=\"access.login\" class=\"btn btn-sm btn-success\">Login</a>\n" +
    "          </div>\n" +
    "        </p>\n" +
    "          \n" +
    "      </div>\n" +
    "    </div>\n" +
    "    \n" +
    "    \n" +
    "  \n" +
    "  </div>\n" +
    "  <!--<div class=\"text-center\" ng-include=\"'angulr/tpl/blocks/page_footer.html'\">-->\n" +
    "    <!--{% include 'blocks/page_footer.html' %}-->\n" +
    "  <!--</div>-->\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_hotel.html",
    "<div id=\"minPaddingPage\" ng-controller=\"HotelController\" class=\"bg-light lter b-b wrapper-md\" ng-init=\"\n" +
    "app.hideFooter = false;\n" +
    "app.header.showTab = true;\n" +
    "app.header.tabIndex = 0;\n" +
    "app.header.showBackArrow = false;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "\n" +
    "  <div class=\"wrapper-md\" style=\"padding-top: 0;\" >\n" +
    "    \n" +
    "    <div class=\"row\">\n" +
    "      \n" +
    "      <div>\n" +
    "        <!--ng-class=\"::{'col-sm-9': !isSmartDevice}\">-->\n" +
    "\n" +
    "        <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "        <!--<button id=\"sendButton\" class=\"button-primary\" ng-click=\"send()\">Send me a push notification</button>-->\n" +
    "\n" +
    "        <!-- START HOTEL -->\n" +
    "        \n" +
    "        <div id=\"hotelPart\" ng-show=\"hotelState.profileData.checkedIn\" ng-controller=\"hotelCtrl\">\n" +
    "\n" +
    "            <div data-ng-include=\" 'angulr/tpl/hotel/blocks/fullCheckinRequest.html' \" />\n" +
    "\n" +
    "            <!-- START HOTEL accordion -->\n" +
    "  \n" +
    "          <!--<div class=\"staffContent\" ng-if=\"(hotelState.profileData.hotelStaff  && hotelState.profileData.hotelId==showHotel.id|| hotelState.profileData.admin)\">-->\n" +
    "              <!--<div data-ng-include=\" 'angulr/tpl/hotel/blocks/editHotelAccardion.html' \" />-->\n" +
    "          <!--</div>-->\n" +
    "            \n" +
    "          <!-- / END hotel accordion -->\n" +
    "\n" +
    "          <!--<div data-ng-include=\" 'angulr/tpl/hotel/blocks/showHotelBlock.html' \" />-->\n" +
    "\n" +
    "        </div>\n" +
    "        \n" +
    "        <!-- END HOTEL -->\n" +
    "        \n" +
    "        <!-- ACTIVITES START -->\n" +
    "  \n" +
    "        <div id=\"activityPart\" ng-controller=\"activityCtrl\">\n" +
    "\n" +
    "          <!-- LIST ALL ACTIVITIES -->\n" +
    "\n" +
    "          <div ng-show=\"localState.filterActivities.length>0\" style=\"text-align: center;\" class=\"hotelicoHeader orange-text myCenter\">\n" +
    "            {{::'page.hotel.actualActivities' | translate}} in {{::showHotel.name}}:\n" +
    "            <a id=\"activitiesAnchor\"/>\n" +
    "          </div>\n" +
    "\n" +
    "          <div class=\"staffContent\" ng-if=\"::(hotelState.profileData.hotelStaff || hotelState.profileData.admin)\" style=\"margin-top: 10px; margin-bottom: 15px;\">\n" +
    "            <!--<div data-ng-include=\" 'angulr/tpl/hotel/blocks/addActivityAccardion.html' \" />-->\n" +
    "            <button class=\"btn btn-lg btn-block btn-default btn-addon\" ng-click=\"openModal('editActivity', 'new')\"><i class=\"fa fa-plus\"></i>{{::'page.activities.addActivity' | translate }}</button>\n" +
    "          </div>\n" +
    "\n" +
    "          <div class=\"list-group list-group-lg list-group-sp\">\n" +
    "            \n" +
    "            <div ng-repeat=\"showActivity in localState.filterActivities | orderBy: 'validFrom':true  track by showActivity.activityId\" >\n" +
    "\n" +
    "              <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showActivityBlock.html' \" />\n" +
    "\n" +
    "            </div>\n" +
    "\n" +
    "          </div>\n" +
    "          \n" +
    "        </div>\n" +
    "        \n" +
    "        \n" +
    "  \n" +
    "        <!-- END ACTIVITES START -->\n" +
    "        \n" +
    "        <!-- END Activities -->\n" +
    "        \n" +
    "      </div>\n" +
    "      \n" +
    "    </div>\n" +
    "    \n" +
    "  </div>\n" +
    "\n" +
    "  <div ng-hide=\"localState.filterActivities.length>0\" style=\"text-align: center;\" class=\"myCenter\">\n" +
    "    {{::'page.hotel.noActualActivities' | translate}} in {{::showHotel.name}}\n" +
    "  </div>\n" +
    "  \n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_hotelList.html",
    "<div id=\"minPaddingPage\" class=\"bg-light lter wrapper-md\" ng-controller=\"HotelListController\" ng-init=\"\n" +
    "app.hideFooter = false;\n" +
    "app.header.showTab = true;\n" +
    "app.header.tabIndex = 0;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "  \n" +
    "  <div class=\"wrapper-md\">\n" +
    "    <div class=\"row\">\n" +
    "      <div>\n" +
    "        <!--ng-class=\"::{'col-sm-9': !isSmartDevice}\">-->\n" +
    "\n" +
    "        <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "        <div class=\"wrapper text-center\" style=\"padding-top: 0px;\">\n" +
    "\n" +
    "          <div style=\"text-align: left; margin-top: 10px;\">\n" +
    "\n" +
    "            <!--<div style=\"white-space: pre-line;\">{{::'page.hotel.hotelFilterLabel' | translate}}:</div>-->\n" +
    "            <div data-ng-include=\" 'angulr/tpl/hotel/blocks/selectHotelCityBlock.html' \" />\n" +
    "\n" +
    "          </div>\n" +
    "\n" +
    "          <hr/>\n" +
    "          <span class=\"hotelicoHeader\" ng-show=\"localState.filterHotels.length>0 && localState.selectedCityHotel\">\n" +
    "              <span ng-show=\"localState.selectedFilterHotel\">{{::'page.hotel.activityList' | translate}}  in {{localState.selectedFilterHotel.name}}</span>\n" +
    "              <span ng-show=\"!localState.selectedFilterHotel && localState.selectedCityHotel\">{{::'page.hotel.hotels' | translate}}  in {{localState.selectedCityHotel.city}}</span>\n" +
    "            :\n" +
    "          </span>\n" +
    "        </div>\n" +
    "\n" +
    "        <div id=\"hotelPart\" ng-controller=\"hotelCtrl\">\n" +
    "          \n" +
    "          <div ng-repeat=\"(key, showHotel) in localState.filterHotels | orderBy: 'id':true  track by showHotel.id\" >\n" +
    "  \n" +
    "            <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showHotelPreviewBlock.html' \" />\n" +
    "  \n" +
    "          </div>\n" +
    "\n" +
    "          <div class=\"nothingFoundMsg\" ng-show=\"localState.noHotelFound\">{{::'page.hotel.noHotelFound' | translate}}</div>\n" +
    "\n" +
    "\n" +
    "        </div>\n" +
    "        \n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_hotelLogin.html",
    "<div ng-controller=\"LoginController\" ng-init=\"\n" +
    "app.settings.container = false; \n" +
    "app.hideFooter = true;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = false;\n" +
    "\" ng-show=\"loginTabState.ready == 0\" class=\"container w-xxl w-auto-xs\">\n" +
    "\n" +
    "    <div ng-style=\" isSmartDevice && {'width': '100%'}\"  class=\"container w-xxl w-auto-xs\" style=\"display: flex; display: -webkit-flex;display: -moz-flex;display: -ms-flexbox; justify-content: space-between; padding: 0;\">\n" +
    "        <div class=\"text-center\" ui-sref=\"app.checkin\"  style=\"padding: 5px;\">\n" +
    "            <a id=\"userLoginId\" ui-sref=\"app.checkin\"  style=\"white-space: nowrap;\">{{'page.login.userLoginPreview' | translate }} <span style=\"text-decoration: underline;\">{{'page.login.userLoginLink' | translate}}</span></a>\n" +
    "        </div>\n" +
    "\n" +
    "        <div style=\"margin-top: 5px;\" isteven-multi-select id=\"selectSystemLanguages\" input-model=\"localState.availableSystemLanguages\" output-model=\"localState.selectSystemLanguage\" button-label=\"icon langKeyLabel\" item-label=\"icon name\" tick-property=\"ticked\" max-labels=\"5\" max-height=\"320px\" search-property=\"name\" output-properties=\"name\" helper-elements=\"filter\" selection-mode=\"single\"></div>\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "\n" +
    "    <div class=\"wrapper text-center\">\n" +
    "        <img src=\"angulr/img/build/logo/logoFull2.png\" />\n" +
    "    </div>\n" +
    "\n" +
    "    <div ng-class=\"isSmartDevice? 'wrapper-md' : 'container w-xxl w-auto-xs' \">\n" +
    "        <!--<a href class=\"navbar-brand block m-t\">{{app.name}}</a>-->\n" +
    "        <div class=\"m-b-lg\">\n" +
    "\n" +
    "            <div class=\"wrapper loginWellcomeMsg text-center\" style=\"padding: 0px; color: #f1592a;\">\n" +
    "                {{'page.login.wellcomeHotelMsg' | translate}}\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"wrapper text-center loginHeaderItems\" style=\"padding-left: 0; padding-right: 0;\">\n" +
    "                <!--<a href=\"\" ng-click=\"setLoginTabState('guest')\" ng-class=\"{'label bg-orange inline loginSelectedItem': loginTabState.guest}\">{{ 'page.login.guestTitle' | translate}}</a>-->\n" +
    "                <!--<span style=\"padding: 5px;\">|</span>-->\n" +
    "                <a href=\"\" ng-click=\"setLoginTabState('login')\" ng-class=\"{'label bg-orange inline loginSelectedItem': loginTabState.login}\">{{ 'page.login.loginTitle' | translate}}</a>\n" +
    "                <span style=\"padding: 5px;\">|</span>\n" +
    "                <a href=\"\" ng-click=\"setLoginTabState('signup')\" ng-class=\"{'label bg-orange inline loginSelectedItem': loginTabState.signup}\">{{ 'page.login.signupTitle' | translate}}</a>\n" +
    "            </div>\n" +
    "\n" +
    "\n" +
    "            <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "            <div class=\"panel panel-default\" >\n" +
    "                <!--<div class=\"panel-body\" ng-show=\"loginTabState.guest\">-->\n" +
    "\n" +
    "                    <!--<form name=\"loginGuestForm\" id=\"loginGuestForm\" class=\"form-validation\" ng-submit=\"guestRegister();\">-->\n" +
    "\n" +
    "                        <!--<div class=\"list-group list-group-sm\">-->\n" +
    "                            <!--<div class=\"list-group-item text-center\" style=\"height: 60px;padding: 0;margin: 0\">-->\n" +
    "                                <!--<div style=\"width: 250px;display: table;margin: 0 auto;padding-top: 7px;\">-->\n" +
    "                                    <!--<div style=\"width: 100px; float: left;\">-->\n" +
    "                                        <!--<input type=\"text\" placeholder=\"{{::'profile.firstName' | translate}}\" class=\"form-control no-border\" ng-model=\"localState.guestUser.firstName\" required>-->\n" +
    "                                    <!--</div>-->\n" +
    "                                    <!--<div style=\"float: left; margin-top: 7px; margin-left: 10px;\">-->\n" +
    "                                        <!--<label class=\"i-checks\">-->\n" +
    "                                            <!--<input type=\"radio\" value=\"m\" ng-model=\"localState.guestUser.sex\" ng-required=\"!localState.guestUser.sex\"><i></i> {{:: 'profile.gender-m' | translate}} &nbsp;-->\n" +
    "                                        <!--</label>-->\n" +
    "                                        <!--<label class=\"i-checks\">-->\n" +
    "                                            <!--<input type=\"radio\" value=\"w\" ng-model=\"localState.guestUser.sex\" ng-required=\"!localState.guestUser.sex\"><i></i> {{:: 'profile.gender-f' | translate}}-->\n" +
    "                                        <!--</label>-->\n" +
    "                                    <!--</div>-->\n" +
    "                                <!--</div>-->\n" +
    "\n" +
    "                            <!--</div>-->\n" +
    "\n" +
    "                            <!--&lt;!&ndash;<div class=\"list-group-item\">&ndash;&gt;-->\n" +
    "                            <!--&lt;!&ndash;<input type=\"email\" placeholder=\"{{::'email' | translate}}\" class=\"form-control no-border\" ng-model=\"localState.guestUser.email\" required>&ndash;&gt;-->\n" +
    "                            <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "                            <!--<button type=\"submit\" class=\"btn btn-lg btn-orange btn-block\">{{::'page.login.guestRegister'-->\n" +
    "                                <!--| translate }}</button>&lt;!&ndash; ng-disabled=\"!localState.guestUser.firstName\" &ndash;&gt;-->\n" +
    "                        <!--</div>-->\n" +
    "\n" +
    "                        <!--<hr>-->\n" +
    "\n" +
    "                        <!--<div style=\"text-align: justify;\" class=\"text-center\">-->\n" +
    "                            <!--{{::'page.login.guestMsg' | translate }}-->\n" +
    "                            <!--<br/>-->\n" +
    "                            <!--{{::'page.login.guestMsg2' | translate }}-->\n" +
    "                        <!--</div>-->\n" +
    "\n" +
    "                    <!--</form>-->\n" +
    "\n" +
    "                <!--</div>-->\n" +
    "\n" +
    "\n" +
    "                <div class=\"panel-body\" ng-show=\"loginTabState.login\">\n" +
    "                    <!-- TODO Eugen: create Form hier!!! autofill-->\n" +
    "                    <form name=\"hotelicoLoginForm\"  autocomplete=\"on\" class=\"form-validation\" ng-submit=\"loginPassword()\">\n" +
    "\n" +
    "                        <div class=\"list-group list-group-sm\">\n" +
    "                            <div class=\"list-group-item\">\n" +
    "                                <input type=\"email\" id=\"hotelicoLoginMail\" name=\"hotelicoLoginMail\" placeholder=\"{{::'profile.email' | translate}}\" class=\"form-control no-border\" ng-model=\"localState.checkUser.email\" required autocomplete=\"on\">\n" +
    "                            </div>\n" +
    "                            <div class=\"list-group-item\">\n" +
    "                                <input type=\"password\" id=\"hotelicoLoginPassword\" name=\"hotelicoLoginPassword\" placeholder=\"{{::'profile.password' | translate}}\" class=\"form-control no-border\" ng-model=\"localState.checkUser.password\" required autocomplete=\"on\">\n" +
    "                            </div>\n" +
    "                            <button type=\"submit\" class=\"btn btn-lg btn-orange btn-block\">{{::'page.login.doLogin'\n" +
    "                                | translate }}</button>\n" +
    "                        </div>\n" +
    "                    </form>\n" +
    "\n" +
    "                    <div class=\"text-center m-t m-b\"><a ui-sref=\"app.forgotpwd\">Forgot password?</a></div>\n" +
    "\n" +
    "                </div>\n" +
    "\n" +
    "                <div class=\"panel-body\"  ng-show=\"loginTabState.signup\">\n" +
    "\n" +
    "                    <a ng-click=\"clickLoading('app.hotelRegister')\" class=\"btn btn-lg btn-orange btn-block\">{{::'page.login.hotelRegister' | translate}}</a>\n" +
    "\n" +
    "                </div>\n" +
    "\n" +
    "            </div>\n" +
    "\n" +
    "            <div data-ng-include=\" 'angulr/tpl/hotel/blocks/socialLogin.html' \" />\n" +
    "\n" +
    "\n" +
    "\n" +
    "        </div>\n" +
    "        \n" +
    "        <div data-ng-include=\" 'angulr/tpl/hotel/blocks/impressumBottomBlock.html' \" />\n" +
    "\n" +
    "        <!--<div class=\"text-center\" ng-include=\"'angulr/tpl/blocks/page_footer.html'\">-->\n" +
    "        <!--&lt;!&ndash;{% include 'blocks/page_footer.html' %}&ndash;&gt;-->\n" +
    "        <!--</div>-->\n" +
    "    </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_hotelPreview.html",
    "<div id=\"minPaddingPage\" ng-controller=\"HotelPreviewController\" class=\"bg-light lter b-b wrapper-md\" ng-init=\"\n" +
    "app.hideFooter = false;\n" +
    "app.header.showTab = true;\n" +
    "app.header.tabIndex = 0;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "localState.showActivityHotelLink = false;\n" +
    "\">\n" +
    "  <!--<h1 class=\"m-n font-thin h3\"></h1>-->\n" +
    "\n" +
    "\n" +
    "  <div class=\"wrapper-md\" style=\"padding-top: 0;\">\n" +
    "    <div class=\"row\">\n" +
    "      <!--<div class=\"col-sm-9\">-->\n" +
    "      <div>\n" +
    "        <!--ng-class=\"::{'col-sm-9': !isSmartDevice}\">-->\n" +
    "\n" +
    "        <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "        \n" +
    "        <div class=\"wrapper text-center\" style=\"padding-top: 0px; display: none;\">\n" +
    "\n" +
    "          <div  style=\"text-align: left;\">\n" +
    "\n" +
    "            {{::'page.hotel.activityFilterLabel' | translate}}:\n" +
    "            <div data-ng-include=\" 'angulr/tpl/hotel/blocks/selectHotelCityBlock.html' \" />\n" +
    "\n" +
    "          </div>\n" +
    "\n" +
    "          <hr/>\n" +
    "          \n" +
    "          <span class=\"hotelicoHeader\" ng-show=\"localState.filterActivities.length>0\">\n" +
    "              <span class=\"orange-text\">{{::'page.hotel.activities' | translate}}</span> \n" +
    "              <span ng-show=\"localState.selectedFilterHotel\"> in {{localState.selectedFilterHotel.name}}</span>\n" +
    "              <span ng-show=\"!localState.selectedFilterHotel && localState.selectedCityHotel\"> in {{localState.selectedCityHotel.city}}</span>\n" +
    "              :\n" +
    "          </span>\n" +
    "        </div>\n" +
    "        \n" +
    "        <!-- Show Hotel -->\n" +
    "        \n" +
    "        <div id=\"hotelPart\" ng-show=\"hotelState.profileData.checkedIn\" ng-controller=\"hotelCtrl\">\n" +
    "\n" +
    "          <!--&lt;!&ndash; START HOTEL accordion &ndash;&gt;-->\n" +
    "\n" +
    "          <!--<div class=\"staffContent\" ng-if=\"(hotelState.profileData.hotelStaff  && hotelState.profileData.hotelId==showHotel.id|| hotelState.profileData.admin)\">-->\n" +
    "            <!--<div data-ng-include=\" 'angulr/tpl/hotel/blocks/editHotelAccardion.html' \" />-->\n" +
    "          <!--</div>-->\n" +
    "\n" +
    "          <!--&lt;!&ndash; / END hotel accordion &ndash;&gt;-->\n" +
    "\n" +
    "          <!--<div data-ng-include=\" 'angulr/tpl/hotel/blocks/showHotelBlock.html' \" />-->\n" +
    "\n" +
    "          <div data-ng-include=\" 'angulr/tpl/hotel/blocks/fullCheckinRequest.html' \" />\n" +
    "          \n" +
    "        </div>\n" +
    "\n" +
    "        <!-- ACTIVITES START -->\n" +
    "\n" +
    "\n" +
    "        <!-- LIST ALL ACTIVITIES -->\n" +
    "        <div id=\"activityPart\" ng-controller=\"activityCtrl\">\n" +
    "\n" +
    "          <div ng-show=\"localState.filterActivities.length>0\" style=\"text-align: center;\" class=\"hotelicoHeader orange-text myCenter\">\n" +
    "            {{::'page.hotel.actualActivities' | translate}} in {{::showHotel.name}}:\n" +
    "            <a name=\"activitiesAnchor\"/>\n" +
    "          </div>\n" +
    "          \n" +
    "          <div class=\"list-group list-group-lg list-group-sp\">\n" +
    "            <div ng-repeat=\"showActivity in localState.filterActivities | orderBy: 'validTo'  track by showActivity.activityId\">\n" +
    "\n" +
    "              <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showActivityBlock.html' \" />\n" +
    "\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"nothingFoundMsg\" ng-show=\"localState.noActivityFound\">{{::'page.activities.noActivityFound' | translate}}</div>\n" +
    "\n" +
    "\n" +
    "          </div>\n" +
    "\n" +
    "        </div>\n" +
    "\n" +
    "        <!-- END ACTIVITES START -->\n" +
    "        \n" +
    "      </div>\n" +
    "\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_hotelRegister.html",
    "<div class=\"bg-light lter b-b wrapper-md\">\n" +
    "  <h1 class=\"m-n font-thin h3\">Hotel Anmelden</h1>\n" +
    "</div>\n" +
    "\n" +
    "<div id=\"minPaddingPage\" class=\"wrapper-md\" ng-controller=\"HotelRegisterController\" ng-init=\"\n" +
    "app.hideFooter = true;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = true;\n" +
    "\">\n" +
    "\n" +
    "  <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "\n" +
    "\n" +
    "  <div class=\"wrapper-md\">\n" +
    "    <tabset class=\"tab-container\" ng-init=\"steps={percent:20, step1:true, step2:false, step3:false}\">\n" +
    "      \n" +
    "      <tab heading=\"Hotel-Information\" active=\"steps.step1\" select=\"steps.percent=10\">\n" +
    "        \n" +
    "        <div class=\"myFlex m-b\" style=\"justify-content: space-between; -webkit-justify-content: space-between; -ms-justify-content: space-between; -moz-justify-content: space-between;\">\n" +
    "          <p class=\"m-b\">{{'page.register.hotelRegisterIntro' | translate}}</p>\n" +
    "          \n" +
    "          <button type=\"submit\" ng-class=\"{'btn-orange' : showHotel.name && showHotel.currentHotelAccessCode, 'btn-default' : !showHotel.name || !showHotel.currentHotelAccessCode ,'btn btn-rounded' : true}\" ng-disabled=\"!showHotel.name || !showHotel.currentHotelAccessCode\" ng-click=\"steps.step2=true\">Next</button>\n" +
    "          \n" +
    "        </div>\n" +
    "      \n" +
    "        \n" +
    "        <!--<progressbar value=\"steps.percent\" class=\"progress-xs\" type=\"success\"></progressbar>-->\n" +
    "        <!--<h4>Validate Form</h4>-->\n" +
    "        <!--<label class=\"control-label\">{{'page.activities.activityLogo' | translate}}</label>-->\n" +
    "\n" +
    "        <!--<div  ng-cloak>-->\n" +
    "          <!--<div>-->\n" +
    "            <!--<div class=\"well\">-->\n" +
    "              <!--&lt;!&ndash;<form action=\"\" class=\"dropzone\" dropzone=\"\" id=\"dropzone\">&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<div class=\"dz-default dz-message\">&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;</div>&ndash;&gt;-->\n" +
    "              <!--&lt;!&ndash;</form>&ndash;&gt;-->\n" +
    "            <!--</div>-->\n" +
    "            <!--<div class=\"pull-right\" style=\"z-index: 999;margin-top: -40px;\">-->\n" +
    "              <!--&lt;!&ndash;<button class=\"btn btn-success\" ng-click=\"uploadFile()\">Upload Avatar</button>&ndash;&gt;-->\n" +
    "              <!--<button class=\"btn btn-danger resetDropzone\" ng-click=\"reset()\" ng-show=\"fileAdded && !hideReset\">{{'profile.removeAvatar' | translate}}</button>-->\n" +
    "            <!--</div>-->\n" +
    "          <!--</div>-->\n" +
    "        <!--</div>-->\n" +
    "        \n" +
    "        <!--<form name=\"step1\" class=\"form-validation\">-->\n" +
    "          \n" +
    "          <!--<div class=\"m-t m-b\">-->\n" +
    "            <!--<button type=\"submit\" ng-class=\"{'btn-orange' : showHotel.name && showHotel.currentHotelAccessCode, 'btn-default' : !showHotel.name || !showHotel.currentHotelAccessCode ,'btn btn-rounded' : true}\" ng-disabled=\"!showHotel.name || !showHotel.currentHotelAccessCode\" ng-click=\"steps.step2=true\">Next</button>-->\n" +
    "          <!--</div>-->\n" +
    "          \n" +
    "          <!--<p>Hotel Name:</p>-->\n" +
    "          <!--<input type=\"email\" name=\"email\" class=\"form-control\" ng-model=\"localState.newHotel.name\" required ng-change=\"step1.email.$valid ? (steps.percent=30) : (steps.percent=20)\">-->\n" +
    "\n" +
    "          <!--<p>Hotel email:</p>-->\n" +
    "          <!--<input type=\"email\" name=\"email\" class=\"form-control\" ng-model=\"localState.newHotel.email\" required ng-change=\"step1.email.$valid ? (steps.percent=30) : (steps.percent=20)\">-->\n" +
    "          <!-- -->\n" +
    "          <!--<p class=\"m-t\">Hotel website:</p>-->\n" +
    "          <!--<input type=\"url\" name=\"url\" placeholder=\"http://\" class=\"form-control\" ng-model=\"localState.newHotel.website\" required>-->\n" +
    "    \n" +
    "\n" +
    "          <button ng-click=\"openModal('editHotel', showHotel.id)\" style=\"margin-bottom: 15px;\"  class=\"btn btn-lg btn-block btn-blue\">{{localState.editHotelAccordionTitle}}</button>\n" +
    "\n" +
    "          <!-- / END hotel accordion -->\n" +
    "          <b>{{::'system.editPreview' | translate}}:</b>\n" +
    "\n" +
    "          <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showHotelBlock.html' \" />\n" +
    "          <!--<div class=\"m-t m-b\">-->\n" +
    "            <!--<button type=\"submit\" ng-class=\"{'btn-orange' : localState.newHotel.name && localState.newHotel.currentHotelAccessCode, 'btn-default' : !localState.newHotel.name || !localState.newHotel.currentHotelAccessCode ,'btn btn-rounded' : true}\" ng-disabled=\"step1.$invalid\" ng-click=\"steps.step2=true\">Next</button>-->\n" +
    "          <!--</div>-->\n" +
    "          \n" +
    "        <!--</form>-->\n" +
    "      </tab>\n" +
    "      \n" +
    "      \n" +
    "      \n" +
    "      <tab heading=\"Staff Information\" disabled=\"step1.$invalid\" active=\"steps.step2\" select=\"steps.percent=60\">\n" +
    "        \n" +
    "         <form name=\"step2\" class=\"form-validation\" ng-submit=\"submitNewStaffHotel();\">\n" +
    "          \n" +
    "            <p class=\"m-b\">{{:: 'page.register.staffRegisterIntro' | translate}}</p>\n" +
    "          <!--<progressbar value=\"steps.percent\" class=\"progress-xs\" type=\"success\"></progressbar>-->\n" +
    "\n" +
    "          <!--<div class=\"panel panel-default\">-->\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "\n" +
    "            <!--<div class=\"panel-heading font-bold\">-->\n" +
    "              <!--Personal Information-->\n" +
    "            <!--</div>-->\n" +
    "\n" +
    "            <!--<div class=\"panel-body\">-->\n" +
    "\n" +
    "              <!--<div class=\"form-group\">-->\n" +
    "              <!--<label class=\"col-sm-2 control-label\">Status</label>-->\n" +
    "              <!--<div class=\"col-sm-10\">-->\n" +
    "              <!--<input type=\"text\" class=\"form-control rounded\" placeholder=\"{{'status' | translate}}\"  ng-model=\"localState.newStaff.status\">-->\n" +
    "              <!--<span class=\"help-block m-b-none\">A block of help text that breaks onto a new line and may extend beyond one line.</span>-->\n" +
    "\n" +
    "              <!--</div>-->\n" +
    "              <!--</div>-->\n" +
    "\n" +
    "              <!--<div class=\"form-group\">-->\n" +
    "                <!--<label class=\"col-sm-2 control-label\"></label>-->\n" +
    "                <div>\n" +
    "                  <label class=\"i-checks\">\n" +
    "                    <input type=\"radio\" value=\"m\" ng-model=\"localState.newStaff.sex\" ng-required=\"!localState.newStaff.sex\"><i></i> Herr &nbsp;\n" +
    "                  </label>\n" +
    "                  <label class=\"i-checks\">\n" +
    "                    <input type=\"radio\" value=\"w\" ng-model=\"localState.newStaff.sex\" ng-required=\"!localState.newStaff.sex\"><i></i> Frau\n" +
    "                  </label>\n" +
    "                </div>\n" +
    "              <!--</div>-->\n" +
    "\n" +
    "              <!--<div class=\"line line-dashed b-b line-lg pull-in\"></div>-->\n" +
    "\n" +
    "              <!--<div class=\"form-group\">-->\n" +
    "                <label class=\"control-label\">{{'firstName' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "                <!--<div class=\"col-sm-10\">-->\n" +
    "                  <input type=\"text\" class=\"form-control\" placeholder=\"{{'firstName' | translate}}\"  ng-model=\"localState.newStaff.firstName\" required>\n" +
    "                <!--</div>-->\n" +
    "              <!--</div>-->\n" +
    "\n" +
    "              <!--<div class=\"form-group\">-->\n" +
    "                <label class=\"control-label\">{{'lastName' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "                <!--<div class=\"col-sm-10\">-->\n" +
    "                  <input type=\"text\" class=\"form-control\" placeholder=\"{{'lastName' | translate}}\" ng-model=\"localState.newStaff.lastName\" required>\n" +
    "                <!--</div>-->\n" +
    "              <!--</div>-->\n" +
    "\n" +
    "              <!--<div class=\"line line-dashed b-b line-lg pull-in\"></div>-->\n" +
    "          <label class=\"control-label\">City<span class=\"requiredField\">*</span></label>\n" +
    "          <!--<div class=\"col-sm-10\">-->\n" +
    "          <input type=\"text\" class=\"form-control\" placeholder=\"{{'city' | translate}}\"  ng-model=\"localState.newStaff.city\" required>\n" +
    "          <!--</div>-->\n" +
    "        \n" +
    "          <!--<label class=\"control-label\">Geburtstag</label>-->\n" +
    "          <!--<br/>-->\n" +
    "          <!--<div>-->\n" +
    "\n" +
    "            <!--<a editable-date=\"staffBirthday\">{{ getStaffBirthdayString() || 'system.selectDate' | translate }}</a>-->\n" +
    "\n" +
    "          <!--</div>-->\n" +
    "        <br/>\n" +
    "\n" +
    "        <!--<div class=\"form-group\">-->\n" +
    "          <label class=\"control-label\">{{'language' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "        <br/>\n" +
    "\n" +
    "        <div>\n" +
    "            <div isteven-multi-select id=\"selectLanguages\"   input-model=\"localState.languages\" output-model=\"localState.newStaff.languages\" button-label=\"icon\" item-label=\"icon name\" tick-property=\"ticked\" max-labels=\"5\" max-height=\"320px\" search-property=\"name\" output-properties=\"name\" helper-elements=\"filter\"></div>\n" +
    "          </div>\n" +
    "        <!--</div>-->\n" +
    "          \n" +
    "         \n" +
    "          <!--<p>Your age:</p>-->\n" +
    "          <!--<input type=\"number\" name=\"age\" class=\"form-control\" ng-model=\"age\" required>-->\n" +
    "          <br>\n" +
    "          <br>\n" +
    "          <p>Hotel Staff email:<span class=\"requiredField\">*</span></p>\n" +
    "          <input type=\"email\" name=\"email\" class=\"form-control\" ng-model=\"localState.newStaff.email\" required ng-change=\"step1.email.$valid ? (steps.percent=30) : (steps.percent=20)\" required>\n" +
    "\n" +
    "          <p class=\"m-t\">Staff {{'password' | translate}}:<span class=\"requiredField\">*</span></p>\n" +
    "          <input type=\"password\" name=\"password\" class=\"form-control\" id=\"inputPassword\" ng-model=\"localState.newStaff.password\" placeholder=\"{{'password' | translate}}\" required>\n" +
    "\n" +
    "          <p class=\"m-t\">Staff {{'confirmPassword' | translate}}:</p>\n" +
    "          <input type=\"password\" name=\"confirmPassword\" class=\"form-control\" id=\"inputConfirmPassword\" ng-model=\"localState.newStaff.confirmPassword\" placeholder=\"{{'confirmPassword' | translate}}\" required>\n" +
    "\n" +
    "\n" +
    "          <br/>\n" +
    "\n" +
    "          <div class=\"checkbox m-b-md m-t-none\">\n" +
    "            <label class=\"i-checks\">\n" +
    "              <input type=\"checkbox\" ng-model=\"localState.agree\" required><i></i> <span style=\"margin-left: 5px;\">{{'page.register.agree' | translate}}</span> <a href ui-sref=\"app.agb\" style=\"text-decoration: underline;\">{{'page.register.termsAndConditions' | translate}}</a>\n" +
    "            </label>\n" +
    "          </div>\n" +
    "          <br>\n" +
    "          <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "          <div class=\"m-t m-b\">\n" +
    "              \n" +
    "            <!--<button type=\"button\" class=\"btn btn-default btn-rounded\" ng-click=\"steps.step1=true\">Prev</button>-->\n" +
    "            <!--<button type=\"submit\" ng-disabled=\"step2.$invalid\" class=\"btn btn-default btn-rounded\" ng-click=\"steps.step3=true\">Next</button>-->\n" +
    "            <button type=\"button\" class=\"btn btn-default btn-rounded\" ng-click=\"steps.step1=true\">Prev</button>\n" +
    "            <button type=\"submit\" class=\"btn btn-orange btn-rounded\" ng-disabled=\"step2.$invalid\">{{'page.register.doRegister' | translate }}</button>\n" +
    "          </div>\n" +
    "          \n" +
    "        </form>\n" +
    "      </tab>\n" +
    "      \n" +
    "      \n" +
    "      \n" +
    "      \n" +
    "      <!--<tab heading=\"{{'profile.section.loginData' | translate}}\" disabled=\"step2.$invalid\" active=\"steps.step3\" select=\"steps.percent=60\">-->\n" +
    "        <!--<p class=\"m-b\">Congraduations! You got the last step.</p>-->\n" +
    "        <!--<progressbar value=\"steps.percent\" class=\"progress-xs\" type=\"success\"></progressbar>-->\n" +
    "        <!--<p>Just one click to finish it.</p>-->\n" +
    "        <!-- -->\n" +
    "        <!--<p>Hotel Staff email:</p>-->\n" +
    "        <!--<input type=\"email\" name=\"email\" class=\"form-control\" ng-model=\"email\" required ng-change=\"step1.email.$valid ? (steps.percent=30) : (steps.percent=20)\">-->\n" +
    "\n" +
    "        <!--<p class=\"m-t\">Staff {{'password' | translate}}:</p>-->\n" +
    "        <!--<input type=\"password\" name=\"password\" class=\"form-control\" id=\"inputPassword\" ng-model=\"localState.newStaff.password\" placeholder=\"{{'password' | translate}}\">-->\n" +
    "\n" +
    "        <!--<p class=\"m-t\">Staff {{'confirmPassword' | translate}}:</p>-->\n" +
    "        <!--<input type=\"password\" name=\"confirmPassword\" class=\"form-control\" id=\"inputConfirmPassword\" ng-model=\"localState.newStaff.confirmPassword\" placeholder=\"{{'confirmPassword' | translate}}\">-->\n" +
    "\n" +
    "\n" +
    "        <!--<div class=\"m-t m-b\">-->\n" +
    "          <!--<button type=\"button\" class=\"btn btn-default btn-rounded\" ng-click=\"steps.step2=true\">Prev</button>-->\n" +
    "          <!--<button type=\"button\" class=\"btn btn-default btn-rounded\" ng-click=\"steps.percent=100\">Click me to Finish</button>-->\n" +
    "        <!--</div>-->\n" +
    "      <!--</tab>-->\n" +
    "    </tabset>\n" +
    "  </div>\n" +
    "\n" +
    "  <!--<div class=\"container w-xxl w-auto-xs ng-scope\">-->\n" +
    "\n" +
    "    <!-- -->\n" +
    "    <!--&lt;!&ndash;<button type=\"submit\" class=\"btn btn-lg btn-primary btn-block\" ng-click=\"signup()\" ng-disabled='form.$invalid'><span translate=\"hotel.login.CREATEACCOUNT\">Create an account</span></button>&ndash;&gt;-->\n" +
    "    <!--<button type=\"submit\" class=\"btn btn-lg btn-orange btn-block\" ng-click=\"register()\"   >{{'page.register.doRegister' | translate }}</button>-->\n" +
    "    <!--<div class=\"line line-dashed\"></div>-->\n" +
    "    <!--<p class=\"text-center\"><small>{{'page.register.alreadyHaveAccount' | translate}}</small></p>-->\n" +
    "    <!--<a ui-sref=\"access.login\" class=\"btn btn-lg btn-default btn-block\">{{'page.login.doLogin' | translate }}</a>-->\n" +
    "  <!--</div>-->\n" +
    "  <!--</form>-->\n" +
    "</div>\n" +
    "\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/page_impressum.html",
    "<div class=\"hbox hbox-auto-xs\" ng-init=\"\n" +
    "  app.settings.asideFixed = true;\n" +
    "  app.settings.asideDock = false;\n" +
    "  app.settings.container = false;\n" +
    "  app.hideFooter = true;\n" +
    "  app.header.showTab = false;\n" +
    "  app.header.showBackArrow = true;\n" +
    "  app.hideAside = true;\n" +
    "  app.rootSettings.darkBg = true;\n" +
    "  rootScope.hideAside();\n" +
    "  \">\n" +
    "\n" +
    "	<div class=\"bg-light lter b-b wrapper-md\">\n" +
    "		<h1 class=\"m-n font-thin h3\">hotelico.de Impressum</h1>\n" +
    "	</div>\n" +
    "	<div class=\"wrapper-md\">\n" +
    "		<div class=\"row\">\n" +
    "			<div style=\"padding: 5px;\">\n" +
    "				<!--class=\"col-sm-9\">-->\n" +
    "\n" +
    "				Unternehmensinformationen\n" +
    "				<br/>				\n" +
    "				<br/>\n" +
    "\n" +
    "				Sie befinden sich auf einem Informationsangebot des Hotelico-Konsortiums. Dies ist eine\n" +
    "				Arbeitsgemeinschaft in b&uuml;rgerlich-rechtlicher Rechtsform, zusammengesetzt aus den Gr&uuml;ndern\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Sergej Neustadt und\n" +
    "				<br/>\n" +
    "				Eugen Fanshil\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				sowie der\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Favoso Consulting GmbH & Co Team KG,<br>\n" +
    "				als im Au&szlig;enverh&auml;ltnis verantwortlichen Federf&uuml;hrer.\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Kontakte\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Favoso Consulting GmbH & Co. Team KG\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Postanschrift:\n" +
    "				<br/>\n" +
    "				August-Schanz-Str. 28\n" +
    "				<br/>\n" +
    "				D-60433 Frankfurt am Main\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				vertreten durch die Komplement&auml;rin:\n" +
    "				<br/>\n" +
    "				Favoso Consulting GmbH\n" +
    "				<br/>\n" +
    "				ebenda\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				E-mail: <a mailto=\"info@favoso.de\">info@favoso.de</a>				\n" +
    "				<br/>\n" +
    "\n" +
    "				Phone: +49 69 15322 8900\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Vertretungsberechtigte Gesch&auml;ftsf&uuml;hrer:\n" +
    "				Michael Schneider\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Verantwortlich i.S.d. &sect;&sect; 5 TMG, 55 RStV:\n" +
    "				<br/>\n" +
    "				Sergej Neustadt\n" +
    "\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Registergericht:\n" +
    "				<br/>\n" +
    "				AG Frankfurt/Main, HRA 48698\n" +
    "				<br/>\n" +
    "				(Registergericht der Komplement&auml;rin: AG Frankfurt/Main, HRB 103435)\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Steuer-Nr. der Komplement&auml;rin:\n" +
    "				<br/>\n" +
    "				220/5801/0905\n" +
    "				\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Urheberrecht:\n" +
    "				<br>\n" +
    "				<br>\n" +
    "				Jegliche Vervielf&auml;ltigung der Inhalte dieser Website und anderer Telemedien des Hotelico\n" +
    "				Konsortiums oder der Favoso Consulting GmbH & Co. Team KG, auch in Ausz&uuml;gen, bedarf unserer\n" +
    "				vorherigen schriftlichen Zustimmung.\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Sicherheit/Datenschutz:\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				Bitte senden Sie Anfagen, die den Datenschutz und die Sicherheit betreffen oder Anfragen aufgrund\n" +
    "				der Datenschutzerkl&auml;rung an diese Adresse:\n" +
    "				<br/>\n" +
    "				<br/>\n" +
    "\n" +
    "				<a mailto=\"info@hotelico.de\">info@hotelico.de</a>\n" +
    "			\n" +
    "			</div>\n" +
    "		</div>\n" +
    "\n" +
    "	</div>\n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/page_language.html",
    "<div class=\"bg-light lter b-b wrapper-md\">\n" +
    "    <h1 class=\"m-n font-thin h3\">{{'system.language' | translate}}</h1>\n" +
    "</div>\n" +
    "<div class=\"wrapper-md\" ng-init=\"\n" +
    "app.hideFooter = true;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "\n" +
    "    <!--{{'page.language.chooseLanguage' | translate }}: -->\n" +
    "    <!--<a editable-select=\"app.rootSettings.prefferedLanguage\" e-ng-options=\"s.value as s.text for s in languages\">-->\n" +
    "        <!--{{ app.rootSettings.prefferedLanguage }}-->\n" +
    "    <!--</a>-->\n" +
    "\n" +
    "    <!--<ui-select ng-model=\"page.language.chooseLanguage\" theme=\"bootstrap\">-->\n" +
    "        <!--<ui-select-match placeholder=\"Select a language in the list...\">{{$select.selected.name}}</ui-select-match>-->\n" +
    "        <!--<ui-select-choices repeat=\"item in people | filter: $select.search\">-->\n" +
    "            <!--<div ng-bind-html=\"item.name | highlight: $select.search\"></div>-->\n" +
    "            <!--<small ng-bind-html=\"item.email | highlight: $select.search\"></small>-->\n" +
    "        <!--</ui-select-choices>-->\n" +
    "    <!--</ui-select>-->\n" +
    "\n" +
    "    <!--<select ng-model=\"localState.selectedLanguageKey\" name=\"selectLang\" ng-change=\"submitLanguageChange()\" class=\"form-control m-b\">-->\n" +
    "        <!--<option default value=\"\" disabled>{{'page.language.chooseLanguage' | translate }}</option>        -->\n" +
    "        <!--<option value=\"en\">English</option>-->\n" +
    "        <!--<option value=\"de\">Deutsch</option>-->\n" +
    "        <!--&lt;!&ndash;<option value=\"ru\">Russian</option>&ndash;&gt;-->\n" +
    "    <!--</select>-->\n" +
    "\n" +
    "    <div isteven-multi-select id=\"selectSystemLanguagesFull\" input-model=\"localState.availableSystemLanguages\" output-model=\"localState.selectSystemLanguage\" button-label=\"icon name\" item-label=\"icon name\" tick-property=\"ticked\" max-labels=\"5\" max-height=\"320px\" search-property=\"name\" output-properties=\"name\" helper-elements=\"filter\" selection-mode=\"single\"></div>\n" +
    "\n" +
    "\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_login.html",
    "<div ng-controller=\"LoginController\" ng-init=\"\n" +
    "app.settings.container = false; \n" +
    "app.hideAside = true; \n" +
    "app.hideFooter = true;\n" +
    "app.rootSettings.darkBg = false;\n" +
    "\" \n" +
    " class=\"container w-xxl w-auto-xs\">\n" +
    "\n" +
    "  <div  ng-style=\" ::isSmartDevice && {'width': '100%'}\" class=\"container w-xxl w-auto-xs\" style=\"display: flex;  display: -webkit-flex;display: -moz-flex;display: -ms-flexbox; justify-content: space-between; padding: 0;\">\n" +
    "      \n" +
    "    <div class=\"text-center\" ui-sref=\"access.hotelLogin\" style=\"padding: 5px;\">\n" +
    "      <a id=\"hotelLoginId\" ui-sref=\"access.hotelLogin\" style=\"white-space: nowrap;\">{{'page.login.hotelLoginPreview' | translate }} <span style=\"text-decoration: underline;\">{{'page.login.hotelLoginLink' | translate}}</span></a>\n" +
    "    </div>\n" +
    "      \n" +
    "    <div style=\"margin-top: 5px;\" isteven-multi-select id=\"selectSystemLanguages\" input-model=\"localState.availableSystemLanguages\" output-model=\"localState.selectSystemLanguage\" button-label=\"icon langKeyLabel\" item-label=\"icon name\" tick-property=\"ticked\" max-labels=\"5\" max-height=\"320px\" search-property=\"name\" output-properties=\"name\" helper-elements=\"filter\" selection-mode=\"single\"></div>\n" +
    "\n" +
    "  </div>\n" +
    "\n" +
    "\n" +
    "  <div class=\"wrapper text-center\">\n" +
    "    <img src=\"angulr/img/build/logo/logoFull2.png\" />\n" +
    "  </div>\n" +
    "\n" +
    "  <div ng-class=\"::isSmartDevice? 'wrapper-md' : 'container w-xxl w-auto-xs' \">\n" +
    "  <!--<a href class=\"navbar-brand block m-t\">{{::app.name}}</a>-->\n" +
    "    <div class=\"m-b-lg\">\n" +
    "      \n" +
    "      <div class=\"wrapper loginWellcomeMsg text-center\" style=\"padding: 0px; color: #f1592a;\">\n" +
    "        {{' page.login.wellcomeMsg' | translate}}\n" +
    "      </div>\n" +
    "      \n" +
    "      <div class=\"wrapper text-center loginHeaderItems\" style=\"padding-left: 0; padding-right: 0;\">\n" +
    "        <a href=\"\" ng-click=\"setLoginTabState('guest')\" ng-class=\"{'label bg-orange inline loginSelectedItem': loginTabState.guest}\">{{ 'page.login.guestTitle' | translate}}</a> \n" +
    "        <span style=\"padding: 5px;\">|</span>\n" +
    "        <a href=\"\" ng-click=\"setLoginTabState('login')\" ng-class=\"{'label bg-orange inline loginSelectedItem': loginTabState.login}\">{{ 'page.login.loginTitle' | translate}}</a>\n" +
    "        <span style=\"padding: 5px;\">|</span>\n" +
    "        <a href=\"\" ng-click=\"setLoginTabState('signup')\" ng-class=\"{'label bg-orange inline loginSelectedItem': loginTabState.signup}\">{{ 'page.login.signupTitle' | translate}}</a>\n" +
    "      </div>\n" +
    "      \n" +
    "      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "  \n" +
    "      <div class=\"panel panel-default\" >\n" +
    "        \n" +
    "        <div class=\"panel-body\" ng-show=\"loginTabState.guest\">\n" +
    "          \n" +
    "          <form name=\"loginGuestForm\" id=\"loginGuestForm\" class=\"form-validation\" ng-submit=\"guestRegister();\">\n" +
    "\n" +
    "            <div class=\"list-group list-group-sm\">\n" +
    "              <div class=\"list-group-item text-center\" style=\"height: 60px;padding: 0;margin: 0\">\n" +
    "                <div style=\"width: 250px;display: table;margin: 0 auto;padding-top: 7px;\">\n" +
    "                  <div style=\"width: 100px; float: left;\">\n" +
    "                      <input type=\"text\" placeholder=\"{{' profile.firstName' | translate}}\" class=\"form-control no-border\" ng-model=\"localState.guestUser.firstName\" required>\n" +
    "                  </div>\n" +
    "                  <div style=\"float: left; margin-top: 7px; margin-left: 10px;\">\n" +
    "                      <label class=\"i-checks\">\n" +
    "                        <input type=\"radio\" value=\"m\" ng-model=\"localState.guestUser.sex\" ng-required=\"!localState.guestUser.sex\"><i></i> {{ 'profile.gender-m' | translate}} &nbsp;\n" +
    "                      </label>\n" +
    "                      <label class=\"i-checks\">\n" +
    "                        <input type=\"radio\" value=\"w\" ng-model=\"localState.guestUser.sex\" ng-required=\"!localState.guestUser.sex\"><i></i> {{ 'profile.gender-f' | translate}}\n" +
    "                      </label>\n" +
    "                  </div>\n" +
    "                </div>\n" +
    "                  \n" +
    "              </div>\n" +
    "  \n" +
    "              <button type=\"submit\" class=\"btn btn-lg btn-orange btn-block\">{{' page.login.guestRegister'\n" +
    "                  | translate }}</button>\n" +
    "            </div>\n" +
    "              \n" +
    "            <hr>\n" +
    "  \n" +
    "            <div style=\"text-align: justify;\" class=\"text-center\">\n" +
    "                {{' page.login.guestMsg' | translate }}\n" +
    "                <br/>\n" +
    "                {{' page.login.guestMsg2' | translate }}\n" +
    "            </div>\n" +
    "          \n" +
    "        </form>\n" +
    "    \n" +
    "        </div>\n" +
    "      \n" +
    "        <div class=\"panel-body\" ng-show=\"loginTabState.login\">\n" +
    "          <!-- TODO Eugen: create Form hier!!! autofill-->\n" +
    "          <form name=\"hotelicoLoginForm\"  autocomplete=\"on\" class=\"form-validation\" ng-submit=\"loginPassword()\">\n" +
    "\n" +
    "            <div class=\"list-group list-group-sm\">\n" +
    "              <div class=\"list-group-item\">\n" +
    "                <input type=\"email\" id=\"hotelicoLoginMail\" name=\"hotelicoLoginMail\" placeholder=\"{{' profile.email' | translate}}\" class=\"form-control no-border\" ng-model=\"localState.checkUser.email\" required autocomplete=\"on\">\n" +
    "              </div>\n" +
    "              <div class=\"list-group-item\">\n" +
    "                <input type=\"password\" id=\"hotelicoLoginPassword\" name=\"hotelicoLoginPassword\" placeholder=\"{{' profile.password' | translate}}\" class=\"form-control no-border\" ng-model=\"localState.checkUser.password\" required autocomplete=\"on\">\n" +
    "              </div>\n" +
    "              <button type=\"submit\" class=\"btn btn-lg btn-orange btn-block\">{{' page.login.doLogin'\n" +
    "                | translate }}</button>\n" +
    "            </div>\n" +
    "          </form>\n" +
    "          \n" +
    "          <div class=\"text-center m-t m-b\"><a ui-sref=\"app.forgotpwd\">Forgot password?</a></div>\n" +
    "       \n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"panel-body\"  ng-show=\"loginTabState.signup\">\n" +
    "\n" +
    "          <a ng-click=\"clickLoading('app.register')\" class=\"btn btn-lg btn-orange btn-block\">{{' page.login.goToSignUp' | translate}}</a>\n" +
    "\n" +
    "        </div>\n" +
    "        \n" +
    "      </div>\n" +
    "\n" +
    "\n" +
    "      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/socialLogin.html' \" />\n" +
    "\n" +
    "\n" +
    "    </div>\n" +
    "\n" +
    "      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/impressumBottomBlock.html' \" />\n" +
    "\n" +
    "    <!--<div class=\"text-center\" ng-include=\"'angulr/tpl/blocks/page_footer.html'\">-->\n" +
    "      <!--&lt;!&ndash;{% include 'blocks/page_footer.html' %}&ndash;&gt;-->\n" +
    "    <!--</div>-->\n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_privacy.html",
    "<div class=\"hbox hbox-auto-xs\" ng-init=\"\n" +
    "  app.settings.asideFixed = true;\n" +
    "  app.settings.asideDock = false;\n" +
    "  app.settings.container = false;\n" +
    "  app.hideAside = false;\n" +
    "  app.hideFooter = false;\n" +
    "  app.header.showTab = false;\n" +
    "  app.header.showBackArrow = true;\n" +
    "  app.rootSettings.darkBg = true;\n" +
    "  \">\n" +
    "\n" +
    "	<div class=\"bg-light lter b-b wrapper-md\">\n" +
    "		<h1 class=\"m-n font-thin h3\">hotelico.de Privacy Policy</h1>\n" +
    "	</div>\n" +
    "	<div class=\"wrapper-md\">\n" +
    "		<div class=\"row\">\n" +
    "			<div style=\"padding: 5px;\">\n" +
    "				<!--class=\"col-sm-9\">-->\n" +
    "				\n" +
    "	\n" +
    "	 \n" +
    "\n" +
    "	This privacy policy has been compiled to better serve those who are\n" +
    "	concerned with how their 'Personally identifiable information' (PII) is\n" +
    "	being used online. PII, as used in US privacy law and information security,\n" +
    "	is information that can be used on its own or with other information to\n" +
    "	identify, contact, or locate a single person, or to identify an individual\n" +
    "	in context. Please read our privacy policy carefully to get a clear\n" +
    "	understanding of how we collect, use, protect or otherwise handle your\n" +
    "	Personally Identifiable Information in accordance with our website.\n" +
    "\n" +
    "	<br/><br/>\n" +
    "\n" +
    "	<b>What personal information do we collect from the people that visit our\n" +
    "	blog, website or app?</b>\n" +
    "\n" +
    "	<br/><br/>\n" +
    "\n" +
    "\n" +
    "	When ordering or registering on our site, as appropriate, you may be asked\n" +
    "	to enter your name, email address or other details to help you with your\n" +
    "	experience.\n" +
    "\n" +
    "	<br/><br/>\n" +
    "\n" +
    "	<b>When do we collect information?</b>\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	We collect information from you when you register on our site or enter\n" +
    "	information on our site.\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	<b>How do we use your information?</b>\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	We may use the information we collect from you when you register, make a\n" +
    "	purchase, sign up for our newsletter, respond to a survey or marketing\n" +
    "	communication, surf the website, or use certain other site features in the\n" +
    "	following ways:\n" +
    "				<br/><br/>\n" +
    "				<ul>\n" +
    "					 <li>To personalize user's experience and to allow us to deliver the\n" +
    "	type of content and product offerings in which you are most interested.\n" +
    "</li></ul>\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	<b>How do we protect visitor information?</b>\n" +
    "				<br/><br/>\n" +
    "\n" +
    "\n" +
    "	Our website is scanned on a regular basis for security holes and known\n" +
    "	vulnerabilities in order to make your visit to our site as safe as possible.\n" +
    "				<br/><br/>\n" +
    "	We use regular Malware Scanning.\n" +
    "				<br/><br/>\n" +
    "	Your personal information is contained behind secured networks and is only\n" +
    "	accessible by a limited number of persons who have special access rights to\n" +
    "	such systems, and are required to keep the information confidential.\n" +
    "				<br/><br/>\n" +
    "\n" +
    "\n" +
    "	We implement a variety of security measures when a user enters, submits, or\n" +
    "	accesses their information to maintain the safety of your personal\n" +
    "	information.\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	All transactions are processed through a gateway provider and are not\n" +
    "	stored or processed on our servers.\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	<b>Do we use 'cookies'?</b>\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	Yes. Cookies are small files that a site or its service provider transfers\n" +
    "	to your computer's hard drive through your Web browser (if you allow) that\n" +
    "	enables the site's or service provider's systems to recognize your browser\n" +
    "	and capture and remember certain information. For instance, we use cookies\n" +
    "	to help us remember and process the items in your shopping cart. They are\n" +
    "	also used to help us understand your preferences based on previous or\n" +
    "	current site activity, which enables us to provide you with improved\n" +
    "	services. We also use cookies to help us compile aggregate data about site\n" +
    "	traffic and site interaction so that we can offer better site experiences\n" +
    "	and tools in the future.\n" +
    "\n" +
    "				<br/><br/>\n" +
    "	<b>We use cookies to:</b>\n" +
    "				<br/><br/>\n" +
    "	<ul>\n" +
    "	<li>Understand and save user's preferences for future visits.</li>\n" +
    "	</ul>\n" +
    "				<br/><br/>\n" +
    "	You can choose to have your computer warn you each time a cookie is being\n" +
    "	sent, or you can choose to turn off all cookies. You do this through your\n" +
    "	browser (like Internet Explorer) settings. Each browser is a little\n" +
    "	different, so look at your browser's Help menu to learn the correct way to\n" +
    "	modify your cookies.\n" +
    "\n" +
    "				<br/><br/>\n" +
    "	<b>If users disable cookies in their browser:</b>\n" +
    "				<br/><br/>\n" +
    "\n" +
    "\n" +
    "	If you disable cookies off, some features will be disabled. It will turn\n" +
    "	off some of the features that make your site experience more efficient and\n" +
    "	some of our services will not function properly.\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	<b>Third Party Disclosure</b>\n" +
    "				<br/><br/>\n" +
    "\n" +
    "\n" +
    "	We do not sell, trade, or otherwise transfer to outside parties your\n" +
    "	personally identifiable information.\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	<b>Third party links</b>\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	Occasionally, at our discretion, we may include or offer third party\n" +
    "	products or services on our website. These third party sites have separate\n" +
    "	and independent privacy policies. We therefore have no responsibility or\n" +
    "	liability for the content and activities of these linked sites.\n" +
    "	Nonetheless, we seek to protect the integrity of our site and welcome any\n" +
    "	feedback about these sites.\n" +
    "				<br/><br/>\n" +
    "\n" +
    "\n" +
    "	<b>Google</b>\n" +
    "				<br/><br/>\n" +
    "\n" +
    "\n" +
    "	Google's advertising requirements can be summed up by Google's Advertising\n" +
    "	Principles. They are put in place to provide a positive experience for\n" +
    "	users. <a href=\"https://support.google.com/adwordspolicy/answer/1316548?hl=en\">https://support.google.com/adwordspolicy/answer/1316548?hl=en</a>\n" +
    "				<br/><br/>\n" +
    "	We have not enabled Google AdSense on our site but we may do so in the\n" +
    "	future.\n" +
    "				<br/><br/>\n" +
    "\n" +
    "\n" +
    "	<b>How does our site handle do not track signals?</b>\n" +
    "				<br/><br/>\n" +
    "	We honor do not track signals and do not track, plant cookies, or use\n" +
    "	advertising when a Do Not Track (DNT) browser mechanism is in place.\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	<!--<b>Does our site allow third party behavioral tracking?</b>-->\n" +
    "				<!--<br/><br/>-->\n" +
    "	<!--It's also important to note that we do not allow third party behavioral-->\n" +
    "	<!--tracking-->\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	<b>COPPA (Children Online Privacy Protection Act)</b>\n" +
    "				<br/><br/>\n" +
    "\n" +
    "\n" +
    "	When it comes to the collection of personal information from children under\n" +
    "	13, the Children's Online Privacy Protection Act (COPPA) puts parents in\n" +
    "	control. The Federal Trade Commission, the nation's consumer protection\n" +
    "	agency, enforces the COPPA Rule, which spells out what operators of\n" +
    "	websites and online services must do to protect children's privacy and\n" +
    "	safety online.\n" +
    "				<br/><br/>\n" +
    "	We do not specifically market to children under 13.\n" +
    "				<br/><br/>\n" +
    "\n" +
    "\n" +
    "	<b>Fair Information Practices</b>\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	The Fair Information Practices Principles form the backbone of privacy law\n" +
    "	in the United States and the concepts they include have played a\n" +
    "	significant role in the development of data protection laws around the\n" +
    "	globe. Understanding the Fair Information Practice Principles and how they\n" +
    "	should be implemented is critical to comply with the various privacy laws\n" +
    "	that protect personal information.\n" +
    "				<br/><br/>\n" +
    "	<b>In order to be in line with Fair Information Practices we will take the\n" +
    "	following responsive action, should a data breach occur:</b>\n" +
    "				<br/><br/>\n" +
    "	We will notify the users via email\n" +
    "				<br/><br/>\n" +
    "				<ul>\n" +
    "					 <li>Within 1 business day</li></ul>\n" +
    "				<br/><br/>\n" +
    "	We will notify the users via in site notification\n" +
    "				<br/><br/>\n" +
    "				<ul>\n" +
    "					 <li> Within 1 business day</li></ul>\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	We also agree to the individual redress principle, which requires that\n" +
    "	individuals have a right to pursue legally enforceable rights against data\n" +
    "	collectors and processors who fail to adhere to the law. This principle\n" +
    "	requires not only that individuals have enforceable rights against data\n" +
    "	users, but also that individuals have recourse to courts or a government\n" +
    "	agency to investigate and/or prosecute non-compliance by data processors.\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	<b>CAN SPAM Act</b>\n" +
    "\n" +
    "\n" +
    "				<br/><br/>\n" +
    "	The CAN-SPAM Act is a law that sets the rules for commercial email,\n" +
    "	establishes requirements for commercial messages, gives recipients the\n" +
    "	right to have emails stopped from being sent to them, and spells out tough\n" +
    "	penalties for violations.\n" +
    "				<br/><br/>\n" +
    "	<b>We collect your email address in order to:</b>\n" +
    "\n" +
    "				<br/><br/>\n" +
    "	<b>To be in accordance with CANSPAM we agree to the following:</b>\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	<b> If at any time you would like to unsubscribe from receiving future\n" +
    "	emails, you can email us at</b>\n" +
    "				<br/><br/>\n" +
    "	and we will promptly remove you from </b>ALL</b> correspondence.\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	<b>Contacting Us</b>\n" +
    "\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	If there are any questions regarding this privacy policy you may contact us\n" +
    "	using the information below.\n" +
    "				<br/><br/>\n" +
    "	hotelico.de\n" +
    "				<br/>\n" +
    "	August-Schanz-Str. 28\n" +
    "				<br/>\n" +
    "	Frankfurt am Main, 60433\n" +
    "				<br/>\n" +
    "	Germany\n" +
    "				<br/>\n" +
    "	info@hotelico.de\n" +
    "				<br/><br/>\n" +
    "\n" +
    "	Last Edited on 2015-08-20\n" +
    "\n" +
    "</div>\n" +
    "		</div>\n" +
    "\n" +
    "	</div>\n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/page_profile.html",
    "<div ng-controller=\"ProfileController\" ng-init=\"\n" +
    "app.hideFooter = false;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "  <div class=\"panel panel-default\">\n" +
    "    \n" +
    "    <div class=\"panel-heading\" ngCloak>\n" +
    "      <div class=\"clearfix\">\n" +
    "        <a href class=\"pull-left thumb-md avatar b-3x m-r\">\n" +
    "          <!--<img src=\"{{getProfileImageUrl()}}\" alt=\"...\">-->\n" +
    "          <img ng-src=\"{{hotelState.profileData.avatarUrl}}\" alt=\"...\">\n" +
    "        </a>\n" +
    "        <div class=\"clear\">\n" +
    "          <div class=\"h3 m-t-xs m-b-xs\">\n" +
    "            {{hotelState.profileData.firstName}} {{hotelState.profileData.lastName}}\n" +
    "            <i class=\"fa fa-circle text-success pull-right text-xs m-t-sm\"></i>\n" +
    "            <br/>\n" +
    "            <a ui-sref=\"app.avatar\" style=\" font-size: 12px; text-decoration: underline;\">(Change Avatar)</a>\n" +
    "          </div>\n" +
    "          <small class=\"text-muted\">{{hotelState.profileData.status}}</small>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <div class=\"wrapper-md\">\n" +
    "\n" +
    "      <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "\n" +
    "      <div class=\"panel panel-default\">\n" +
    "        \n" +
    "        <div class=\"panel-heading font-bold\">\n" +
    "          {{:: 'profile.section.personalInfo' | translate }}\n" +
    "        </div>\n" +
    "  \n" +
    "        <div class=\"panel-body\">\n" +
    "         \n" +
    "          <div class=\"form-group\">\n" +
    "             \n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.statusLabel' | translate}}</label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <input type=\"text\" class=\"form-control rounded\" placeholder=\"{{::'profile.status' | translate}}\"  ng-model=\"localState.updateProfileData.status\">\n" +
    "              <span class=\"help-block m-b-none\">{{::'profile.statusDescr' | translate}}</span>\n" +
    "   \n" +
    "            </div>\n" +
    "          </div>\n" +
    "          \n" +
    "          <div class=\"line line-dashed b-b line-lg pull-in\" ng-show=\"localState.updateProfileData.avatarUrl.length>0\"></div>\n" +
    "\n" +
    "          <div class=\"form-group\" ng-show=\"hotelState.profileData.avatarUrl.length>0\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.showAvatar' | translate}}</label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <div class=\"btn-group\">\n" +
    "                <label class=\"i-switch m-t-xs m-r\">\n" +
    "                  <input type=\"checkbox\" checked=\"true\" ng-model=\"localState.updateProfileData.showAvatar\">\n" +
    "                  <i></i>\n" +
    "                </label>\n" +
    "              </div>\n" +
    "            </div>\n" +
    "\n" +
    "          </div>\n" +
    "          \n" +
    "          \n" +
    "          <!--<div class=\"line line-dashed b-b line-lg pull-in\"></div>-->\n" +
    "\n" +
    "          <!--<div class=\"form-group\">-->\n" +
    "            <!--<label class=\"col-sm-2 control-label\">{{::'profile.changeAvatar' | translate}}</label>-->\n" +
    "            <!--<div class=\"col-sm-10\">-->\n" +
    "\n" +
    "              <!--<div  ng-cloak>-->\n" +
    "                <!--<div>-->\n" +
    "                  <!--<div class=\"well\">-->\n" +
    "                    <!--<form action=\"\" class=\"dropzone\" dropzone=\"\" id=\"dropzone\">-->\n" +
    "                      <!--<div class=\"dz-default dz-message\">-->\n" +
    "                      <!--</div>-->\n" +
    "                    <!--</form>-->\n" +
    "                  <!--</div>-->\n" +
    "                  <!--<div class=\"pull-right\">-->\n" +
    "                    <!--&lt;!&ndash;<button class=\"btn btn-success\" ng-click=\"uploadFile()\">Upload Avatar</button>&ndash;&gt;-->\n" +
    "                    <!--<button class=\"btn btn-danger\" ng-click=\"reset()\" ng-show=\"fileAdded\">{{::'profile.removeAvatar' | translate}}</button>-->\n" +
    "                  <!--</div>-->\n" +
    "                <!--</div>-->\n" +
    "              <!--</div>-->\n" +
    "\n" +
    "            <!--</div>-->\n" +
    "          <!--</div>-->\n" +
    "          \n" +
    "          \n" +
    "          <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "\n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\"></label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <label class=\"i-checks\">\n" +
    "                <input type=\"radio\" value=\"m\" ng-model=\"localState.updateProfileData.sex\"><i></i> {{::'profile.gender-m' | translate}} &nbsp;\n" +
    "              </label>\n" +
    "              <label class=\"i-checks\">\n" +
    "                <input type=\"radio\" value=\"w\" ng-model=\"localState.updateProfileData.sex\"><i></i> {{::'profile.gender-f' | translate}}\n" +
    "              </label>\n" +
    "              <span class=\"requiredField\">*</span>\n" +
    "            </div>\n" +
    "          </div>\n" +
    "\n" +
    "          <!--<div class=\"line line-dashed b-b line-lg pull-in\"></div>-->\n" +
    "\n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.firstName' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <input type=\"text\" class=\"form-control\" placeholder=\"{{::'profile.firstName' | translate}}\"  ng-model=\"localState.updateProfileData.firstName\" required>\n" +
    "            </div>\n" +
    "          </div>\n" +
    "\n" +
    "          <!--<div class=\"line line-dashed b-b line-lg pull-in\"></div>-->\n" +
    "\n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.lastName' | translate}}</label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <input type=\"text\" class=\"form-control\" placeholder=\"{{::'profile.lastName' | translate}}\" ng-model=\"localState.updateProfileData.lastName\">\n" +
    "            </div>\n" +
    "          </div>\n" +
    "          \n" +
    "          <!--<div class=\"form-group\">-->\n" +
    "            <!--<label class=\"col-sm-2 control-label\">{{::'profile.section.aboutYou' | translate}}<span class=\"requiredField\">*</span></label>-->\n" +
    "            <!--<div class=\"col-sm-10\">-->\n" +
    "              <!--<div class=\"m-b\">-->\n" +
    "                <!--<input type=\"text\" class=\"form-control\" placeholder=\"{{::'firstName' | translate}}\"  ng-model=\"localState.updateProfileData.firstName\" required>-->\n" +
    "              <!--</div>-->\n" +
    "              <!--<div class=\"m-b\">-->\n" +
    "                <!--<input type=\"text\" class=\"form-control\" placeholder=\"{{::'lastName' | translate}}\" ng-model=\"localState.updateProfileData.lastName\" required>-->\n" +
    "              <!--</div>-->\n" +
    "              <!--<div class=\"m-b\">-->\n" +
    "                <!--<label class=\"i-checks\">-->\n" +
    "                  <!--<input type=\"radio\" value=\"m\" ng-model=\"localState.updateProfileData.sex\"><i></i> Mann &nbsp;-->\n" +
    "                <!--</label>-->\n" +
    "                <!--<label class=\"i-checks\">-->\n" +
    "                  <!--<input type=\"radio\" value=\"w\" ng-model=\"localState.updateProfileData.sex\"><i></i> Frau-->\n" +
    "                <!--</label>-->\n" +
    "              <!--</div>-->\n" +
    "            <!--</div>-->\n" +
    "          <!--</div>-->\n" +
    "          <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "  \n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.birthday' | translate}}</label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <!--< class=\"input-group\"  ng-controller=\"DatepickerCheckinCtrl\">-->\n" +
    "                <!--<input type=\"text\" placeholder=\"{{::'birthday' | translate}}\"  class=\"form-control\" datepicker-popup=\"{{::format}}\" ng-model=\"localState.updateProfileData.birthdayTimeString\" is-open=\"opened\" datepicker-options=\"dateOptions\" ng-required=\"true\" close-text=\"Close\" />-->\n" +
    "                              <!--<span class=\"input-group-btn\">-->\n" +
    "                                  <!--<button type=\"button\" class=\"btn btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button>-->\n" +
    "                              <!--</span>-->\n" +
    "              <!--</div>-->\n" +
    "\n" +
    "                <a editable-date=\"localState.profileBirthday\">{{ localState.generatedProfileBirthdayString || 'system.selectDate' | translate }}</a>\n" +
    "                <!--<select class=\"form-control ng-pristine localState.birthdayDaySelector\" ng-model=\"localState.birthday.day\" id=\"day\" ng-options=\"day as day for day in days\" placeholder=\"Tag\"></select>-->\n" +
    "                <!--<select class=\"form-control ng-pristine localState.birthdayMonthSelector\" ng-model=\"localState.birthday.month\" id=\"month\" ng-options=\"month.id as month.name for month in months\" placeholder=\"Monat\"></select>-->\n" +
    "                <!--<select class=\"form-control ng-pristine localState.birthdayYearSelector\" ng-model=\"localState.birthday.year\" id=\"year\" ng-options=\"year as year for year in years track by year\" placeholder=\"Jahr\"></select>-->\n" +
    "\n" +
    "              </div>\n" +
    "          </div>\n" +
    "          \n" +
    "          <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "  \n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.language' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              {{usedLanguage}}<div isteven-multi-select  style=\"margin-left: -15px;\" id=\"selectLanguages\" class=\"col-xs-10\" input-model=\"localState.languages\" output-model=\"localState.updateProfileData.languages\" button-label=\"icon\" item-label=\"icon name\" tick-property=\"ticked\" max-labels=\"5\" max-height=\"250px\" search-property=\"name\" output-properties=\"name\" helper-elements=\"filter\"></div>\n" +
    "            </div>\n" +
    "          </div>\n" +
    "          \n" +
    "          <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "  \n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.city' | translate}}</label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <input type=\"text\" class=\"form-control\" placeholder=\"{{::'profile.city' | translate}}\"  ng-model=\"localState.updateProfileData.city\">\n" +
    "            </div>\n" +
    "          </div>\n" +
    "          \n" +
    "          <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "  \n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.originalCity' | translate}}</label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <input type=\"text\" class=\"form-control\" placeholder=\"{{::'profile.originalCity' | translate}}\"  ng-model=\"localState.updateProfileData.originalCity\">\n" +
    "            </div>\n" +
    "          </div>\n" +
    "  \n" +
    "        </div>\n" +
    "      </div>\n" +
    "  \n" +
    "      <!-- #### arbeit --->\n" +
    "  \n" +
    "      <div class=\"panel panel-default\">\n" +
    "        <div class=\"panel-heading font-bold\">\n" +
    "          {{::'profile.section.aboutYourJob' | translate}}\n" +
    "        </div>\n" +
    "  \n" +
    "        <div class=\"panel-body\">\n" +
    "  \n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.jobTitle' | translate}}</label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <input type=\"text\" class=\"form-control\" placeholder=\"{{::'profile.jobTitle' | translate}}\" ng-model=\"localState.updateProfileData.jobTitle\">\n" +
    "              <!--<span class=\"help-block m-b-none\">{{::'profile.jobTitleDescr' | translate}}</span>-->\n" +
    "            </div>\n" +
    "          </div>\n" +
    "  \n" +
    "          <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "  \n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.jobDescriptor' | translate}}</label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <input type=\"text\" class=\"form-control\" placeholder=\"{{::'profile.jobDescriptor' | translate}}\" ng-model=\"localState.updateProfileData.jobDescriptor\">\n" +
    "              <span class=\"help-block m-b-none\">{{::'profile.jobDescriptorDescr' | translate}}</span>\n" +
    "            </div>\n" +
    "          </div>\n" +
    "  \n" +
    "          <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "  \n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.company' | translate}}</label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <input type=\"text\" class=\"form-control\" placeholder=\"{{::'profile.company' | translate}}\" ng-model=\"localState.updateProfileData.company\">\n" +
    "              <!--<span class=\"help-block m-b-none\">{{::'profile.companyDescr' | translate}}</span>-->\n" +
    "            </div>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "  \n" +
    "      <!-- #### lopgin --->\n" +
    "  \n" +
    "      <div class=\"panel panel-default\">\n" +
    "        \n" +
    "        <div class=\"panel-heading font-bold\">\n" +
    "          {{::'profile.section.loginData' | translate}}\n" +
    "        </div>\n" +
    "  \n" +
    "        <div class=\"panel-body\">\n" +
    "  \n" +
    "          <!--<div class=\"form-group\">-->\n" +
    "            <!--<label class=\"col-sm-2 control-label\">Email</label>-->\n" +
    "            <!--<div class=\"col-sm-10\">-->\n" +
    "              <!--<input type=\"text\" class=\"form-control\" placeholder=\"{{::'email' | translate}}\"  ng-model=\"localState.updateProfileData.email\">-->\n" +
    "            <!--</div>-->\n" +
    "          <!--</div>-->\n" +
    "  \n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-lg-2 control-label\">Email<span class=\"requiredField\">*</span></label>\n" +
    "            <div class=\"col-lg-10\">\n" +
    "              <p class=\"form-control-static\" ng-show=\"localState.goodEmail\">{{localState.updateProfileData.email}}</p>\n" +
    "              <input type=\"email\" class=\"form-control\" placeholder=\"email\"  ng-model=\"localState.updateProfileData.email\" ng-hide=\"localState.goodEmail\">\n" +
    "\n" +
    "            </div>\n" +
    "          </div>\n" +
    "  \n" +
    "          <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "         \n" +
    "          <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{::'profile.newPasswordLabel' | translate}}</label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "              <div class=\"m-b\">\n" +
    "                <input type=\"password\" name=\"password\" class=\"form-control\" id=\"inputPassword\" ng-model=\"localState.updateProfileData.password\" placeholder=\"{{::'profile.password' | translate}}\">\n" +
    "              </div>\n" +
    "              <div class=\"m-b\">\n" +
    "                <input type=\"password\" name=\"password\" class=\"form-control\" id=\"inputConfirmPassword\" ng-model=\"localState.updateProfileData.confirmPassword\" placeholder=\"{{::'profile.confirmPassword' | translate}}\">\n" +
    "              </div>\n" +
    "            </div>\n" +
    "          </div>\n" +
    "  \n" +
    "        </div>\n" +
    "        \n" +
    "      </div>\n" +
    "  \n" +
    "    </div>\n" +
    "  </div>\n" +
    "    \n" +
    "  <div class=\"container w-xxl w-auto-xs ng-scope\" style=\"margin-bottom: 50px;\">\n" +
    "    <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "    <button type=\"submit\" class=\"btn btn-lg btn-success btn-block btn-addon\" ng-click=\"submitProfile()\"  ng-disabled=\"!localState.updateProfileData.firstName || !localState.updateProfileData.sex\" ><i class=\"fa fa-pencil-square-o\"></i>{{'profile.changeData' | translate }}</button>\n" +
    "  </div>\n" +
    "    \n" +
    "</div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_register.html",
    "<div class=\"bg-light lter b-b wrapper-md\">\n" +
    "    <h1 class=\"m-n font-thin h3\">Anmelden</h1>\n" +
    "</div>\n" +
    "<div class=\"wrapper-md\" ng-controller=\"RegisterController\" ng-init=\"\n" +
    "app.hideFooter = true;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "\n" +
    "<!--<form editable-form name=\"form\" class=\"form-horizontal\" > &lt;!&ndash;method=\"get\">&ndash;&gt;-->\n" +
    "    <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "    \n" +
    "    <div class=\"panel panel-default\">\n" +
    "        <div class=\"panel-heading font-bold\">\n" +
    "            Personal Information\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"panel-body\">\n" +
    "            \n" +
    "            \n" +
    "            <div class=\"form-group\">\n" +
    "                <label class=\"col-sm-2 control-label\"></label>\n" +
    "                <div class=\"col-sm-10\">\n" +
    "                    <label class=\"i-checks\">\n" +
    "                        <input type=\"radio\" value=\"m\" ng-model=\"localState.profile.sex\"><i></i> Herr &nbsp;\n" +
    "                    </label>\n" +
    "                    <label class=\"i-checks\">\n" +
    "                        <input type=\"radio\" value=\"w\" ng-model=\"localState.profile.sex\"><i></i> Frau\n" +
    "                    </label>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "            <!--<div class=\"line line-dashed b-b line-lg pull-in\"></div>-->\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{'firstName' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "                <input type=\"text\" class=\"form-control\" placeholder=\"{{'firstName' | translate}}\"  ng-model=\"localState.profile.firstName\" required>\n" +
    "            </div>\n" +
    "            </div>\n" +
    "            \n" +
    "            <!--<div class=\"line line-dashed b-b line-lg pull-in\"></div>-->\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "            <label class=\"col-sm-2 control-label\">{{'lastName' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "            <div class=\"col-sm-10\">\n" +
    "                <input type=\"text\" class=\"form-control\" placeholder=\"{{'lastName' | translate}}\" ng-model=\"localState.profile.lastName\" required>\n" +
    "            </div>\n" +
    "            </div>\n" +
    "            \n" +
    "            \n" +
    "            <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "            \n" +
    "            <div class=\"form-group\">\n" +
    "                <!--<form editable-form>-->\n" +
    "                <label class=\"col-sm-2 control-label\">Geburtstag</label>\n" +
    "                <div class=\"col-sm-10\">\n" +
    "                       \n" +
    "                    <a editable-date=\"localState.registerBirthday\">{{ getRegisterBirthdayString() || 'system.selectDate' | translate }}</a>\n" +
    "\n" +
    "                </div>\n" +
    "                <!--</form>-->\n" +
    "            </div>\n" +
    "            \n" +
    "            <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label class=\"col-sm-2 control-label\">{{'language' | translate}}<span class=\"requiredField\">*</span></label>\n" +
    "                <div class=\"col-sm-10\">\n" +
    "                    <div isteven-multi-select  style=\"margin-left: -15px;\" id=\"selectLanguages\" class=\"col-xs-10\" input-model=\"localState.languages\" output-model=\"localState.profile.languages\" button-label=\"icon\" item-label=\"icon name\" tick-property=\"ticked\" max-labels=\"5\" max-height=\"320px\" search-property=\"name\" output-properties=\"name\" helper-elements=\"filter\"></div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            \n" +
    "            <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label class=\"col-sm-2 control-label\">{{'profile.city' | translate}}</label>\n" +
    "                <div class=\"col-sm-10\">\n" +
    "                    <input type=\"text\" class=\"form-control\" placeholder=\"{{'profile.city' | translate}}\"  ng-model=\"localState.profile.city\">\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            \n" +
    "            <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label class=\"col-sm-2 control-label\">{{'profile.originalCity' | translate}}</label>\n" +
    "                <div class=\"col-sm-10\">\n" +
    "                    <input type=\"text\" class=\"form-control\" placeholder=\"{{'profile.originalCity' | translate}}\"  ng-model=\"localState.profile.originalCity\">\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            \n" +
    "        </div>\n" +
    "    </div>\n" +
    "    \n" +
    "    <!-- #### arbeit --->\n" +
    "\n" +
    "    <div class=\"panel panel-default\">\n" +
    "        <div class=\"panel-heading font-bold\">\n" +
    "            {{'profile.section.aboutYourJob' | translate}}\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"panel-body\">\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label class=\"col-sm-2 control-label\">{{'jobTitle' | translate}}</label>\n" +
    "                <div class=\"col-sm-10\">\n" +
    "                    <input type=\"text\" class=\"form-control\" placeholder=\"{{'jobTitle' | translate}}\" ng-model=\"localState.profile.jobTitle\">\n" +
    "                    <span class=\"help-block m-b-none\">A block of help text that breaks onto a new line and may extend beyond one line.</span>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label class=\"col-sm-2 control-label\">{{'jobDescriptor' | translate}}</label>\n" +
    "                <div class=\"col-sm-10\">\n" +
    "                    <input type=\"text\" class=\"form-control\" placeholder=\"{{'jobDescriptor' | translate}}\" ng-model=\"localState.profile.jobDescriptor\">\n" +
    "                    <span class=\"help-block m-b-none\">A block of help text that breaks onto a new line and may extend beyond one line.</span>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label class=\"col-sm-2 control-label\">{{'company' | translate}}</label>\n" +
    "                <div class=\"col-sm-10\">\n" +
    "                    <input type=\"text\" class=\"form-control\" placeholder=\"{{'company' | translate}}\" ng-model=\"localState.profile.company\">\n" +
    "                    <span class=\"help-block m-b-none\">A block of help text that breaks onto a new line and may extend beyond one line.</span>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div> \n" +
    "    \n" +
    "    <!-- #### lopgin --->\n" +
    "\n" +
    "    <div class=\"panel panel-default\">\n" +
    "        <div class=\"panel-heading font-bold\">\n" +
    "            {{'profile.section.loginData' | translate}}\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"panel-body\">\n" +
    "\n" +
    "            <div class=\"form-group\">\n" +
    "                <label class=\"col-sm-2 control-label\">Email<span class=\"requiredField\">*</span></label>\n" +
    "                <div class=\"col-sm-10\">\n" +
    "                    <input type=\"email\" class=\"form-control\" placeholder=\"{{'email' | translate}}\"  ng-model=\"localState.profile.email\" required>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"line line-dashed b-b line-lg pull-in\"></div>\n" +
    "            <div class=\"form-group\">\n" +
    "                <label class=\"col-sm-2 control-label\">Password<span class=\"requiredField\">*</span></label>\n" +
    "                <div class=\"col-sm-10\">\n" +
    "                    <div class=\"m-b\">\n" +
    "                        <input type=\"password\" name=\"password\" class=\"form-control\" id=\"inputPassword\" ng-model=\"localState.profile.password\" placeholder=\"{{'password' | translate}}\">\n" +
    "                    </div>\n" +
    "                    <div class=\"m-b\">\n" +
    "                        <input type=\"password\" name=\"password\" class=\"form-control\" id=\"inputConfirmPassword\" ng-model=\"localState.profile.confirmPassword\" placeholder=\"{{'confirmPassword' | translate}}\">\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            \n" +
    "        </div>\n" +
    "    </div>\n" +
    "    \n" +
    "    <div class=\"container w-xxl w-auto-xs ng-scope\">\n" +
    "    \n" +
    "        <div class=\"checkbox m-b-md m-t-none\">\n" +
    "            <label class=\"i-checks\">\n" +
    "                <input type=\"checkbox\" ng-model=\"localState.agree\" required><i></i> {{'page.register.agree' | translate}} <a href>{{'page.register.termsAndConditions' | translate}}</a>\n" +
    "            </label>\n" +
    "        </div>\n" +
    "        <br/>\n" +
    "\n" +
    "        <div data-ng-include=\" 'angulr/tpl/hotel/blocks/showAlertBlock.html' \" />\n" +
    "\n" +
    "\n" +
    "        <!--<button type=\"submit\" class=\"btn btn-lg btn-primary btn-block\" ng-click=\"signup()\" ng-disabled='form.$invalid'><span translate=\"hotel.login.CREATEACCOUNT\">Create an account</span></button>-->\n" +
    "        <button type=\"submit\" class=\"btn btn-lg btn-orange btn-block\" ng-click=\"submitRegister()\"  ng-disabled=\"!localState.profile.firstName || !localState.profile.lastName || !localState.profile.email || !localState.agree\" >{{'page.register.doRegister' | translate }}</button>\n" +
    "        <div class=\"line line-dashed\"></div>\n" +
    "        <p class=\"text-center\"><small>{{'page.register.alreadyHaveAccount' | translate}}</small></p>\n" +
    "        <a ui-sref=\"access.login\" class=\"btn btn-lg btn-default btn-block\">{{'page.login.doLogin' | translate }}</a>\n" +
    "    </div>\n" +
    "<!--</form>-->\n" +
    "</div>\n" +
    "\n" +
    "\n" +
    "<!--TODO EUGEN: NGMATERIAL-->\n" +
    "<!--<h4>Inputs</h4>-->\n" +
    "<!--<div class=\"panel card wrapper\" ng-controller=\"MDInputCtrl\">-->\n" +
    "    <!--<div class=\"row\">-->\n" +
    "        <!--<md-input-container class=\"md-primary col-sm-6\">-->\n" +
    "            <!--<label>Title</label>-->\n" +
    "            <!--<input ng-model=\"user.title\">-->\n" +
    "        <!--</md-input-container>-->\n" +
    "        <!--<md-input-container class=\"col-sm-6\">-->\n" +
    "            <!--<label>Email</label>-->\n" +
    "            <!--<input ng-model=\"user.email\" type=\"email\">-->\n" +
    "        <!--</md-input-container>-->\n" +
    "    <!--</div>-->\n" +
    "    <!--<form name=\"userForm\">-->\n" +
    "\n" +
    "        <!--<md-input-container flex>-->\n" +
    "            <!--<label>Company (Disabled)</label>-->\n" +
    "            <!--<input ng-model=\"user.company\" disabled>-->\n" +
    "        <!--</md-input-container>-->\n" +
    "\n" +
    "        <!--<div layout layout-sm=\"column\">-->\n" +
    "            <!--<md-input-container flex>-->\n" +
    "                <!--<label>First Name</label>-->\n" +
    "                <!--<input ng-model=\"user.firstName\">-->\n" +
    "            <!--</md-input-container>-->\n" +
    "            <!--<md-input-container flex>-->\n" +
    "                <!--<label>Last Name</label>-->\n" +
    "                <!--<input ng-model=\"theMax\">-->\n" +
    "            <!--</md-input-container>-->\n" +
    "        <!--</div>-->\n" +
    "\n" +
    "        <!--<md-input-container flex>-->\n" +
    "            <!--<label>Address</label>-->\n" +
    "            <!--<input ng-model=\"user.address\">-->\n" +
    "        <!--</md-input-container>-->\n" +
    "\n" +
    "        <!--<div layout layout-sm=\"column\">-->\n" +
    "            <!--<md-input-container flex>-->\n" +
    "                <!--<label>City</label>-->\n" +
    "                <!--<input ng-model=\"user.city\">-->\n" +
    "            <!--</md-input-container>-->\n" +
    "            <!--<md-input-container flex>-->\n" +
    "                <!--<label>State</label>-->\n" +
    "                <!--<input ng-model=\"user.state\">-->\n" +
    "            <!--</md-input-container>-->\n" +
    "            <!--<md-input-container flex>-->\n" +
    "                <!--<label>Postal Code</label>-->\n" +
    "                <!--<input ng-model=\"user.postalCode\">-->\n" +
    "            <!--</md-input-container>-->\n" +
    "        <!--</div>-->\n" +
    "\n" +
    "        <!--<md-input-container flex>-->\n" +
    "            <!--<label>Biography</label>-->\n" +
    "            <!--<textarea ng-model=\"user.biography\" columns=\"1\" md-maxlength=\"150\"></textarea>-->\n" +
    "        <!--</md-input-container>-->\n" +
    "    <!--</form>-->\n" +
    "    <!--<h5>Errors</h5>-->\n" +
    "    <!--<form name=\"projectForm\">-->\n" +
    "        <!--<md-input-container>-->\n" +
    "            <!--<label>Description</label>-->\n" +
    "            <!--<input md-maxlength=\"30\" required name=\"description\" ng-model=\"project.description\">-->\n" +
    "            <!--<div ng-messages=\"projectForm.description.$error\">-->\n" +
    "                <!--<div ng-message=\"required\">This is required.</div>-->\n" +
    "                <!--<div ng-message=\"md-maxlength\">The name has to be less than 30 characters long.</div>-->\n" +
    "            <!--</div>-->\n" +
    "        <!--</md-input-container>-->\n" +
    "        <!--<md-input-container>-->\n" +
    "            <!--<label>Client Name</label>-->\n" +
    "            <!--<input required name=\"clientName\" ng-model=\"project.clientName\">-->\n" +
    "            <!--<div ng-messages=\"projectForm.clientName.$error\">-->\n" +
    "                <!--<div ng-message=\"required\">This is required.</div>-->\n" +
    "            <!--</div>-->\n" +
    "        <!--</md-input-container>-->\n" +
    "        <!--<md-input-container>-->\n" +
    "            <!--<label>Hourly Rate (USD)</label>-->\n" +
    "            <!--<input required type=\"number\" step=\"any\" name=\"rate\" ng-model=\"project.rate\" min=\"800\" max=\"4999\" required>-->\n" +
    "            <!--<div ng-messages=\"projectForm.rate.$error\">-->\n" +
    "                <!--<div ng-message=\"required\">You've got to charge something! You can't just <b>give away</b> a Missile Defense System.</div>-->\n" +
    "                <!--<div ng-message=\"min\">You should charge at least $800 an hour. This job is a big deal... if you mess up, everyone dies!</div>-->\n" +
    "                <!--<div ng-message=\"max\">$5,000 an hour? That's a little ridiculous. I doubt event Bill Clinton could afford that.</div>-->\n" +
    "            <!--</div>-->\n" +
    "        <!--</md-input-container>-->\n" +
    "    <!--</form>-->\n" +
    "<!--</div>-->\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/page_userInfo.html",
    "<div ng-controller=\"ProfileController\" ng-init=\"\n" +
    "app.hideFooter = false;\n" +
    "app.header.showTab = false;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "\">\n" +
    "\n" +
    "    <div class=\"panel panel-default\">\n" +
    "        <div class=\"panel-heading\" ngCloak>\n" +
    "            <div class=\"clearfix\">\n" +
    "                <a href class=\"pull-left thumb-md avatar b-3x m-r\">\n" +
    "                    <img ng-src=\"{{localState.userData.avatarUrl}}\" alt=\"...\">\n" +
    "                    <i class=\"on md b-white right customerOnlineStatus\" ng-show=\"hotelNotification.notificationObj.hotelOnlineGuestIds[app.header.chatPartnerId]\"></i>\n" +
    "                    <i class=\"offline md b-white right customerOnlineStatus\" ng-hide=\"hotelNotification.notificationObj.hotelOnlineGuestIds[app.header.chatPartnerId]\"></i>\n" +
    "\n" +
    "                </a>\n" +
    "                <div class=\"clear\">\n" +
    "                    <div class=\"h3 m-t-xs m-b-xs\">\n" +
    "                        {{localState.userData.firstName}} {{localState.userData.lastName}}\n" +
    "                        <!--<i class=\"fa fa-circle text-success text-xs m-t-sm\" ng-show=\"hotelNotification.notificationObjhotelOnlineGuestIds[localState.userData.id]\"></i>-->\n" +
    "                        <!--<i class=\"fa fa-circle text-offline text-xs m-t-sm\" ng-hide=\"hotelNotification.notificationObjhotelOnlineGuestIds[localState.userData.id]\"></i>-->\n" +
    "                    </div>\n" +
    "                    <small class=\"text-muted\">{{localState.userData.status}}</small>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"wrapper-md\">\n" +
    "            <div class=\"panel panel-default\">\n" +
    "                 \n" +
    "\n" +
    "                <div class=\"panel-body\">\n" +
    "\n" +
    "                    <div class=\"form-group\" ng-hide=\"!localState.userData.firstName\">\n" +
    "                        <label class=\"col-xs-6 control-label\">{{'profile.firstName' | translate}}:</label>\n" +
    "                        <div class=\"col-xs-6\">\n" +
    "                            {{localState.userData.firstName}}\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    \n" +
    "                    <div class=\"line line-dashed b-b line-lg pull-in\" ng-hide=\"!localState.userData.lastName\"></div>\n" +
    "\n" +
    "                    <div class=\"form-group\" ng-hide=\"!localState.userData.lastName\">\n" +
    "                        <label class=\"col-xs-6 control-label\">{{'profile.lastName' | translate}}:</label>\n" +
    "                        <div class=\"col-xs-6\">\n" +
    "                            {{localState.userData.lastName}}\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    \n" +
    "                    <div class=\"line line-dashed b-b line-lg pull-in\" ng-hide=\"!localState.userData.hotelName\"></div>\n" +
    "\n" +
    "                    <div class=\"form-group\" ng-show=\"localState.userData.checkedIn\">\n" +
    "                        <label class=\"col-xs-6 control-label\">{{'system.hotel' | translate}}:</label>\n" +
    "                        <div class=\"col-xs-6\" ng-show=\"localState.userData.hotelId != hotelState.profileData.hotelId\">\n" +
    "                            <a style=\"text-decoration: underline;\" ui-sref=\"app.hotelList({filterCity: localState.userData.hotelCity, filterHotelId: localState.userData.hotelId})\">\n" +
    "                                {{localState.userData.hotelName}}, {{localState.userData.hotelCity}}\n" +
    "                            </a>\n" +
    "                        </div>\n" +
    "                        <div class=\"col-xs-6\" ng-show=\"localState.userData.hotelId == hotelState.profileData.hotelId\">\n" +
    "                            <a style=\"text-decoration: underline;\" ui-sref=\"app.hotel\">\n" +
    "                                {{localState.userData.hotelName}}, {{localState.userData.hotelCity}}\n" +
    "                            </a>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    \n" +
    "                    <div class=\"line line-dashed b-b line-lg pull-in\" ng-hide=\"!localState.userData.city\"></div>\n" +
    "\n" +
    "                    <div class=\"form-group\" ng-hide=\"!localState.userData.city\">\n" +
    "                        <label class=\"col-xs-6 control-label\">{{'profile.city' | translate}}:</label>\n" +
    "                        <div class=\"col-xs-6\">\n" +
    "                            {{localState.userData.city}}\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    \n" +
    "                    <div class=\"line line-dashed b-b line-lg pull-in\" ng-hide=\"!localState.userData.originalCity\"></div>\n" +
    "\n" +
    "                    <div class=\"form-group\" ng-hide=\"!localState.userData.originalCity\">\n" +
    "                        <label class=\"col-xs-6 control-label\">{{'profile.originalCity' | translate}}:</label>\n" +
    "                        <div class=\"col-xs-6\">\n" +
    "                            {{localState.userData.originalCity}}\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    <div class=\"line line-dashed b-b line-lg pull-in\" ng-hide=\"!localState.userData.company\"></div>\n" +
    "\n" +
    "                    <div class=\"form-group\" ng-hide=\"!localState.userData.company\">\n" +
    "                        <label class=\"col-xs-6 control-label\">{{'profile.company' | translate}}:</label>\n" +
    "                        <div class=\"col-xs-6\">\n" +
    "                            {{localState.userData.company}}\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    <div class=\"line line-dashed b-b line-lg pull-in\" ng-hide=\"!localState.userData.jobTitle\"></div>\n" +
    "\n" +
    "                    <div class=\"form-group\" ng-hide=\"!localState.userData.jobTitle\">\n" +
    "                        <label class=\"col-xs-6 control-label\">{{'profile.jobTitle' | translate}}:</label>\n" +
    "                        <div class=\"col-xs-6\">\n" +
    "                            {{localState.userData.jobTitle}}\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    <div class=\"line line-dashed b-b line-lg pull-in\" ng-hide=\"!localState.userData.jobDescriptor\"></div>\n" +
    "\n" +
    "                    <div class=\"form-group\" ng-hide=\"!localState.userData.jobDescriptor\">\n" +
    "                        <label class=\"col-xs-6 control-label\">{{'profile.jobDescriptor' | translate}}:</label>\n" +
    "                        <div class=\"col-xs-6\">\n" +
    "                            {{localState.userData.jobDescriptor}}\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                    <div class=\"line line-dashed b-b line-lg pull-in\" ng-show=\"localState.userData.languages && localState.userData.languages.length>0\"></div>\n" +
    "\n" +
    "                    <div class=\"form-group\" ng-show=\"localState.userData.languages && localState.userData.languages.length>0\">\n" +
    "                        <label class=\"col-xs-6 control-label\">{{'profile.language' | translate}}:</label>\n" +
    "                        <div class=\"col-xs-6\">\n" +
    "                            <span ng-repeat=\"nextLanguage in localState.userData.languages\"><img\n" +
    "                                    class=\"language-flag\" src=\"angulr/icons/flags/{{nextLanguage}}.png\"\n" +
    "                                    alt=\"{{nextLanguage}}\" style=\"margin: 3px;\"/></span>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                     \n" +
    "                    \n" +
    "             \n" +
    "             \n" +
    "                     \n" +
    "            <!--<a class=\"list-group-item profileInputContainer\" href ng-hide=\"!localState.userData.languages\">-->\n" +
    "                <!--&lt;!&ndash;<span class=\"badge bg-success\">25</span>&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<i class=\"fa fa-comment fa-fw text-muted\"></i>&ndash;&gt;-->\n" +
    "                <!--<div class=\"profileInputLabel\">{{'language' | translate}}:</div>-->\n" +
    "                 <!-- -->\n" +
    "                <!--<span ng-repeat=\"language in localState.userData.languages\"><img-->\n" +
    "                        <!--class=\"language-flag\" src=\"angulr/icons/flags/{{language}}.png\"-->\n" +
    "                        <!--alt=\"{{language}}\" style=\"margin: 3px;\"/></span>-->\n" +
    "            <!--</a>-->\n" +
    "            <!--<a class=\"list-group-item profileInputContainer\" href ng-hide=\"!localState.userData.interests\">-->\n" +
    "                <!--&lt;!&ndash;<span class=\"badge bg-success\">25</span>&ndash;&gt;-->\n" +
    "                <!--&lt;!&ndash;<i class=\"fa fa-comment fa-fw text-muted\"></i>&ndash;&gt;-->\n" +
    "                <!--<div class=\"profileInputLabel\">{{'interests' | translate}}:</div> -->\n" +
    "                <!-- -->\n" +
    "                <!--<span ng-repeat=\"interest in localState.userData.interests\">{{interest}}<span ng-show=\" ! $last \">,</span>-->\n" +
    "									<!--</span>-->\n" +
    "            <!--</a>            -->\n" +
    "           \n" +
    "            \n" +
    "        </div>\n" +
    "        </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "    \n" +
    "</div>");
  $templateCache.put("angulr/tpl/hotel/page_wall.html",
    "<div ng-controller=\"WallContr\" class=\"hbox hbox-auto-xs bg-white-only\" ng-init=\"\n" +
    "app.hideFooter = true;\n" +
    "app.header.showTab = true;\n" +
    "app.header.showBackArrow = true;\n" +
    "app.rootSettings.darkBg = true;\n" +
    "app.header.tabIndex = 2;\n" +
    "\">\n" +
    "\n" +
    "    <div class=\"hbox hbox-auto-xs hbox-auto-sm\" style=\"height: 100%\">\n" +
    "        <!-- main -->\n" +
    "        <div ng-class=\"{'col' : isSmartDevice}\">\n" +
    "\n" +
    "            <!-- / main -->\n" +
    "            <!-- right col -->\n" +
    "            <div ng-class=\"{'col w-md bg-white-only b-l bg-auto no-border-xs': isSmartDevice, 'bg-white-only bg-auto no-border-xs' : !isSmartDevice}\">\n" +
    "                <div ng-class=\"{'app-aside-right pos-fix no-padder w-md w-auto-xs bg-white b-l fadeInRight chatWindow' : isSmartDevice, 'bg-white b-l chatWindow' : !isSmartDevice}\" ng-style=\" ::isSmartDevice? {'height':'90%'}:{'height':'90%'}\"><!-- Eugen weg: animated -->\n" +
    "                    <!--style=\"top:auto;\">-->\n" +
    "                    <div class=\"vbox\" ng-style=\"::isSmartDevice? {}:{'height':'90vh'}\">\n" +
    "                       \n" +
    "                        <div class=\"b-b b-t b-light m-b\" ng-hide=\"::isSmartDevice\" style=\"padding: 5px 15px;\">\n" +
    "                            <a ui-sref=\"app.hotel\" class=\"pull-right text-muted text-md\"><i class=\"fa fa-times\"></i></a>\n" +
    "                            <a ui-sref=\"app.hotel\" style=\"text-decoration: underline;\">{{hotelState.profileData.hotelName}}</a> Wall\n" +
    "                        </div>\n" +
    "                        \n" +
    "                        <div class=\"row-row\" >\n" +
    "                            <div id=\"chatContainer\"  class=\"cell\" data-scroll-to-bottom='localState.wallMessages.length+localState.waitingMessages.length*2'>\n" +
    "                                <div class=\"cell-inner padder\" style=\"margin-top: 5px;    padding-right: 5px;\n" +
    "    padding-left: 5px; \">\n" +
    "\n" +
    "                                    <!-- wall list -->\n" +
    "                                    <div class=\"myCenter m-t\">\n" +
    "                                        <span ng-show=\"localState.wallMessages && localState.wallMessages.length==0\">{{::'page.wall.noEvents' | translate }}</span>\n" +
    "                                    </div>\n" +
    "                                    \n" +
    "                                    <div class=\"m-b b-l m-l-md streamline\" style=\"margin-bottom: 7px;\" ng-repeat=\"nextMessage in localState.wallMessages | orderBy:'creationTime':false track by nextMessage.entityId\">\n" +
    "                                        <div>\n" +
    "                                            <a class=\"pull-left thumb-sm avatar m-l-n-md\" ui-sref=\"app.user({userId: nextMessage.senderId})\" ng-show=\"hotelState.profileData.fullCheckin || nextMessage.senderId==hotelState.profileData.id\">\n" +
    "                                                <img src=\"{{getProfileImageUrl(nextMessage.senderId)}}\" class=\"img-circle\" style=\"background-color: #fff;\" alt=\"...\">\n" +
    "                                            </a>\n" +
    "                                            <a class=\"pull-left thumb-sm avatar m-l-n-md\" ng-hide=\"hotelState.profileData.fullCheckin || nextMessage.senderId==hotelState.profileData.id\">\n" +
    "                                                <img src=\"{{getProfileImageUrl(nextMessage.senderId, true)}}\" class=\"img-circle\" style=\"background-color: #fff;\" alt=\"...\">\n" +
    "                                            </a>\n" +
    "                                            <div class=\"m-l-lg panel b-a\" style=\"margin-bottom: 15px;border-radius: 3px;\">\n" +
    "                                                <div class=\"panel-heading pos-rlt b-b b-light wall\" style=\"padding: 1px 15px; background-color: beige;\">\n" +
    "                                                    <span class=\"wall arrow left\"></span>\n" +
    "\n" +
    "                                                    <a href ui-sref=\"app.user({userId: nextMessage.senderId})\" ng-show=\"hotelState.profileData.fullCheckin || nextMessage.senderId==hotelState.profileData.id\" class=\"customerNameElement\">{{nextMessage.senderName}}</a>\n" +
    "                                                    <a href ng-hide=\"hotelState.profileData.fullCheckin || nextMessage.senderId==hotelState.profileData.id\" class=\"customerNameElement\">Hidden Information</a>\n" +
    "                                                    <!--<span ng-show=\"!message.hotelStaff && hotelCustomersById[message.senderId] && hotelCustomersById[message.senderId].age\"> ({{hotelCustomersById[message.senderId].age}})</span><span ng-hide=\"!hotelCustomersById[message.senderId].jobTitle || hotelCustomersById[message.senderId].hotelStaff\">, {{hotelCustomersById[message.senderId].jobTitle}}</span>-->\n" +
    "                                                    \n" +
    "                                                    <!--<span ng-hide=\"!hotelCustomersById[message.senderId].company || hotelCustomersById[message.senderId].hotelStaff\"><span style=\"margin-left: -3px;\" ng-hide=\"!hotelCustomersById[message.senderId].jobTitle\">&nbsp; </span> {{hotelCustomersById[message.senderId].company}}</span>-->\n" +
    "\n" +
    "                                                    <label class=\"label bg-orange hotelStaff\" ng-show=\"nextMessage.hotelStaff\" style=\"margin-top: -2px;\">{{'system.hotelStaff' | translate}}</label> \n" +
    "                                                \n" +
    "                                                      <span class=\"text-muted m-l-sm pull-right messageTimeElement\">\n" +
    "                                                        <!--<i class=\"fa fa-clock-o\"></i>-->\n" +
    "                                                         <!--<time>{{nextMessage.sendTime | date:'dd.MM HH:mm'}}</time>-->\n" +
    "                                                          <time style=\"background-color: beige\">{{nextMessage.sendTimeString}}</time>\n" +
    "                                                      </span>\n" +
    "                                                </div>\n" +
    "                                                <div class=\"panel-body\" style=\" word-wrap: break-word;background-color:beige;padding: 0px;padding-left: 15px;\">\n" +
    "                                                    <div ng-class=\"{'staffMessage' : nextMessage.hotelStaff}\">{{nextMessage.message}}</div>\n" +
    "                                                    <!--<div class=\"m-t-sm\">-->\n" +
    "                                                        <!--&lt;!&ndash;<a href ui-toggle-class class=\"btn btn-default btn-xs active\">&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;<i class=\"fa fa-star-o text-muted text\"></i>&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;<i class=\"fa fa-star text-danger text-active\"></i>&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;Like&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;</a>&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;<a href class=\"btn btn-default btn-xs\">&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;<i class=\"fa fa-mail-reply text-muted\"></i> Reply&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;</a>&ndash;&gt;-->\n" +
    "                                                    <!--</div>-->\n" +
    "                                                </div>\n" +
    "                                            </div>\n" +
    "                                        </div>\n" +
    "                                        <!-- .comment-reply -->\n" +
    "                                        <!--<div class=\"m-l-lg\">-->\n" +
    "                                        <!--<a class=\"pull-left thumb-sm avatar\">-->\n" +
    "                                        <!--<img src=\"angulr/img/build/a8.jpg\" alt=\"...\">-->\n" +
    "                                        <!--</a>-->\n" +
    "                                        <!--<div class=\"m-l-xxl panel b-a\">-->\n" +
    "                                        <!--<div class=\"panel-heading pos-rlt\">-->\n" +
    "                                        <!--<span class=\"arrow left pull-up\"></span>-->\n" +
    "                                        <!--<span class=\"text-muted m-l-sm pull-right\">-->\n" +
    "                                        <!--<i class=\"fa fa-clock-o\"></i>-->\n" +
    "                                        <!--10m ago-->\n" +
    "                                        <!--</span>-->\n" +
    "                                        <!--<a href>Mika Sam</a>-->\n" +
    "                                        <!--Report this comment is helpful-->\n" +
    "                                        <!--</div>-->\n" +
    "                                        <!--</div>-->\n" +
    "                                        <!--</div>-->\n" +
    "                                        <!-- / .comment-reply -->\n" +
    "                                    </div>\n" +
    "\n" +
    "                                    <div class=\"m-b b-l m-l-md streamline\" ng-repeat=\"nextMessage in localState.waitingWallMessages | orderBy:'creationTime':false track by nextMessage.messageId\">\n" +
    "                                        <div>\n" +
    "                                            <a class=\"pull-left thumb-sm avatar m-l-n-md\" ui-sref=\"app.user({userId: nextMessage.senderId})\">\n" +
    "                                                <img src=\"{{getProfileImageUrl(nextMessage.senderId)}}\" class=\"img-circle\" style=\"background-color: #fff;\" alt=\"...\">\n" +
    "                                            </a>\n" +
    "                                            <div class=\"m-l-lg panel b-a\" style=\"border-radius: 15px; margin-bottom: 7px;\">\n" +
    "                                                <div class=\"panel-heading pos-rlt b-b b-light wall\" style=\"background-color: beige;\">\n" +
    "                                                    <span class=\"wall arrow left\" ></span>\n" +
    "\n" +
    "                                                    <a href ui-sref=\"app.user({userId: nextMessage.senderId})\" class=\"customerNameElement\">{{nextMessage.senderName}}</a>\n" +
    "\n" +
    "                                                    <!--<span ng-show=\"!message.hotelStaff && hotelCustomersById[message.senderId] && hotelCustomersById[message.senderId].age\"> ({{hotelCustomersById[message.senderId].age}})</span><span ng-hide=\"!hotelCustomersById[message.senderId].jobTitle || hotelCustomersById[message.senderId].hotelStaff\">, {{hotelCustomersById[message.senderId].jobTitle}}</span>-->\n" +
    "\n" +
    "                                                    <!--<span ng-hide=\"!hotelCustomersById[message.senderId].company || hotelCustomersById[message.senderId].hotelStaff\"><span style=\"margin-left: -3px;\" ng-hide=\"!hotelCustomersById[message.senderId].jobTitle\">&nbsp; </span> {{hotelCustomersById[message.senderId].company}}</span>-->\n" +
    "\n" +
    "                                                    <!--<label class=\"label bg-orange hotelStaff\" ng-show=\"message.hotelStaff\" style=\"margin-top: 8px;\">{{'system.hotelStaff' | translate}}</label> -->\n" +
    "                                                \n" +
    "                                                      <span class=\"text-muted m-l-sm pull-right messageTimeElement\">\n" +
    "                                                        <!--<i class=\"fa fa-clock-o\"></i>-->\n" +
    "                                                         <time style=\"background-color: beige;\">{{nextMessage.sendTime | date:'HH:mm'}}</time>\n" +
    "                                                      </span>\n" +
    "                                                </div>\n" +
    "                                                <div class=\"panel-body\" style=\" word-wrap: break-word;background-color:beige;padding: 0px;padding-left: 15px;\">\n" +
    "                                                    <div style=\"vertical-align: top;word-wrap: break-word;\" ng-class=\"{'staffMessage' : nextMessage.hotelStaff}\">\n" +
    "                                                        <img src=\"angulr/icons/loader.gif\" style=\"margin-right: 5px;\" ng-hide=\"localState.showResend\">\n" +
    "                                                        <i class=\"fa fa-exclamation text-muted\"  ng-show=\"localState.showResend\"/>\n" +
    "                                                        {{nextMessage.decodeMessage}}\n" +
    "                                                    </div>\n" +
    "                                                    <!--<div class=\"m-t-sm\">-->\n" +
    "                                                        <!--&lt;!&ndash;<a href ui-toggle-class class=\"btn btn-default btn-xs active\">&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;<i class=\"fa fa-star-o text-muted text\"></i>&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;<i class=\"fa fa-star text-danger text-active\"></i>&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;Like&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;</a>&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;<a href class=\"btn btn-default btn-xs\">&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;<i class=\"fa fa-mail-reply text-muted\"></i> Reply&ndash;&gt;-->\n" +
    "                                                        <!--&lt;!&ndash;</a>&ndash;&gt;-->\n" +
    "                                                    <!--</div>-->\n" +
    "\n" +
    "                                                    <small class=\"text-muted\" style=\"position: relative;float: right;margin-top: -15px;\" ng-show=\"localState.showResend\">\n" +
    "                                                        <div ng-click=\"resendWallRessource(nextMessage)\" class=\"btn btn-default btn-xs\">\n" +
    "                                                            <i class=\"fa fa-repeat text-muted\" ></i> Retry\n" +
    "                                                        </div>\n" +
    "                                                        <div  ng-click=\"removeWaitingMessage(nextMessage)\" class=\"btn btn-default btn-xs\">\n" +
    "                                                            <i class=\"fa fa-trash-o text-muted\" ></i> Remove\n" +
    "                                                        </div >\n" +
    "                                                        <!--<time>{{message.sendTimeString}}</time>-->\n" +
    "                                                    </small>\n" +
    "                                                    \n" +
    "                                                </div>\n" +
    "                                            </div>\n" +
    "                                        </div>\n" +
    "                                        <!-- .comment-reply -->\n" +
    "                                        <!--<div class=\"m-l-lg\">-->\n" +
    "                                        <!--<a class=\"pull-left thumb-sm avatar\">-->\n" +
    "                                        <!--<img src=\"angulr/img/build/a8.jpg\" alt=\"...\">-->\n" +
    "                                        <!--</a>-->\n" +
    "                                        <!--<div class=\"m-l-xxl panel b-a\">-->\n" +
    "                                        <!--<div class=\"panel-heading pos-rlt\">-->\n" +
    "                                        <!--<span class=\"arrow left pull-up\"></span>-->\n" +
    "                                        <!--<span class=\"text-muted m-l-sm pull-right\">-->\n" +
    "                                        <!--<i class=\"fa fa-clock-o\"></i>-->\n" +
    "                                        <!--10m ago-->\n" +
    "                                        <!--</span>-->\n" +
    "                                        <!--<a href>Mika Sam</a>-->\n" +
    "                                        <!--Report this comment is helpful-->\n" +
    "                                        <!--</div>-->\n" +
    "                                        <!--</div>-->\n" +
    "                                        <!--</div>-->\n" +
    "                                        <!-- / .comment-reply -->\n" +
    "                                    </div>\n" +
    "\n" +
    "                                    <chat-box></chat-box>\n" +
    "\n" +
    "                                    <!-- / chat list -->\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                        <div class=\"wrapper m-t b-t b-light\" style=\"margin-bottom: 25px; margin-top:0; padding-top: 0px;\">\n" +
    "                            <!--<a class=\"pull-left thumb-sm avatar\" style=\"margin-top: 5px;\"><img src=\"{{getProfileImageUrl()}}\" alt=\"...\"></a>-->\n" +
    "                            <a class=\"pull-left thumb-sm avatar\" style=\"margin-top: 5px;\"><img ng-src=\"{{hotelState.profileData.avatarUrl}}\" alt=\"...\"></a>\n" +
    "                            <div class=\"m-l-xxl\" ng-show=\"app.settings.blockGuestInWall && hotelState.profileData.guestAccount\" >\n" +
    "                                <div class=\"input-group\">\n" +
    "                                    <span class=\"form-control input-lg\" style=\"margin-top: 4px;\">\n" +
    "                                        {{'page.wall.guestMessage' | translate}}:\n" +
    "                                    </span>\n" +
    "                                    <span class=\"input-group-btn\" ng-whow=\"hotelState.profileData.guestAccount\">\n" +
    "                                        <button class=\"btn btn-orange btn-lg\" ng-click=\"clickLoading('app.me')\">\n" +
    "                                            {{'page.wall.register' | translate}}\n" +
    "                                        </button>\n" +
    "                                    </span>\n" +
    "                                </div>\n" +
    "                            </div>\n" +
    "                            <div class=\"m-l-xxl\" ng-hide=\"app.settings.blockGuestInWall && hotelState.profileData.guestAccount\">\n" +
    "                                <form class=\"m-b-none ng-pristine ng-valid\" ng-submit=\"addMessage()\" name=\"messageForm\">\n" +
    "                                    <div class=\"input-group\">\n" +
    "                                        <input type=\"text\" id=\"wallInput\" autocomplete=\"off\" ng-focus=\"scrollDownById('chatContainer')\" class=\"form-control input-lg\" placeholder=\"{{'page.wall.commentPlaceholder' | translate}}\" ng-model=\"localState.newWallMessage\">\n" +
    "                                        <span class=\"input-group-btn\">\n" +
    "                                            <button class=\"btn btn-orange btn-lg\" ng-disabled=\"localState.newWallMessage.length > localState.max\">\n" +
    "                                                <!--{{'page.wall.sendButton' | translate}}-->\n" +
    "                                                <i class=\"fa fa-angle-right\" style=\"font-size: 18px;\"/>\n" +
    "                                            </button>\n" +
    "                                        </span>\n" +
    "                                    </div>\n" +
    "                                    <div style=\"  margin-bottom: -20px;\">\n" +
    "                                        <span class=\"count\" ng-bind=\"localState.max - localState.newWallMessage.length\" ng-class=\"{danger: localState.newWallMessage.length > localState.max}\">{{localState.max}}</span>\n" +
    "                                    </div>\n" +
    "                                </form>\n" +
    "                            </div>\n" +
    "                        </div>\n" +
    "                    </div>\n" +
    "                </div>\n" +
    "            </div>\n" +
    "            <!-- / right col -->\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/hotel/page_werbung.html",
    "<div class=\"bg-light lter b-b wrapper-md\" ng-init=\"\n" +
    "  app.hideFooter = true;\n" +
    "  app.rootSettings.darkBg = true;\">\n" +
    "  <!--<h1 class=\"m-n font-thin h3\"></h1>-->\n" +
    "  \n" +
    "<div class=\"wrapper-md\" ng-controller=\"WerbungController\">\n" +
    "  <div class=\"row\">\n" +
    "    <div style=\"padding: 5px;\">\n" +
    "        <!--class=\"col-sm-9\">-->\n" +
    "\n" +
    "      <div class=\"panel b-a\">\n" +
    "          <div class=\"item m-l-n-xxs m-r-n-xxs\">\n" +
    "            \n" +
    "              <div class=\"center text-center w-full\" style=\"margin-top:-60px\">\n" +
    "                  <div ui-refresh=\"x\" ui-options=\"{\n" +
    "                percent: {{x*15}},\n" +
    "                lineWidth: 60,\n" +
    "                trackColor: 'rgba(255,255,255,0)',\n" +
    "                barColor: 'rgba(35,183,229,0.7)',\n" +
    "                scaleColor: false,\n" +
    "                size: 120,\n" +
    "                lineCap: 'butt',\n" +
    "                rotate: 0,\n" +
    "                animate: 1000\n" +
    "              }\" class=\"inline\">\n" +
    "                  </div>\n" +
    "              </div>\n" +
    "              <img ng-src=\"angulr/img/build/add/1.jpg\"  class=\"img-full\">\n" +
    "         \n" +
    "          </div>\n" +
    "          <div class=\"text-center\">\n" +
    "              <img ng-src=\"angulr/icons/loader.gif\">\n" +
    "          </div>\n" +
    "\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    \n" +
    "  </div>\n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/layout_footer_mobile.html",
    "<div class=\"row\" ng-show=\"isSmartDevice\">\n" +
    "  <div class=\"col-sm-2 hidden-xs\">\n" +
    "\n" +
    "  </div>\n" +
    "  <div class=\"col-sm-8\">\n" +
    "    <div class=\"w-xl w-auto-xs center-block\">\n" +
    "      <div class=\"btn-group btn-group-justified text-center text-sm\">\n" +
    "        \n" +
    "        \n" +
    "        \n" +
    "        <div class=\"btn-group\" ng-show=\"app.header.tabIndex==0\">\n" +
    "          <div  ui-sref-active=\"active\" class=\"leftMenuHotel\">\n" +
    "\n" +
    "            <a class=\"wrapper-xs block menuBottomItem\" ng-click=\"clickLoading('app.hotelList', 'fh')\" id=\"fh\" class=\"bottomMenuLink leftMenuHotel ignoreUiSref\">\n" +
    "              <!--<i class=\"fa fa-weibo bottomIcon\"></i><br>-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/hotel-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "\n" +
    "              <!--<div class=\"menuBottomItem\">-->\n" +
    "              <!--<b class=\"badge bg-orange pull-right\" style=\"position: absolute; right:2px; top:0;\" ng-show=\"hotelNotification.notificationObjhotelUnreadActivitiesNumber\">{{hotelNotification.notificationObjhotelUnreadActivitiesNumber}}</b>-->\n" +
    "\n" +
    "              <div class=\"menuIconLeft iconHotel menuIconBottom\"/>\n" +
    "              <span class=\"text-sm bottomMenuLabel\" translate=\"system.hotelList\">Hotels</span>\n" +
    "              <!--</div>-->\n" +
    "\n" +
    "            </a>\n" +
    "            <a ui-sref=\"app.hotelList\" style=\"display: none;\"></a>\n" +
    "\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        \n" +
    "        <div class=\"btn-group\" ng-show=\"app.header.tabIndex==0\">\n" +
    "          <div  ui-sref-active=\"active\" class=\"leftMenuHotel\">\n" +
    "\n" +
    "            <a class=\"wrapper-xs block menuBottomItem\" ng-click=\"clickLoading('app.activityList', 'f0')\" id=\"f0\" class=\"bottomMenuLink leftMenuHotel ignoreUiSref\">\n" +
    "              <!--<i class=\"fa fa-weibo bottomIcon\" style=\"font-size: 30px;margin-bottom: -5px;\"></i>-->\n" +
    "\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/hotel-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "\n" +
    "              <!--<div class=\"menuBottomItem\">-->\n" +
    "              <!--<b class=\"badge bg-orange pull-right\" style=\"position: absolute; right:2px; top:0;\" ng-show=\"hotelNotification.notificationObjhotelUnreadActivitiesNumber\">{{hotelNotification.notificationObjhotelUnreadActivitiesNumber}}</b>-->\n" +
    "\n" +
    "              <!--<div class=\"menuIconLeft iconHotel menuIconBottom\"/>-->\n" +
    "              <div class=\"menuIconLeft iconActivity menuIconBottom\"/>\n" +
    "\n" +
    "              <span class=\"text-sm bottomMenuLabel\" translate=\"system.activities\">Activities</span>\n" +
    "              <!--</div>-->\n" +
    "\n" +
    "            </a>\n" +
    "            <a ui-sref=\"app.activityList\" style=\"display: none;\"></a>\n" +
    "\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        \n" +
    "        <div class=\"btn-group\" ng-show=\"app.header.tabIndex==1 && hotelState.profileData.checkedIn && hotelState.profileData.logged\">\n" +
    "          <div  ui-sref-active=\"active\" class=\"leftMenuHotel\">\n" +
    "\n" +
    "              <a class=\"wrapper-xs block menuBottomItem\" ng-click=\"clickLoading('app.hotel', 'f1')\" id=\"f1\" ui-sref=\"app.hotel\"  class=\"bottomMenuLink leftMenuHotel ignoreUiSref\">\n" +
    "                  <!--<i class=\"fa fa-weibo bottomIcon\"></i><br>-->\n" +
    "                  <!--<img src=\"angulr/img/build/menu/bottom/hotel-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "                \n" +
    "                  <!--<div class=\"menuBottomItem\">-->\n" +
    "                    <b class=\"badge bg-orange pull-right\" style=\"position: absolute; right:2px; top:0;\" ng-show=\"hotelNotification.notificationObj.hotelUnreadActivitiesNumber\">{{hotelNotification.notificationObj.hotelUnreadActivitiesNumber}}</b>\n" +
    "\n" +
    "                    <div class=\"menuIconLeft iconActivity menuIconBottom\"/>\n" +
    "                    <span class=\"text-sm bottomMenuLabel\" translate=\"system.activities\">Hotel</span>\n" +
    "                  <!--</div>-->\n" +
    "      \n" +
    "              </a>\n" +
    "              <a ui-sref=\"app.hotel\" style=\"display: none;\"></a>\n" +
    "\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        \n" +
    "        <div class=\"btn-group\" ng-show=\"app.header.tabIndex==1 && hotelState.profileData.checkedIn && !hotelState.profileData.logged\">\n" +
    "          <div  ui-sref-active=\"active\" class=\"leftMenuHotel\">\n" +
    "\n" +
    "              <a class=\"wrapper-xs block menuBottomItem\" ng-click=\"clickLoading('app.hotel', 'f21')\" id=\"f21\" ui-sref=\"app.hotel\"  class=\"bottomMenuLink leftMenuHotel ignoreUiSref\">\n" +
    "                  <!--<i class=\"fa fa-weibo bottomIcon\"></i><br>-->\n" +
    "                  <!--<img src=\"angulr/img/build/menu/bottom/hotel-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "                \n" +
    "                  <!--<div class=\"menuBottomItem\">-->\n" +
    "                    <b class=\"badge bg-orange pull-right\" style=\"position: absolute; right:2px; top:0;\" ng-show=\"hotelNotification.notificationObj.hotelUnreadActivitiesNumber\">{{hotelNotification.notificationObj.hotelUnreadActivitiesNumber}}</b>\n" +
    "\n" +
    "                    <div class=\"menuIconLeft iconActivity menuIconBottom\"/>\n" +
    "                    <span class=\"text-sm bottomMenuLabel\" translate=\"system.activities\">HotelPreview</span>\n" +
    "                  <!--</div>-->\n" +
    "      \n" +
    "              </a>\n" +
    "              <a ui-sref=\"app.hotelPreview\" style=\"display: none;\"></a>\n" +
    "\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        \n" +
    "        <div class=\"btn-group\">\n" +
    "          <div  ui-sref-active=\"active\" class=\"leftMenuHotel\">\n" +
    "\n" +
    "            <a class=\"wrapper-xs block menuBottomItem\" ng-click=\"clickLoading('app.chatList', 'f2', null, {hotelScope: hotelState.profileData.checkedIn && app.header.tabIndex==1})\"  id=\"f2\"  class=\"bottomMenuLink ignoreUiSref\">\n" +
    "              <b class=\"badge bg-orange pull-right\" style=\"position: absolute; right:6px; top:0;\" ng-show=\"hotelNotification.notificationObj.unreadChatsCounter\">{{hotelNotification.notificationObj.unreadChatsCounter}}</b>\n" +
    "              <!--<i class=\"fa fa-comments-o bottomIcon\"></i><br>-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/chat-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "              <div class=\"menuIconLeft iconChat menuIconBottom\"/>\n" +
    "  \n" +
    "              <span class=\"text-sm bottomMenuLabel\" translate=\"system.contacts\" ng-show=\"app.header.tabIndex==0\">Contacts</span>\n" +
    "              <span class=\"text-sm bottomMenuLabel\" translate=\"system.guests\" ng-show=\"app.header.tabIndex==1\">Guests</span>\n" +
    "            </a>\n" +
    "            <a ui-sref=\"app.chatList\" style=\"display: none;\"></a>\n" +
    "\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        \n" +
    "        \n" +
    "        <div class=\"btn-group\" ng-show=\"app.header.tabIndex==1 && hotelState.profileData.checkedIn\">\n" +
    "          <div  ui-sref-active=\"active\" class=\"leftMenuHotel\">\n" +
    "\n" +
    "            <a class=\"wrapper-xs block menuBottomItem\" ng-click=\"clickLoading('app.wall', 'f3')\" id=\"f3\" class=\"bottomMenuLink ignoreUiSref\">\n" +
    "              <!--<i class=\"fa fa-comment-o  bottomIcon\"></i><br>-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/wall-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "             \n" +
    "              <b class=\"badge bg-orange pull-right\" style=\"position: absolute; right:2px; top:0;\" ng-show=\"hotelNotification.notificationObj.hotelUnreadWallNumber\">{{hotelNotification.notificationObj.hotelUnreadWallNumber}}</b>\n" +
    "\n" +
    "\n" +
    "              <div class=\"menuIconLeft iconWall menuIconBottom\"/>\n" +
    "  \n" +
    "              <span class=\"text-sm bottomMenuLabel\" translate=\"system.wall\">Wallpost</span>\n" +
    "            </a>\n" +
    "            <a ui-sref=\"app.wall\" style=\"display: none;\"></a>\n" +
    "\n" +
    "          </div> \n" +
    "        </div>\n" +
    "        \n" +
    "        <div class=\"btn-group\">\n" +
    "          <div  ui-sref-active=\"active\" class=\"leftMenuHotel\">\n" +
    "\n" +
    "            <a class=\"wrapper-xs block menuBottomItem\" ng-click=\"clickLoading('app.me', 'f4')\"   id=\"f4\" class=\"bottomMenuLink ignoreUiSref\">\n" +
    "              <!--<i class=\"fa icon-user fa-fw  bottomIcon\"></i><br>-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/me-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "              <div class=\"menuIconLeft iconMe menuIconBottom\"/>\n" +
    "  \n" +
    "              <span class=\"text-sm bottomMenuLabel\">\n" +
    "                <span class=\"badge bg-dark\" style=\"margin-top: -2px;\" ng-show=\"hotelState.profileData.guestAccount\">Guest</span>\n" +
    "                <span ng-hide=\"hotelState.profileData.guestAccount\" translate=\"system.profile\">Me</span>\n" +
    "              </span>\n" +
    "            </a>\n" +
    "            <a ui-sref=\"app.me\" style=\"display: none;\"></a>\n" +
    "\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        \n" +
    "        <div class=\"btn-group\" ng-show=\"app.header.tabIndex==1 && hotelState.profileData.checkedIn && !hotelState.profileData.hotelStaff\">  \n" +
    "          \n" +
    "          <a class=\"wrapper-xs block menuBottomItem\" ng-click=\"checkinService.resetCheckin();\" id=\"f5\"  class=\"bottomMenuLink\">\n" +
    "            <!--<i class=\"fa fa-sign-out  bottomIcon\"></i><br>-->\n" +
    "            <!--<img src=\"angulr/img/build/menu/bottom/checkout-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "            <div class=\"menuIconLeft iconCheckout menuIconBottom\"/>\n" +
    "\n" +
    "            <span class=\"text-sm bottomMenuLabel\" translate=\"system.checkout\">Checkout</span>\n" +
    "          </a>\n" +
    "        </div> \n" +
    "        \n" +
    "        <div class=\"btn-group\" ng-show=\"!hotelState.profileData.logged && app.header.tabIndex==0\">  \n" +
    "          \n" +
    "          <a class=\"wrapper-xs block menuBottomItem\" ui-sref=\"access.login\" id=\"f7\"  class=\"bottomMenuLink ignoreUiSref\">\n" +
    "            <!--<i class=\"fa fa-sign-out  bottomIcon\"></i><br>-->\n" +
    "            <!--<img src=\"angulr/img/build/menu/bottom/checkout-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "            <div class=\"menuIconLeft iconCheckout menuIconBottom\"/>\n" +
    "\n" +
    "            <span class=\"text-sm bottomMenuLabel\" translate=\"system.login\">Login</span>\n" +
    "          </a>\n" +
    "        </div>\n" +
    "          \n" +
    "          <div class=\"btn-group\" ng-show=\"hotelState.profileData.logged && (hotelState.profileData.hotelStaff || app.header.tabIndex==0)\">  \n" +
    "          \n" +
    "          <a class=\"wrapper-xs block menuBottomItem\" ng-click=\"loginService.resetLogin();\" id=\"f77\"  class=\"bottomMenuLink\">\n" +
    "            <!--<i class=\"fa fa-sign-out  bottomIcon\"></i><br>-->\n" +
    "            <!--<img src=\"angulr/img/build/menu/bottom/checkout-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "            <div class=\"menuIconLeft iconCheckout menuIconBottom\"/>\n" +
    "\n" +
    "            <span class=\"text-sm bottomMenuLabel\" translate=\"system.logout\">Logout</span>\n" +
    "          </a>\n" +
    "        </div>\n" +
    "        \n" +
    "        <div class=\"btn-group\" ng-show=\"app.header.tabIndex==1 && !hotelState.profileData.checkedIn && (!hotelState.profileData.hotelStaff)\">\n" +
    "          <div  ui-sref-active=\"active\" class=\"leftMenuHotel\">\n" +
    "            <a class=\"wrapper-xs block menuBottomItem\" ng-click=\"clickLoading(null, 'f6')\" id=\"f6\" ui-sref=\"app.checkin\"  class=\"bottomMenuLink\">\n" +
    "              <!--<i class=\"fa fa-sign-out  bottomIcon\"></i><br>-->\n" +
    "              <!--<img src=\"angulr/img/build/menu/bottom/checkout-inactive.png\" class=\"bottomMenuIcon\"><br>-->\n" +
    "              <div class=\"menuIconLeft iconCheckout menuIconBottom\"/>\n" +
    "  \n" +
    "              <span class=\"text-sm bottomMenuLabel\" translate=\"system.checkin\">Checkin</span>\n" +
    "            </a>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        \n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "  <div class=\"col-sm-2 hidden-xs\">\n" +
    "\n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/layout_fullwidth.html",
    "<!-- hbox layout -->\n" +
    "<div class=\"hbox hbox-auto-xs bg-light \" ng-controller=\"JVectorMapDemoCtrl\" ng-init=\"\n" +
    "  app.settings.asideFolded = true;\n" +
    "  app.settings.asideDock = false;\n" +
    "  app.settings.container = false;\n" +
    "  app.hideAside = true\" \n" +
    "  >\n" +
    "  <!-- column -->\n" +
    "  <div class=\"col item\">\n" +
    "    <div ui-jq=\"vectorMap\" class=\"h-full\" style=\"min-height:240px;\" ui-options=\"{\n" +
    "      map: 'us_aea_en',\n" +
    "      markers: {{usa_markers}},\n" +
    "      normalizeFunction: 'polynomial',\n" +
    "      backgroundColor: 'transparent',\n" +
    "      zoomMin: 0.5,            \n" +
    "      regionsSelectable: true,\n" +
    "      markersSelectable: true,\n" +
    "      regionsSelectableOne: true,\n" +
    "      markersSelectableOne: true,\n" +
    "      focusOn: {\n" +
    "        x:0,\n" +
    "        y:0,\n" +
    "        scale: 0.6\n" +
    "      },\n" +
    "      series: {\n" +
    "        markers: [{\n" +
    "          attribute: 'r',\n" +
    "          scale: [5, 15],\n" +
    "          values: [\n" +
    "            100.70,\n" +
    "            255.16,\n" +
    "            310.69,\n" +
    "            605.17,\n" +
    "            248.31,\n" +
    "            107.35,\n" +
    "            217.22\n" +
    "          ]\n" +
    "        }]\n" +
    "      },\n" +
    "      regionStyle: {\n" +
    "        initial: {\n" +
    "          fill: '#dde6e9',\n" +
    "          stroke: '#edf1f2',\n" +
    "          'stroke-width': 2,\n" +
    "          'stroke-opacity': 1\n" +
    "        },\n" +
    "        hover: {\n" +
    "          fill: '#fff'\n" +
    "        },\n" +
    "        selected: {\n" +
    "          fill: '{{app.color.info}}'\n" +
    "        },\n" +
    "      },\n" +
    "      markerStyle: {\n" +
    "        initial: {\n" +
    "          fill: '{{app.color.info}}',\n" +
    "          stroke: '#fff',\n" +
    "          r: 10\n" +
    "        },\n" +
    "        hover: {\n" +
    "          stroke: '#fff'\n" +
    "        },\n" +
    "        selected: {\n" +
    "          fill: '{{app.color.warning}}'\n" +
    "        }\n" +
    "      }\n" +
    "    }\">\n" +
    "    </div>\n" +
    "    <div class=\"top\" style=\"top:20px;left:60px\">\n" +
    "      <div class=\"panel no-border w-md\">\n" +
    "        <div class=\"panel-heading \">\n" +
    "          <a href class=\"pull-right\" ng-click=\"isCollapsed = !isCollapsed\" ui-toggle-class>\n" +
    "            <i class=\"fa fa-angle-up text\"></i>\n" +
    "            <i class=\"fa fa-angle-down text-active\"></i>\n" +
    "          </a>\n" +
    "          <span class=\"font-bold\">Mark Detail</span>\n" +
    "        </div>\n" +
    "        <div collapse=\"isCollapsed\">\n" +
    "          <div class=\"panel-body bg-light lter\">\n" +
    "            <div class=\"scrollable\" style=\"max-height:110px\" ui-jq=\"slimScroll\" ui-options=\"{height:'110px', size:'6px'}\">\n" +
    "              <p>\n" +
    "              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugiat. \n" +
    "              </p>\n" +
    "              <p>\n" +
    "              Vestibulum ullamcorper sodales nisi nec condimentum. Mauris convallis mauris at pellentesque volutpat.\n" +
    "              </p>\n" +
    "            </div>\n" +
    "          </div>\n" +
    "          <div class=\"panel-footer\">\n" +
    "            <i class=\"fa fa-fw m-r-xs text-info fa-bookmark\"></i><span class=\"font-bold\">37</span>\n" +
    "            <i class=\"fa fa-fw m-r-xs text-info fa-star m-l\"></i><span class=\"font-bold\">120</span>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"bottom text-right w-full\">\n" +
    "      <small class=\"text-muted wrapper-sm block\">Data @ naturalearthdata.com.</small>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "  <!-- /column -->\n" +
    "\n" +
    "  <!-- column -->\n" +
    "  <div class=\"col w-md lter b-l\">\n" +
    "    <div class=\"vbox\">\n" +
    "      <div class=\"wrapper b-b b-light\">Map</div>\n" +
    "      <div class=\"row-row\">\n" +
    "        <div class=\"cell\">\n" +
    "          <div class=\"cell-inner\">\n" +
    "            <div class=\"wrapper-md\">\n" +
    "              This is the scrollable content\n" +
    "              <p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>\n" +
    "              You got the bottom\n" +
    "            </div>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"wrapper b-t b-light text-center\">\n" +
    "        <p>Footer with fluid height</p>\n" +
    "        <a href class=\"btn btn-info\">Create Marker</a>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "  <!-- /column -->\n" +
    "</div>\n" +
    "<!-- /hbox layout -->");
  $templateCache.put("angulr/tpl/layout_mobile.html",
    "<div class=\"hbox hbox-auto-xs\" ng-init=\"\n" +
    "  app.settings.asideFixed = true;\n" +
    "  app.settings.asideDock = false;\n" +
    "  app.settings.container = false;\n" +
    "  app.hideAside = false;\n" +
    "  app.hideFooter = false;\n" +
    "  \">\n" +
    "  <div class=\"col w-md w-auto-xs bg-light lter b-r\">\n" +
    "    <div class=\"wrapper\">\n" +
    "      Left\n" +
    "    </div>\n" +
    "  </div>\n" +
    "  <div class=\"col\">\n" +
    "    <div class=\"wrapper\">\n" +
    "      Main\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/material/button.html",
    "<div class=\"card\">\n" +
    "  <div class=\"card-heading\">\n" +
    "    <h2>Button Usage</h2>\n" +
    "  </div>\n" +
    "  <div class=\"card-body\">\n" +
    "      <div class=\"m-b\">\n" +
    "        <h5 class=\"m-t-xs\">Flat button</h5>\n" +
    "        <button md-ink-ripple class=\"md-btn md-flat m-b btn-fw\">Default</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-flat m-b btn-fw text-primary\">Primary</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-flat m-b btn-fw text-info\">Info</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-flat m-b btn-fw text-success\">Success</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-flat m-b btn-fw text-warning\">Warning</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-flat m-b btn-fw text-danger\">Danger</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-flat m-b btn-fw text-accent\">Accent</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-flat m-b btn-fw text-danger\" disabled>Disabled</button>\n" +
    "      </div>\n" +
    "      <div class=\"m-b\">\n" +
    "        <h5 class=\"m-t-xs\">Raised button</h5>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw bg-white\">White</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw indigo\">Indigo</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw pink\">Pink</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw blue\">Blue</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw green\">Green</button><br>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw orange\">Orange</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw red\">Red</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw purple\">Purple</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw red\" disabled>Disabled</button>\n" +
    "      </div>\n" +
    "      <div class=\"m-b\">\n" +
    "        <h5 class=\"m-t-xs\">Themed</h5>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw indigo-300\">Indigo</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw pink-300\">Pink</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw blue-200\">Blue</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw green-700\">Green</button><br>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw orange-200\">Orange</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw cyan-900\">Cyan</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw purple-400\">Purple</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-raised m-b btn-fw brown-200\">Brown</button>\n" +
    "      </div>\n" +
    "      <div class=\"m-b\">\n" +
    "        <h5 class=\"m-t-xs\">Fab button</h5>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b bg-white\">1</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b indigo\">2</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b blue\">3</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b green\">4</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b cyan\">5</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b red\">6</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b pink\">7</button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b grey\" disabled>8</button>\n" +
    "      </div>\n" +
    "      <div class=\"m-b\">\n" +
    "        <h5 class=\"m-t-xs\">Icon</h5>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b bg-white\"><i class=\"mdi-content-add i-24\"></i></button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b indigo\"><i class=\"mdi-editor-mode-edit i-24\"></i></button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b pink\"><i class=\"mdi-file-file-download i-24\"></i></button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b blue\"><i class=\"mdi-hardware-keyboard-control i-24\"></i></button>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab m-b grey\" disabled><i class=\"mdi-maps-flight i-24\"></i></button>\n" +
    "      </div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "<a href class=\"md-btn md-fab md-fab-bottom-right pos-fix teal\"><i class=\"mdi-editor-mode-edit i-24\"></i></a>\n" +
    "");
  $templateCache.put("angulr/tpl/material/card.html",
    "<div class=\"row\">\n" +
    "    <div class=\"col-sm-4\">\n" +
    "      <div class=\"panel panel-card\">\n" +
    "        <div class=\"item\">\n" +
    "          <img src=\"img/c1.jpg\" class=\"w-full r-t\" alt=\"Washed Out\">\n" +
    "          <div class=\"bottom text-white wrapper\">\n" +
    "            Title\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <a md-ink-ripple class=\"md-btn md-raised md-fab brown m-r md-fab-offset pull-right\"><span class=\"text-white\">23</span></a>\n" +
    "        <div class=\"wrapper\">\n" +
    "          <h3>Paracosm</h3>\n" +
    "          <p>\n" +
    "            The titles of Washed Out's breakthrough song and the first single from Paracosm share the\n" +
    "            two most important words in Ernest Greene's musical language: feel it. It's a simple request, as well...\n" +
    "          </p>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"col-sm-4\">\n" +
    "      <div class=\"panel panel-card\">\n" +
    "        <div class=\"item\">\n" +
    "          <img src=\"img/c2.jpg\" class=\"w-full r-t\" alt=\"Washed Out\">\n" +
    "          <div class=\"bottom text-white wrapper\">\n" +
    "            Title\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab md-raised bg-white m-r md-fab-offset pull-right\">100</button>\n" +
    "        <div class=\"wrapper\">\n" +
    "          <h3>Paracosm</h3>\n" +
    "          <p>\n" +
    "            The titles of Washed Out's breakthrough song and the first single from Paracosm share the\n" +
    "            two most important words in Ernest Greene's musical language: feel it. It's a simple request, as well...\n" +
    "          </p>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"col-sm-4\">\n" +
    "      <div class=\"panel panel-card\">\n" +
    "        <div class=\"item\">\n" +
    "          <img src=\"img/c3.jpg\" class=\"w-full r-t\" alt=\"Washed Out\">\n" +
    "          <div class=\"bottom text-white wrapper\">\n" +
    "            Single Title\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab green m-r md-fab-offset pull-right\"><i class=\"mdi-action-favorite i-24\"></i></button>\n" +
    "        <div class=\"wrapper\">\n" +
    "          <h3>Paracosm</h3>\n" +
    "          <p>\n" +
    "            The titles of Washed Out's breakthrough song and the first single from Paracosm share the\n" +
    "            two most important words in Ernest Greene's musical language: feel it. It's a simple request, as well...\n" +
    "          </p>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"col-sm-4\">\n" +
    "      <div class=\"panel panel-card\">\n" +
    "        <div class=\"item\">\n" +
    "          <img src=\"img/c4.jpg\" class=\"w-full r-t\" alt=\"Washed Out\">\n" +
    "        </div>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab md-raised indigo m-r md-fab-offset pull-right\">100</button>\n" +
    "        <div class=\"wrapper\">\n" +
    "          <h3>Paracosm</h3>\n" +
    "          <p>\n" +
    "            The titles of Washed Out's breakthrough song and the first single from Paracosm share the\n" +
    "            two most important words in Ernest Greene's musical language: feel it. It's a simple request, as well...\n" +
    "          </p>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"col-sm-4\">\n" +
    "      <div class=\"panel panel-card\">\n" +
    "        <div class=\"item\">\n" +
    "          <img src=\"img/c5.jpg\" class=\"w-full r-t\" alt=\"Washed Out\">\n" +
    "        </div>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab md-raised pink m-r md-fab-offset pull-right\"><i class=\"mdi-content-add i-24\"></i></button>\n" +
    "        <div class=\"wrapper\">\n" +
    "          <h3>Paracosm</h3>\n" +
    "          <p>\n" +
    "            The titles of Washed Out's breakthrough song and the first single from Paracosm share the\n" +
    "            two most important words in Ernest Greene's musical language: feel it. It's a simple request, as well...\n" +
    "          </p>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"col-sm-4\">\n" +
    "      <div class=\"panel panel-card\">\n" +
    "        <div class=\"item\">\n" +
    "          <img src=\"img/c6.jpg\" class=\"w-full r-t\" alt=\"Washed Out\">\n" +
    "        </div>\n" +
    "        <button md-ink-ripple class=\"md-btn md-fab md-raised green-100 m-r md-fab-offset pull-right\"><i class=\"mdi-content-add i-24\"></i></button>\n" +
    "        <div class=\"wrapper\">\n" +
    "          <h3>Paracosm</h3>\n" +
    "          <p>\n" +
    "            The titles of Washed Out's breakthrough song and the first single from Paracosm share the\n" +
    "            two most important words in Ernest Greene's musical language: feel it. It's a simple request, as well...\n" +
    "          </p>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "");
  $templateCache.put("angulr/tpl/material/color.html",
    "<div class=\"card\">\n" +
    "  <div class=\"card-heading\">\n" +
    "    <h2>Color palette</h2>\n" +
    "    <small>Material Design is a visual language with specifications for innovative user experiences (UX) and user interface (UI) elements. Themes convey meaning through color, tones, and contrasts, similar to how Layouts convey meaning through keylines and alignments.</small>\n" +
    "  </div>\n" +
    "  <div class=\"card-body\">\n" +
    "    <div class=\"row no-gutter m-b-lg\">\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm red-500\">\n" +
    "          <div class=\"m-b-lg\">Red</div>\n" +
    "          @red-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm red-50\">@red-50</div>\n" +
    "        <div class=\"wrapper-sm red-100\">@red-100</div>\n" +
    "        <div class=\"wrapper-sm red-200\">@red-200</div>\n" +
    "        <div class=\"wrapper-sm red-300\">@red-300</div>\n" +
    "        <div class=\"wrapper-sm red-400\">@red-400</div>\n" +
    "        <div class=\"wrapper-sm red-500\">@red-500</div>\n" +
    "        <div class=\"wrapper-sm red-600\">@red-600</div>\n" +
    "        <div class=\"wrapper-sm red-700\">@red-700</div>\n" +
    "        <div class=\"wrapper-sm red-800\">@red-800</div>\n" +
    "        <div class=\"wrapper-sm red-900\">@red-900</div>\n" +
    "        <div class=\"wrapper-sm red-A100\">@red-A100</div>\n" +
    "        <div class=\"wrapper-sm red-A200\">@red-A200</div>\n" +
    "        <div class=\"wrapper-sm red-A400\">@red-A400</div>\n" +
    "        <div class=\"wrapper-sm red-A700\">@red-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm pink-500\">\n" +
    "          <div class=\"m-b-lg\">pink</div>\n" +
    "          @pink-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm pink-50\">@pink-50</div>\n" +
    "        <div class=\"wrapper-sm pink-100\">@pink-100</div>\n" +
    "        <div class=\"wrapper-sm pink-200\">@pink-200</div>\n" +
    "        <div class=\"wrapper-sm pink-300\">@pink-300</div>\n" +
    "        <div class=\"wrapper-sm pink-400\">@pink-400</div>\n" +
    "        <div class=\"wrapper-sm pink-500\">@pink-500</div>\n" +
    "        <div class=\"wrapper-sm pink-600\">@pink-600</div>\n" +
    "        <div class=\"wrapper-sm pink-700\">@pink-700</div>\n" +
    "        <div class=\"wrapper-sm pink-800\">@pink-800</div>\n" +
    "        <div class=\"wrapper-sm pink-900\">@pink-900</div>\n" +
    "        <div class=\"wrapper-sm pink-A100\">@pink-A100</div>\n" +
    "        <div class=\"wrapper-sm pink-A200\">@pink-A200</div>\n" +
    "        <div class=\"wrapper-sm pink-A400\">@pink-A400</div>\n" +
    "        <div class=\"wrapper-sm pink-A700\">@pink-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm purple-500\">\n" +
    "          <div class=\"m-b-lg\">purple</div>\n" +
    "          @purple-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm purple-50\">@purple-50</div>\n" +
    "        <div class=\"wrapper-sm purple-100\">@purple-100</div>\n" +
    "        <div class=\"wrapper-sm purple-200\">@purple-200</div>\n" +
    "        <div class=\"wrapper-sm purple-300\">@purple-300</div>\n" +
    "        <div class=\"wrapper-sm purple-400\">@purple-400</div>\n" +
    "        <div class=\"wrapper-sm purple-500\">@purple-500</div>\n" +
    "        <div class=\"wrapper-sm purple-600\">@purple-600</div>\n" +
    "        <div class=\"wrapper-sm purple-700\">@purple-700</div>\n" +
    "        <div class=\"wrapper-sm purple-800\">@purple-800</div>\n" +
    "        <div class=\"wrapper-sm purple-900\">@purple-900</div>\n" +
    "        <div class=\"wrapper-sm purple-A100\">@purple-A100</div>\n" +
    "        <div class=\"wrapper-sm purple-A200\">@purple-A200</div>\n" +
    "        <div class=\"wrapper-sm purple-A400\">@purple-A400</div>\n" +
    "        <div class=\"wrapper-sm purple-A700\">@purple-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm deep-purple-500\">\n" +
    "          <div class=\"m-b-lg\">deep-purple</div>\n" +
    "          @deep-purple-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm deep-purple-50\">@deep-purple-50</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-100\">@deep-purple-100</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-200\">@deep-purple-200</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-300\">@deep-purple-300</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-400\">@deep-purple-400</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-500\">@deep-purple-500</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-600\">@deep-purple-600</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-700\">@deep-purple-700</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-800\">@deep-purple-800</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-900\">@deep-purple-900</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-A100\">@deep-purple-A100</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-A200\">@deep-purple-A200</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-A400\">@deep-purple-A400</div>\n" +
    "        <div class=\"wrapper-sm deep-purple-A700\">@deep-purple-A700</div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"row no-gutter m-b-lg\">\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm indigo-500\">\n" +
    "          <div class=\"m-b-lg\">indigo</div>\n" +
    "          @indigo-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm indigo-50\">@indigo-50</div>\n" +
    "        <div class=\"wrapper-sm indigo-100\">@indigo-100</div>\n" +
    "        <div class=\"wrapper-sm indigo-200\">@indigo-200</div>\n" +
    "        <div class=\"wrapper-sm indigo-300\">@indigo-300</div>\n" +
    "        <div class=\"wrapper-sm indigo-400\">@indigo-400</div>\n" +
    "        <div class=\"wrapper-sm indigo-500\">@indigo-500</div>\n" +
    "        <div class=\"wrapper-sm indigo-600\">@indigo-600</div>\n" +
    "        <div class=\"wrapper-sm indigo-700\">@indigo-700</div>\n" +
    "        <div class=\"wrapper-sm indigo-800\">@indigo-800</div>\n" +
    "        <div class=\"wrapper-sm indigo-900\">@indigo-900</div>\n" +
    "        <div class=\"wrapper-sm indigo-A100\">@indigo-A100</div>\n" +
    "        <div class=\"wrapper-sm indigo-A200\">@indigo-A200</div>\n" +
    "        <div class=\"wrapper-sm indigo-A400\">@indigo-A400</div>\n" +
    "        <div class=\"wrapper-sm indigo-A700\">@indigo-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm blue-500\">\n" +
    "          <div class=\"m-b-lg\">blue</div>\n" +
    "          @blue-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm blue-50\">@blue-50</div>\n" +
    "        <div class=\"wrapper-sm blue-100\">@blue-100</div>\n" +
    "        <div class=\"wrapper-sm blue-200\">@blue-200</div>\n" +
    "        <div class=\"wrapper-sm blue-300\">@blue-300</div>\n" +
    "        <div class=\"wrapper-sm blue-400\">@blue-400</div>\n" +
    "        <div class=\"wrapper-sm blue-500\">@blue-500</div>\n" +
    "        <div class=\"wrapper-sm blue-600\">@blue-600</div>\n" +
    "        <div class=\"wrapper-sm blue-700\">@blue-700</div>\n" +
    "        <div class=\"wrapper-sm blue-800\">@blue-800</div>\n" +
    "        <div class=\"wrapper-sm blue-900\">@blue-900</div>\n" +
    "        <div class=\"wrapper-sm blue-A100\">@blue-A100</div>\n" +
    "        <div class=\"wrapper-sm blue-A200\">@blue-A200</div>\n" +
    "        <div class=\"wrapper-sm blue-A400\">@blue-A400</div>\n" +
    "        <div class=\"wrapper-sm blue-A700\">@blue-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm light-blue-500\">\n" +
    "          <div class=\"m-b-lg\">light-blue</div>\n" +
    "          @light-blue-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm light-blue-50\">@light-blue-50</div>\n" +
    "        <div class=\"wrapper-sm light-blue-100\">@light-blue-100</div>\n" +
    "        <div class=\"wrapper-sm light-blue-200\">@light-blue-200</div>\n" +
    "        <div class=\"wrapper-sm light-blue-300\">@light-blue-300</div>\n" +
    "        <div class=\"wrapper-sm light-blue-400\">@light-blue-400</div>\n" +
    "        <div class=\"wrapper-sm light-blue-500\">@light-blue-500</div>\n" +
    "        <div class=\"wrapper-sm light-blue-600\">@light-blue-600</div>\n" +
    "        <div class=\"wrapper-sm light-blue-700\">@light-blue-700</div>\n" +
    "        <div class=\"wrapper-sm light-blue-800\">@light-blue-800</div>\n" +
    "        <div class=\"wrapper-sm light-blue-900\">@light-blue-900</div>\n" +
    "        <div class=\"wrapper-sm light-blue-A100\">@light-blue-A100</div>\n" +
    "        <div class=\"wrapper-sm light-blue-A200\">@light-blue-A200</div>\n" +
    "        <div class=\"wrapper-sm light-blue-A400\">@light-blue-A400</div>\n" +
    "        <div class=\"wrapper-sm light-blue-A700\">@light-blue-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm cyan-500\">\n" +
    "          <div class=\"m-b-lg\">cyan</div>\n" +
    "          @cyan-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm cyan-50\">@cyan-50</div>\n" +
    "        <div class=\"wrapper-sm cyan-100\">@cyan-100</div>\n" +
    "        <div class=\"wrapper-sm cyan-200\">@cyan-200</div>\n" +
    "        <div class=\"wrapper-sm cyan-300\">@cyan-300</div>\n" +
    "        <div class=\"wrapper-sm cyan-400\">@cyan-400</div>\n" +
    "        <div class=\"wrapper-sm cyan-500\">@cyan-500</div>\n" +
    "        <div class=\"wrapper-sm cyan-600\">@cyan-600</div>\n" +
    "        <div class=\"wrapper-sm cyan-700\">@cyan-700</div>\n" +
    "        <div class=\"wrapper-sm cyan-800\">@cyan-800</div>\n" +
    "        <div class=\"wrapper-sm cyan-900\">@cyan-900</div>\n" +
    "        <div class=\"wrapper-sm cyan-A100\">@cyan-A100</div>\n" +
    "        <div class=\"wrapper-sm cyan-A200\">@cyan-A200</div>\n" +
    "        <div class=\"wrapper-sm cyan-A400\">@cyan-A400</div>\n" +
    "        <div class=\"wrapper-sm cyan-A700\">@cyan-A700</div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"row no-gutter m-b-lg\">\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm teal-500\">\n" +
    "          <div class=\"m-b-lg\">teal</div>\n" +
    "          @teal-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm teal-50\">@teal-50</div>\n" +
    "        <div class=\"wrapper-sm teal-100\">@teal-100</div>\n" +
    "        <div class=\"wrapper-sm teal-200\">@teal-200</div>\n" +
    "        <div class=\"wrapper-sm teal-300\">@teal-300</div>\n" +
    "        <div class=\"wrapper-sm teal-400\">@teal-400</div>\n" +
    "        <div class=\"wrapper-sm teal-500\">@teal-500</div>\n" +
    "        <div class=\"wrapper-sm teal-600\">@teal-600</div>\n" +
    "        <div class=\"wrapper-sm teal-700\">@teal-700</div>\n" +
    "        <div class=\"wrapper-sm teal-800\">@teal-800</div>\n" +
    "        <div class=\"wrapper-sm teal-900\">@teal-900</div>\n" +
    "        <div class=\"wrapper-sm teal-A100\">@teal-A100</div>\n" +
    "        <div class=\"wrapper-sm teal-A200\">@teal-A200</div>\n" +
    "        <div class=\"wrapper-sm teal-A400\">@teal-A400</div>\n" +
    "        <div class=\"wrapper-sm teal-A700\">@teal-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm green-500\">\n" +
    "          <div class=\"m-b-lg\">green</div>\n" +
    "          @green-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm green-50\">@green-50</div>\n" +
    "        <div class=\"wrapper-sm green-100\">@green-100</div>\n" +
    "        <div class=\"wrapper-sm green-200\">@green-200</div>\n" +
    "        <div class=\"wrapper-sm green-300\">@green-300</div>\n" +
    "        <div class=\"wrapper-sm green-400\">@green-400</div>\n" +
    "        <div class=\"wrapper-sm green-500\">@green-500</div>\n" +
    "        <div class=\"wrapper-sm green-600\">@green-600</div>\n" +
    "        <div class=\"wrapper-sm green-700\">@green-700</div>\n" +
    "        <div class=\"wrapper-sm green-800\">@green-800</div>\n" +
    "        <div class=\"wrapper-sm green-900\">@green-900</div>\n" +
    "        <div class=\"wrapper-sm green-A100\">@green-A100</div>\n" +
    "        <div class=\"wrapper-sm green-A200\">@green-A200</div>\n" +
    "        <div class=\"wrapper-sm green-A400\">@green-A400</div>\n" +
    "        <div class=\"wrapper-sm green-A700\">@green-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm light-green-500\">\n" +
    "          <div class=\"m-b-lg\">light-green</div>\n" +
    "          @light-green-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm light-green-50\">@light-green-50</div>\n" +
    "        <div class=\"wrapper-sm light-green-100\">@light-green-100</div>\n" +
    "        <div class=\"wrapper-sm light-green-200\">@light-green-200</div>\n" +
    "        <div class=\"wrapper-sm light-green-300\">@light-green-300</div>\n" +
    "        <div class=\"wrapper-sm light-green-400\">@light-green-400</div>\n" +
    "        <div class=\"wrapper-sm light-green-500\">@light-green-500</div>\n" +
    "        <div class=\"wrapper-sm light-green-600\">@light-green-600</div>\n" +
    "        <div class=\"wrapper-sm light-green-700\">@light-green-700</div>\n" +
    "        <div class=\"wrapper-sm light-green-800\">@light-green-800</div>\n" +
    "        <div class=\"wrapper-sm light-green-900\">@light-green-900</div>\n" +
    "        <div class=\"wrapper-sm light-green-A100\">@light-green-A100</div>\n" +
    "        <div class=\"wrapper-sm light-green-A200\">@light-green-A200</div>\n" +
    "        <div class=\"wrapper-sm light-green-A400\">@light-green-A400</div>\n" +
    "        <div class=\"wrapper-sm light-green-A700\">@light-green-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm lime-500\">\n" +
    "          <div class=\"m-b-lg\">lime</div>\n" +
    "          @lime-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm lime-50\">@lime-50</div>\n" +
    "        <div class=\"wrapper-sm lime-100\">@lime-100</div>\n" +
    "        <div class=\"wrapper-sm lime-200\">@lime-200</div>\n" +
    "        <div class=\"wrapper-sm lime-300\">@lime-300</div>\n" +
    "        <div class=\"wrapper-sm lime-400\">@lime-400</div>\n" +
    "        <div class=\"wrapper-sm lime-500\">@lime-500</div>\n" +
    "        <div class=\"wrapper-sm lime-600\">@lime-600</div>\n" +
    "        <div class=\"wrapper-sm lime-700\">@lime-700</div>\n" +
    "        <div class=\"wrapper-sm lime-800\">@lime-800</div>\n" +
    "        <div class=\"wrapper-sm lime-900\">@lime-900</div>\n" +
    "        <div class=\"wrapper-sm lime-A100\">@lime-A100</div>\n" +
    "        <div class=\"wrapper-sm lime-A200\">@lime-A200</div>\n" +
    "        <div class=\"wrapper-sm lime-A400\">@lime-A400</div>\n" +
    "        <div class=\"wrapper-sm lime-A700\">@lime-A700</div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"row no-gutter m-b-lg\">\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm yellow-500\">\n" +
    "          <div class=\"m-b-lg\">yellow</div>\n" +
    "          @yellow-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm yellow-50\">@yellow-50</div>\n" +
    "        <div class=\"wrapper-sm yellow-100\">@yellow-100</div>\n" +
    "        <div class=\"wrapper-sm yellow-200\">@yellow-200</div>\n" +
    "        <div class=\"wrapper-sm yellow-300\">@yellow-300</div>\n" +
    "        <div class=\"wrapper-sm yellow-400\">@yellow-400</div>\n" +
    "        <div class=\"wrapper-sm yellow-500\">@yellow-500</div>\n" +
    "        <div class=\"wrapper-sm yellow-600\">@yellow-600</div>\n" +
    "        <div class=\"wrapper-sm yellow-700\">@yellow-700</div>\n" +
    "        <div class=\"wrapper-sm yellow-800\">@yellow-800</div>\n" +
    "        <div class=\"wrapper-sm yellow-900\">@yellow-900</div>\n" +
    "        <div class=\"wrapper-sm yellow-A100\">@yellow-A100</div>\n" +
    "        <div class=\"wrapper-sm yellow-A200\">@yellow-A200</div>\n" +
    "        <div class=\"wrapper-sm yellow-A400\">@yellow-A400</div>\n" +
    "        <div class=\"wrapper-sm yellow-A700\">@yellow-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm amber-500\">\n" +
    "          <div class=\"m-b-lg\">amber</div>\n" +
    "          @amber-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm amber-50\">@amber-50</div>\n" +
    "        <div class=\"wrapper-sm amber-100\">@amber-100</div>\n" +
    "        <div class=\"wrapper-sm amber-200\">@amber-200</div>\n" +
    "        <div class=\"wrapper-sm amber-300\">@amber-300</div>\n" +
    "        <div class=\"wrapper-sm amber-400\">@amber-400</div>\n" +
    "        <div class=\"wrapper-sm amber-500\">@amber-500</div>\n" +
    "        <div class=\"wrapper-sm amber-600\">@amber-600</div>\n" +
    "        <div class=\"wrapper-sm amber-700\">@amber-700</div>\n" +
    "        <div class=\"wrapper-sm amber-800\">@amber-800</div>\n" +
    "        <div class=\"wrapper-sm amber-900\">@amber-900</div>\n" +
    "        <div class=\"wrapper-sm amber-A100\">@amber-A100</div>\n" +
    "        <div class=\"wrapper-sm amber-A200\">@amber-A200</div>\n" +
    "        <div class=\"wrapper-sm amber-A400\">@amber-A400</div>\n" +
    "        <div class=\"wrapper-sm amber-A700\">@amber-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm orange-500\">\n" +
    "          <div class=\"m-b-lg\">orange</div>\n" +
    "          @orange-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm orange-50\">@orange-50</div>\n" +
    "        <div class=\"wrapper-sm orange-100\">@orange-100</div>\n" +
    "        <div class=\"wrapper-sm orange-200\">@orange-200</div>\n" +
    "        <div class=\"wrapper-sm orange-300\">@orange-300</div>\n" +
    "        <div class=\"wrapper-sm orange-400\">@orange-400</div>\n" +
    "        <div class=\"wrapper-sm orange-500\">@orange-500</div>\n" +
    "        <div class=\"wrapper-sm orange-600\">@orange-600</div>\n" +
    "        <div class=\"wrapper-sm orange-700\">@orange-700</div>\n" +
    "        <div class=\"wrapper-sm orange-800\">@orange-800</div>\n" +
    "        <div class=\"wrapper-sm orange-900\">@orange-900</div>\n" +
    "        <div class=\"wrapper-sm orange-A100\">@orange-A100</div>\n" +
    "        <div class=\"wrapper-sm orange-A200\">@orange-A200</div>\n" +
    "        <div class=\"wrapper-sm orange-A400\">@orange-A400</div>\n" +
    "        <div class=\"wrapper-sm orange-A700\">@orange-A700</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm deep-orange-500\">\n" +
    "          <div class=\"m-b-lg\">deep-orange</div>\n" +
    "          @deep-orange-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm deep-orange-50\">@deep-orange-50</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-100\">@deep-orange-100</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-200\">@deep-orange-200</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-300\">@deep-orange-300</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-400\">@deep-orange-400</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-500\">@deep-orange-500</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-600\">@deep-orange-600</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-700\">@deep-orange-700</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-800\">@deep-orange-800</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-900\">@deep-orange-900</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-A100\">@deep-orange-A100</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-A200\">@deep-orange-A200</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-A400\">@deep-orange-A400</div>\n" +
    "        <div class=\"wrapper-sm deep-orange-A700\">@deep-orange-A700</div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"row no-gutter\">\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm brown-500\">\n" +
    "          <div class=\"m-b-lg\">brown</div>\n" +
    "          @brown-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm brown-50\">@brown-50</div>\n" +
    "        <div class=\"wrapper-sm brown-100\">@brown-100</div>\n" +
    "        <div class=\"wrapper-sm brown-200\">@brown-200</div>\n" +
    "        <div class=\"wrapper-sm brown-300\">@brown-300</div>\n" +
    "        <div class=\"wrapper-sm brown-400\">@brown-400</div>\n" +
    "        <div class=\"wrapper-sm brown-500\">@brown-500</div>\n" +
    "        <div class=\"wrapper-sm brown-600\">@brown-600</div>\n" +
    "        <div class=\"wrapper-sm brown-700\">@brown-700</div>\n" +
    "        <div class=\"wrapper-sm brown-800\">@brown-800</div>\n" +
    "        <div class=\"wrapper-sm brown-900\">@brown-900</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm blue-grey-500\">\n" +
    "          <div class=\"m-b-lg\">blue-grey</div>\n" +
    "          @blue-grey-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm blue-grey-50\">@blue-grey-50</div>\n" +
    "        <div class=\"wrapper-sm blue-grey-100\">@blue-grey-100</div>\n" +
    "        <div class=\"wrapper-sm blue-grey-200\">@blue-grey-200</div>\n" +
    "        <div class=\"wrapper-sm blue-grey-300\">@blue-grey-300</div>\n" +
    "        <div class=\"wrapper-sm blue-grey-400\">@blue-grey-400</div>\n" +
    "        <div class=\"wrapper-sm blue-grey-500\">@blue-grey-500</div>\n" +
    "        <div class=\"wrapper-sm blue-grey-600\">@blue-grey-600</div>\n" +
    "        <div class=\"wrapper-sm blue-grey-700\">@blue-grey-700</div>\n" +
    "        <div class=\"wrapper-sm blue-grey-800\">@blue-grey-800</div>\n" +
    "        <div class=\"wrapper-sm blue-grey-900\">@blue-grey-900</div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-3\">\n" +
    "        <div class=\"wrapper-sm grey-500\">\n" +
    "          <div class=\"m-b-lg\">grey</div>\n" +
    "          @grey-500\n" +
    "        </div>\n" +
    "        <div class=\"wrapper-sm grey-50\">@grey-50</div>\n" +
    "        <div class=\"wrapper-sm grey-100\">@grey-100</div>\n" +
    "        <div class=\"wrapper-sm grey-200\">@grey-200</div>\n" +
    "        <div class=\"wrapper-sm grey-300\">@grey-300</div>\n" +
    "        <div class=\"wrapper-sm grey-400\">@grey-400</div>\n" +
    "        <div class=\"wrapper-sm grey-500\">@grey-500</div>\n" +
    "        <div class=\"wrapper-sm grey-600\">@grey-600</div>\n" +
    "        <div class=\"wrapper-sm grey-700\">@grey-700</div>\n" +
    "        <div class=\"wrapper-sm grey-800\">@grey-800</div>\n" +
    "        <div class=\"wrapper-sm grey-900\">@grey-900</div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/material/dialog.tmpl.html",
    "<md-dialog aria-label=\"Mango (Fruit)\">\n" +
    "  <md-subheader class=\"md-sticky-no-effect\">Mango (Fruit)</md-subheader>\n" +
    "  <md-content class=\"wrapper-md\">\n" +
    "    \n" +
    "    <p>\n" +
    "      The mango is a juicy stone fruit belonging to the genus Mangifera, consisting of numerous tropical fruiting trees, cultivated mostly for edible fruit. \n" +
    "    </p>\n" +
    "    <p>\n" +
    "      The majority of these species are found in nature as wild mangoes. They all belong to the flowering plant family Anacardiaceae. The mango is native to South and Southeast Asia, from where it has been distributed worldwide to become one of the most cultivated fruits in the tropics.\n" +
    "    </p>\n" +
    "    <p>\n" +
    "      The highest concentration of Mangifera genus is in the western part of Malesia (Sumatra, Java and Borneo) and in Burma and India. \n" +
    "    </p>\n" +
    "    <p>While other Mangifera species (e.g. horse mango, M. foetida) are also grown on a more localized basis, Mangifera indica—the \"common mango\" or \"Indian mango\"—is the only mango tree commonly cultivated in many tropical and subtropical regions. \n" +
    "    </p>\n" +
    "    <p>\n" +
    "      It originated in Indian subcontinent (present day India and Pakistan) and Burma. It is the national fruit of India, Pakistan, and the Philippines, and the national tree of Bangladesh. In several cultures, its fruit and leaves are ritually used as floral decorations at weddings, public celebrations, and religious ceremonies.\n" +
    "    </p>\n" +
    "  </md-content>\n" +
    "\n" +
    "  <div class=\"md-actions\" layout=\"row\">\n" +
    "    <md-button href=\"http://en.wikipedia.org/wiki/Mango\" target=\"_blank\" hide show-md>\n" +
    "      More on Wikipedia\n" +
    "    </md-button>\n" +
    "    <span flex></span>\n" +
    "    <md-button ng-click=\"answer('not useful')\">\n" +
    "     Not Useful\n" +
    "    </md-button>\n" +
    "    <md-button ng-click=\"answer('useful')\" class=\"md-primary\">\n" +
    "      Useful\n" +
    "    </md-button>\n" +
    "  </div>\n" +
    "\n" +
    "</md-dialog>\n" +
    "");
  $templateCache.put("angulr/tpl/material/form.html",
    "<div class=\"card\" ng-controller=\"MDInputCtrl\" >\n" +
    "  <div class=\"card-heading\">\n" +
    "    <h2>Basic Usage</h2>\n" +
    "  </div>\n" +
    "  <div class=\"card-body bg-dark\">\n" +
    "    <div class=\"row row-sm\">\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <div class=\"md-form-group\">\n" +
    "          <input class=\"md-input md-input-white\" ng-model=\"user.title\">\n" +
    "          <label>Title</label>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <div class=\"md-form-group\">\n" +
    "          <input class=\"md-input md-input-white\" ng-model=\"user.email\">\n" +
    "          <label>Email</label>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "  <div class=\"card-body\">\n" +
    "    <div class=\"row row-sm\">\n" +
    "      <div class=\"col-sm-12\">\n" +
    "        <div class=\"md-form-group\">\n" +
    "          <input class=\"md-input\" disabled ng-model=\"user.company\">\n" +
    "          <label>Company(disabled)</label>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <div class=\"md-form-group float-label\">\n" +
    "          <input class=\"md-input\" ng-model=\"user.firstName\" required>\n" +
    "          <label>First Name</label>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <div class=\"md-form-group float-label\">\n" +
    "          <input class=\"md-input\" ng-model=\"user.lastName\" required>\n" +
    "          <label>Last Name</label>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-12\">\n" +
    "        <div class=\"md-form-group\">\n" +
    "          <input class=\"md-input\" ng-model=\"user.address\">\n" +
    "          <label>Address</label>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-4\">\n" +
    "        <div class=\"md-form-group\">\n" +
    "          <input class=\"md-input\" ng-model=\"user.city\">\n" +
    "          <label>City</label>\n" +
    "          <span class=\"md-input-msg right\">30/30</span>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-4\">\n" +
    "        <div class=\"md-form-group\">\n" +
    "          <input class=\"md-input\" ng-model=\"user.state\">\n" +
    "          <label>State</label>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"col-sm-4\">\n" +
    "        <div class=\"md-form-group\">\n" +
    "          <input class=\"md-input\" ng-model=\"user.postalCode\">\n" +
    "          <label>Postal Code</label>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"col-sm-12\">\n" +
    "        <div class=\"md-form-group\">\n" +
    "          <textarea class=\"md-input\" ng-model=\"user.biography\" rows=\"4\"></textarea>\n" +
    "          <label>Biography</label>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-sm-4\">\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"checkbox\">\n" +
    "            <i class=\"indigo\"></i>\n" +
    "            Checkbox\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"checkbox\" checked>\n" +
    "            <i class=\"blue\"></i>\n" +
    "            Checkbox: checked\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"checkbox\" disabled>\n" +
    "            <i class=\"indigo\"></i>\n" +
    "            Checkbox: disabled\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"checkbox\" checked disabled>\n" +
    "            <i class=\"indigo\"></i>\n" +
    "            Checkbox: checked and disabled\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"checkbox\">\n" +
    "            <i class=\"pink\"></i>\n" +
    "            Checkbox: pink\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"checkbox\" checked>\n" +
    "            <i class=\"green\"></i>\n" +
    "            Checkbox: green\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"checkbox\" checked>\n" +
    "            <i class=\"teal no-icon\"></i>\n" +
    "            Checkbox: no icon\n" +
    "          </label>\n" +
    "        </p>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-4\">\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"radio\" name=\"radio\">\n" +
    "            <i class=\"indigo\"></i>\n" +
    "            Checkbox\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"radio\" name=\"radio\" checked>\n" +
    "            <i class=\"blue\"></i>\n" +
    "            Checkbox: checked\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"radio\" name=\"a\" disabled>\n" +
    "            <i class=\"indigo\"></i>\n" +
    "            Checkbox: disabled\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"radio\" name=\"a\" checked disabled>\n" +
    "            <i class=\"indigo\"></i>\n" +
    "            Checkbox: checked and disabled\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"radio\" name=\"radio\">\n" +
    "            <i class=\"pink\"></i>\n" +
    "            Checkbox: pink\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"radio\" checked name=\"b\">\n" +
    "            <i class=\"green\"></i>\n" +
    "            Checkbox: green\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-check\">\n" +
    "            <input type=\"radio\" name=\"b\">\n" +
    "            <i class=\"teal no-icon\"></i>\n" +
    "            Checkbox: no icon\n" +
    "          </label>\n" +
    "        </p>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-4\">\n" +
    "        <p>\n" +
    "          <label class=\"md-switch\">\n" +
    "            <input type=\"checkbox\">\n" +
    "            <i class=\"indigo\"></i>\n" +
    "            Switch\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-switch\">\n" +
    "            <input type=\"checkbox\" checked>\n" +
    "            <i class=\"blue\"></i>\n" +
    "            Switch: checked\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-switch\">\n" +
    "            <input type=\"checkbox\" disabled>\n" +
    "            <i class=\"blue\"></i>\n" +
    "            Switch: disabled\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-switch\">\n" +
    "            <input type=\"checkbox\" checked disabled>\n" +
    "            <i class=\"blue\"></i>\n" +
    "            Switch: checked and disabled\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-switch\">\n" +
    "            <input type=\"checkbox\">\n" +
    "            <i class=\"pink\"></i>\n" +
    "            Switch: pink\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-switch\">\n" +
    "            <input type=\"radio\" name='switch' checked>\n" +
    "            <i class=\"green\"></i>\n" +
    "            Switch: radio 1\n" +
    "          </label>\n" +
    "        </p>\n" +
    "        <p>\n" +
    "          <label class=\"md-switch\">\n" +
    "            <input type=\"radio\" name='switch'>\n" +
    "            <i class=\"orange\"></i>\n" +
    "            Switch: radio 2\n" +
    "          </label>\n" +
    "        <p>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/material/icon.html",
    "<div class=\"card\">\n" +
    "    <div class=\"card-body\">\n" +
    "      <h4 class=\"page-header m-t\">Action</h4>\n" +
    "      <div class=\"row list-icon\">\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-3d-rotation i-24 m-t-sm\"></i><span>mdi-action-3d-rotation</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-accessibility i-24 m-t-sm\"></i><span>mdi-action-accessibility</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-account-balance i-24 m-t-sm\"></i><span>mdi-action-account-balance</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-account-balance-wallet i-24 m-t-sm\"></i><span>mdi-action-account-balance-wallet</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-account-box i-24 m-t-sm\"></i><span>mdi-action-account-box</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-account-child i-24 m-t-sm\"></i><span>mdi-action-account-child</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-account-circle i-24 m-t-sm\"></i><span>mdi-action-account-circle</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-add-shopping-cart i-24 m-t-sm\"></i><span>mdi-action-add-shopping-cart</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-alarm i-24 m-t-sm\"></i><span>mdi-action-alarm</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-alarm-add i-24 m-t-sm\"></i><span>mdi-action-alarm-add</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-alarm-off i-24 m-t-sm\"></i><span>mdi-action-alarm-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-alarm-on i-24 m-t-sm\"></i><span>mdi-action-alarm-on</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-android i-24 m-t-sm\"></i><span>mdi-action-android</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-announcement i-24 m-t-sm\"></i><span>mdi-action-announcement</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-aspect-ratio i-24 m-t-sm\"></i><span>mdi-action-aspect-ratio</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-assessment i-24 m-t-sm\"></i><span>mdi-action-assessment</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-assignment i-24 m-t-sm\"></i><span>mdi-action-assignment</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-assignment-ind i-24 m-t-sm\"></i><span>mdi-action-assignment-ind</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-assignment-late i-24 m-t-sm\"></i><span>mdi-action-assignment-late</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-assignment-return i-24 m-t-sm\"></i><span>mdi-action-assignment-return</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-assignment-returned i-24 m-t-sm\"></i><span>mdi-action-assignment-returned</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-assignment-turned-in i-24 m-t-sm\"></i><span>mdi-action-assignment-turned-in</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-autorenew i-24 m-t-sm\"></i><span>mdi-action-autorenew</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-backup i-24 m-t-sm\"></i><span>mdi-action-backup</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-book i-24 m-t-sm\"></i><span>mdi-action-book</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-bookmark i-24 m-t-sm\"></i><span>mdi-action-bookmark</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-bookmark-outline i-24 m-t-sm\"></i><span>mdi-action-bookmark-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-bug-report i-24 m-t-sm\"></i><span>mdi-action-bug-report</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-cached i-24 m-t-sm\"></i><span>mdi-action-cached</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-class i-24 m-t-sm\"></i><span>mdi-action-class</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-credit-card i-24 m-t-sm\"></i><span>mdi-action-credit-card</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-dashboard i-24 m-t-sm\"></i><span>mdi-action-dashboard</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-delete i-24 m-t-sm\"></i><span>mdi-action-delete</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-description i-24 m-t-sm\"></i><span>mdi-action-description</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-dns i-24 m-t-sm\"></i><span>mdi-action-dns</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-done i-24 m-t-sm\"></i><span>mdi-action-done</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-done-all i-24 m-t-sm\"></i><span>mdi-action-done-all</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-event i-24 m-t-sm\"></i><span>mdi-action-event</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-exit-to-app i-24 m-t-sm\"></i><span>mdi-action-exit-to-app</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-explore i-24 m-t-sm\"></i><span>mdi-action-explore</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-extension i-24 m-t-sm\"></i><span>mdi-action-extension</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-face-unlock i-24 m-t-sm\"></i><span>mdi-action-face-unlock</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-favorite i-24 m-t-sm\"></i><span>mdi-action-favorite</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-favorite-outline i-24 m-t-sm\"></i><span>mdi-action-favorite-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-find-in-page i-24 m-t-sm\"></i><span>mdi-action-find-in-page</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-find-replace i-24 m-t-sm\"></i><span>mdi-action-find-replace</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-flip-to-back i-24 m-t-sm\"></i><span>mdi-action-flip-to-back</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-flip-to-front i-24 m-t-sm\"></i><span>mdi-action-flip-to-front</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-get-app i-24 m-t-sm\"></i><span>mdi-action-get-app</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-grade i-24 m-t-sm\"></i><span>mdi-action-grade</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-group-work i-24 m-t-sm\"></i><span>mdi-action-group-work</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-help i-24 m-t-sm\"></i><span>mdi-action-help</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-highlight-remove i-24 m-t-sm\"></i><span>mdi-action-highlight-remove</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-history i-24 m-t-sm\"></i><span>mdi-action-history</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-home i-24 m-t-sm\"></i><span>mdi-action-home</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-https i-24 m-t-sm\"></i><span>mdi-action-https</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-info i-24 m-t-sm\"></i><span>mdi-action-info</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-info-outline i-24 m-t-sm\"></i><span>mdi-action-info-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-input i-24 m-t-sm\"></i><span>mdi-action-input</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-invert-colors i-24 m-t-sm\"></i><span>mdi-action-invert-colors</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-label i-24 m-t-sm\"></i><span>mdi-action-label</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-label-outline i-24 m-t-sm\"></i><span>mdi-action-label-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-language i-24 m-t-sm\"></i><span>mdi-action-language</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-launch i-24 m-t-sm\"></i><span>mdi-action-launch</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-list i-24 m-t-sm\"></i><span>mdi-action-list</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-lock i-24 m-t-sm\"></i><span>mdi-action-lock</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-lock-open i-24 m-t-sm\"></i><span>mdi-action-lock-open</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-lock-outline i-24 m-t-sm\"></i><span>mdi-action-lock-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-loyalty i-24 m-t-sm\"></i><span>mdi-action-loyalty</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-markunread-mailbox i-24 m-t-sm\"></i><span>mdi-action-markunread-mailbox</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-note-add i-24 m-t-sm\"></i><span>mdi-action-note-add</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-open-in-browser i-24 m-t-sm\"></i><span>mdi-action-open-in-browser</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-open-in-new i-24 m-t-sm\"></i><span>mdi-action-open-in-new</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-open-with i-24 m-t-sm\"></i><span>mdi-action-open-with</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-pageview i-24 m-t-sm\"></i><span>mdi-action-pageview</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-payment i-24 m-t-sm\"></i><span>mdi-action-payment</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-perm-camera-mic i-24 m-t-sm\"></i><span>mdi-action-perm-camera-mic</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-perm-contact-cal i-24 m-t-sm\"></i><span>mdi-action-perm-contact-cal</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-perm-data-setting i-24 m-t-sm\"></i><span>mdi-action-perm-data-setting</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-perm-device-info i-24 m-t-sm\"></i><span>mdi-action-perm-device-info</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-perm-identity i-24 m-t-sm\"></i><span>mdi-action-perm-identity</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-perm-media i-24 m-t-sm\"></i><span>mdi-action-perm-media</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-perm-phone-msg i-24 m-t-sm\"></i><span>mdi-action-perm-phone-msg</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-perm-scan-wifi i-24 m-t-sm\"></i><span>mdi-action-perm-scan-wifi</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-picture-in-picture i-24 m-t-sm\"></i><span>mdi-action-picture-in-picture</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-polymer i-24 m-t-sm\"></i><span>mdi-action-polymer</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-print i-24 m-t-sm\"></i><span>mdi-action-print</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-query-builder i-24 m-t-sm\"></i><span>mdi-action-query-builder</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-question-answer i-24 m-t-sm\"></i><span>mdi-action-question-answer</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-receipt i-24 m-t-sm\"></i><span>mdi-action-receipt</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-redeem i-24 m-t-sm\"></i><span>mdi-action-redeem</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-report-problem i-24 m-t-sm\"></i><span>mdi-action-report-problem</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-restore i-24 m-t-sm\"></i><span>mdi-action-restore</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-room i-24 m-t-sm\"></i><span>mdi-action-room</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-schedule i-24 m-t-sm\"></i><span>mdi-action-schedule</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-search i-24 m-t-sm\"></i><span>mdi-action-search</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings i-24 m-t-sm\"></i><span>mdi-action-settings</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-applications i-24 m-t-sm\"></i><span>mdi-action-settings-applications</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-backup-restore i-24 m-t-sm\"></i><span>mdi-action-settings-backup-restore</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-bluetooth i-24 m-t-sm\"></i><span>mdi-action-settings-bluetooth</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-cell i-24 m-t-sm\"></i><span>mdi-action-settings-cell</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-display i-24 m-t-sm\"></i><span>mdi-action-settings-display</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-ethernet i-24 m-t-sm\"></i><span>mdi-action-settings-ethernet</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-input-antenna i-24 m-t-sm\"></i><span>mdi-action-settings-input-antenna</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-input-component i-24 m-t-sm\"></i><span>mdi-action-settings-input-component</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-input-composite i-24 m-t-sm\"></i><span>mdi-action-settings-input-composite</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-input-hdmi i-24 m-t-sm\"></i><span>mdi-action-settings-input-hdmi</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-input-svideo i-24 m-t-sm\"></i><span>mdi-action-settings-input-svideo</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-overscan i-24 m-t-sm\"></i><span>mdi-action-settings-overscan</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-phone i-24 m-t-sm\"></i><span>mdi-action-settings-phone</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-power i-24 m-t-sm\"></i><span>mdi-action-settings-power</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-remote i-24 m-t-sm\"></i><span>mdi-action-settings-remote</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-settings-voice i-24 m-t-sm\"></i><span>mdi-action-settings-voice</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-shop i-24 m-t-sm\"></i><span>mdi-action-shop</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-shop-two i-24 m-t-sm\"></i><span>mdi-action-shop-two</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-shopping-basket i-24 m-t-sm\"></i><span>mdi-action-shopping-basket</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-shopping-cart i-24 m-t-sm\"></i><span>mdi-action-shopping-cart</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-speaker-notes i-24 m-t-sm\"></i><span>mdi-action-speaker-notes</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-spellcheck i-24 m-t-sm\"></i><span>mdi-action-spellcheck</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-star-rate i-24 m-t-sm\"></i><span>mdi-action-star-rate</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-stars i-24 m-t-sm\"></i><span>mdi-action-stars</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-store i-24 m-t-sm\"></i><span>mdi-action-store</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-subject i-24 m-t-sm\"></i><span>mdi-action-subject</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-swap-horiz i-24 m-t-sm\"></i><span>mdi-action-swap-horiz</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-swap-vert i-24 m-t-sm\"></i><span>mdi-action-swap-vert</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-swap-vert-circle i-24 m-t-sm\"></i><span>mdi-action-swap-vert-circle</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-system-update-tv i-24 m-t-sm\"></i><span>mdi-action-system-update-tv</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-tab i-24 m-t-sm\"></i><span>mdi-action-tab</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-tab-unselected i-24 m-t-sm\"></i><span>mdi-action-tab-unselected</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-theaters i-24 m-t-sm\"></i><span>mdi-action-theaters</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-thumb-down i-24 m-t-sm\"></i><span>mdi-action-thumb-down</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-thumb-up i-24 m-t-sm\"></i><span>mdi-action-thumb-up</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-thumbs-up-down i-24 m-t-sm\"></i><span>mdi-action-thumbs-up-down</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-toc i-24 m-t-sm\"></i><span>mdi-action-toc</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-today i-24 m-t-sm\"></i><span>mdi-action-today</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-track-changes i-24 m-t-sm\"></i><span>mdi-action-track-changes</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-translate i-24 m-t-sm\"></i><span>mdi-action-translate</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-trending-down i-24 m-t-sm\"></i><span>mdi-action-trending-down</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-trending-neutral i-24 m-t-sm\"></i><span>mdi-action-trending-neutral</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-trending-up i-24 m-t-sm\"></i><span>mdi-action-trending-up</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-turned-in i-24 m-t-sm\"></i><span>mdi-action-turned-in</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-turned-in-not i-24 m-t-sm\"></i><span>mdi-action-turned-in-not</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-verified-user i-24 m-t-sm\"></i><span>mdi-action-verified-user</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-agenda i-24 m-t-sm\"></i><span>mdi-action-view-agenda</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-array i-24 m-t-sm\"></i><span>mdi-action-view-array</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-carousel i-24 m-t-sm\"></i><span>mdi-action-view-carousel</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-column i-24 m-t-sm\"></i><span>mdi-action-view-column</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-day i-24 m-t-sm\"></i><span>mdi-action-view-day</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-headline i-24 m-t-sm\"></i><span>mdi-action-view-headline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-list i-24 m-t-sm\"></i><span>mdi-action-view-list</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-module i-24 m-t-sm\"></i><span>mdi-action-view-module</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-quilt i-24 m-t-sm\"></i><span>mdi-action-view-quilt</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-stream i-24 m-t-sm\"></i><span>mdi-action-view-stream</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-view-week i-24 m-t-sm\"></i><span>mdi-action-view-week</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-visibility i-24 m-t-sm\"></i><span>mdi-action-visibility</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-visibility-off i-24 m-t-sm\"></i><span>mdi-action-visibility-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-wallet-giftcard i-24 m-t-sm\"></i><span>mdi-action-wallet-giftcard</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-wallet-membership i-24 m-t-sm\"></i><span>mdi-action-wallet-membership</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-wallet-travel i-24 m-t-sm\"></i><span>mdi-action-wallet-travel</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-action-work i-24 m-t-sm\"></i><span>mdi-action-work</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">AV</h4>\n" +
    "      <div id=\"av\" class=\"row list-icon\">\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-album i-24 m-t-sm\"></i><span>mdi-av-album</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-timer i-24 m-t-sm\"></i><span>mdi-av-timer</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-closed-caption i-24 m-t-sm\"></i><span>mdi-av-closed-caption</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-equalizer i-24 m-t-sm\"></i><span>mdi-av-equalizer</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-explicit i-24 m-t-sm\"></i><span>mdi-av-explicit</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-fast-forward i-24 m-t-sm\"></i><span>mdi-av-fast-forward</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-fast-rewind i-24 m-t-sm\"></i><span>mdi-av-fast-rewind</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-games i-24 m-t-sm\"></i><span>mdi-av-games</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-hearing i-24 m-t-sm\"></i><span>mdi-av-hearing</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-high-quality i-24 m-t-sm\"></i><span>mdi-av-high-quality</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-loop i-24 m-t-sm\"></i><span>mdi-av-loop</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-mic i-24 m-t-sm\"></i><span>mdi-av-mic</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-mic-none i-24 m-t-sm\"></i><span>mdi-av-mic-none</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-mic-off i-24 m-t-sm\"></i><span>mdi-av-mic-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-movie i-24 m-t-sm\"></i><span>mdi-av-movie</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-my-library-add i-24 m-t-sm\"></i><span>mdi-av-my-library-add</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-my-library-books i-24 m-t-sm\"></i><span>mdi-av-my-library-books</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-my-library-music i-24 m-t-sm\"></i><span>mdi-av-my-library-music</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-new-releases i-24 m-t-sm\"></i><span>mdi-av-new-releases</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-not-interested i-24 m-t-sm\"></i><span>mdi-av-not-interested</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-pause i-24 m-t-sm\"></i><span>mdi-av-pause</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-pause-circle-fill i-24 m-t-sm\"></i><span>mdi-av-pause-circle-fill</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-pause-circle-outline i-24 m-t-sm\"></i><span>mdi-av-pause-circle-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-play-arrow i-24 m-t-sm\"></i><span>mdi-av-play-arrow</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-play-circle-fill i-24 m-t-sm\"></i><span>mdi-av-play-circle-fill</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-play-circle-outline i-24 m-t-sm\"></i><span>mdi-av-play-circle-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-play-shopping-bag i-24 m-t-sm\"></i><span>mdi-av-play-shopping-bag</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-playlist-add i-24 m-t-sm\"></i><span>mdi-av-playlist-add</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-queue i-24 m-t-sm\"></i><span>mdi-av-queue</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-queue-music i-24 m-t-sm\"></i><span>mdi-av-queue-music</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-radio i-24 m-t-sm\"></i><span>mdi-av-radio</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-recent-actors i-24 m-t-sm\"></i><span>mdi-av-recent-actors</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-repeat i-24 m-t-sm\"></i><span>mdi-av-repeat</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-repeat-one i-24 m-t-sm\"></i><span>mdi-av-repeat-one</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-replay i-24 m-t-sm\"></i><span>mdi-av-replay</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-shuffle i-24 m-t-sm\"></i><span>mdi-av-shuffle</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-skip-next i-24 m-t-sm\"></i><span>mdi-av-skip-next</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-skip-previous i-24 m-t-sm\"></i><span>mdi-av-skip-previous</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-snooze i-24 m-t-sm\"></i><span>mdi-av-snooze</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-stop i-24 m-t-sm\"></i><span>mdi-av-stop</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-subtitles i-24 m-t-sm\"></i><span>mdi-av-subtitles</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-surround-sound i-24 m-t-sm\"></i><span>mdi-av-surround-sound</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-video-collection i-24 m-t-sm\"></i><span>mdi-av-video-collection</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-videocam i-24 m-t-sm\"></i><span>mdi-av-videocam</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-videocam-off i-24 m-t-sm\"></i><span>mdi-av-videocam-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-volume-down i-24 m-t-sm\"></i><span>mdi-av-volume-down</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-volume-mute i-24 m-t-sm\"></i><span>mdi-av-volume-mute</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-volume-off i-24 m-t-sm\"></i><span>mdi-av-volume-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-volume-up i-24 m-t-sm\"></i><span>mdi-av-volume-up</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-av-web i-24 m-t-sm\"></i><span>mdi-av-web</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Communication</h4>\n" +
    "      <div id=\"communication\" class=\"row list-icon\">\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-business i-24 m-t-sm\"></i><span>mdi-communication-business</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-call i-24 m-t-sm\"></i><span>mdi-communication-call</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-call-end i-24 m-t-sm\"></i><span>mdi-communication-call-end</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-call-made i-24 m-t-sm\"></i><span>mdi-communication-call-made</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-call-merge i-24 m-t-sm\"></i><span>mdi-communication-call-merge</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-call-missed i-24 m-t-sm\"></i><span>mdi-communication-call-missed</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-call-received i-24 m-t-sm\"></i><span>mdi-communication-call-received</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-call-split i-24 m-t-sm\"></i><span>mdi-communication-call-split</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-chat i-24 m-t-sm\"></i><span>mdi-communication-chat</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-clear-all i-24 m-t-sm\"></i><span>mdi-communication-clear-all</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-comment i-24 m-t-sm\"></i><span>mdi-communication-comment</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-contacts i-24 m-t-sm\"></i><span>mdi-communication-contacts</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-dialer-sip i-24 m-t-sm\"></i><span>mdi-communication-dialer-sip</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-dialpad i-24 m-t-sm\"></i><span>mdi-communication-dialpad</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-dnd-on i-24 m-t-sm\"></i><span>mdi-communication-dnd-on</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-email i-24 m-t-sm\"></i><span>mdi-communication-email</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-forum i-24 m-t-sm\"></i><span>mdi-communication-forum</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-import-export i-24 m-t-sm\"></i><span>mdi-communication-import-export</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-invert-colors-off i-24 m-t-sm\"></i><span>mdi-communication-invert-colors-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-invert-colors-on i-24 m-t-sm\"></i><span>mdi-communication-invert-colors-on</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-live-help i-24 m-t-sm\"></i><span>mdi-communication-live-help</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-location-off i-24 m-t-sm\"></i><span>mdi-communication-location-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-location-on i-24 m-t-sm\"></i><span>mdi-communication-location-on</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-message i-24 m-t-sm\"></i><span>mdi-communication-message</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-messenger i-24 m-t-sm\"></i><span>mdi-communication-messenger</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-no-sim i-24 m-t-sm\"></i><span>mdi-communication-no-sim</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-phone i-24 m-t-sm\"></i><span>mdi-communication-phone</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-portable-wifi-off i-24 m-t-sm\"></i><span>mdi-communication-portable-wifi-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-quick-contacts-dialer i-24 m-t-sm\"></i><span>mdi-communication-quick-contacts-dialer</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-quick-contacts-mail i-24 m-t-sm\"></i><span>mdi-communication-quick-contacts-mail</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-ring-volume i-24 m-t-sm\"></i><span>mdi-communication-ring-volume</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-stay-current-landscape i-24 m-t-sm\"></i><span>mdi-communication-stay-current-landscape</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-stay-current-portrait i-24 m-t-sm\"></i><span>mdi-communication-stay-current-portrait</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-stay-primary-landscape i-24 m-t-sm\"></i><span>mdi-communication-stay-primary-landscape</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-stay-primary-portrait i-24 m-t-sm\"></i><span>mdi-communication-stay-primary-portrait</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-swap-calls i-24 m-t-sm\"></i><span>mdi-communication-swap-calls</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-textsms i-24 m-t-sm\"></i><span>mdi-communication-textsms</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-voicemail i-24 m-t-sm\"></i><span>mdi-communication-voicemail</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-communication-vpn-key i-24 m-t-sm\"></i><span>mdi-communication-vpn-key</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Content</h4>\n" +
    "      <div id=\"content\" class=\"row list-icon\">\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-add i-24 m-t-sm\"></i><span>mdi-content-add</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-add-box i-24 m-t-sm\"></i><span>mdi-content-add-box</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-add-circle i-24 m-t-sm\"></i><span>mdi-content-add-circle</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-add-circle-outline i-24 m-t-sm\"></i><span>mdi-content-add-circle-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-archive i-24 m-t-sm\"></i><span>mdi-content-archive</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-backspace i-24 m-t-sm\"></i><span>mdi-content-backspace</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-block i-24 m-t-sm\"></i><span>mdi-content-block</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-clear i-24 m-t-sm\"></i><span>mdi-content-clear</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-content-copy i-24 m-t-sm\"></i><span>mdi-content-content-copy</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-content-cut i-24 m-t-sm\"></i><span>mdi-content-content-cut</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-content-paste i-24 m-t-sm\"></i><span>mdi-content-content-paste</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-create i-24 m-t-sm\"></i><span>mdi-content-create</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-drafts i-24 m-t-sm\"></i><span>mdi-content-drafts</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-filter-list i-24 m-t-sm\"></i><span>mdi-content-filter-list</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-flag i-24 m-t-sm\"></i><span>mdi-content-flag</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-forward i-24 m-t-sm\"></i><span>mdi-content-forward</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-gesture i-24 m-t-sm\"></i><span>mdi-content-gesture</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-inbox i-24 m-t-sm\"></i><span>mdi-content-inbox</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-link i-24 m-t-sm\"></i><span>mdi-content-link</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-mail i-24 m-t-sm\"></i><span>mdi-content-mail</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-markunread i-24 m-t-sm\"></i><span>mdi-content-markunread</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-redo i-24 m-t-sm\"></i><span>mdi-content-redo</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-remove i-24 m-t-sm\"></i><span>mdi-content-remove</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-remove-circle i-24 m-t-sm\"></i><span>mdi-content-remove-circle</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-remove-circle-outline i-24 m-t-sm\"></i><span>mdi-content-remove-circle-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-reply i-24 m-t-sm\"></i><span>mdi-content-reply</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-reply-all i-24 m-t-sm\"></i><span>mdi-content-reply-all</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-report i-24 m-t-sm\"></i><span>mdi-content-report</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-save i-24 m-t-sm\"></i><span>mdi-content-save</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-select-all i-24 m-t-sm\"></i><span>mdi-content-select-all</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-send i-24 m-t-sm\"></i><span>mdi-content-send</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-sort i-24 m-t-sm\"></i><span>mdi-content-sort</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-text-format i-24 m-t-sm\"></i><span>mdi-content-text-format</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-content-undo i-24 m-t-sm\"></i><span>mdi-content-undo</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Device</h4>\n" +
    "      <div id=\"device\" class=\"row list-icon\">\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-access-alarm i-24 m-t-sm\"></i><span>mdi-device-access-alarm</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-access-alarms i-24 m-t-sm\"></i><span>mdi-device-access-alarms</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-access-time i-24 m-t-sm\"></i><span>mdi-device-access-time</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-add-alarm i-24 m-t-sm\"></i><span>mdi-device-add-alarm</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-airplanemode-off i-24 m-t-sm\"></i><span>mdi-device-airplanemode-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-airplanemode-on i-24 m-t-sm\"></i><span>mdi-device-airplanemode-on</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-20 i-24 m-t-sm\"></i><span>mdi-device-battery-20</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-30 i-24 m-t-sm\"></i><span>mdi-device-battery-30</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-50 i-24 m-t-sm\"></i><span>mdi-device-battery-50</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-60 i-24 m-t-sm\"></i><span>mdi-device-battery-60</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-80 i-24 m-t-sm\"></i><span>mdi-device-battery-80</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-90 i-24 m-t-sm\"></i><span>mdi-device-battery-90</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-alert i-24 m-t-sm\"></i><span>mdi-device-battery-alert</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-charging-20 i-24 m-t-sm\"></i><span>mdi-device-battery-charging-20</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-charging-30 i-24 m-t-sm\"></i><span>mdi-device-battery-charging-30</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-charging-50 i-24 m-t-sm\"></i><span>mdi-device-battery-charging-50</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-charging-60 i-24 m-t-sm\"></i><span>mdi-device-battery-charging-60</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-charging-80 i-24 m-t-sm\"></i><span>mdi-device-battery-charging-80</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-charging-90 i-24 m-t-sm\"></i><span>mdi-device-battery-charging-90</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-charging-full i-24 m-t-sm\"></i><span>mdi-device-battery-charging-full</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-full i-24 m-t-sm\"></i><span>mdi-device-battery-full</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-std i-24 m-t-sm\"></i><span>mdi-device-battery-std</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-battery-unknown i-24 m-t-sm\"></i><span>mdi-device-battery-unknown</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-bluetooth i-24 m-t-sm\"></i><span>mdi-device-bluetooth</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-bluetooth-connected i-24 m-t-sm\"></i><span>mdi-device-bluetooth-connected</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-bluetooth-disabled i-24 m-t-sm\"></i><span>mdi-device-bluetooth-disabled</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-bluetooth-searching i-24 m-t-sm\"></i><span>mdi-device-bluetooth-searching</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-brightness-auto i-24 m-t-sm\"></i><span>mdi-device-brightness-auto</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-brightness-high i-24 m-t-sm\"></i><span>mdi-device-brightness-high</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-brightness-low i-24 m-t-sm\"></i><span>mdi-device-brightness-low</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-brightness-medium i-24 m-t-sm\"></i><span>mdi-device-brightness-medium</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-data-usage i-24 m-t-sm\"></i><span>mdi-device-data-usage</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-developer-mode i-24 m-t-sm\"></i><span>mdi-device-developer-mode</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-devices i-24 m-t-sm\"></i><span>mdi-device-devices</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-dvr i-24 m-t-sm\"></i><span>mdi-device-dvr</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-gps-fixed i-24 m-t-sm\"></i><span>mdi-device-gps-fixed</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-gps-not-fixed i-24 m-t-sm\"></i><span>mdi-device-gps-not-fixed</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-gps-off i-24 m-t-sm\"></i><span>mdi-device-gps-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-location-disabled i-24 m-t-sm\"></i><span>mdi-device-location-disabled</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-location-searching i-24 m-t-sm\"></i><span>mdi-device-location-searching</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-multitrack-audio i-24 m-t-sm\"></i><span>mdi-device-multitrack-audio</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-network-cell i-24 m-t-sm\"></i><span>mdi-device-network-cell</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-network-wifi i-24 m-t-sm\"></i><span>mdi-device-network-wifi</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-nfc i-24 m-t-sm\"></i><span>mdi-device-nfc</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-now-wallpaper i-24 m-t-sm\"></i><span>mdi-device-now-wallpaper</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-now-widgets i-24 m-t-sm\"></i><span>mdi-device-now-widgets</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-screen-lock-landscape i-24 m-t-sm\"></i><span>mdi-device-screen-lock-landscape</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-screen-lock-portrait i-24 m-t-sm\"></i><span>mdi-device-screen-lock-portrait</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-screen-lock-rotation i-24 m-t-sm\"></i><span>mdi-device-screen-lock-rotation</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-screen-rotation i-24 m-t-sm\"></i><span>mdi-device-screen-rotation</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-sd-storage i-24 m-t-sm\"></i><span>mdi-device-sd-storage</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-settings-system-daydream i-24 m-t-sm\"></i><span>mdi-device-settings-system-daydream</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-0-bar i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-0-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-1-bar i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-1-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-2-bar i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-2-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-3-bar i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-3-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-4-bar i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-4-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-connected-no-internet-0-bar i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-connected-no-internet-0-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-connected-no-internet-1-bar i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-connected-no-internet-1-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-connected-no-internet-2-bar i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-connected-no-internet-2-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-connected-no-internet-3-bar i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-connected-no-internet-3-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-connected-no-internet-4-bar i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-connected-no-internet-4-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-no-sim i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-no-sim</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-null i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-null</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-cellular-off i-24 m-t-sm\"></i><span>mdi-device-signal-cellular-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-wifi-0-bar i-24 m-t-sm\"></i><span>mdi-device-signal-wifi-0-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-wifi-1-bar i-24 m-t-sm\"></i><span>mdi-device-signal-wifi-1-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-wifi-2-bar i-24 m-t-sm\"></i><span>mdi-device-signal-wifi-2-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-wifi-3-bar i-24 m-t-sm\"></i><span>mdi-device-signal-wifi-3-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-wifi-4-bar i-24 m-t-sm\"></i><span>mdi-device-signal-wifi-4-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-signal-wifi-off i-24 m-t-sm\"></i><span>mdi-device-signal-wifi-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-storage i-24 m-t-sm\"></i><span>mdi-device-storage</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-usb i-24 m-t-sm\"></i><span>mdi-device-usb</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-wifi-lock i-24 m-t-sm\"></i><span>mdi-device-wifi-lock</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-device-wifi-tethering i-24 m-t-sm\"></i><span>mdi-device-wifi-tethering</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Editor</h4>\n" +
    "      <div id=\"editor\" class=\"row list-icon\">\n" +
    "\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-attach-file i-24 m-t-sm\"></i><span>mdi-editor-attach-file</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-attach-money i-24 m-t-sm\"></i><span>mdi-editor-attach-money</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-all i-24 m-t-sm\"></i><span>mdi-editor-border-all</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-bottom i-24 m-t-sm\"></i><span>mdi-editor-border-bottom</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-clear i-24 m-t-sm\"></i><span>mdi-editor-border-clear</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-color i-24 m-t-sm\"></i><span>mdi-editor-border-color</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-horizontal i-24 m-t-sm\"></i><span>mdi-editor-border-horizontal</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-inner i-24 m-t-sm\"></i><span>mdi-editor-border-inner</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-left i-24 m-t-sm\"></i><span>mdi-editor-border-left</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-outer i-24 m-t-sm\"></i><span>mdi-editor-border-outer</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-right i-24 m-t-sm\"></i><span>mdi-editor-border-right</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-style i-24 m-t-sm\"></i><span>mdi-editor-border-style</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-top i-24 m-t-sm\"></i><span>mdi-editor-border-top</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-border-vertical i-24 m-t-sm\"></i><span>mdi-editor-border-vertical</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-align-center i-24 m-t-sm\"></i><span>mdi-editor-format-align-center</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-align-justify i-24 m-t-sm\"></i><span>mdi-editor-format-align-justify</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-align-left i-24 m-t-sm\"></i><span>mdi-editor-format-align-left</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-align-right i-24 m-t-sm\"></i><span>mdi-editor-format-align-right</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-bold i-24 m-t-sm\"></i><span>mdi-editor-format-bold</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-clear i-24 m-t-sm\"></i><span>mdi-editor-format-clear</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-color-fill i-24 m-t-sm\"></i><span>mdi-editor-format-color-fill</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-color-reset i-24 m-t-sm\"></i><span>mdi-editor-format-color-reset</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-color-text i-24 m-t-sm\"></i><span>mdi-editor-format-color-text</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-indent-decrease i-24 m-t-sm\"></i><span>mdi-editor-format-indent-decrease</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-indent-increase i-24 m-t-sm\"></i><span>mdi-editor-format-indent-increase</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-italic i-24 m-t-sm\"></i><span>mdi-editor-format-italic</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-line-spacing i-24 m-t-sm\"></i><span>mdi-editor-format-line-spacing</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-list-bulleted i-24 m-t-sm\"></i><span>mdi-editor-format-list-bulleted</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-list-numbered i-24 m-t-sm\"></i><span>mdi-editor-format-list-numbered</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-paint i-24 m-t-sm\"></i><span>mdi-editor-format-paint</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-quote i-24 m-t-sm\"></i><span>mdi-editor-format-quote</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-size i-24 m-t-sm\"></i><span>mdi-editor-format-size</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-strikethrough i-24 m-t-sm\"></i><span>mdi-editor-format-strikethrough</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-textdirection-l-to-r i-24 m-t-sm\"></i><span>mdi-editor-format-textdirection-l-to-r</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-textdirection-r-to-l i-24 m-t-sm\"></i><span>mdi-editor-format-textdirection-r-to-l</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-format-underline i-24 m-t-sm\"></i><span>mdi-editor-format-underline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-functions i-24 m-t-sm\"></i><span>mdi-editor-functions</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-insert-chart i-24 m-t-sm\"></i><span>mdi-editor-insert-chart</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-insert-comment i-24 m-t-sm\"></i><span>mdi-editor-insert-comment</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-insert-drive-file i-24 m-t-sm\"></i><span>mdi-editor-insert-drive-file</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-insert-emoticon i-24 m-t-sm\"></i><span>mdi-editor-insert-emoticon</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-insert-invitation i-24 m-t-sm\"></i><span>mdi-editor-insert-invitation</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-insert-link i-24 m-t-sm\"></i><span>mdi-editor-insert-link</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-insert-photo i-24 m-t-sm\"></i><span>mdi-editor-insert-photo</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-merge-type i-24 m-t-sm\"></i><span>mdi-editor-merge-type</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-mode-comment i-24 m-t-sm\"></i><span>mdi-editor-mode-comment</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-mode-edit i-24 m-t-sm\"></i><span>mdi-editor-mode-edit</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-publish i-24 m-t-sm\"></i><span>mdi-editor-publish</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-vertical-align-bottom i-24 m-t-sm\"></i><span>mdi-editor-vertical-align-bottom</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-vertical-align-center i-24 m-t-sm\"></i><span>mdi-editor-vertical-align-center</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-vertical-align-top i-24 m-t-sm\"></i><span>mdi-editor-vertical-align-top</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-editor-wrap-text i-24 m-t-sm\"></i><span>mdi-editor-wrap-text</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">File</h4>\n" +
    "      <div id=\"file\" class=\"row list-icon\">\n" +
    "        \n" +
    "\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-attachment i-24 m-t-sm\"></i><span>mdi-file-attachment</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-cloud i-24 m-t-sm\"></i><span>mdi-file-cloud</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-cloud-circle i-24 m-t-sm\"></i><span>mdi-file-cloud-circle</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-cloud-done i-24 m-t-sm\"></i><span>mdi-file-cloud-done</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-cloud-download i-24 m-t-sm\"></i><span>mdi-file-cloud-download</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-cloud-off i-24 m-t-sm\"></i><span>mdi-file-cloud-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-cloud-queue i-24 m-t-sm\"></i><span>mdi-file-cloud-queue</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-cloud-upload i-24 m-t-sm\"></i><span>mdi-file-cloud-upload</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-file-download i-24 m-t-sm\"></i><span>mdi-file-file-download</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-file-upload i-24 m-t-sm\"></i><span>mdi-file-file-upload</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-folder i-24 m-t-sm\"></i><span>mdi-file-folder</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-folder-open i-24 m-t-sm\"></i><span>mdi-file-folder-open</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-file-folder-shared i-24 m-t-sm\"></i><span>mdi-file-folder-shared</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Hardware</h4>\n" +
    "      <div id=\"hardware\" class=\"row list-icon\">\n" +
    "        \n" +
    "\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-cast i-24 m-t-sm\"></i><span>mdi-hardware-cast</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-cast-connected i-24 m-t-sm\"></i><span>mdi-hardware-cast-connected</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-computer i-24 m-t-sm\"></i><span>mdi-hardware-computer</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-desktop-mac i-24 m-t-sm\"></i><span>mdi-hardware-desktop-mac</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-desktop-windows i-24 m-t-sm\"></i><span>mdi-hardware-desktop-windows</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-dock i-24 m-t-sm\"></i><span>mdi-hardware-dock</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-gamepad i-24 m-t-sm\"></i><span>mdi-hardware-gamepad</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-headset i-24 m-t-sm\"></i><span>mdi-hardware-headset</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-headset-mic i-24 m-t-sm\"></i><span>mdi-hardware-headset-mic</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard i-24 m-t-sm\"></i><span>mdi-hardware-keyboard</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-alt i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-alt</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-arrow-down i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-arrow-down</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-arrow-left i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-arrow-left</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-arrow-right i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-arrow-right</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-arrow-up i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-arrow-up</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-backspace i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-backspace</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-capslock i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-capslock</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-control i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-control</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-hide i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-hide</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-return i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-return</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-tab i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-tab</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-keyboard-voice i-24 m-t-sm\"></i><span>mdi-hardware-keyboard-voice</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-laptop i-24 m-t-sm\"></i><span>mdi-hardware-laptop</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-laptop-chromebook i-24 m-t-sm\"></i><span>mdi-hardware-laptop-chromebook</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-laptop-mac i-24 m-t-sm\"></i><span>mdi-hardware-laptop-mac</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-laptop-windows i-24 m-t-sm\"></i><span>mdi-hardware-laptop-windows</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-memory i-24 m-t-sm\"></i><span>mdi-hardware-memory</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-mouse i-24 m-t-sm\"></i><span>mdi-hardware-mouse</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-phone-android i-24 m-t-sm\"></i><span>mdi-hardware-phone-android</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-phone-iphone i-24 m-t-sm\"></i><span>mdi-hardware-phone-iphone</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-phonelink i-24 m-t-sm\"></i><span>mdi-hardware-phonelink</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-phonelink-off i-24 m-t-sm\"></i><span>mdi-hardware-phonelink-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-security i-24 m-t-sm\"></i><span>mdi-hardware-security</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-sim-card i-24 m-t-sm\"></i><span>mdi-hardware-sim-card</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-smartphone i-24 m-t-sm\"></i><span>mdi-hardware-smartphone</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-speaker i-24 m-t-sm\"></i><span>mdi-hardware-speaker</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-tablet i-24 m-t-sm\"></i><span>mdi-hardware-tablet</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-tablet-android i-24 m-t-sm\"></i><span>mdi-hardware-tablet-android</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-tablet-mac i-24 m-t-sm\"></i><span>mdi-hardware-tablet-mac</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-tv i-24 m-t-sm\"></i><span>mdi-hardware-tv</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-hardware-watch i-24 m-t-sm\"></i><span>mdi-hardware-watch</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Image</h4>\n" +
    "      <div id=\"image\" class=\"row list-icon\">\n" +
    "        \n" +
    "\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-add-to-photos i-24 m-t-sm\"></i><span>mdi-image-add-to-photos</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-adjust i-24 m-t-sm\"></i><span>mdi-image-adjust</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-assistant-photo i-24 m-t-sm\"></i><span>mdi-image-assistant-photo</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-audiotrack i-24 m-t-sm\"></i><span>mdi-image-audiotrack</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-blur-circular i-24 m-t-sm\"></i><span>mdi-image-blur-circular</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-blur-linear i-24 m-t-sm\"></i><span>mdi-image-blur-linear</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-blur-off i-24 m-t-sm\"></i><span>mdi-image-blur-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-blur-on i-24 m-t-sm\"></i><span>mdi-image-blur-on</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-brightness-1 i-24 m-t-sm\"></i><span>mdi-image-brightness-1</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-brightness-2 i-24 m-t-sm\"></i><span>mdi-image-brightness-2</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-brightness-3 i-24 m-t-sm\"></i><span>mdi-image-brightness-3</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-brightness-4 i-24 m-t-sm\"></i><span>mdi-image-brightness-4</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-brightness-5 i-24 m-t-sm\"></i><span>mdi-image-brightness-5</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-brightness-6 i-24 m-t-sm\"></i><span>mdi-image-brightness-6</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-brightness-7 i-24 m-t-sm\"></i><span>mdi-image-brightness-7</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-brush i-24 m-t-sm\"></i><span>mdi-image-brush</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-camera i-24 m-t-sm\"></i><span>mdi-image-camera</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-camera-alt i-24 m-t-sm\"></i><span>mdi-image-camera-alt</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-camera-front i-24 m-t-sm\"></i><span>mdi-image-camera-front</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-camera-rear i-24 m-t-sm\"></i><span>mdi-image-camera-rear</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-camera-roll i-24 m-t-sm\"></i><span>mdi-image-camera-roll</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-center-focus-strong i-24 m-t-sm\"></i><span>mdi-image-center-focus-strong</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-center-focus-weak i-24 m-t-sm\"></i><span>mdi-image-center-focus-weak</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-collections i-24 m-t-sm\"></i><span>mdi-image-collections</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-color-lens i-24 m-t-sm\"></i><span>mdi-image-color-lens</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-colorize i-24 m-t-sm\"></i><span>mdi-image-colorize</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-compare i-24 m-t-sm\"></i><span>mdi-image-compare</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-control-point i-24 m-t-sm\"></i><span>mdi-image-control-point</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-control-point-duplicate i-24 m-t-sm\"></i><span>mdi-image-control-point-duplicate</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop-16-9 i-24 m-t-sm\"></i><span>mdi-image-crop-16-9</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop i-24 m-t-sm\"></i><span>mdi-image-crop</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop-3-2 i-24 m-t-sm\"></i><span>mdi-image-crop-3-2</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop-5-4 i-24 m-t-sm\"></i><span>mdi-image-crop-5-4</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop-7-5 i-24 m-t-sm\"></i><span>mdi-image-crop-7-5</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop-din i-24 m-t-sm\"></i><span>mdi-image-crop-din</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop-free i-24 m-t-sm\"></i><span>mdi-image-crop-free</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop-landscape i-24 m-t-sm\"></i><span>mdi-image-crop-landscape</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop-original i-24 m-t-sm\"></i><span>mdi-image-crop-original</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop-portrait i-24 m-t-sm\"></i><span>mdi-image-crop-portrait</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-crop-square i-24 m-t-sm\"></i><span>mdi-image-crop-square</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-dehaze i-24 m-t-sm\"></i><span>mdi-image-dehaze</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-details i-24 m-t-sm\"></i><span>mdi-image-details</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-edit i-24 m-t-sm\"></i><span>mdi-image-edit</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-exposure i-24 m-t-sm\"></i><span>mdi-image-exposure</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-exposure-minus-1 i-24 m-t-sm\"></i><span>mdi-image-exposure-minus-1</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-exposure-minus-2 i-24 m-t-sm\"></i><span>mdi-image-exposure-minus-2</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-exposure-plus-1 i-24 m-t-sm\"></i><span>mdi-image-exposure-plus-1</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-exposure-plus-2 i-24 m-t-sm\"></i><span>mdi-image-exposure-plus-2</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-exposure-zero i-24 m-t-sm\"></i><span>mdi-image-exposure-zero</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-1 i-24 m-t-sm\"></i><span>mdi-image-filter-1</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter i-24 m-t-sm\"></i><span>mdi-image-filter</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-2 i-24 m-t-sm\"></i><span>mdi-image-filter-2</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-3 i-24 m-t-sm\"></i><span>mdi-image-filter-3</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-4 i-24 m-t-sm\"></i><span>mdi-image-filter-4</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-5 i-24 m-t-sm\"></i><span>mdi-image-filter-5</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-6 i-24 m-t-sm\"></i><span>mdi-image-filter-6</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-7 i-24 m-t-sm\"></i><span>mdi-image-filter-7</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-8 i-24 m-t-sm\"></i><span>mdi-image-filter-8</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-9 i-24 m-t-sm\"></i><span>mdi-image-filter-9</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-9-plus i-24 m-t-sm\"></i><span>mdi-image-filter-9-plus</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-b-and-w i-24 m-t-sm\"></i><span>mdi-image-filter-b-and-w</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-center-focus i-24 m-t-sm\"></i><span>mdi-image-filter-center-focus</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-drama i-24 m-t-sm\"></i><span>mdi-image-filter-drama</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-frames i-24 m-t-sm\"></i><span>mdi-image-filter-frames</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-hdr i-24 m-t-sm\"></i><span>mdi-image-filter-hdr</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-none i-24 m-t-sm\"></i><span>mdi-image-filter-none</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-tilt-shift i-24 m-t-sm\"></i><span>mdi-image-filter-tilt-shift</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-filter-vintage i-24 m-t-sm\"></i><span>mdi-image-filter-vintage</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-flare i-24 m-t-sm\"></i><span>mdi-image-flare</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-flash-auto i-24 m-t-sm\"></i><span>mdi-image-flash-auto</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-flash-off i-24 m-t-sm\"></i><span>mdi-image-flash-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-flash-on i-24 m-t-sm\"></i><span>mdi-image-flash-on</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-flip i-24 m-t-sm\"></i><span>mdi-image-flip</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-gradient i-24 m-t-sm\"></i><span>mdi-image-gradient</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-grain i-24 m-t-sm\"></i><span>mdi-image-grain</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-grid-off i-24 m-t-sm\"></i><span>mdi-image-grid-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-grid-on i-24 m-t-sm\"></i><span>mdi-image-grid-on</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-hdr-off i-24 m-t-sm\"></i><span>mdi-image-hdr-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-hdr-on i-24 m-t-sm\"></i><span>mdi-image-hdr-on</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-hdr-strong i-24 m-t-sm\"></i><span>mdi-image-hdr-strong</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-hdr-weak i-24 m-t-sm\"></i><span>mdi-image-hdr-weak</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-healing i-24 m-t-sm\"></i><span>mdi-image-healing</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-image i-24 m-t-sm\"></i><span>mdi-image-image</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-image-aspect-ratio i-24 m-t-sm\"></i><span>mdi-image-image-aspect-ratio</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-iso i-24 m-t-sm\"></i><span>mdi-image-iso</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-landscape i-24 m-t-sm\"></i><span>mdi-image-landscape</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-leak-add i-24 m-t-sm\"></i><span>mdi-image-leak-add</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-leak-remove i-24 m-t-sm\"></i><span>mdi-image-leak-remove</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-lens i-24 m-t-sm\"></i><span>mdi-image-lens</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-looks i-24 m-t-sm\"></i><span>mdi-image-looks</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-looks-3 i-24 m-t-sm\"></i><span>mdi-image-looks-3</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-looks-4 i-24 m-t-sm\"></i><span>mdi-image-looks-4</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-looks-5 i-24 m-t-sm\"></i><span>mdi-image-looks-5</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-looks-6 i-24 m-t-sm\"></i><span>mdi-image-looks-6</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-looks-one i-24 m-t-sm\"></i><span>mdi-image-looks-one</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-looks-two i-24 m-t-sm\"></i><span>mdi-image-looks-two</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-loupe i-24 m-t-sm\"></i><span>mdi-image-loupe</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-movie-creation i-24 m-t-sm\"></i><span>mdi-image-movie-creation</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-nature i-24 m-t-sm\"></i><span>mdi-image-nature</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-nature-people i-24 m-t-sm\"></i><span>mdi-image-nature-people</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-navigate-before i-24 m-t-sm\"></i><span>mdi-image-navigate-before</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-navigate-next i-24 m-t-sm\"></i><span>mdi-image-navigate-next</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-palette i-24 m-t-sm\"></i><span>mdi-image-palette</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-panorama i-24 m-t-sm\"></i><span>mdi-image-panorama</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-panorama-fisheye i-24 m-t-sm\"></i><span>mdi-image-panorama-fisheye</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-panorama-horizontal i-24 m-t-sm\"></i><span>mdi-image-panorama-horizontal</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-panorama-vertical i-24 m-t-sm\"></i><span>mdi-image-panorama-vertical</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-panorama-wide-angle i-24 m-t-sm\"></i><span>mdi-image-panorama-wide-angle</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-photo i-24 m-t-sm\"></i><span>mdi-image-photo</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-photo-album i-24 m-t-sm\"></i><span>mdi-image-photo-album</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-photo-camera i-24 m-t-sm\"></i><span>mdi-image-photo-camera</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-photo-library i-24 m-t-sm\"></i><span>mdi-image-photo-library</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-portrait i-24 m-t-sm\"></i><span>mdi-image-portrait</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-remove-red-eye i-24 m-t-sm\"></i><span>mdi-image-remove-red-eye</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-rotate-left i-24 m-t-sm\"></i><span>mdi-image-rotate-left</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-rotate-right i-24 m-t-sm\"></i><span>mdi-image-rotate-right</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-slideshow i-24 m-t-sm\"></i><span>mdi-image-slideshow</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-straighten i-24 m-t-sm\"></i><span>mdi-image-straighten</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-style i-24 m-t-sm\"></i><span>mdi-image-style</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-switch-camera i-24 m-t-sm\"></i><span>mdi-image-switch-camera</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-switch-video i-24 m-t-sm\"></i><span>mdi-image-switch-video</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-tag-faces i-24 m-t-sm\"></i><span>mdi-image-tag-faces</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-texture i-24 m-t-sm\"></i><span>mdi-image-texture</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-timelapse i-24 m-t-sm\"></i><span>mdi-image-timelapse</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-timer-10 i-24 m-t-sm\"></i><span>mdi-image-timer-10</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-timer i-24 m-t-sm\"></i><span>mdi-image-timer</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-timer-3 i-24 m-t-sm\"></i><span>mdi-image-timer-3</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-timer-auto i-24 m-t-sm\"></i><span>mdi-image-timer-auto</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-timer-off i-24 m-t-sm\"></i><span>mdi-image-timer-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-tonality i-24 m-t-sm\"></i><span>mdi-image-tonality</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-transform i-24 m-t-sm\"></i><span>mdi-image-transform</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-tune i-24 m-t-sm\"></i><span>mdi-image-tune</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-wb-auto i-24 m-t-sm\"></i><span>mdi-image-wb-auto</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-wb-cloudy i-24 m-t-sm\"></i><span>mdi-image-wb-cloudy</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-wb-incandescent i-24 m-t-sm\"></i><span>mdi-image-wb-incandescent</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-wb-irradescent i-24 m-t-sm\"></i><span>mdi-image-wb-irradescent</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-image-wb-sunny i-24 m-t-sm\"></i><span>mdi-image-wb-sunny</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Maps</h4>\n" +
    "      <div id=\"maps\" class=\"row list-icon\">\n" +
    "        \n" +
    "\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-beenhere i-24 m-t-sm\"></i><span>mdi-maps-beenhere</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-directions i-24 m-t-sm\"></i><span>mdi-maps-directions</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-directions-bike i-24 m-t-sm\"></i><span>mdi-maps-directions-bike</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-directions-bus i-24 m-t-sm\"></i><span>mdi-maps-directions-bus</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-directions-car i-24 m-t-sm\"></i><span>mdi-maps-directions-car</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-directions-ferry i-24 m-t-sm\"></i><span>mdi-maps-directions-ferry</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-directions-subway i-24 m-t-sm\"></i><span>mdi-maps-directions-subway</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-directions-train i-24 m-t-sm\"></i><span>mdi-maps-directions-train</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-directions-transit i-24 m-t-sm\"></i><span>mdi-maps-directions-transit</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-directions-walk i-24 m-t-sm\"></i><span>mdi-maps-directions-walk</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-flight i-24 m-t-sm\"></i><span>mdi-maps-flight</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-hotel i-24 m-t-sm\"></i><span>mdi-maps-hotel</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-layers i-24 m-t-sm\"></i><span>mdi-maps-layers</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-layers-clear i-24 m-t-sm\"></i><span>mdi-maps-layers-clear</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-airport i-24 m-t-sm\"></i><span>mdi-maps-local-airport</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-atm i-24 m-t-sm\"></i><span>mdi-maps-local-atm</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-attraction i-24 m-t-sm\"></i><span>mdi-maps-local-attraction</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-bar i-24 m-t-sm\"></i><span>mdi-maps-local-bar</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-cafe i-24 m-t-sm\"></i><span>mdi-maps-local-cafe</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-car-wash i-24 m-t-sm\"></i><span>mdi-maps-local-car-wash</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-convenience-store i-24 m-t-sm\"></i><span>mdi-maps-local-convenience-store</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-drink i-24 m-t-sm\"></i><span>mdi-maps-local-drink</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-florist i-24 m-t-sm\"></i><span>mdi-maps-local-florist</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-gas-station i-24 m-t-sm\"></i><span>mdi-maps-local-gas-station</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-grocery-store i-24 m-t-sm\"></i><span>mdi-maps-local-grocery-store</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-hospital i-24 m-t-sm\"></i><span>mdi-maps-local-hospital</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-hotel i-24 m-t-sm\"></i><span>mdi-maps-local-hotel</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-laundry-service i-24 m-t-sm\"></i><span>mdi-maps-local-laundry-service</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-library i-24 m-t-sm\"></i><span>mdi-maps-local-library</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-mall i-24 m-t-sm\"></i><span>mdi-maps-local-mall</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-movies i-24 m-t-sm\"></i><span>mdi-maps-local-movies</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-offer i-24 m-t-sm\"></i><span>mdi-maps-local-offer</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-parking i-24 m-t-sm\"></i><span>mdi-maps-local-parking</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-pharmacy i-24 m-t-sm\"></i><span>mdi-maps-local-pharmacy</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-phone i-24 m-t-sm\"></i><span>mdi-maps-local-phone</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-pizza i-24 m-t-sm\"></i><span>mdi-maps-local-pizza</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-play i-24 m-t-sm\"></i><span>mdi-maps-local-play</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-post-office i-24 m-t-sm\"></i><span>mdi-maps-local-post-office</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-print-shop i-24 m-t-sm\"></i><span>mdi-maps-local-print-shop</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-restaurant i-24 m-t-sm\"></i><span>mdi-maps-local-restaurant</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-see i-24 m-t-sm\"></i><span>mdi-maps-local-see</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-shipping i-24 m-t-sm\"></i><span>mdi-maps-local-shipping</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-local-taxi i-24 m-t-sm\"></i><span>mdi-maps-local-taxi</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-location-history i-24 m-t-sm\"></i><span>mdi-maps-location-history</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-map i-24 m-t-sm\"></i><span>mdi-maps-map</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-my-location i-24 m-t-sm\"></i><span>mdi-maps-my-location</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-navigation i-24 m-t-sm\"></i><span>mdi-maps-navigation</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-pin-drop i-24 m-t-sm\"></i><span>mdi-maps-pin-drop</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-place i-24 m-t-sm\"></i><span>mdi-maps-place</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-rate-review i-24 m-t-sm\"></i><span>mdi-maps-rate-review</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-restaurant-menu i-24 m-t-sm\"></i><span>mdi-maps-restaurant-menu</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-satellite i-24 m-t-sm\"></i><span>mdi-maps-satellite</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-store-mall-directory i-24 m-t-sm\"></i><span>mdi-maps-store-mall-directory</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-terrain i-24 m-t-sm\"></i><span>mdi-maps-terrain</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-maps-traffic i-24 m-t-sm\"></i><span>mdi-maps-traffic</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Navigation</h4>\n" +
    "      <div id=\"navigation\" class=\"row list-icon\">\n" +
    "        \n" +
    "\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-apps i-24 m-t-sm\"></i><span>mdi-navigation-apps</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-arrow-back i-24 m-t-sm\"></i><span>mdi-navigation-arrow-back</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-arrow-drop-down i-24 m-t-sm\"></i><span>mdi-navigation-arrow-drop-down</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-arrow-drop-down-circle i-24 m-t-sm\"></i><span>mdi-navigation-arrow-drop-down-circle</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-arrow-drop-up i-24 m-t-sm\"></i><span>mdi-navigation-arrow-drop-up</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-arrow-forward i-24 m-t-sm\"></i><span>mdi-navigation-arrow-forward</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-cancel i-24 m-t-sm\"></i><span>mdi-navigation-cancel</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-check i-24 m-t-sm\"></i><span>mdi-navigation-check</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-chevron-left i-24 m-t-sm\"></i><span>mdi-navigation-chevron-left</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-chevron-right i-24 m-t-sm\"></i><span>mdi-navigation-chevron-right</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-close i-24 m-t-sm\"></i><span>mdi-navigation-close</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-expand-less i-24 m-t-sm\"></i><span>mdi-navigation-expand-less</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-expand-more i-24 m-t-sm\"></i><span>mdi-navigation-expand-more</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-fullscreen i-24 m-t-sm\"></i><span>mdi-navigation-fullscreen</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-fullscreen-exit i-24 m-t-sm\"></i><span>mdi-navigation-fullscreen-exit</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-menu i-24 m-t-sm\"></i><span>mdi-navigation-menu</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-more-horiz i-24 m-t-sm\"></i><span>mdi-navigation-more-horiz</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-more-vert i-24 m-t-sm\"></i><span>mdi-navigation-more-vert</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-refresh i-24 m-t-sm\"></i><span>mdi-navigation-refresh</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-unfold-less i-24 m-t-sm\"></i><span>mdi-navigation-unfold-less</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-navigation-unfold-more i-24 m-t-sm\"></i><span>mdi-navigation-unfold-more</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Notifications</h4>\n" +
    "      <div id=\"notifications\" class=\"row list-icon\">\n" +
    "        \n" +
    "\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-adb i-24 m-t-sm\"></i><span>mdi-notification-adb</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-bluetooth-audio i-24 m-t-sm\"></i><span>mdi-notification-bluetooth-audio</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-disc-full i-24 m-t-sm\"></i><span>mdi-notification-disc-full</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-dnd-forwardslash i-24 m-t-sm\"></i><span>mdi-notification-dnd-forwardslash</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-do-not-disturb i-24 m-t-sm\"></i><span>mdi-notification-do-not-disturb</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-drive-eta i-24 m-t-sm\"></i><span>mdi-notification-drive-eta</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-event-available i-24 m-t-sm\"></i><span>mdi-notification-event-available</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-event-busy i-24 m-t-sm\"></i><span>mdi-notification-event-busy</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-event-note i-24 m-t-sm\"></i><span>mdi-notification-event-note</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-folder-special i-24 m-t-sm\"></i><span>mdi-notification-folder-special</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-mms i-24 m-t-sm\"></i><span>mdi-notification-mms</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-more i-24 m-t-sm\"></i><span>mdi-notification-more</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-network-locked i-24 m-t-sm\"></i><span>mdi-notification-network-locked</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-phone-bluetooth-speaker i-24 m-t-sm\"></i><span>mdi-notification-phone-bluetooth-speaker</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-phone-forwarded i-24 m-t-sm\"></i><span>mdi-notification-phone-forwarded</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-phone-in-talk i-24 m-t-sm\"></i><span>mdi-notification-phone-in-talk</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-phone-locked i-24 m-t-sm\"></i><span>mdi-notification-phone-locked</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-phone-missed i-24 m-t-sm\"></i><span>mdi-notification-phone-missed</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-phone-paused i-24 m-t-sm\"></i><span>mdi-notification-phone-paused</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-play-download i-24 m-t-sm\"></i><span>mdi-notification-play-download</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-play-install i-24 m-t-sm\"></i><span>mdi-notification-play-install</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-sd-card i-24 m-t-sm\"></i><span>mdi-notification-sd-card</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-sim-card-alert i-24 m-t-sm\"></i><span>mdi-notification-sim-card-alert</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-sms i-24 m-t-sm\"></i><span>mdi-notification-sms</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-sms-failed i-24 m-t-sm\"></i><span>mdi-notification-sms-failed</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-sync i-24 m-t-sm\"></i><span>mdi-notification-sync</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-sync-disabled i-24 m-t-sm\"></i><span>mdi-notification-sync-disabled</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-sync-problem i-24 m-t-sm\"></i><span>mdi-notification-sync-problem</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-system-update i-24 m-t-sm\"></i><span>mdi-notification-system-update</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-tap-and-play i-24 m-t-sm\"></i><span>mdi-notification-tap-and-play</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-time-to-leave i-24 m-t-sm\"></i><span>mdi-notification-time-to-leave</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-vibration i-24 m-t-sm\"></i><span>mdi-notification-vibration</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-voice-chat i-24 m-t-sm\"></i><span>mdi-notification-voice-chat</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-notification-vpn-lock i-24 m-t-sm\"></i><span>mdi-notification-vpn-lock</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Social</h4>\n" +
    "      <div id=\"social\" class=\"row list-icon\">\n" +
    "        \n" +
    "\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-cake i-24 m-t-sm\"></i><span>mdi-social-cake</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-domain i-24 m-t-sm\"></i><span>mdi-social-domain</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-group i-24 m-t-sm\"></i><span>mdi-social-group</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-group-add i-24 m-t-sm\"></i><span>mdi-social-group-add</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-location-city i-24 m-t-sm\"></i><span>mdi-social-location-city</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-mood i-24 m-t-sm\"></i><span>mdi-social-mood</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-notifications i-24 m-t-sm\"></i><span>mdi-social-notifications</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-notifications-none i-24 m-t-sm\"></i><span>mdi-social-notifications-none</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-notifications-off i-24 m-t-sm\"></i><span>mdi-social-notifications-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-notifications-on i-24 m-t-sm\"></i><span>mdi-social-notifications-on</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-notifications-paused i-24 m-t-sm\"></i><span>mdi-social-notifications-paused</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-pages i-24 m-t-sm\"></i><span>mdi-social-pages</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-party-mode i-24 m-t-sm\"></i><span>mdi-social-party-mode</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-people i-24 m-t-sm\"></i><span>mdi-social-people</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-people-outline i-24 m-t-sm\"></i><span>mdi-social-people-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-person i-24 m-t-sm\"></i><span>mdi-social-person</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-person-add i-24 m-t-sm\"></i><span>mdi-social-person-add</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-person-outline i-24 m-t-sm\"></i><span>mdi-social-person-outline</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-plus-one i-24 m-t-sm\"></i><span>mdi-social-plus-one</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-poll i-24 m-t-sm\"></i><span>mdi-social-poll</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-public i-24 m-t-sm\"></i><span>mdi-social-public</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-school i-24 m-t-sm\"></i><span>mdi-social-school</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-share i-24 m-t-sm\"></i><span>mdi-social-share</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-social-whatshot i-24 m-t-sm\"></i><span>mdi-social-whatshot</span></div>\n" +
    "      </div>\n" +
    "\n" +
    "      <h4 class=\"page-header\">Toggle</h4>\n" +
    "      <div id=\"toggle\" class=\"row list-icon\">\n" +
    "        \n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-toggle-check-box i-24 m-t-sm\"></i><span>mdi-toggle-check-box</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-toggle-check-box-outline-blank i-24 m-t-sm\"></i><span>mdi-toggle-check-box-outline-blank</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-toggle-radio-button-off i-24 m-t-sm\"></i><span>mdi-toggle-radio-button-off</span></div>\n" +
    "        <div class=\"col-xs-6 col-md-4\"><i class=\"mdi-toggle-radio-button-on i-24 m-t-sm\"></i><span>mdi-toggle-radio-button-on</span>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\n" +
    "    </div>\n" +
    "</div>\n" +
    "");
  $templateCache.put("angulr/tpl/material/list.html",
    "<div class=\"row\">\n" +
    "    <div class=\"col-sm-6\">\n" +
    "      <h5>Basic</h5>\n" +
    "      <div class=\"md-list md-whiteframe-z0 bg-white m-b\">\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a0.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a1.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a2.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a3.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a4.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a5.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a6.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a7.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <h5>Divider inset</h5>\n" +
    "      <div class=\"md-list md-whiteframe-z0 bg-white m-b\">\n" +
    "        <div class=\"md-list-item inset\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a2.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item inset\">\n" +
    "          <div class=\"md-list-item-left img-circle bg-light\">\n" +
    "            <i class=\"mdi-action-grade i-24 text-muted\"></i>\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"col-sm-6\">\n" +
    "      <h5>Text &amp; Icon</h5>\n" +
    "      <div class=\"md-list md-whiteframe-z0 bg-white m-b\">\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left img-circle green\">\n" +
    "            <i class=\"mdi-action-grade i-24\"></i>\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left img-circle indigo\">\n" +
    "            <span class=\"font-thin text-lg\">C</span>\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Ci Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left img-circle pink\">\n" +
    "            <span class=\"font-thin text-lg\">L</span>\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Lin Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left img-circle teal\">\n" +
    "            <span class=\"font-thin text-lg\">A</span>\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left img-circle teal\">\n" +
    "            <span class=\"font-thin text-lg\">M</span>\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left img-circle teal\">\n" +
    "            <span class=\"font-thin text-lg\">B</span>\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Bin Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <h5>Color</h5>\n" +
    "      <div class=\"md-list md-whiteframe-z0 bg-primary m-b\">\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a1.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left img-circle lt\">\n" +
    "            <i class=\"mdi-action-grade i-24\"></i>\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"md-list md-whiteframe-z0 teal m-b\">\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left\">\n" +
    "            <img src=\"img/a1.jpg\" class=\"w-full img-circle\">\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"md-list-item\">\n" +
    "          <div class=\"md-list-item-left img-circle lt\">\n" +
    "            <i class=\"mdi-action-grade i-24\"></i>\n" +
    "          </div>\n" +
    "          <div class=\"md-list-item-content\">\n" +
    "            <h3 class=\"text-md\">Brunch this weekend?</h3>\n" +
    "            <small class=\"font-thin\">Min Li Chan</small>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      \n" +
    "    </div>\n" +
    "  </div>\n" +
    "");
  $templateCache.put("angulr/tpl/material/ngmaterial.html",
    "<div class=\"alert alert-info none ie-show\">\n" +
    "    Some components not working on IE9.\n" +
    "  </div>\n" +
    "  <h4 class=\"no-margin m-b\">Autocomplete</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDAutocompleteCtrl as ctrl\">\n" +
    "    <form ng-submit=\"$event.preventDefault()\">\n" +
    "      <p>Use  <code>md-autocomplete</code> to search for matches from local or remote data sources.</p>\n" +
    "      <md-autocomplete\n" +
    "          ng-disabled=\"ctrl.isDisabled\"\n" +
    "          md-no-cache=\"ctrl.noCache\"\n" +
    "          md-selected-item=\"ctrl.selectedItem\"\n" +
    "          md-search-text-change=\"ctrl.searchTextChange(ctrl.searchText)\"\n" +
    "          md-search-text=\"ctrl.searchText\"\n" +
    "          md-selected-item-change=\"ctrl.selectedItemChange(item)\"\n" +
    "          md-items=\"item in ctrl.querySearch(ctrl.searchText)\"\n" +
    "          md-item-text=\"item.display\"\n" +
    "          md-min-length=\"0\"\n" +
    "          placeholder=\"What is your favorite US state?\">\n" +
    "        <md-item-template>\n" +
    "          <span md-highlight-text=\"ctrl.searchText\" md-highlight-flags=\"^i\">{{item.display}}</span>\n" +
    "        </md-item-template>\n" +
    "        <md-not-found>\n" +
    "          No matches found for \"{{ctrl.searchText}}\".\n" +
    "        </md-not-found>\n" +
    "      </md-autocomplete>\n" +
    "      <br/>\n" +
    "      <md-checkbox ng-model=\"ctrl.simulateQuery\">Simulate query for results?</md-checkbox>\n" +
    "      <md-checkbox ng-model=\"ctrl.noCache\">Disable caching of queries?</md-checkbox>\n" +
    "      <md-checkbox ng-model=\"ctrl.isDisabled\">Disable the input?</md-checkbox>\n" +
    "\n" +
    "      <p>By default, <code>md-autocomplete</code> will cache results when performing a query.  After the initial call is performed, it will use the cached results to eliminate unnecessary server requests or lookup logic. This can be disabled above.</p>\n" +
    "    </form>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Buttons</h4>\n" +
    "  <div class=\"panel card wrapper\">\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <p>\n" +
    "          <span class=\"label bg-light\">Normal</span>\n" +
    "        </p>\n" +
    "        <md-button class=\"btn-fw m-b-sm\">Button</md-button>\n" +
    "        <md-button class=\"md-primary btn-fw m-b-sm\">Primary</md-button>\n" +
    "        <md-button ng-disabled=\"true\" class=\"md-primary btn-fw m-b-sm\">Disabled</md-button>\n" +
    "        <md-button class=\"md-warn btn-fw m-b-sm\">Warn</md-button>\n" +
    "        <md-button class=\"md-accent btn-fw m-b-sm\">Accent</md-button>\n" +
    "        <md-button md-no-ink class=\"btn-fw\">No ink</md-button>\n" +
    "        <p>\n" +
    "          <span class=\"label bg-light\">Raised</span>\n" +
    "        </p>\n" +
    "        <md-button class=\"md-raised btn-fw m-b-sm\">Button</md-button>\n" +
    "        <md-button class=\"md-raised md-primary btn-fw m-b-sm\">Primary</md-button>\n" +
    "        <md-button ng-disabled=\"true\" class=\"md-raised md-primary btn-fw m-b-sm\">Disabled</md-button>\n" +
    "        <md-button class=\"md-raised md-warn btn-fw m-b-sm\">Warn</md-button>\n" +
    "        <md-button class=\"md-raised md-accent btn-fw m-b-sm\">Accent</md-button>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <p>\n" +
    "          <span class=\"label bg-light\">Themed</span>\n" +
    "        </p>\n" +
    "        <md-button class=\"md-primary md-hue-1 btn-fw m-b-sm\">Primary Hue 1</md-button>\n" +
    "        <md-button class=\"md-warn md-raised md-hue-2 btn-fw m-b-sm\">Warn Hue 2</md-button>\n" +
    "        <md-button class=\"md-accent btn-fw m-b-sm\">Accent</md-button>\n" +
    "        <md-button class=\"md-accent md-raised md-hue-1 btn-fw m-b-sm\">Accent Hue 1</md-button>\n" +
    "        \n" +
    "        <p class=\"m-t\">\n" +
    "          <span class=\"label bg-light\">FAB</span>\n" +
    "        </p>\n" +
    "        <md-button class=\"md-fab\" aria-label=\"Eat cake\">\n" +
    "            <i class=\"mdi-action-android i-24\"></i>\n" +
    "        </md-button>\n" +
    "\n" +
    "        <md-button class=\"md-fab md-primary\" aria-label=\"Use Android\">\n" +
    "          <i class=\"mdi-action-speaker-notes i-24\"></i>\n" +
    "        </md-button>\n" +
    "\n" +
    "        <md-button class=\"md-fab\" ng-disabled=\"true\" aria-label=\"Comment\">\n" +
    "          <i class=\"mdi-communication-dialpad i-24\"></i>\n" +
    "        </md-button>\n" +
    "\n" +
    "        <md-button class=\"md-fab md-primary md-hue-2\" aria-label=\"Profile\">\n" +
    "          <i class=\"mdi-communication-phone i-24\"></i>\n" +
    "        </md-button>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Dialog</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDDialogCtrl\">\n" +
    "    <p>\n" +
    "      Open a dialog over the app's content. Press escape or click outside to close the dialog and\n" +
    "      send focus back to the triggering button.\n" +
    "    </p>\n" +
    "\n" +
    "    <div >\n" +
    "      <md-button class=\"md-primary\" ng-click=\"showAlert($event)\">\n" +
    "        Alert Dialog\n" +
    "      </md-button>\n" +
    "      <md-button class=\"md-primary\" ng-click=\"showConfirm($event)\">\n" +
    "        Confirm Dialog\n" +
    "      </md-button>\n" +
    "      <md-button class=\"md-primary\" ng-click=\"showAdvanced($event)\">\n" +
    "        Custom Dialog\n" +
    "      </md-button>\n" +
    "    </div>\n" +
    "    \n" +
    "    <br/>\n" +
    "    <b layout=\"row\" layout-align=\"center center\" layout-margin>\n" +
    "      {{alert}}\n" +
    "    </b>\n" +
    "  </div>\n" +
    "\n" +
    "\n" +
    "  <h4>Inputs</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDInputCtrl\">\n" +
    "    <div class=\"row\">\n" +
    "      <md-input-container class=\"md-primary col-sm-6\">\n" +
    "        <label>Title</label>\n" +
    "        <input ng-model=\"user.title\">\n" +
    "      </md-input-container>\n" +
    "      <md-input-container class=\"col-sm-6\">\n" +
    "        <label>Email</label>\n" +
    "        <input ng-model=\"user.email\" type=\"email\">\n" +
    "      </md-input-container>\n" +
    "    </div>\n" +
    "    <form name=\"userForm\">\n" +
    "\n" +
    "      <md-input-container flex>\n" +
    "        <label>Company (Disabled)</label>\n" +
    "        <input ng-model=\"user.company\" disabled>\n" +
    "      </md-input-container>\n" +
    "    \n" +
    "      <div layout layout-sm=\"column\">\n" +
    "        <md-input-container flex>\n" +
    "          <label>First Name</label>\n" +
    "          <input ng-model=\"user.firstName\">\n" +
    "        </md-input-container>\n" +
    "        <md-input-container flex>\n" +
    "          <label>Last Name</label>\n" +
    "          <input ng-model=\"theMax\">\n" +
    "        </md-input-container>\n" +
    "      </div>\n" +
    "\n" +
    "      <md-input-container flex>\n" +
    "        <label>Address</label>\n" +
    "        <input ng-model=\"user.address\">\n" +
    "      </md-input-container>\n" +
    "\n" +
    "      <div layout layout-sm=\"column\">\n" +
    "        <md-input-container flex>\n" +
    "          <label>City</label>\n" +
    "          <input ng-model=\"user.city\">\n" +
    "        </md-input-container>\n" +
    "        <md-input-container flex>\n" +
    "          <label>State</label>\n" +
    "          <input ng-model=\"user.state\">\n" +
    "        </md-input-container>\n" +
    "        <md-input-container flex>\n" +
    "          <label>Postal Code</label>\n" +
    "          <input ng-model=\"user.postalCode\">\n" +
    "        </md-input-container>\n" +
    "      </div>\n" +
    "\n" +
    "      <md-input-container flex>\n" +
    "        <label>Biography</label>\n" +
    "        <textarea ng-model=\"user.biography\" columns=\"1\" md-maxlength=\"150\"></textarea>\n" +
    "      </md-input-container>\n" +
    "    </form>\n" +
    "    <h5>Errors</h5>\n" +
    "    <form name=\"projectForm\">\n" +
    "      <md-input-container>\n" +
    "        <label>Description</label>\n" +
    "        <input md-maxlength=\"30\" required name=\"description\" ng-model=\"project.description\">\n" +
    "        <div ng-messages=\"projectForm.description.$error\">\n" +
    "          <div ng-message=\"required\">This is required.</div>\n" +
    "          <div ng-message=\"md-maxlength\">The name has to be less than 30 characters long.</div>\n" +
    "        </div>\n" +
    "      </md-input-container>\n" +
    "      <md-input-container>\n" +
    "        <label>Client Name</label>\n" +
    "        <input required name=\"clientName\" ng-model=\"project.clientName\">\n" +
    "        <div ng-messages=\"projectForm.clientName.$error\">\n" +
    "          <div ng-message=\"required\">This is required.</div>\n" +
    "        </div>\n" +
    "      </md-input-container>\n" +
    "      <md-input-container>\n" +
    "        <label>Hourly Rate (USD)</label>\n" +
    "        <input required type=\"number\" step=\"any\" name=\"rate\" ng-model=\"project.rate\" min=\"800\" max=\"4999\" required>\n" +
    "        <div ng-messages=\"projectForm.rate.$error\">\n" +
    "          <div ng-message=\"required\">You've got to charge something! You can't just <b>give away</b> a Missile Defense System.</div>\n" +
    "          <div ng-message=\"min\">You should charge at least $800 an hour. This job is a big deal... if you mess up, everyone dies!</div>\n" +
    "          <div ng-message=\"max\">$5,000 an hour? That's a little ridiculous. I doubt event Bill Clinton could afford that.</div>\n" +
    "        </div>\n" +
    "      </md-input-container>\n" +
    "    </form>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Checkbox, Radio and Switch</h4>\n" +
    "  <div class=\"panel card wrapper\">\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-md-4\" ng-controller=\"MDCheckboxCtrl\">\n" +
    "        <md-checkbox ng-model=\"data.cb1\" aria-label=\"Checkbox 1\">\n" +
    "          Checkbox 1: {{ data.cb1 }}\n" +
    "        </md-checkbox>\n" +
    "\n" +
    "        <md-checkbox ng-model=\"data.cb2\" aria-label=\"Checkbox 2\" ng-true-value=\"'yup'\" ng-false-value=\"'nope'\" class=\"md-warn\">\n" +
    "          Checkbox 2 (md-warn): {{ data.cb2 }}\n" +
    "        </md-checkbox>\n" +
    "\n" +
    "        <md-checkbox ng-disabled=\"true\" aria-label=\"Disabled checkbox\" ng-model=\"data.cb3\">\n" +
    "          Checkbox: Disabled\n" +
    "        </md-checkbox>\n" +
    "\n" +
    "        <md-checkbox ng-disabled=\"true\" aria-label=\"Disabled checked checkbox\" ng-model=\"data.cb4\" ng-init=\"data.cb4=true\">\n" +
    "          Checkbox: Disabled, Checked\n" +
    "        </md-checkbox>\n" +
    "\n" +
    "        <md-checkbox md-no-ink aria-label=\"Checkbox No Ink\" ng-model=\"data.cb5\" class=\"md-primary\">\n" +
    "          Checkbox (md-primary): No Ink\n" +
    "        </md-checkbox>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"col-md-4\" ng-controller=\"MDRadioCtrl\">\n" +
    "          <md-radio-group ng-model=\"data.group2\">\n" +
    "              <md-radio-button ng-repeat=\"d in radioData\"\n" +
    "                               ng-value=\"d.value\"\n" +
    "                               ng-disabled=\" d.isDisabled \">\n" +
    "                  {{ d.label }}\n" +
    "              </md-radio-button>\n" +
    "          </md-radio-group>\n" +
    "          <p>Selected Value: <span class=\"radioValue\">{{ data.group2 }}</span></p>\n" +
    "          <p>\n" +
    "            <md-button ng-click=\"addItem()\" type=\"button\">Add</md-button>\n" +
    "            <md-button ng-click=\"removeItem()\" type=\"button\">Remove</md-button>\n" +
    "          </p>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"col-md-4\" ng-controller=\"MDSwitchCtrl\">\n" +
    "        <md-switch ng-model=\"data.cb1\" aria-label=\"Switch 1\">\n" +
    "          Switch 1: {{ data.cb1 }}\n" +
    "        </md-switch>\n" +
    "\n" +
    "        <md-switch ng-model=\"data.cb2\" aria-label=\"Switch 2\" ng-true-value=\"'yup'\" ng-false-value=\"'nope'\" class=\"md-warn\">\n" +
    "          Switch 2 (md-warn): {{ data.cb2 }}\n" +
    "        </md-switch>\n" +
    "\n" +
    "        <md-switch ng-disabled=\"true\" aria-label=\"Disabled switch\" ng-model=\"disabledModel\">\n" +
    "          Switch (Disabled)\n" +
    "        </md-switch>\n" +
    "\n" +
    "        <md-switch ng-disabled=\"true\" aria-label=\"Disabled active switch\" ng-model=\"data.cb4\">\n" +
    "          Switch (Disabled, Active)\n" +
    "        </md-switch>\n" +
    "\n" +
    "        <md-switch class=\"md-primary\" md-no-ink aria-label=\"Switch No Ink\">\n" +
    "          Switch (md-primary): No Ink\n" +
    "        </md-switch>\n" +
    "        \n" +
    "        <md-switch ng-model=\"data.cb5\" aria-label=\"Switch 5\" ng-change=\"onChange(data.cb5)\">\n" +
    "          Switch 5 message: {{ message }}\n" +
    "        </md-switch>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Slider</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDSliderCtrl\">\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <h5>\n" +
    "          RGB <span ng-attr-style=\"border: 1px solid #333; background: rgb({{color.red}},{{color.green}},{{color.blue}})\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n" +
    "        </h5>\n" +
    "\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-2 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">R</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider min=\"0\" max=\"255\" ng-model=\"color.red\" aria-label=\"red\" id=\"red-slider\">\n" +
    "          </md-slider>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-2\">\n" +
    "            <input type=\"number\" ng-model=\"color.red\" aria-label=\"red\" aria-controls=\"red-slider\" class=\"m-t-sm form-control input-sm\">\n" +
    "          </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-2 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">G</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider ng-model=\"color.green\" min=\"0\" max=\"255\" aria-label=\"green\" id=\"green-slider\" class=\"md-accent\">\n" +
    "            </md-slider>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-2\">\n" +
    "            <input type=\"number\" ng-model=\"color.green\" aria-label=\"green\" aria-controls=\"green-slider\" class=\"m-t-sm form-control input-sm\">\n" +
    "          </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-2 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">B</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider ng-model=\"color.blue\" min=\"0\" max=\"255\" aria-label=\"blue\" id=\"blue-slider\" class=\"md-primary\">\n" +
    "            </md-slider>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-2\">\n" +
    "            <input type=\"number\" ng-model=\"color.blue\" aria-label=\"blue\" aria-controls=\"blue-slider\" class=\"m-t-sm form-control input-sm\">\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <h5>Rating: {{rating}}/5 - demo of theming classes</h5>\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-4 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">md-default</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider md-discrete ng-model=\"rating1\" step=\"1\" min=\"1\" max=\"5\" aria-label=\"rating\">\n" +
    "          </div>\n" +
    "          </md-slider>\n" +
    "        </div>\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-4 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">md-warn</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider class=\"md-warn\" md-discrete ng-model=\"rating2\" step=\"1\" min=\"1\" max=\"5\" aria-label=\"rating\">\n" +
    "            </md-slider>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-4 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">md-primary</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider class=\"md-primary\" md-discrete ng-model=\"rating3\" step=\"1\" min=\"1\" max=\"5\" aria-label=\"rating\">\n" +
    "            </md-slider>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <h5>Disabled</h5>\n" +
    "\n" +
    "        <md-slider ng-model=\"disabled1\" ng-disabled=\"true\" aria-label=\"Disabled 1\"></md-slider>\n" +
    "        <md-slider ng-model=\"disabled2\" ng-disabled=\"true\" aria-label=\"Disabled 2\"></md-slider>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <h5>Disabled, Discrete</h5>\n" +
    "\n" +
    "        <md-slider ng-model=\"disabled1\" ng-disabled=\"true\" step=\"3\" md-discrete min=\"0\" max=\"10\" aria-label=\"Disabled discrete 1\"></md-slider>\n" +
    "        <md-slider ng-model=\"disabled2\" ng-disabled=\"true\" step=\"10\" md-discrete aria-label=\"Disabled discrete 2\"></md-slider>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Grid</h4>\n" +
    "  <div>\n" +
    "    <md-grid-list\n" +
    "        md-row-height=\"1:1\" md-gutter=\"8px\"\n" +
    "        md-cols-gt-md=\"6\" md-cols-sm=\"3\" md-cols-md=\"4\"\n" +
    "        md-row-height-gt-md=\"1:1\" md-row-height=\"4:3\"\n" +
    "        md-gutter-gt-md=\"16px\" md-gutter-gt-sm=\"8px\" md-gutter=\"4px\">\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\"\n" +
    "          md-rowspan=\"2\" md-colspan=\"2\">\n" +
    "          <h5>A</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>B</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>C</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\"\n" +
    "          md-colspan=\"2\">\n" +
    "          <h5>D</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\"\n" +
    "          md-rowspan=\"2\" md-colspan=\"2\">\n" +
    "          <h5>E</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>F</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>G</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>H</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>I</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>J</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>K</h5>\n" +
    "      </md-grid-tile>\n" +
    "    </md-grid-list>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Progress</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDProgressCtrl\">\n" +
    "    <h5>Determinate</h5>\n" +
    "    <p>For operations where the percentage of the operation completed can be determined, use a determinate indicator. They give users a quick sense of how long an operation will take.</p>\n" +
    "    <div layout=\"row\" layout-sm=\"column\" layout-align=\"space-around\">\n" +
    "      <md-progress-circular md-mode=\"determinate\" value=\"{{determinateValue}}\"></md-progress-circular>\n" +
    "    </div>\n" +
    "\n" +
    "    <h5>Indeterminate</h5>\n" +
    "    <p>For operations where the user is asked to wait a moment while something finishes up, and it’s not necessary to expose what's happening behind the scenes and how long it will take, use an indeterminate indicator.</p>\n" +
    "    <div layout=\"row\" layout-sm=\"column\" layout-align=\"space-around\">\n" +
    "      <md-progress-circular md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "    </div>\n" +
    "\n" +
    "    <h5>Theming</h5>\n" +
    "\n" +
    "    <div layout=\"row\" layout-sm=\"column\" layout-align=\"space-around\">\n" +
    "      <md-progress-circular class=\"md-hue-2\" md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "      <md-progress-circular class=\"md-accent\" md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "      <md-progress-circular class=\"md-accent md-hue-1\" md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "      <md-progress-circular class=\"md-warn md-hue-3\" md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "      <md-progress-circular class=\"md-warn\" md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "    </div>\n" +
    "\n" +
    "    <h5>Linear</h5>\n" +
    "\n" +
    "    <md-progress-linear md-mode=\"indeterminate\" class=\"m-b\"></md-progress-linear>\n" +
    "\n" +
    "    <md-progress-linear class=\"md-warn m-b\" md-mode=\"buffer\" value=\"{{determinateValue}}\" md-buffer-value=\"{{determinateValue2}}\">\n" +
    "    </md-progress-linear>\n" +
    "\n" +
    "    <md-progress-linear class=\"md-accent m-b\" md-mode=\"{{mode}}\" value=\"{{determinateValue}}\"></md-progress-linear>\n" +
    "\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Select</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDSelectCtrl\">\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <md-select ng-model=\"userState\" placeholder=\"State\">\n" +
    "          <md-option ng-repeat=\"state in states\" value=\"{{state.abbrev}}\">{{state.abbrev}}</md-option>\n" +
    "        </md-select>\n" +
    "        <p>{{ userState ? 'You selected ' + userState : 'You haven\\'t selected a state yet' }}</p>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <md-select multiple ng-model=\"multiNeighborhood\" placeholder=\"Neighborhood\">\n" +
    "          <md-select-label>{{ multiNeighborhood.length ? multiNeighborhood.join(', ') : 'Choose some' }}</md-select-label>\n" +
    "          <md-option ng-value=\"opt\" ng-repeat=\"opt in neighborhoods\">{{ opt }}</md-option>\n" +
    "        </md-select>\n" +
    "        <p class=\"result\">{{ multiNeighborhood ? 'You selected ' + multiNeighborhood : 'You haven\\'t selected anything yet' }}</p>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <md-select ng-model=\"favoriteTopping\" placeholder=\"Favorite Topping\">\n" +
    "          <md-optgroup label=\"Meats\">\n" +
    "            <md-option ng-value=\"topping.name\" ng-repeat=\"topping in toppings | filter: {category: 'meat' }\">{{topping.name}}</md-option>\n" +
    "          </md-option-group>\n" +
    "          <md-optgroup label=\"Veggies\">\n" +
    "            <md-option ng-value=\"topping.name\" ng-repeat=\"topping in toppings | filter: {category: 'veg' }\">{{topping.name}}</md-option>\n" +
    "          </md-option-group>\n" +
    "        </md-select>\n" +
    "        <p class=\"result\">{{ favoriteTopping ? 'Your favorite topping is ' + favoriteTopping : 'Please select a topping'}}</p>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <md-select ng-model=\"user\" md-on-open=\"loadUsers()\", style=\"min-width: 200px;\">\n" +
    "          <md-select-label>{{ user ? user.name : 'Assign to user' }}</md-select-label>\n" +
    "          <md-option ng-value=\"user\" ng-repeat=\"user in users\">{{user.name}}</md-option>\n" +
    "        </md-select>\n" +
    "        <p class=\"result\">You have assigned the task to: {{ user ? user.name : 'No one yet' }}</p>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Sidenav</h4>\n" +
    "  <div class=\"panel card wrapper pos-rlt\" ng-controller=\"MDSidenavCtrl\">\n" +
    "    <section layout=\"row\" flex>\n" +
    "      <md-sidenav class=\"md-sidenav-left md-whiteframe-z2\" md-component-id=\"left\" md-is-locked-open=\"$mdMedia('gt-md')\">\n" +
    "\n" +
    "        <md-toolbar class=\"md-theme-indigo\">\n" +
    "          <h1 class=\"md-toolbar-tools\">Sidenav Left</h1>\n" +
    "        </md-toolbar>\n" +
    "        <md-content class=\"md-padding\">\n" +
    "          <md-button ng-click=\"closeLeft()\" class=\"md-primary\" hide-gt-md>\n" +
    "            Close Sidenav Left\n" +
    "          </md-button>\n" +
    "          <p hide-md show-gt-md>\n" +
    "            This sidenav is locked open on your device. To go back to the default behavior,\n" +
    "            narrow your display.\n" +
    "          </p>\n" +
    "        </md-content>\n" +
    "\n" +
    "      </md-sidenav>\n" +
    "\n" +
    "      <md-content flex class=\"md-padding\">\n" +
    "\n" +
    "        <div layout=\"column\" layout-fill layout-align=\"center center\">\n" +
    "          <p>\n" +
    "          The left sidenav will 'lock open' on a medium (>=960px wide) device.\n" +
    "          </p>\n" +
    "\n" +
    "          <div>\n" +
    "            <md-button ng-click=\"toggleLeft()\"\n" +
    "              class=\"md-primary\" hide-gt-md>\n" +
    "              Toggle left\n" +
    "            </md-button>\n" +
    "          </div>\n" +
    "\n" +
    "          <div>\n" +
    "            <md-button ng-click=\"toggleRight()\"\n" +
    "              class=\"md-primary\">\n" +
    "              Toggle right\n" +
    "            </md-button>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "\n" +
    "      </md-content>\n" +
    "\n" +
    "      <md-sidenav class=\"md-sidenav-right md-whiteframe-z2\" md-component-id=\"right\">\n" +
    "\n" +
    "        <md-toolbar class=\"md-theme-light\">\n" +
    "          <h1 class=\"md-toolbar-tools\">Sidenav Right</h1>\n" +
    "        </md-toolbar>\n" +
    "        <md-content class=\"md-padding\">\n" +
    "          <md-button ng-click=\"closeRight()\" class=\"md-primary\">\n" +
    "            Close Sidenav Right\n" +
    "          </md-button>\n" +
    "        </md-content>\n" +
    "\n" +
    "      </md-sidenav>\n" +
    "    </section>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Subheader</h4>\n" +
    "  <div class=\"panel card wrapperos-rlt\" ng-controller=\"MDSubheaderCtrl\">\n" +
    "    <md-content style=\"height: 300px;\">\n" +
    "      <section>\n" +
    "        <md-subheader class=\"md-primary\">Unread Messages</md-subheader>\n" +
    "        <md-list layout-padding>\n" +
    "          <md-list-item class=\"md-3-line\" ng-repeat=\"message in messages\">\n" +
    "              <img ng-src=\"{{message.face}}\" class=\"md-avatar\" alt=\"{{message.who}}\">\n" +
    "              <div class=\"md-list-item-text\">\n" +
    "                <h3>{{message.what}}</h3>\n" +
    "                <h4>{{message.who}}</h4>\n" +
    "                <p>\n" +
    "                  {{message.notes}}\n" +
    "                </p>\n" +
    "              </div>\n" +
    "          </md-list-item>\n" +
    "        </md-list>\n" +
    "      </section>\n" +
    "      <section>\n" +
    "        <md-subheader class=\"md-warn\">Late Messages</md-subheader>\n" +
    "        <md-list layout=\"column\" layout-padding>\n" +
    "          <md-list-item class=\"md-3-line\" ng-repeat=\"message in messages\">\n" +
    "            <img ng-src=\"{{message.face}}\" class=\"md-avatar\" alt=\"{{message.who}}\">\n" +
    "            <div class=\"md-list-item-text\">\n" +
    "              <h3>{{message.what}}</h3>\n" +
    "              <h4>{{message.who}}</h4>\n" +
    "              <p>\n" +
    "                {{message.notes}}\n" +
    "              </p>\n" +
    "            </div>\n" +
    "          </md-list-item>\n" +
    "        </md-list>\n" +
    "      </section>\n" +
    "      <section>\n" +
    "        <md-subheader>Read Messages</md-subheader>\n" +
    "        <md-list layout=\"column\" layout-padding>\n" +
    "          <md-list-item class=\"md-3-line\" ng-repeat=\"message in messages\">\n" +
    "            <img ng-src=\"{{message.face}}\" class=\"md-avatar\" alt=\"{{message.who}}\">\n" +
    "            <div class=\"md-list-item-text\">\n" +
    "              <h3>{{message.what}}</h3>\n" +
    "              <h4>{{message.who}}</h4>\n" +
    "              <p>\n" +
    "                {{message.notes}}\n" +
    "              </p>\n" +
    "            </div>\n" +
    "          </md-list-item>\n" +
    "        </md-list>\n" +
    "      </section>\n" +
    "      <section>\n" +
    "        <md-subheader class=\"md-accent\">Archived messages</md-subheader>\n" +
    "        <md-list layout=\"column\" layout-padding>\n" +
    "          <md-list-item class=\"md-3-line\" ng-repeat=\"message in messages\">\n" +
    "            <img ng-src=\"{{message.face}}\" class=\"md-avatar\" alt=\"{{message.who}}\">\n" +
    "            <div class=\"md-list-item-text\">\n" +
    "              <h3>{{message.what}}</h3>\n" +
    "              <h4>{{message.who}}</h4>\n" +
    "              <p>\n" +
    "                {{message.notes}}\n" +
    "              </p>\n" +
    "            </div>\n" +
    "          </md-list-item>\n" +
    "        </md-list>\n" +
    "      </section>\n" +
    "    </md-content>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Tabs</h4>\n" +
    "  <div ng-controller=\"MDTabCtrl\">\n" +
    "    <div class=\"panel panel-card\">\n" +
    "      <div class=\"wrapper\">Static Tabs</div>\n" +
    "      <md-tabs class=\"md-primary\" md-selected=\"data.selectedIndex\">\n" +
    "        <md-tab id=\"tab1\" aria-controls=\"tab1-content\">\n" +
    "          Item One\n" +
    "        </md-tab>\n" +
    "        <md-tab id=\"tab2\" aria-controls=\"tab2-content\"\n" +
    "                ng-disabled=\"data.secondLocked\">\n" +
    "          {{data.secondLabel}}\n" +
    "        </md-tab>\n" +
    "        <md-tab id=\"tab3\" aria-controls=\"tab3-content\">\n" +
    "          Item Three\n" +
    "        </md-tab>\n" +
    "      </md-tabs>\n" +
    "\n" +
    "      <ng-switch on=\"data.selectedIndex\">\n" +
    "          <div role=\"tabpanel\"\n" +
    "               id=\"tab1-content\"\n" +
    "               aria-labelledby=\"tab1\"\n" +
    "               ng-switch-when=\"0\"\n" +
    "               md-swipe-left=\"next()\"\n" +
    "               md-swipe-right=\"previous()\"  class=\"wrapper blue\">\n" +
    "              View for Item #1<br/>\n" +
    "              data.selectedIndex = 0\n" +
    "          </div>\n" +
    "          <div role=\"tabpanel\"\n" +
    "               id=\"tab2-content\"\n" +
    "               aria-labelledby=\"tab2\"\n" +
    "               ng-switch-when=\"1\"\n" +
    "               md-swipe-left=\"next()\"\n" +
    "               md-swipe-right=\"previous()\"  class=\"wrapper teal\">\n" +
    "              View for {{data.secondLabel}}<br/>\n" +
    "              data.selectedIndex = 1\n" +
    "          </div>\n" +
    "          <div role=\"tabpanel\"\n" +
    "               id=\"tab3-content\"\n" +
    "               aria-labelledby=\"tab3\"\n" +
    "               ng-switch-when=\"2\"\n" +
    "               md-swipe-left=\"next()\"\n" +
    "               md-swipe-right=\"previous()\"  class=\"wrapper cyan\">\n" +
    "              View for Item #3<br/>\n" +
    "              data.selectedIndex = 2\n" +
    "          </div>\n" +
    "      </ng-switch>\n" +
    "\n" +
    "      <div class=\"b-t wrapper\" layout=\"row\" layout-sm=\"column\" layout-align=\"left center\">\n" +
    "          <md-input-container>\n" +
    "            <label for=\"selectedIndex\">Selected Index</label>\n" +
    "            <input type=\"number\" id=\"selectedIndex\" ng-model=\"data.selectedIndex\">\n" +
    "          </md-input-container>\n" +
    "          <div flex></div>\n" +
    "          <md-checkbox ng-model=\"data.secondLocked\" aria-label=\"Disabled\">\n" +
    "            Disabled Item Two\n" +
    "          </md-checkbox>\n" +
    "\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"panel panel-card\">\n" +
    "      <md-tabs md-selected=\"selectedIndex\" flex>\n" +
    "        <md-tab ng-repeat=\"tab in tabs\"\n" +
    "                ng-disabled=\"tab.disabled\"\n" +
    "                label=\"{{tab.title}}\">\n" +
    "        <div class=\"b-t\" flex>\n" +
    "        <div class=\"wrapper tab{{$index%4}}\" layout=\"column\" layout-align=\"space-around center\">\n" +
    "            <div ng-bind=\"tab.content\" class=\"m-b-lg\"></div>\n" +
    "              <md-button class=\"md-primary md-raised\" ng-click=\"removeTab( tab )\">\n" +
    "                Remove Tab\n" +
    "              </md-button>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        </md-tab>\n" +
    "      </md-tabs>\n" +
    "\n" +
    "      <form ng-submit=\"addTab(tTitle,tContent)\" layout=\"column\" class=\"b-t p\">\n" +
    "        <div layout=\"row\" layout-sm=\"column\" layout-margin >\n" +
    "          <md-input-container>\n" +
    "            <label for=\"activeIndex\">Active Index</label>\n" +
    "            <input type=\"text\" id=\"activeIndex\" ng-model=\"selectedIndex\" disabled>\n" +
    "          </md-input-container>\n" +
    "\n" +
    "          <md-input-container>\n" +
    "            <label for=\"activeTitle\">Active Title</label>\n" +
    "            <input type=\"text\" id=\"activeTitle\" ng-model=\"tabs[selectedIndex].title\">\n" +
    "          </md-input-container>\n" +
    "        </div>\n" +
    "\n" +
    "        <div layout=\"row\" layout-sm=\"column\" layout-margin >\n" +
    "          <span class=\"title m-t-lg m-r-sm\">Add a new Tab:</span>\n" +
    "          <md-input-container>\n" +
    "            <label for=\"label\">Label</label>\n" +
    "            <input type=\"text\" id=\"label\" ng-model=\"tTitle\">\n" +
    "          </md-input-container>\n" +
    "          <md-input-container>\n" +
    "            <label for=\"content\">Content</label>\n" +
    "            <input type=\"text\" id=\"content\" ng-model=\"tContent\">\n" +
    "          </md-input-container>\n" +
    "          <md-button class=\"add-tab md-primary\"  type=\"submit\" style=\"max-height: 32px; margin-top:24px\" >Add Tab</md-button>\n" +
    "        </div>\n" +
    "      </form>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Toast</h4>\n" +
    "  <div class=\"panel card wrapper pos-rlt\" ng-controller=\"MDToastCtrl\" id=\"toast\">\n" +
    "    <p>Toast can be dismissed with a swipe, a timer, or a button.</p>\n" +
    "\n" +
    "    <div layout=\"row\" layout-sm=\"column\" layout-align=\"space-around\">\n" +
    "      <div style=\"width:50px\"></div>\n" +
    "      <md-button ng-click=\"showCustomToast()\">\n" +
    "        Show Custom\n" +
    "      </md-button>\n" +
    "      <md-button ng-click=\"showSimpleToast()\">\n" +
    "        Show Simple\n" +
    "      </md-button>\n" +
    "      <md-button class=\"md-raised\" ng-click=\"showActionToast()\">\n" +
    "        Show With Action\n" +
    "      </md-button>\n" +
    "      <div style=\"width:50px\"></div>\n" +
    "    </div>\n" +
    "\n" +
    "    <div>\n" +
    "      <br/>\n" +
    "      <b>Toast Position: \"{{getToastPosition()}}\"</b>\n" +
    "      <br/>\n" +
    "      <md-checkbox ng-repeat=\"(name, isSelected) in toastPosition\"\n" +
    "        ng-model=\"toastPosition[name]\"> \n" +
    "        {{name}}\n" +
    "      </md-checkbox>\n" +
    "      <md-button class=\"md-primary md-fab md-fab-bottom-right\">\n" +
    "        FAB\n" +
    "      </md-button>\n" +
    "      <md-button class=\"md-accent md-fab md-fab-top-right\">\n" +
    "        FAB\n" +
    "      </md-button>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Tooltip</h4>\n" +
    "  <div class=\"panel card wrapper pos-rlt\" ng-controller=\"MDTooltipCtrl\">\n" +
    "    <p>\n" +
    "      The tooltip is visible when the button is hovered, focused, or touched.\n" +
    "    </p>\n" +
    "\n" +
    "    <md-button class=\"md-fab md-primary m-r\" aria-label=\"Insert Drive\">\n" +
    "      <i class=\"mdi-editor-insert-drive-file i-24\"></i>\n" +
    "      <md-tooltip md-visible=\"demo.showTooltip\">\n" +
    "        Insert Drive\n" +
    "      </md-tooltip>\n" +
    "    </md-button>\n" +
    "    <md-button class=\"md-fab\" aria-label=\"Photos\">\n" +
    "      <i class=\"mdi-editor-insert-photo i-24\"></i>\n" +
    "      <md-tooltip>\n" +
    "        Photos\n" +
    "      </md-tooltip>\n" +
    "    </md-button>\n" +
    "\n" +
    "    <br/><br/><br/>\n" +
    "\n" +
    "    <p>\n" +
    "      <div>\n" +
    "        Additionally, the Tooltip's `md-visible` attribute can use data-binding to programmatically\n" +
    "        show/hide itself. Toggle the checkbox below...\n" +
    "      </div>\n" +
    "    </p>\n" +
    "\n" +
    "    <md-checkbox ng-model=\"demo.showTooltip\">\n" +
    "      Insert Drive\n" +
    "    </md-checkbox>\n" +
    "\n" +
    "  </div>\n" +
    "");
  $templateCache.put("angulr/tpl/material/toast.tmpl.html",
    "<md-toast>\n" +
    "  <span flex>Custom toast!</span>\n" +
    "  <md-button ng-click=\"closeToast()\">\n" +
    "    Close\n" +
    "  </md-button>\n" +
    "</md-toast>\n" +
    "");
  $templateCache.put("angulr/tpl/modal.html",
    "<div class=\"modal-header\">\n" +
    "    <h3 class=\"modal-title\">Modal!</h3>\n" +
    "</div>\n" +
    "<div class=\"modal-body\">\n" +
    "    <ul>\n" +
    "        <li ng-repeat=\"item in items\">\n" +
    "            <a ng-click=\"selected.item = item\">{{ item }}</a>\n" +
    "        </li>\n" +
    "    </ul>\n" +
    "    Selected: <b>{{ selected.item }}</b>\n" +
    "</div>\n" +
    "<div class=\"modal-footer\">                  \n" +
    "    <button class=\"btn btn-default\" ng-click=\"cancel()\">Cancel</button>\n" +
    "    <button class=\"btn btn-primary\" ng-click=\"ok()\">OK</button>\n" +
    "</div>");
  $templateCache.put("angulr/tpl/ngmaterial.html",
    "<div class=\"alert alert-info none ie-show\">\n" +
    "    Some components not working on IE9.\n" +
    "  </div>\n" +
    "  <h4 class=\"no-margin m-b\">Autocomplete</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDAutocompleteCtrl as ctrl\">\n" +
    "    <form ng-submit=\"$event.preventDefault()\">\n" +
    "      <p>Use  <code>md-autocomplete</code> to search for matches from local or remote data sources.</p>\n" +
    "      <md-autocomplete\n" +
    "          ng-disabled=\"ctrl.isDisabled\"\n" +
    "          md-no-cache=\"ctrl.noCache\"\n" +
    "          md-selected-item=\"ctrl.selectedItem\"\n" +
    "          md-search-text-change=\"ctrl.searchTextChange(ctrl.searchText)\"\n" +
    "          md-search-text=\"ctrl.searchText\"\n" +
    "          md-selected-item-change=\"ctrl.selectedItemChange(item)\"\n" +
    "          md-items=\"item in ctrl.querySearch(ctrl.searchText)\"\n" +
    "          md-item-text=\"item.display\"\n" +
    "          md-min-length=\"0\"\n" +
    "          placeholder=\"What is your favorite US state?\">\n" +
    "        <md-item-template>\n" +
    "          <span md-highlight-text=\"ctrl.searchText\" md-highlight-flags=\"^i\">{{item.display}}</span>\n" +
    "        </md-item-template>\n" +
    "        <md-not-found>\n" +
    "          No matches found for \"{{ctrl.searchText}}\".\n" +
    "        </md-not-found>\n" +
    "      </md-autocomplete>\n" +
    "      <br/>\n" +
    "      <md-checkbox ng-model=\"ctrl.simulateQuery\">Simulate query for results?</md-checkbox>\n" +
    "      <md-checkbox ng-model=\"ctrl.noCache\">Disable caching of queries?</md-checkbox>\n" +
    "      <md-checkbox ng-model=\"ctrl.isDisabled\">Disable the input?</md-checkbox>\n" +
    "\n" +
    "      <p>By default, <code>md-autocomplete</code> will cache results when performing a query.  After the initial call is performed, it will use the cached results to eliminate unnecessary server requests or lookup logic. This can be disabled above.</p>\n" +
    "    </form>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Buttons</h4>\n" +
    "  <div class=\"panel card wrapper\">\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <p>\n" +
    "          <span class=\"label bg-light\">Normal</span>\n" +
    "        </p>\n" +
    "        <md-button class=\"btn-fw m-b-sm\">Button</md-button>\n" +
    "        <md-button class=\"md-primary btn-fw m-b-sm\">Primary</md-button>\n" +
    "        <md-button ng-disabled=\"true\" class=\"md-primary btn-fw m-b-sm\">Disabled</md-button>\n" +
    "        <md-button class=\"md-warn btn-fw m-b-sm\">Warn</md-button>\n" +
    "        <md-button class=\"md-accent btn-fw m-b-sm\">Accent</md-button>\n" +
    "        <md-button md-no-ink class=\"btn-fw\">No ink</md-button>\n" +
    "        <p>\n" +
    "          <span class=\"label bg-light\">Raised</span>\n" +
    "        </p>\n" +
    "        <md-button class=\"md-raised btn-fw m-b-sm\">Button</md-button>\n" +
    "        <md-button class=\"md-raised md-primary btn-fw m-b-sm\">Primary</md-button>\n" +
    "        <md-button ng-disabled=\"true\" class=\"md-raised md-primary btn-fw m-b-sm\">Disabled</md-button>\n" +
    "        <md-button class=\"md-raised md-warn btn-fw m-b-sm\">Warn</md-button>\n" +
    "        <md-button class=\"md-raised md-accent btn-fw m-b-sm\">Accent</md-button>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <p>\n" +
    "          <span class=\"label bg-light\">Themed</span>\n" +
    "        </p>\n" +
    "        <md-button class=\"md-primary md-hue-1 btn-fw m-b-sm\">Primary Hue 1</md-button>\n" +
    "        <md-button class=\"md-warn md-raised md-hue-2 btn-fw m-b-sm\">Warn Hue 2</md-button>\n" +
    "        <md-button class=\"md-accent btn-fw m-b-sm\">Accent</md-button>\n" +
    "        <md-button class=\"md-accent md-raised md-hue-1 btn-fw m-b-sm\">Accent Hue 1</md-button>\n" +
    "        \n" +
    "        <p class=\"m-t\">\n" +
    "          <span class=\"label bg-light\">FAB</span>\n" +
    "        </p>\n" +
    "        <md-button class=\"md-fab\" aria-label=\"Eat cake\">\n" +
    "            <i class=\"mdi-action-android i-24\"></i>\n" +
    "        </md-button>\n" +
    "\n" +
    "        <md-button class=\"md-fab md-primary\" aria-label=\"Use Android\">\n" +
    "          <i class=\"mdi-action-speaker-notes i-24\"></i>\n" +
    "        </md-button>\n" +
    "\n" +
    "        <md-button class=\"md-fab\" ng-disabled=\"true\" aria-label=\"Comment\">\n" +
    "          <i class=\"mdi-communication-dialpad i-24\"></i>\n" +
    "        </md-button>\n" +
    "\n" +
    "        <md-button class=\"md-fab md-primary md-hue-2\" aria-label=\"Profile\">\n" +
    "          <i class=\"mdi-communication-phone i-24\"></i>\n" +
    "        </md-button>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Dialog</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDDialogCtrl\">\n" +
    "    <p>\n" +
    "      Open a dialog over the app's content. Press escape or click outside to close the dialog and\n" +
    "      send focus back to the triggering button.\n" +
    "    </p>\n" +
    "\n" +
    "    <div >\n" +
    "      <md-button class=\"md-primary\" ng-click=\"showAlert($event)\">\n" +
    "        Alert Dialog\n" +
    "      </md-button>\n" +
    "      <md-button class=\"md-primary\" ng-click=\"showConfirm($event)\">\n" +
    "        Confirm Dialog\n" +
    "      </md-button>\n" +
    "      <md-button class=\"md-primary\" ng-click=\"showAdvanced($event)\">\n" +
    "        Custom Dialog\n" +
    "      </md-button>\n" +
    "    </div>\n" +
    "    \n" +
    "    <br/>\n" +
    "    <b layout=\"row\" layout-align=\"center center\" layout-margin>\n" +
    "      {{alert}}\n" +
    "    </b>\n" +
    "  </div>\n" +
    "\n" +
    "\n" +
    "  <h4>Inputs</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDInputCtrl\">\n" +
    "    <div class=\"row\">\n" +
    "      <md-input-container class=\"md-primary col-sm-6\">\n" +
    "        <label>Title</label>\n" +
    "        <input ng-model=\"user.title\">\n" +
    "      </md-input-container>\n" +
    "      <md-input-container class=\"col-sm-6\">\n" +
    "        <label>Email</label>\n" +
    "        <input ng-model=\"user.email\" type=\"email\">\n" +
    "      </md-input-container>\n" +
    "    </div>\n" +
    "    <form name=\"userForm\">\n" +
    "\n" +
    "      <md-input-container flex>\n" +
    "        <label>Company (Disabled)</label>\n" +
    "        <input ng-model=\"user.company\" disabled>\n" +
    "      </md-input-container>\n" +
    "    \n" +
    "      <div layout layout-sm=\"column\">\n" +
    "        <md-input-container flex>\n" +
    "          <label>First Name</label>\n" +
    "          <input ng-model=\"user.firstName\">\n" +
    "        </md-input-container>\n" +
    "        <md-input-container flex>\n" +
    "          <label>Last Name</label>\n" +
    "          <input ng-model=\"theMax\">\n" +
    "        </md-input-container>\n" +
    "      </div>\n" +
    "\n" +
    "      <md-input-container flex>\n" +
    "        <label>Address</label>\n" +
    "        <input ng-model=\"user.address\">\n" +
    "      </md-input-container>\n" +
    "\n" +
    "      <div layout layout-sm=\"column\">\n" +
    "        <md-input-container flex>\n" +
    "          <label>City</label>\n" +
    "          <input ng-model=\"user.city\">\n" +
    "        </md-input-container>\n" +
    "        <md-input-container flex>\n" +
    "          <label>State</label>\n" +
    "          <input ng-model=\"user.state\">\n" +
    "        </md-input-container>\n" +
    "        <md-input-container flex>\n" +
    "          <label>Postal Code</label>\n" +
    "          <input ng-model=\"user.postalCode\">\n" +
    "        </md-input-container>\n" +
    "      </div>\n" +
    "\n" +
    "      <md-input-container flex>\n" +
    "        <label>Biography</label>\n" +
    "        <textarea ng-model=\"user.biography\" columns=\"1\" md-maxlength=\"150\"></textarea>\n" +
    "      </md-input-container>\n" +
    "    </form>\n" +
    "    <h5>Errors</h5>\n" +
    "    <form name=\"projectForm\">\n" +
    "      <md-input-container>\n" +
    "        <label>Description</label>\n" +
    "        <input md-maxlength=\"30\" required name=\"description\" ng-model=\"project.description\">\n" +
    "        <div ng-messages=\"projectForm.description.$error\">\n" +
    "          <div ng-message=\"required\">This is required.</div>\n" +
    "          <div ng-message=\"md-maxlength\">The name has to be less than 30 characters long.</div>\n" +
    "        </div>\n" +
    "      </md-input-container>\n" +
    "      <md-input-container>\n" +
    "        <label>Client Name</label>\n" +
    "        <input required name=\"clientName\" ng-model=\"project.clientName\">\n" +
    "        <div ng-messages=\"projectForm.clientName.$error\">\n" +
    "          <div ng-message=\"required\">This is required.</div>\n" +
    "        </div>\n" +
    "      </md-input-container>\n" +
    "      <md-input-container>\n" +
    "        <label>Hourly Rate (USD)</label>\n" +
    "        <input required type=\"number\" step=\"any\" name=\"rate\" ng-model=\"project.rate\" min=\"800\" max=\"4999\" required>\n" +
    "        <div ng-messages=\"projectForm.rate.$error\">\n" +
    "          <div ng-message=\"required\">You've got to charge something! You can't just <b>give away</b> a Missile Defense System.</div>\n" +
    "          <div ng-message=\"min\">You should charge at least $800 an hour. This job is a big deal... if you mess up, everyone dies!</div>\n" +
    "          <div ng-message=\"max\">$5,000 an hour? That's a little ridiculous. I doubt event Bill Clinton could afford that.</div>\n" +
    "        </div>\n" +
    "      </md-input-container>\n" +
    "    </form>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Checkbox, Radio and Switch</h4>\n" +
    "  <div class=\"panel card wrapper\">\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-md-4\" ng-controller=\"MDCheckboxCtrl\">\n" +
    "        <md-checkbox ng-model=\"data.cb1\" aria-label=\"Checkbox 1\">\n" +
    "          Checkbox 1: {{ data.cb1 }}\n" +
    "        </md-checkbox>\n" +
    "\n" +
    "        <md-checkbox ng-model=\"data.cb2\" aria-label=\"Checkbox 2\" ng-true-value=\"'yup'\" ng-false-value=\"'nope'\" class=\"md-warn\">\n" +
    "          Checkbox 2 (md-warn): {{ data.cb2 }}\n" +
    "        </md-checkbox>\n" +
    "\n" +
    "        <md-checkbox ng-disabled=\"true\" aria-label=\"Disabled checkbox\" ng-model=\"data.cb3\">\n" +
    "          Checkbox: Disabled\n" +
    "        </md-checkbox>\n" +
    "\n" +
    "        <md-checkbox ng-disabled=\"true\" aria-label=\"Disabled checked checkbox\" ng-model=\"data.cb4\" ng-init=\"data.cb4=true\">\n" +
    "          Checkbox: Disabled, Checked\n" +
    "        </md-checkbox>\n" +
    "\n" +
    "        <md-checkbox md-no-ink aria-label=\"Checkbox No Ink\" ng-model=\"data.cb5\" class=\"md-primary\">\n" +
    "          Checkbox (md-primary): No Ink\n" +
    "        </md-checkbox>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"col-md-4\" ng-controller=\"MDRadioCtrl\">\n" +
    "          <md-radio-group ng-model=\"data.group2\">\n" +
    "              <md-radio-button ng-repeat=\"d in radioData\"\n" +
    "                               ng-value=\"d.value\"\n" +
    "                               ng-disabled=\" d.isDisabled \">\n" +
    "                  {{ d.label }}\n" +
    "              </md-radio-button>\n" +
    "          </md-radio-group>\n" +
    "          <p>Selected Value: <span class=\"radioValue\">{{ data.group2 }}</span></p>\n" +
    "          <p>\n" +
    "            <md-button ng-click=\"addItem()\" type=\"button\">Add</md-button>\n" +
    "            <md-button ng-click=\"removeItem()\" type=\"button\">Remove</md-button>\n" +
    "          </p>\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"col-md-4\" ng-controller=\"MDSwitchCtrl\">\n" +
    "        <md-switch ng-model=\"data.cb1\" aria-label=\"Switch 1\">\n" +
    "          Switch 1: {{ data.cb1 }}\n" +
    "        </md-switch>\n" +
    "\n" +
    "        <md-switch ng-model=\"data.cb2\" aria-label=\"Switch 2\" ng-true-value=\"'yup'\" ng-false-value=\"'nope'\" class=\"md-warn\">\n" +
    "          Switch 2 (md-warn): {{ data.cb2 }}\n" +
    "        </md-switch>\n" +
    "\n" +
    "        <md-switch ng-disabled=\"true\" aria-label=\"Disabled switch\" ng-model=\"disabledModel\">\n" +
    "          Switch (Disabled)\n" +
    "        </md-switch>\n" +
    "\n" +
    "        <md-switch ng-disabled=\"true\" aria-label=\"Disabled active switch\" ng-model=\"data.cb4\">\n" +
    "          Switch (Disabled, Active)\n" +
    "        </md-switch>\n" +
    "\n" +
    "        <md-switch class=\"md-primary\" md-no-ink aria-label=\"Switch No Ink\">\n" +
    "          Switch (md-primary): No Ink\n" +
    "        </md-switch>\n" +
    "        \n" +
    "        <md-switch ng-model=\"data.cb5\" aria-label=\"Switch 5\" ng-change=\"onChange(data.cb5)\">\n" +
    "          Switch 5 message: {{ message }}\n" +
    "        </md-switch>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Slider</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDSliderCtrl\">\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <h5>\n" +
    "          RGB <span ng-attr-style=\"border: 1px solid #333; background: rgb({{color.red}},{{color.green}},{{color.blue}})\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n" +
    "        </h5>\n" +
    "\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-2 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">R</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider min=\"0\" max=\"255\" ng-model=\"color.red\" aria-label=\"red\" id=\"red-slider\">\n" +
    "          </md-slider>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-2\">\n" +
    "            <input type=\"number\" ng-model=\"color.red\" aria-label=\"red\" aria-controls=\"red-slider\" class=\"m-t-sm form-control input-sm\">\n" +
    "          </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-2 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">G</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider ng-model=\"color.green\" min=\"0\" max=\"255\" aria-label=\"green\" id=\"green-slider\" class=\"md-accent\">\n" +
    "            </md-slider>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-2\">\n" +
    "            <input type=\"number\" ng-model=\"color.green\" aria-label=\"green\" aria-controls=\"green-slider\" class=\"m-t-sm form-control input-sm\">\n" +
    "          </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-2 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">B</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider ng-model=\"color.blue\" min=\"0\" max=\"255\" aria-label=\"blue\" id=\"blue-slider\" class=\"md-primary\">\n" +
    "            </md-slider>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-2\">\n" +
    "            <input type=\"number\" ng-model=\"color.blue\" aria-label=\"blue\" aria-controls=\"blue-slider\" class=\"m-t-sm form-control input-sm\">\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <h5>Rating: {{rating}}/5 - demo of theming classes</h5>\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-4 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">md-default</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider md-discrete ng-model=\"rating1\" step=\"1\" min=\"1\" max=\"5\" aria-label=\"rating\">\n" +
    "          </div>\n" +
    "          </md-slider>\n" +
    "        </div>\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-4 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">md-warn</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider class=\"md-warn\" md-discrete ng-model=\"rating2\" step=\"1\" min=\"1\" max=\"5\" aria-label=\"rating\">\n" +
    "            </md-slider>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        <div class=\"row\">\n" +
    "          <div class=\"col-xs-4 text-center\">\n" +
    "            <span class=\"m-t block l-h-1x\">md-primary</span>\n" +
    "          </div>\n" +
    "          <div class=\"col-xs-8\">\n" +
    "            <md-slider class=\"md-primary\" md-discrete ng-model=\"rating3\" step=\"1\" min=\"1\" max=\"5\" aria-label=\"rating\">\n" +
    "            </md-slider>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <h5>Disabled</h5>\n" +
    "\n" +
    "        <md-slider ng-model=\"disabled1\" ng-disabled=\"true\" aria-label=\"Disabled 1\"></md-slider>\n" +
    "        <md-slider ng-model=\"disabled2\" ng-disabled=\"true\" aria-label=\"Disabled 2\"></md-slider>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <h5>Disabled, Discrete</h5>\n" +
    "\n" +
    "        <md-slider ng-model=\"disabled1\" ng-disabled=\"true\" step=\"3\" md-discrete min=\"0\" max=\"10\" aria-label=\"Disabled discrete 1\"></md-slider>\n" +
    "        <md-slider ng-model=\"disabled2\" ng-disabled=\"true\" step=\"10\" md-discrete aria-label=\"Disabled discrete 2\"></md-slider>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Grid</h4>\n" +
    "  <div>\n" +
    "    <md-grid-list\n" +
    "        md-row-height=\"1:1\" md-gutter=\"8px\"\n" +
    "        md-cols-gt-md=\"6\" md-cols-sm=\"3\" md-cols-md=\"4\"\n" +
    "        md-row-height-gt-md=\"1:1\" md-row-height=\"4:3\"\n" +
    "        md-gutter-gt-md=\"16px\" md-gutter-gt-sm=\"8px\" md-gutter=\"4px\">\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\"\n" +
    "          md-rowspan=\"2\" md-colspan=\"2\">\n" +
    "          <h5>A</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>B</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>C</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\"\n" +
    "          md-colspan=\"2\">\n" +
    "          <h5>D</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\"\n" +
    "          md-rowspan=\"2\" md-colspan=\"2\">\n" +
    "          <h5>E</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>F</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>G</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>H</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>I</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>J</h5>\n" +
    "      </md-grid-tile>\n" +
    "      <md-grid-tile class=\"bg-white md-whiteframe-z0\">\n" +
    "          <h5>K</h5>\n" +
    "      </md-grid-tile>\n" +
    "    </md-grid-list>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Progress</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDProgressCtrl\">\n" +
    "    <h5>Determinate</h5>\n" +
    "    <p>For operations where the percentage of the operation completed can be determined, use a determinate indicator. They give users a quick sense of how long an operation will take.</p>\n" +
    "    <div layout=\"row\" layout-sm=\"column\" layout-align=\"space-around\">\n" +
    "      <md-progress-circular md-mode=\"determinate\" value=\"{{determinateValue}}\"></md-progress-circular>\n" +
    "    </div>\n" +
    "\n" +
    "    <h5>Indeterminate</h5>\n" +
    "    <p>For operations where the user is asked to wait a moment while something finishes up, and it’s not necessary to expose what's happening behind the scenes and how long it will take, use an indeterminate indicator.</p>\n" +
    "    <div layout=\"row\" layout-sm=\"column\" layout-align=\"space-around\">\n" +
    "      <md-progress-circular md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "    </div>\n" +
    "\n" +
    "    <h5>Theming</h5>\n" +
    "\n" +
    "    <div layout=\"row\" layout-sm=\"column\" layout-align=\"space-around\">\n" +
    "      <md-progress-circular class=\"md-hue-2\" md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "      <md-progress-circular class=\"md-accent\" md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "      <md-progress-circular class=\"md-accent md-hue-1\" md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "      <md-progress-circular class=\"md-warn md-hue-3\" md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "      <md-progress-circular class=\"md-warn\" md-mode=\"indeterminate\"></md-progress-circular>\n" +
    "    </div>\n" +
    "\n" +
    "    <h5>Linear</h5>\n" +
    "\n" +
    "    <md-progress-linear md-mode=\"indeterminate\" class=\"m-b\"></md-progress-linear>\n" +
    "\n" +
    "    <md-progress-linear class=\"md-warn m-b\" md-mode=\"buffer\" value=\"{{determinateValue}}\" md-buffer-value=\"{{determinateValue2}}\">\n" +
    "    </md-progress-linear>\n" +
    "\n" +
    "    <md-progress-linear class=\"md-accent m-b\" md-mode=\"{{mode}}\" value=\"{{determinateValue}}\"></md-progress-linear>\n" +
    "\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Select</h4>\n" +
    "  <div class=\"panel card wrapper\" ng-controller=\"MDSelectCtrl\">\n" +
    "    <div class=\"row\">\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <md-select ng-model=\"userState\" placeholder=\"State\">\n" +
    "          <md-option ng-repeat=\"state in states\" value=\"{{state.abbrev}}\">{{state.abbrev}}</md-option>\n" +
    "        </md-select>\n" +
    "        <p>{{ userState ? 'You selected ' + userState : 'You haven\\'t selected a state yet' }}</p>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <md-select multiple ng-model=\"multiNeighborhood\" placeholder=\"Neighborhood\">\n" +
    "          <md-select-label>{{ multiNeighborhood.length ? multiNeighborhood.join(', ') : 'Choose some' }}</md-select-label>\n" +
    "          <md-option ng-value=\"opt\" ng-repeat=\"opt in neighborhoods\">{{ opt }}</md-option>\n" +
    "        </md-select>\n" +
    "        <p class=\"result\">{{ multiNeighborhood ? 'You selected ' + multiNeighborhood : 'You haven\\'t selected anything yet' }}</p>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <md-select ng-model=\"favoriteTopping\" placeholder=\"Favorite Topping\">\n" +
    "          <md-optgroup label=\"Meats\">\n" +
    "            <md-option ng-value=\"topping.name\" ng-repeat=\"topping in toppings | filter: {category: 'meat' }\">{{topping.name}}</md-option>\n" +
    "          </md-option-group>\n" +
    "          <md-optgroup label=\"Veggies\">\n" +
    "            <md-option ng-value=\"topping.name\" ng-repeat=\"topping in toppings | filter: {category: 'veg' }\">{{topping.name}}</md-option>\n" +
    "          </md-option-group>\n" +
    "        </md-select>\n" +
    "        <p class=\"result\">{{ favoriteTopping ? 'Your favorite topping is ' + favoriteTopping : 'Please select a topping'}}</p>\n" +
    "      </div>\n" +
    "      <div class=\"col-sm-6\">\n" +
    "        <md-select ng-model=\"user\" md-on-open=\"loadUsers()\", style=\"min-width: 200px;\">\n" +
    "          <md-select-label>{{ user ? user.name : 'Assign to user' }}</md-select-label>\n" +
    "          <md-option ng-value=\"user\" ng-repeat=\"user in users\">{{user.name}}</md-option>\n" +
    "        </md-select>\n" +
    "        <p class=\"result\">You have assigned the task to: {{ user ? user.name : 'No one yet' }}</p>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Sidenav</h4>\n" +
    "  <div class=\"panel card wrapper pos-rlt\" ng-controller=\"MDSidenavCtrl\">\n" +
    "    <section layout=\"row\" flex>\n" +
    "      <md-sidenav class=\"md-sidenav-left md-whiteframe-z2\" md-component-id=\"left\" md-is-locked-open=\"$mdMedia('gt-md')\">\n" +
    "\n" +
    "        <md-toolbar class=\"md-theme-indigo\">\n" +
    "          <h1 class=\"md-toolbar-tools\">Sidenav Left</h1>\n" +
    "        </md-toolbar>\n" +
    "        <md-content class=\"md-padding\">\n" +
    "          <md-button ng-click=\"closeLeft()\" class=\"md-primary\" hide-gt-md>\n" +
    "            Close Sidenav Left\n" +
    "          </md-button>\n" +
    "          <p hide-md show-gt-md>\n" +
    "            This sidenav is locked open on your device. To go back to the default behavior,\n" +
    "            narrow your display.\n" +
    "          </p>\n" +
    "        </md-content>\n" +
    "\n" +
    "      </md-sidenav>\n" +
    "\n" +
    "      <md-content flex class=\"md-padding\">\n" +
    "\n" +
    "        <div layout=\"column\" layout-fill layout-align=\"center center\">\n" +
    "          <p>\n" +
    "          The left sidenav will 'lock open' on a medium (>=960px wide) device.\n" +
    "          </p>\n" +
    "\n" +
    "          <div>\n" +
    "            <md-button ng-click=\"toggleLeft()\"\n" +
    "              class=\"md-primary\" hide-gt-md>\n" +
    "              Toggle left\n" +
    "            </md-button>\n" +
    "          </div>\n" +
    "\n" +
    "          <div>\n" +
    "            <md-button ng-click=\"toggleRight()\"\n" +
    "              class=\"md-primary\">\n" +
    "              Toggle right\n" +
    "            </md-button>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "\n" +
    "      </md-content>\n" +
    "\n" +
    "      <md-sidenav class=\"md-sidenav-right md-whiteframe-z2\" md-component-id=\"right\">\n" +
    "\n" +
    "        <md-toolbar class=\"md-theme-light\">\n" +
    "          <h1 class=\"md-toolbar-tools\">Sidenav Right</h1>\n" +
    "        </md-toolbar>\n" +
    "        <md-content class=\"md-padding\">\n" +
    "          <md-button ng-click=\"closeRight()\" class=\"md-primary\">\n" +
    "            Close Sidenav Right\n" +
    "          </md-button>\n" +
    "        </md-content>\n" +
    "\n" +
    "      </md-sidenav>\n" +
    "    </section>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Subheader</h4>\n" +
    "  <div class=\"panel card wrapperos-rlt\" ng-controller=\"MDSubheaderCtrl\">\n" +
    "    <md-content style=\"height: 300px;\">\n" +
    "      <section>\n" +
    "        <md-subheader class=\"md-primary\">Unread Messages</md-subheader>\n" +
    "        <md-list layout-padding>\n" +
    "          <md-list-item class=\"md-3-line\" ng-repeat=\"message in messages\">\n" +
    "              <img ng-src=\"{{message.face}}\" class=\"md-avatar\" alt=\"{{message.who}}\">\n" +
    "              <div class=\"md-list-item-text\">\n" +
    "                <h3>{{message.what}}</h3>\n" +
    "                <h4>{{message.who}}</h4>\n" +
    "                <p>\n" +
    "                  {{message.notes}}\n" +
    "                </p>\n" +
    "              </div>\n" +
    "          </md-list-item>\n" +
    "        </md-list>\n" +
    "      </section>\n" +
    "      <section>\n" +
    "        <md-subheader class=\"md-warn\">Late Messages</md-subheader>\n" +
    "        <md-list layout=\"column\" layout-padding>\n" +
    "          <md-list-item class=\"md-3-line\" ng-repeat=\"message in messages\">\n" +
    "            <img ng-src=\"{{message.face}}\" class=\"md-avatar\" alt=\"{{message.who}}\">\n" +
    "            <div class=\"md-list-item-text\">\n" +
    "              <h3>{{message.what}}</h3>\n" +
    "              <h4>{{message.who}}</h4>\n" +
    "              <p>\n" +
    "                {{message.notes}}\n" +
    "              </p>\n" +
    "            </div>\n" +
    "          </md-list-item>\n" +
    "        </md-list>\n" +
    "      </section>\n" +
    "      <section>\n" +
    "        <md-subheader>Read Messages</md-subheader>\n" +
    "        <md-list layout=\"column\" layout-padding>\n" +
    "          <md-list-item class=\"md-3-line\" ng-repeat=\"message in messages\">\n" +
    "            <img ng-src=\"{{message.face}}\" class=\"md-avatar\" alt=\"{{message.who}}\">\n" +
    "            <div class=\"md-list-item-text\">\n" +
    "              <h3>{{message.what}}</h3>\n" +
    "              <h4>{{message.who}}</h4>\n" +
    "              <p>\n" +
    "                {{message.notes}}\n" +
    "              </p>\n" +
    "            </div>\n" +
    "          </md-list-item>\n" +
    "        </md-list>\n" +
    "      </section>\n" +
    "      <section>\n" +
    "        <md-subheader class=\"md-accent\">Archived messages</md-subheader>\n" +
    "        <md-list layout=\"column\" layout-padding>\n" +
    "          <md-list-item class=\"md-3-line\" ng-repeat=\"message in messages\">\n" +
    "            <img ng-src=\"{{message.face}}\" class=\"md-avatar\" alt=\"{{message.who}}\">\n" +
    "            <div class=\"md-list-item-text\">\n" +
    "              <h3>{{message.what}}</h3>\n" +
    "              <h4>{{message.who}}</h4>\n" +
    "              <p>\n" +
    "                {{message.notes}}\n" +
    "              </p>\n" +
    "            </div>\n" +
    "          </md-list-item>\n" +
    "        </md-list>\n" +
    "      </section>\n" +
    "    </md-content>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Tabs</h4>\n" +
    "  <div ng-controller=\"MDTabCtrl\">\n" +
    "    <div class=\"panel panel-card\">\n" +
    "      <div class=\"wrapper\">Static Tabs</div>\n" +
    "      <md-tabs class=\"md-primary\" md-selected=\"data.selectedIndex\">\n" +
    "        <md-tab id=\"tab1\" aria-controls=\"tab1-content\">\n" +
    "          Item One\n" +
    "        </md-tab>\n" +
    "        <md-tab id=\"tab2\" aria-controls=\"tab2-content\"\n" +
    "                ng-disabled=\"data.secondLocked\">\n" +
    "          {{data.secondLabel}}\n" +
    "        </md-tab>\n" +
    "        <md-tab id=\"tab3\" aria-controls=\"tab3-content\">\n" +
    "          Item Three\n" +
    "        </md-tab>\n" +
    "      </md-tabs>\n" +
    "\n" +
    "      <ng-switch on=\"data.selectedIndex\">\n" +
    "          <div role=\"tabpanel\"\n" +
    "               id=\"tab1-content\"\n" +
    "               aria-labelledby=\"tab1\"\n" +
    "               ng-switch-when=\"0\"\n" +
    "               md-swipe-left=\"next()\"\n" +
    "               md-swipe-right=\"previous()\"  class=\"wrapper blue\">\n" +
    "              View for Item #1<br/>\n" +
    "              data.selectedIndex = 0\n" +
    "          </div>\n" +
    "          <div role=\"tabpanel\"\n" +
    "               id=\"tab2-content\"\n" +
    "               aria-labelledby=\"tab2\"\n" +
    "               ng-switch-when=\"1\"\n" +
    "               md-swipe-left=\"next()\"\n" +
    "               md-swipe-right=\"previous()\"  class=\"wrapper teal\">\n" +
    "              View for {{data.secondLabel}}<br/>\n" +
    "              data.selectedIndex = 1\n" +
    "          </div>\n" +
    "          <div role=\"tabpanel\"\n" +
    "               id=\"tab3-content\"\n" +
    "               aria-labelledby=\"tab3\"\n" +
    "               ng-switch-when=\"2\"\n" +
    "               md-swipe-left=\"next()\"\n" +
    "               md-swipe-right=\"previous()\"  class=\"wrapper cyan\">\n" +
    "              View for Item #3<br/>\n" +
    "              data.selectedIndex = 2\n" +
    "          </div>\n" +
    "      </ng-switch>\n" +
    "\n" +
    "      <div class=\"b-t wrapper\" layout=\"row\" layout-sm=\"column\" layout-align=\"left center\">\n" +
    "          <md-input-container>\n" +
    "            <label for=\"selectedIndex\">Selected Index</label>\n" +
    "            <input type=\"number\" id=\"selectedIndex\" ng-model=\"data.selectedIndex\">\n" +
    "          </md-input-container>\n" +
    "          <div flex></div>\n" +
    "          <md-checkbox ng-model=\"data.secondLocked\" aria-label=\"Disabled\">\n" +
    "            Disabled Item Two\n" +
    "          </md-checkbox>\n" +
    "\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"panel panel-card\">\n" +
    "      <md-tabs md-selected=\"selectedIndex\" flex>\n" +
    "        <md-tab ng-repeat=\"tab in tabs\"\n" +
    "                ng-disabled=\"tab.disabled\"\n" +
    "                label=\"{{tab.title}}\">\n" +
    "        <div class=\"b-t\" flex>\n" +
    "        <div class=\"wrapper tab{{$index%4}}\" layout=\"column\" layout-align=\"space-around center\">\n" +
    "            <div ng-bind=\"tab.content\" class=\"m-b-lg\"></div>\n" +
    "              <md-button class=\"md-primary md-raised\" ng-click=\"removeTab( tab )\">\n" +
    "                Remove Tab\n" +
    "              </md-button>\n" +
    "          </div>\n" +
    "        </div>\n" +
    "        </md-tab>\n" +
    "      </md-tabs>\n" +
    "\n" +
    "      <form ng-submit=\"addTab(tTitle,tContent)\" layout=\"column\" class=\"b-t p\">\n" +
    "        <div layout=\"row\" layout-sm=\"column\" layout-margin >\n" +
    "          <md-input-container>\n" +
    "            <label for=\"activeIndex\">Active Index</label>\n" +
    "            <input type=\"text\" id=\"activeIndex\" ng-model=\"selectedIndex\" disabled>\n" +
    "          </md-input-container>\n" +
    "\n" +
    "          <md-input-container>\n" +
    "            <label for=\"activeTitle\">Active Title</label>\n" +
    "            <input type=\"text\" id=\"activeTitle\" ng-model=\"tabs[selectedIndex].title\">\n" +
    "          </md-input-container>\n" +
    "        </div>\n" +
    "\n" +
    "        <div layout=\"row\" layout-sm=\"column\" layout-margin >\n" +
    "          <span class=\"title m-t-lg m-r-sm\">Add a new Tab:</span>\n" +
    "          <md-input-container>\n" +
    "            <label for=\"label\">Label</label>\n" +
    "            <input type=\"text\" id=\"label\" ng-model=\"tTitle\">\n" +
    "          </md-input-container>\n" +
    "          <md-input-container>\n" +
    "            <label for=\"content\">Content</label>\n" +
    "            <input type=\"text\" id=\"content\" ng-model=\"tContent\">\n" +
    "          </md-input-container>\n" +
    "          <md-button class=\"add-tab md-primary\"  type=\"submit\" style=\"max-height: 32px; margin-top:24px\" >Add Tab</md-button>\n" +
    "        </div>\n" +
    "      </form>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Toast</h4>\n" +
    "  <div class=\"panel card wrapper pos-rlt\" ng-controller=\"MDToastCtrl\" id=\"toast\">\n" +
    "    <p>Toast can be dismissed with a swipe, a timer, or a button.</p>\n" +
    "\n" +
    "    <div layout=\"row\" layout-sm=\"column\" layout-align=\"space-around\">\n" +
    "      <div style=\"width:50px\"></div>\n" +
    "      <md-button ng-click=\"showCustomToast()\">\n" +
    "        Show Custom\n" +
    "      </md-button>\n" +
    "      <md-button ng-click=\"showSimpleToast()\">\n" +
    "        Show Simple\n" +
    "      </md-button>\n" +
    "      <md-button class=\"md-raised\" ng-click=\"showActionToast()\">\n" +
    "        Show With Action\n" +
    "      </md-button>\n" +
    "      <div style=\"width:50px\"></div>\n" +
    "    </div>\n" +
    "\n" +
    "    <div>\n" +
    "      <br/>\n" +
    "      <b>Toast Position: \"{{getToastPosition()}}\"</b>\n" +
    "      <br/>\n" +
    "      <md-checkbox ng-repeat=\"(name, isSelected) in toastPosition\"\n" +
    "        ng-model=\"toastPosition[name]\"> \n" +
    "        {{name}}\n" +
    "      </md-checkbox>\n" +
    "      <md-button class=\"md-primary md-fab md-fab-bottom-right\">\n" +
    "        FAB\n" +
    "      </md-button>\n" +
    "      <md-button class=\"md-accent md-fab md-fab-top-right\">\n" +
    "        FAB\n" +
    "      </md-button>\n" +
    "    </div>\n" +
    "  </div>\n" +
    "\n" +
    "  <h4>Tooltip</h4>\n" +
    "  <div class=\"panel card wrapper pos-rlt\" ng-controller=\"MDTooltipCtrl\">\n" +
    "    <p>\n" +
    "      The tooltip is visible when the button is hovered, focused, or touched.\n" +
    "    </p>\n" +
    "\n" +
    "    <md-button class=\"md-fab md-primary m-r\" aria-label=\"Insert Drive\">\n" +
    "      <i class=\"mdi-editor-insert-drive-file i-24\"></i>\n" +
    "      <md-tooltip md-visible=\"demo.showTooltip\">\n" +
    "        Insert Drive\n" +
    "      </md-tooltip>\n" +
    "    </md-button>\n" +
    "    <md-button class=\"md-fab\" aria-label=\"Photos\">\n" +
    "      <i class=\"mdi-editor-insert-photo i-24\"></i>\n" +
    "      <md-tooltip>\n" +
    "        Photos\n" +
    "      </md-tooltip>\n" +
    "    </md-button>\n" +
    "\n" +
    "    <br/><br/><br/>\n" +
    "\n" +
    "    <p>\n" +
    "      <div>\n" +
    "        Additionally, the Tooltip's `md-visible` attribute can use data-binding to programmatically\n" +
    "        show/hide itself. Toggle the checkbox below...\n" +
    "      </div>\n" +
    "    </p>\n" +
    "\n" +
    "    <md-checkbox ng-model=\"demo.showTooltip\">\n" +
    "      Insert Drive\n" +
    "    </md-checkbox>\n" +
    "\n" +
    "  </div>\n" +
    "");
}]);

'use strict';

/**
 * Config for the router
 */
angular.module('app')

    ////Let's now 'teach' the putHttpCache method to take translations from $templateCache:
    ////http://fadeit.dk/blog/post/preload-angular-translate-partial-loader
    //.run(function run ($cacheFactory, $templateCache) {
    //    
    //    var httpCache = $cacheFactory.get('$http');
    //    
    //    var putHttpCache = function putHttpCache(cacheKey){
    //        var cacheObj = [200, $templateCache.get(cacheKey), {}, "OK"];
    //        httpCache.put('/' + cacheKey, cacheObj); //prepend '/' to make url's match
    //    };
    //    putHttpCache('angulr/l10n/en.json');
    //    putHttpCache('angulr/l10n/de.json');
    //})
    
.run(
    [        '$rootScope', '$location', '$window',
    function ($rootScope, $location, $window) 
    {
        // initialise google analytics
        $window.ga('create', 'UA-70951324-1', 'auto');
    
        // track pageview on state change
        $rootScope.$on('$stateChangeSuccess', function (event) {
            $window.ga('send', 'pageview', $location.path());
        });

    }])
        
    .run(
    [          '$rootScope', '$state', '$stateParams',
        function ($rootScope,   $state,   $stateParams) {
            $rootScope.$state = $state;
            $rootScope.$stateParams = $stateParams;
        }
    ]
)
    .config(
    [          '$stateProvider', '$urlRouterProvider', 'JQ_CONFIG', 'MODULE_CONFIG',
        function ($stateProvider,   $urlRouterProvider, JQ_CONFIG, MODULE_CONFIG) {
            

          $urlRouterProvider
              //.otherwise('access/werbung'); //URL, not state!!!
              .otherwise('/app/checkin'); //URL, not state!!!
          
          $stateProvider
              .state('app', {
                  abstract: true,
                  url: '/app',
                  templateUrl: 'angulr/tpl/app.html',
                  
                  resolve: load(['toaster', 'angulr/js/controllers/toaster.js'
                      //'angulr/js/controllers/toaster.js'
                      //,
                      ////'angulr/js/services/logoutCustomerService.js',
                      //'angulr/js/services/notificationService.js',
                      //'angulr/js/services/loginCustomerService.js'
                  ])
                  
              })
              .state('app.hotel', {
                  url: '/hotel/:hotelId/:reloadHotel',
                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_hotel.html'
                      },
                      'footer': {
                          templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      }
                  }
              })              
              .state('app.editHotel', {
                  url: '/editHotel/:hotelId/:reloadHotel',
                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_editHotel.html'
                      },
                      'footer': {
                          templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      }
                  }
              })
              .state('app.hotelPreview', {
                  url: '/hotelPreview/:hotelId',
                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_hotelPreview.html'
                      },
                      'footer': {
                          templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      }
                  },
                  resolve: load(['angulr/js/controllers/hotel/hotelPreview.js'])
              })
              .state('app.hotelList', {
                  url: '/hotelList/:filterCity/:filterHotelId',
                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_hotelList.html'
                      },
                      'footer': {
                          templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      }
                  },

                  resolve: load(['angulr/js/controllers/hotel/hotelList.js'])
                  //resolve: {
                  //
                  //    deps: ['$ocLazyLoad',
                  //        function( $ocLazyLoad){
                  //            //return $ocLazyLoad.load('angulr/js/services/ .js')
                  //               // .then(
                  //               // function(){
                  //               //     return $ocLazyLoad.load('angulr/js/services/activityDtoService.js');
                  //               // }
                  //               //)
                  //               // .then(
                  //               // function(){
                  //               //     return $ocLazyLoad.load('angulr/js/controllers/hotel/blocks/filterHotelCity.js');
                  //               // }
                  //               // )
                  //              //  .then(
                  //              //  function(){
                  //              //      return $ocLazyLoad.load('angulr/js/controllers/hotel/blocks/hotelCtrl.js');
                  //              //  }
                  //              //)
                  //            //    .then(
                  //            //    function(){
                  //            //        return $ocLazyLoad.load('angulr/js/controllers/hotel/hotelList.js');
                  //            //    }
                  //            //)
                  //                ;
                  //        }]
                  //}

              })
              .state('app.activityList', {
                  url: '/activityList/:filterCity/:filterHotelId',
                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_activityList.html'
                      },
                      'footer': {
                          templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      }
                  },
                  resolve: load(['angulr/js/controllers/hotel/activityList.js'])

                  //resolve: {
                  //
                  //    deps: ['$ocLazyLoad',
                  //        function( $ocLazyLoad){
                  //            //return $ocLazyLoad.load('angulr/js/services/ .js')
                  //               // .then(
                  //               // function(){
                  //               //     return $ocLazyLoad.load('angulr/js/services/activityDtoService.js');
                  //               // }
                  //               //)
                  //               // .then(
                  //               // function(){
                  //               //     return $ocLazyLoad.load('angulr/js/controllers/hotel/datumPicker.js');
                  //               // }
                  //               // )
                  //               // .then(
                  //               // function(){
                  //               //     return $ocLazyLoad.load('angulr/js/controllers/hotel/blocks/filterHotelCity.js');
                  //               // }
                  //               // )
                  //               // .then(
                  //               // function(){
                  //               //     return $ocLazyLoad.load('angulr/js/controllers/hotel/blocks/activityCtrl.js');
                  //               // }
                  //               //)
                  //            //    .then(
                  //            //    function(){
                  //            //        return $ocLazyLoad.load('angulr/js/controllers/hotel/activityList.js');
                  //            //    }
                  //            //)
                  //                ;
                  //        }]
                  //}
              })
              .state('app.register', {
                  url: '/register',
                  templateUrl: 'angulr/tpl/hotel/page_register.html',
                  resolve: load(['angulr/js/controllers/hotel/register.js'])
              })
              //.state('app.login', {
              //    url: '/login/:stopLogin',
              //    templateUrl: 'angulr/tpl/hotel/page_login.html',
              //    resolve: load(['angulr/js/controllers/hotel/login.js'])
              //})     
              
              .state('app.hotelRegister', {
                  url: '/hotelRegister/:userId',
                  templateUrl: 'angulr/tpl/hotel/page_hotelRegister.html',
                  resolve: load([
                                //'angulr/js/controllers/hotel/datumPicker.js',
                                'angulr/js/controllers/hotel/hotelRegister.js'
                  ])
              })  
              //.state('app.linkedIn', {
              //    url: '/linkedIn',
              //    templateUrl: 'angulr/tpl/page_login.html'
              //})  
              .state('app.checkin', {
                  url: '/checkin/:hotelCode',
                  //templateUrl: 'angulr/tpl/hotel/page_checkIn.html'

                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_checkIn.html'
                      }
                      //,
                      //'footer': {
                      //    templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      //}
                  }
                  //,
                  //resolve: load([
                  //               //'angulr/js/controllers/hotel/blocks/filterHotelCity.js',
                  //               //'angulr/js/controllers/hotel/datumPicker.js',
                  //               'angulr/js/controllers/hotel/checkIn.js'
                  //])
              })
              .state('app.editActivity', {
                  url: '/editActivity/:hotelId/:activityId/:edit',

                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_editActivity.html'
                      },
                      'footer': {
                          templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      }
                  },
                  resolve: load(['angulr/js/controllers/hotel/editActivity.js'])
                  //resolve: {
                  //    deps: ['$ocLazyLoad',
                  //        function( $ocLazyLoad){
                  //            //return $ocLazyLoad.load('angulr/js/controllers/hotel/datumPicker.js')
                  //            //    .then(
                  //            //    function(){
                  //            //        return $ocLazyLoad.load('angulr/js/controllers/hotel/blocks/activityCtrl.js');
                  //            //    }
                  //            //)
                  //            //    .then(
                  //            //    function(){
                  //            //        return $ocLazyLoad.load('angulr/js/controllers/hotel/editActivity.js');
                  //            //    }
                  //            //)
                  //                ;
                  //        }]
                  //}
              })
              .state('app.wall', {
                  url: '/wall',
                  //templateUrl: 'angulr/tpl/hotel/page_wall.html',
                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_wall.html',
                          data: {
                              css: 'angulr/css/whiteApp.css'
                          }
                      },
                      'footer': {
                          templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      }
                  },
                  resolve:{
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad){
                              return $ocLazyLoad.load('angulr/js/services/wallService.js').then(
                                  function(){
                                      return $ocLazyLoad.load('angulr/js/controllers/hotel/wall.js');
                                  }
                              );
                          }]
                  }
              })
              .state('app.feedback', {
                  url: '/feedback',
                  templateUrl: 'angulr/tpl/hotel/page_feedback.html',
                  resolve: load(['angulr/js/controllers/hotel/feedback.js'])
              })
              .state('app.feed', {
                  url: '/feed',
                  templateUrl: 'angulr/tpl/hotel/page_feed.html',
                  resolve: load(['angulr/js/controllers/hotel/feed.js'])
              })
              
              .state('app.me', {
                  url: '/me',
                  //templateUrl: 'angulr/tpl/page_profile.html',
                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_profile.html'
                      },
                      'footer': {
                          templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      }
                  },
                  resolve: load(['angulr/js/controllers/hotel/profile.js'
                             //, 'angulr/js/services/customerDtoService.js'
                  ])
              })
              .state('app.user', {
                  url: '/user/:userId',
                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_userInfo.html'
                          }
                      ,
                      'footer': {
                          templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      }
                  },
                  resolve: load(['angulr/js/controllers/hotel/profile.js'
                             //, 'angulr/js/services/customerDtoService.js'
                            ])

              })
              .state('app.chat', {
                  url: '/chat/:receiverId',
                  //templateUrl: 'angulr/tpl/hotel/page_chat.html',
                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_chat.html'
                      }
                      //,
                      //'footer': {
                      //    templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      //}
                  },
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad){
                              return $ocLazyLoad.load('angulr/js/services/chatService.js').then(
                                  function(){
                                      return $ocLazyLoad.load('angulr/js/controllers/hotel/chat.js');
                                  }
                              );
                          }]
                  }
              })
              .state('app.forgotpwd', {
                  url: '/forgotpwd/email/:email/resetcode/:resetcode',
                  templateUrl: 'angulr/tpl/hotel/page_forgotpwd.html',
                  resolve: load(['angulr/js/controllers/hotel/forgotpwd.js'])
              })
              .state('app.about', {
                  url: '/about',
                  templateUrl: 'angulr/tpl/hotel/page_about.html'
                  //,
                  //controller: {
                  //    $scope.hotelState.setProfileData(null, $location.url());
                  //}
              }) 
              .state('app.privacy', {
                  url: '/about/privacy',
                  templateUrl: 'angulr/tpl/hotel/page_privacy.html'
                  //,
                  //controller: {
                  //    $scope.hotelState.setProfileData(null, $location.url());
                  //}
              })
              .state('app.agb', {
                  url: '/about/agb',
                  templateUrl: 'angulr/tpl/hotel/page_agb.html'
                  //,
                  //controller: {
                  //    $scope.hotelState.setProfileData(null, $location.url());
                  //}
              }).state('app.dse', {
                  url: '/about/dse',
                  templateUrl: 'angulr/tpl/hotel/page_dse.html'
                  //,
                  //controller: {
                  //    $scope.hotelState.setProfileData(null, $location.url());
                  //}
              }).state('app.impressum', {
                  url: '/about/impressum',
                  templateUrl: 'angulr/tpl/hotel/page_impressum.html'
                  //,
                  //controller: {
                  //    $scope.hotelState.setProfileData(null, $location.url());
                  //}
              })
              .state('app.avatar', {
                  url: '/avatar',
                  templateUrl: 'angulr/tpl/hotel/page_avatar.html',
                  //controller: 'ImageCropCtrl',
                  resolve: load(['angulr/js/controllers/hotel/imageCrop.js'])
              })
              .state('app.language', {
                  url: '/language',
                  templateUrl: 'angulr/tpl/hotel/page_language.html',
                  controller: 'LanguageController',
                  resolve: load(['angulr/js/controllers/hotel/language.js'])
              })
              .state('app.chatList', {
                  url: '/chatList/:hotelScope/:filterCity/:filterHotelId',
                  views: {
                      '': {
                          templateUrl: 'angulr/tpl/hotel/page_chatList.html'
                      },
                      'footer': {
                          templateUrl: 'angulr/tpl/layout_footer_mobile.html'
                      }
                  },
                  resolve: load(['angulr/js/controllers/hotel/chatList.js'
                  
                  ])
              })
              .state('access', {
                  url: '/access',
                  template: '<div ui-view class="fade-in-right-big smooth"></div>'
              })
              .state('access.werbung', {
                  url: '/werbung',
                  templateUrl: 'angulr/tpl/hotel/page_werbung.html',
                  resolve: load(['angulr/js/controllers/hotel/werbung.js'])
              })
              .state('access.login', {
                  url: '/login/:stopLogin',
                  templateUrl: 'angulr/tpl/hotel/page_login.html'
                  //,
                  //resolve: load( [
                  //              //'angulr/js/services/loginCustomerService.js',
                  //              'angulr/js/controllers/hotel/login.js'
                  //] )

                  //resolve: {
                  //    deps: ['$ocLazyLoad',
                  //        function( $ocLazyLoad){
                  //            return $ocLazyLoad.load('angulr/js/services/loginCustomerService.js').then(
                  //                function(){
                  //                    return $ocLazyLoad.load('angulr/js/controllers/hotel/login.js');
                  //                }
                  //            );
                  //        }]
                  //}
              })
              
              
              
              .state('access.hotelLogin', {
                  url: '/hotelLogin/:stopLogin',
                  templateUrl: 'angulr/tpl/hotel/page_hotelLogin.html'
                  //,
                  //resolve: load(['angulr/js/controllers/hotel/login.js'])
              })
              //.state('access.signup', {
              //    url: '/signup',
              //    templateUrl: 'angulr/tpl/page_signup.html',
              //    resolve: load( ['angulr/js/controllers/signup.js'] )
              //})
              //.state('access.forgotpwd', {
              //    url: '/forgotpwd',
              //    templateUrl: 'angulr/tpl/page_forgotpwd.html'
              //})
              //.state('access.404', {
              //    url: '/404',
              //    templateUrl: 'angulr/tpl/hotel/page_404.html'
              //})
              ;

function load(srcs, callback) {
    return {
        deps: ['$ocLazyLoad', '$q',
            function( $ocLazyLoad, $q ){
                var deferred = $q.defer();
                var promise  = false;
                srcs = angular.isArray(srcs) ? srcs : srcs.split(/\s+/);
                if(!promise){
                    promise = deferred.promise;
                }
                angular.forEach(srcs, function(src) {
                    promise = promise.then( function(){
                        if(JQ_CONFIG[src]){
                            return $ocLazyLoad.load(JQ_CONFIG[src]);
                        }
                        angular.forEach(MODULE_CONFIG, function(module) {
                            if( module.name == src){
                                name = module.name;
                            }else{
                                name = src;
                            }
                        });
                        return $ocLazyLoad.load(name);
                    } );
                });
                deferred.resolve();
                return callback ? promise.then(function(){ return callback(); }) : promise;
            }]
    }
}


}
]
);
'use strict';

/* Controllers */

angular.module('app')
    //app
    .controller('AppCtrl', ['$scope', '$translate', '$localStorage', '$window', '$route', '$rootScope', '$resource', '$location', '$state', '$stateParams', 'CustomerDto', 'HotelDto', '$anchorScroll', '$timeout', 'HotelNotification', 'SessionCustomer', 'HotelLogin', 'LogoutCustomer', 'HotelState', 'HotelService', 'HotelCheckin', 'NotificationService', 'Upload', '$q', '$mdDialog', '$modal', '$log', '$filter',
      function(              $scope,   $translate,   $localStorage,   $window, $route,  $rootScope, $resource, $location, $state, $stateParams,  CustomerDto, HotelDto, $anchorScroll, $timeout, HotelNotification, SessionCustomer, HotelLogin, LogoutCustomer, HotelState, HotelService,  HotelCheckin, NotificationService, Upload, $q, $mdDialog, $modal, $log, $filter) {

        // REGISTER SERVICES IN SCOPE ///////////////////////////

        var startWerbung = null;
          
        $rootScope.closeStartWerbung = function()
        {
          if(!startWerbung)
          {
              startWerbung = document.getElementById("startWerbung");
          }
          
          if(startWerbung)
          {
            startWerbung.style.display = "none";
          }

          //startWerbung.parentNode.removeChild(startWerbung);
          //$rootScope.hideLoading();
        }
        
        $scope.hotelState = HotelState;
        $scope.hotelService = HotelService;
        $scope.loginService = HotelLogin;
        $scope.checkinService = HotelCheckin;
          
        $scope.initMainState = function(stateObj)
        {
            if(!stateObj)
            {
                return;    
            }
            
            $rootScope.closeStartWerbung();

            
            if(($scope.hotelState.getPrefferedLanguage()+"").indexOf("_")>=0)
            {
                var viewKey = $scope.hotelService.convertLanguageKey($scope.hotelState.getPrefferedLanguage());
                $scope.hotelState.setPrefferedLanguage(viewKey);
            }

            if($translate.use()!=$scope.hotelState.getPrefferedLanguage())
                $translate.use($scope.hotelState.getPrefferedLanguage());

            $rootScope.sendServiceWorkerPostMessage({ command: 'updateCustomerId', key: $scope.hotelState.profileData.id});

           
        };
          
        HotelState.getDeferredState().then(function(stateObj){
            
            $scope.hotelState = stateObj;

            //$scope.hotelCheckin = HotelCheckin;

            $scope.hotelNotification = HotelNotification;
            
            $scope.initMainState(stateObj);

            NotificationService.resubscribeWithCustomerData(stateObj);
            //NotificationService.resubscribeWithHotelData(stateObj);
            
            $rootScope.startGlobalInterval();
        });
          
        
        //$scope.serverCommunicator = ServerCommunicator;

        var initFilter = {
            
            hotelStaffCustomerFilter : {hotelStaff: true},
            hotelCustomerFilter : {checkedIn: true, hotelStaff: false},
            //every not empty value
            chatCustomerFilter : {chatWithMe: true},
            
            //has 
            outerChatCustomerFilter : {chatWithMe: false}
            
        }  
          
        $scope.getInitHotelStaffCustomerFilter = function()
        {
            var filter =  angular.copy(initFilter.hotelStaffCustomerFilter);
            filter.id= '!' + $scope.hotelState.profileData.id;
            return filter;
        } 
          
        $scope.getInitHotelCustomerFilter = function()
        {
            var filter =  angular.copy(initFilter.hotelCustomerFilter);
            filter.id= '!' + $scope.hotelState.profileData.id;
            return filter;
        } 
          
        $scope.getInitChatCustomerFilter = function()
        {
            var filter = angular.copy(initFilter.chatCustomerFilter);
            filter.id= '!' + $scope.hotelState.profileData.id;
            return filter;
        }      
          
        $scope.getInitOuterChatCustomerFilter = function()
        {
            var filter =  angular.copy(initFilter.outerChatCustomerFilter);
            filter.id= '!' + $scope.hotelState.profileData.id;
            return filter;
        }
          
        $scope.mainState = {

            successMsg : false,
            errorMsg : false,
            hidePopup: false,
            showCheckinWellcomePopup: false,
            globalIntervalCheck : 0,
            tempUploadFiles: [],
            hotelArray: [],
            //messages read by customer, but not checked yet in Server
            readUncheckedMessages: $localStorage.readUncheckedMessages? $localStorage.readUncheckedMessages : [],
            dummyAllHotelsObj : $scope.hotelService.getInitHotel() 
        };  
          
        //////////////////////////////////////////////////////////

          
          /////////////////////////////////////////////////////////////
        // add 'ie' classes to html
        var isIE = !!navigator.userAgent.match(/MSIE/i);
        isIE && angular.element($window.document.body).addClass('ie');
        isSmartDevice( $window ) && angular.element($window.document.body).addClass('smart');

          function isSmartDevice( $window )
          {
              // Adapted from http://www.detectmobilebrowsers.com
              var ua = $window['navigator']['userAgent'] || $window['navigator']['vendor'] || $window['opera'];
              // Checks for iOs, Android, Blackberry, Opera Mini, and Windows mobile devices
              return (/iPhone|iPod|iPad|Silk|Android|BlackBerry|Opera Mini|IEMobile/).test(ua);
          }
          
        ///####### GLOBAL ROOTSCOPE FIELDS: ####################################  
          
          $rootScope.HOST = 'http://hotelico.de/';

          var hostIdElt = document.getElementById("hostId");

          if(hostIdElt && hostIdElt.innerText)
          {
              $rootScope.HOST = hostIdElt.innerText;
          }  
          
        //$rootScope.HOST = 'http://192.168.2.101:8080/';
        //$rootScope.HOST = 'http://localhost:8080/';
        //$rootScope.PORT = '8082';
        //$rootScope.HOST_SUFFIX = "727/";
        $rootScope.HOST_SUFFIX = "";
        
        $rootScope.rootErrorMsg = false;
    
        $rootScope.cutMessageIndex = 25;

          $rootScope.isSmartDevice =  isSmartDevice( $window );

          //var globalBlock = false;

          var loadingElt = null;

          var scrollElt = null;

          
          
          $scope.openHotelCodePopup = function(ev)
          {
              var confirm = $mdDialog.confirm( {
                  clickOutsideToClose: true
              })
                  .title($filter('translate')('page.checkin.realHotelDescriptionHeader'))
                  .content($filter('translate')('page.checkin.realHotelDescription'))
                  .ariaLabel('Lucky day')
                  .ok('OK')
                  //.cancel($filter('translate')('alert.noPopupMore'))
                  .targetEvent(ev);

              $mdDialog.show(confirm).then(function() {
                  ;

              }, function() {
                  //$scope.hotelState.profileData.hideWallPopup = true;
                  //$scope.hotelService.setCookie('hotelicohideWallPopup', true);
                  //
                  //$scope.hotelState.submitProfileData(true);
              });
          }
          
          $scope.openNeedCheckinPopup = function(ev)
          {
              var confirm = $mdDialog.confirm( {
                  clickOutsideToClose: true
              })
                  .title($filter('translate')('page.checkin.needCheckinPopupHeader'))
                  .content($filter('translate')('page.checkin.needCheckinPopupContent'))
                  .ariaLabel('Lucky day')
                  .ok('OK')
                  //.cancel($filter('translate')('alert.noPopupMore'))
                  .targetEvent(ev);

              $mdDialog.show(confirm).then(function() {
                  ;

              }, function() {
                  //$scope.hotelState.profileData.hideWallPopup = true;
                  //$scope.hotelService.setCookie('hotelicohideWallPopup', true);
                  //
                  //$scope.hotelState.submitProfileData(true);
              });
          }
          
          
          $scope.showErrorPopup = function(ev) {

              if(!$rootScope.isSmartDevice)
              {
                  return;
              }
              
              if($scope.mainState.errorMsg)
              {
                  var confirm = $mdDialog.confirm(
                      {
                      clickOutsideToClose: true
                      }
                  )
                      .title('Error')
                      .content($scope.mainState.errorMsg)
                      .ariaLabel('Lucky day')
                      .ok('OK')
                      //.cancel('Nicht mehr zeigen')
                      .targetEvent(ev);
                  $mdDialog.show(confirm).then(function() {
                          var t =0;
                      }
                  );
              }
              else if($rootScope.rootErrorMsg)
              {
                  var confirm = $mdDialog.confirm( 
                      {
                      clickOutsideToClose: true
                      }
                      )
                      .title('Error')
                      .content($rootScope.rootErrorMsg)
                      .ariaLabel('Lucky day')
                      .ok('OK')
                      //.cancel('Nicht mehr zeigen')
                      .targetEvent(ev);
                  
                  $mdDialog.show(confirm).then(function() {
                          var t =0;

                      }
                      //    , function() {
                      //    $scope.hotelState.profileData.hideCheckinPopup = true;
                      //    $scope.hotelState.submitProfileData(true);
                      //}
                  );
              }
          };
          
          
          $rootScope.topPage = function() {

              //if(!scrollElt)
              //{
                  var scrollElt = document.getElementById("scrollingSuperElt");
              //}

              ////TODO Eugen : elem.scrollTop = 0;
              //for(var i=0; i<scrollElts.length; i++)
              //{
              //
              //    scrollElts[i].scrollTop = 0;
              //}
              
              if(scrollElt)
                  scrollElt.scrollTop = 0;
              //$location.hash('top');
              ////
              ////// call $anchorScroll()
              //$anchorScroll();


              $scope.showErrorPopup();
              
              //var scrollStep = -window.scrollY / (1000 / 15),
              //    scrollInterval = setInterval(function(){
              //        if ( window.scrollY != 0 ) {
              //            window.scrollBy( 0, scrollStep );
              //        }
              //        else clearInterval(scrollInterval);
              //    },15);
              
          };

          $rootScope.showLoading = function(isShown, block)
          {
              if(!$scope.loadingElt)
              {
                  $scope.loadingElt = document.getElementById('loadingElt');
              }

              if($scope.loadingElt)
              {
                  $scope.loadingElt.style.display = isShown? 'block' : 'none';
              }

              if(arrowBackElt && arrowBackElt.classList.contains("clickedBackArrow") )
              {
                  arrowBackElt.classList.remove("clickedBackArrow");
              }
          }
          
          
        //####### ROOTSCOPE GLOBAL INTERVALL ////////////////////////////////////

          $rootScope.activeRequestInterval;

          $rootScope.startGlobalInterval = function (){
              
              workerTimer.clearAllIntervals();
              
              $rootScope.activeRequestInterval = workerTimer.setInterval(
                  function(){
                      
                      //NotificationService.checkSocketConnection();

                      //$rootScope.$broadcast('checkActivitySocketConnection', []);

                      //if($state.current.name == "app.chat")
                      //{
                      //    $rootScope.$broadcast('checkChatSocketConnection', []);
                      //}else if($state.current.name == "app.wall")
                      //{
                      //    $rootScope.$broadcast('checkWallSocketConnection', []);
                      //}
                      
                      $scope.hotelNotification.pingRequest();
                      $scope.mainState.globalIntervalCheck = (new Date).getTime();

                      //$rootScope.sendServiceWorkerPostMessage({ command: 'updateCustomerId', key: $scope.hotelState.profileData.id});

                      $scope.markMainMessagesRead();
                  },
                  $scope.hotelNotification.PING_TIMEOUT);

          };

          $rootScope.stopGlobalInterval = function(){

              workerTimer.clearInterval($rootScope.activeRequestInterval)
          };
          

        //###### GLOBSL config ##################################################
          
        $scope.app = {
          name: 'HoteliCo',
          version: '2.0.1',
          // for chart colors
          color: {
            primary: '#7266ba',
            orange: '#f1592a',
            hotelico: '#7266ba',
            info:    '#23b7e5',
            success: '#27c24c',
            warning: '#fad733',
            danger:  '#f05050',
            light:   '#e8eff0',
            dark:    '#3a3f51',
            black:   '#1c2b36'
          },
          settings: { //saved by client localStore
            themeID: 1,
            //navbarHeaderColor: 'bg-black',
            navbarCollapseColor: 'bg-white-only',
            asideColor: 'bg-black',
            headerFixed: true,
            asideFixed: false,
            asideFolded: false,
            asideDock: false,
            container: false,
            blockGuestInWall: false
          },
          rootSettings: {
            navbarHeaderColor: 'bg-orange',
            darkBg : false
              //prefferedLanguage: $translate.use()? $translate.use() : "en"
          },
          header : {
            showTitle : 'HoteliCo',
            //showTitle : 'Virtual Internet Plaza',
            //defaultTitle : 'HoteliCo',
            showTitleStaff: false,
            titleAvatarSrc : false,
            titleUrl : '#/app/hotel',
            showBackArrow : false,
            showTab : true,
            tabIndex : -1, 
            chatPartnerId:undefined
          }
        };

         
          $rootScope.header = $scope.app.header;
          //$rootScope.rootErrorMsg = $scope.mainState.errorMsg;

          //TODO eugen: localStorage
        // save settings to local storage
        if ( angular.isDefined($localStorage.settings) ) {
          $scope.app.settings = $localStorage.settings;
        } 
        else 
        {
          $localStorage.settings = $scope.app.settings;
        }
          
          
        $scope.$watch('app.settings', function(){
          if( $scope.app.settings.asideDock  &&  $scope.app.settings.asideFixed ){
            // aside dock and fixed must set the header fixed.
            $scope.app.settings.headerFixed = true;
          }
          // save to local storage
          $localStorage.settings = $scope.app.settings;
        }, true);

          
        // angular translate
        $scope.lang = { isopen: false };
        
        $scope.selectedLanguageValue = $scope.hotelService.getDefaultSystemLanguageLabel();
       
        $scope.setNewLanguage = function(langFullKey, $event) {
            
          var langViewKey = $scope.hotelService.getDefaultAllowedLanguageViewKey(langFullKey);
          
          // set the current lang
          $scope.selectedLanguageValue = $scope.hotelService.systemLanguagesArray[langViewKey];
          
            // You can change the language during runtime
          //$translate.use($scope.hotelService.convertToTranslateKey(langViewKey));
          $translate.use(langViewKey);
            
          $scope.lang.isopen = !$scope.lang.isopen;

          //store language in localStorage
          //var curKeySplit = langViewKey.split(_);
          //var curLang = curKeySplit[curKeySplit.length-1];
          //var curLang = curKeySplit[curKeySplit.length-1];
            
          //$scope.app.rootSettings.prefferedLanguage = curLang;
          $localStorage.settings = $scope.app.settings;

          $scope.hotelState.setPrefferedLanguage(langViewKey);
          
        };


        //$rootScope.getMobileHeight = function(){
        //  return $(window).innerHeight();
        //};
          
       
        //$rootScope.showBackArrow = false;

              //###############################

        NotificationService.receiveNotification().then(null, null, function(notification) {

          if(  $scope.hotelState.profileData &&  $scope.hotelState.profileData.id>0
              &&
              notification.receiverId== $scope.hotelState.profileData.id
          )
          {
            //_self.currentNotification = notification;
            $scope.hotelNotification.handleNotification(notification);
          }
        });
          
        //////// GLOBAL SERVICES ######################################################

          var HotelCitiesService = $resource('./hotels/customer/:customerId/hotelCities', {customerId:'@customerId', hotelId:'@hotelId' }, {'getCities': {method: 'GET', isArray: true}});

          var citiesAreLoadingNow = false;
          
          
          
          $scope.getUpdateMainHotelCitiesSelectorList = function(){
             
              var hotelCitiesSelectorList = $q.defer();

              //if(citiesAreLoadingNow)
              //{
              //    return $scope.getUpdateMainHotelCitiesSelectorList();
              //}
              
              if(!$scope.mainState.hotelCitiesArray || $scope.mainState.hotelCitiesArray.length==0)
              {
                  var requesterId = $scope.hotelState.profileData && $scope.hotelState.profileData.id>0 ? $scope.hotelState.profileData.id : -1;
                  
                  citiesAreLoadingNow = true;
                  
                  HotelCitiesService.getCities({customerId:requesterId}, function(cityArray) {

                      var allCitiesItem = new CustomerDto();
                      allCitiesItem.name = $filter('translate')('alert.info.allCities');
                      allCitiesItem.city = allCitiesItem.name;
                      
                      $scope.mainState.hotelCitiesArray = [].concat(allCitiesItem).concat(cityArray);
                      
                      hotelCitiesSelectorList.resolve($scope.mainState.hotelCitiesArray);

                      //filterStateParam();
                      citiesAreLoadingNow = false;
                  }, function(error){
                      hotelCitiesSelectorList.reject(error);
                      citiesAreLoadingNow = false;
                  });
              }
              else{
                  hotelCitiesSelectorList.resolve($scope.mainState.hotelCitiesArray);

                  //filterStateParam();
              }
              
              return hotelCitiesSelectorList.promise;
          };

          var HotelByCityService = $resource('./hotels/customer/:customerId/hotel/city/:city', {customerId:'@customerId', city:'@city' }, {'getHotelsByCity': {method: 'GET', isArray: true}});

          $scope.getMainHotelsByCity = function(filterCity, allHotelsEntry)
          {
              //emptyPreviousSearch();

              var hotelsFilterdByCityDeffered = $q.defer();
              
              var requesterId = $scope.hotelState.profileData && $scope.hotelState.profileData.id>0 ? $scope.hotelState.profileData.id : -1;
              
              $scope.mainState.dummyAllHotelsObj.name = allHotelsEntry && filterCity!='-1' ? "All Hotels" + (filterCity!=$filter('translate')('alert.info.allCities')? " in " + filterCity : "") : null;

              if(filterCity==$filter('translate')('alert.info.allCities'))
              {
                  filterCity = "-1";
              }
              
              HotelByCityService.getHotelsByCity({customerId: requesterId, city: filterCity}, function(hotelsArray) {
                  
                  for(var h=0; h<hotelsArray.length; h++)
                  {
                      hotelsArray[h] = $scope.hotelService.decodeHotel(hotelsArray[h]);
                  }
                  
                  var resultArray = $scope.mainState.dummyAllHotelsObj.name ? [].concat($scope.mainState.dummyAllHotelsObj).concat(hotelsArray) : hotelsArray;

                  hotelsFilterdByCityDeffered.resolve(resultArray);
                  
              });
              
              return hotelsFilterdByCityDeffered.promise;
          };


          /**
           * Load hotels based on the available hotel identification indicators
           */
          $scope.getUpdateMainHotelList = function() {
              
              var hotelArrayDeffered = $q.defer()
              
              if(!$scope.mainState.hotelArray || $scope.mainState.hotelArray.length == 0){
                 
                  var requesterId = $scope.hotelState.profileData && $scope.hotelState.profileData.id>0 ? $scope.hotelState.profileData.id : -1;
                  
                  HotelDto.getList({customerId: requesterId}, function (responseList) {
                     
                      $scope.mainState.hotelArray = [];
                      
                      for (var h = 0; h < responseList.length; h++) {
                          
                          $scope.mainState.hotelArray.push($scope.hotelService.decodeHotel(responseList[h]));
                      }
                      
                      hotelArrayDeffered.resolve($scope.mainState.hotelArray);
                  });
                  
              }
              else {
                  hotelArrayDeffered.resolve($scope.mainState.hotelArray);
              }
              
              return hotelArrayDeffered.promise;
              
          };

          $scope.getUpdateMainHotelObject = function(requestedHotelId)
          {
              var defferredHotel = $q.defer();
              
              if($scope.mainState.hotelArray && $scope.mainState.hotelArray.length>0)
              {
                  for(var h=0; h < $scope.mainState.hotelArray.length; h++ )
                  {
                      var nextHotel = $scope.mainState.hotelArray[h];
                      if(nextHotel.id == requestedHotelId)
                      {
                          defferredHotel.resolve(nextHotel);
                          return defferredHotel.promise;
                      }
                  }
              }
              
              var requesterId = $scope.hotelState.profileData && $scope.hotelState.profileData.id>0?  $scope.hotelState.profileData.id : -1;
              HotelDto.get({customerId: requesterId, hotelId: requestedHotelId}, function (hotelObj) {
                  defferredHotel.resolve($scope.hotelService.decodeHotel(hotelObj));
              }, function(error){
                  defferredHotel.reject(error);
              });
                  
              return defferredHotel.promise;
          };
          
        /////////################################### state machine ############################################
        
        $scope.relocateAdmin = function(entityPath, entityId) {
              
              if(!$scope.hotelState.profileData || !$scope.hotelState.profileData.logged || !$scope.hotelState.profileData.admin || !entityPath || !entityId)
              {
                  return;
              }
            
              if($location.path() == entityPath)
              {
                  return;
              }
              
              return $rootScope.clickLoading(null, null, "#" + entityPath + "/" + entityId);
          }
          
        $rootScope.updateHeaderTitle = function(nowState, newHotelName)
        {
            if(!nowState)
            {
              nowState = $state.current.name;
            }

          //no avatar in header per default!
          $scope.app.header.titleAvatarSrc = false;
          $scope.app.header.showTitleStaff = false;
            
          //reset last chat Partner name!
          $scope.app.header.showTitle = "";
          
            if(nowState=="app.chat" && $rootScope.chatPartner)
            {
                var chatPartnerId = $stateParams.receiverId;

                $rootScope.chatPartner.$promise.then(function(data) {
                    //$scope.app.titleAvatarSrc = $rootScope.getProfileImageUrl(data.id);
                    $scope.app.header.titleAvatarSrc = data.avatarUrl;
                    $scope.app.header.showTitle = data.firstName + " " + (data.lastName!=null? data.lastName : "");// + (data.hotelStaff? " <span class=\"bg-orange-border\">Hotel Staff</span>": "");
                    $scope.app.header.showTitleStaff = data.hotelStaff;
                    $scope.app.header.titleUrl = "#/app/user/"+chatPartnerId;
                    $scope.app.header.chatPartnerId = chatPartnerId;

                    if($rootScope.isSmartDevice)
                    {
                        $scope.app.rootSettings.navbarHeaderColor = "bg-white";
                    }
                });

            }
            //TODO Eugen: if already checkedIn, why show it????
            else if(nowState=="app.checkin" && $scope.hotelState && $scope.hotelState.profileData && $scope.hotelState.profileData.checkedIn)
            {
              
              $scope.app.header.showTitle = "CHECK-IN";
              $scope.app.header.titleUrl = "#/app/checkin";
              //$scope.app.titleAvatarSrc = false;

            } 
            else if($scope.hotelState && $scope.hotelState.profileData && ($scope.app.header.tabIndex==0 || $scope.app.header.tabIndex==2))
            {
              
              $scope.app.header.showTitle = "Hotelico";
              $scope.app.header.titleUrl = $scope.hotelState.profileData.logged? "#/app/hotel" : "#/app/hotelPreview" ;
              //$scope.app.titleAvatarSrc = false;

            }
            else if($scope.hotelState && $scope.hotelState.profileData && $scope.hotelState.profileData.hotelName || newHotelName)
            {
                var localShowTitle = newHotelName? newHotelName : $scope.hotelState.profileData.hotelName;

                $scope.app.header.showTitle = localShowTitle;
                $scope.app.header.titleUrl = $scope.hotelState.profileData.logged? "#/app/hotel" : "#/app/hotelPreview" ;
                $scope.app.header.titleAvatarSrc = false;

            }
            else {
                $scope.app.header.showTitle = "Hotelico";
                $scope.app.header.titleUrl = $scope.hotelState.profileData.logged? "#/app/hotel" : "#/app/hotelPreview" ;
                //$scope.app.titleAvatarSrc = false;

            }
        }



          $scope.closeMyAlert = function (msg) {
              if (msg == "successMsg") {
                  $scope.mainState.successMsg = false;
              }
              else if (msg == "errorMsg") {
                  $scope.mainState.errorMsg = false;
              }
              else if (msg == "rootErrorMsg") {
                  $rootScope.rootErrorMsg = false;
              }
          }
          
        //$rootScope.setSelectorIndexValue = function(selectorId, selectIndexValue){
        //  
        //  if(!selectorId || !selectIndexValue)
        //  {
        //    return;
        //  }
        //  
        //  var selectorElt = document.getElementById(selectorId);
        //  
        //  if(selectorElt && selectIndexValue < selectorElt.options.length)
        //  {
        //    selectorElt.selectedIndex = selectIndexValue;
        //  }
        //  
        //}

        $scope.getProfileImageUrl = function(userId, isAvatar, isOrange)
        {
          
          var avatar_m = isOrange? "angulr/img/build/avatar/incognito-orange-m.png" : "angulr/img/build/avatar/incognito-m.png";
          var avatar_f = isOrange? "angulr/img/build/avatar/incognito-orange-f.png" : "angulr/img/build/avatar/incognito-f.png";
             
          if(userId && $scope.hotelState.allCustomersById[userId] && $scope.hotelState.allCustomersById[userId].hotelStaff)
          {
            return "angulr/img/build/avatar/staff.png";
          }
          
          if(!isAvatar && (!userId || userId==$scope.hotelState.profileData.id))
          {
            if($scope.hotelState.profileData && $scope.hotelState.profileData.avatarUrl && $scope.hotelState.profileData.showAvatar && $scope.hotelState.profileData.avatarUrl.length>0)
            {
              return $scope.hotelState.profileData.avatarUrl;
            }
          }
          
          if(!isAvatar && userId && $scope.hotelState.allCustomersById && $scope.hotelState.allCustomersById[userId] && $scope.hotelState.allCustomersById[userId].avatarUrl.length>0 && $scope.hotelState.allCustomersById[userId].showAvatar)
          {
            return $scope.hotelState.allCustomersById[userId].avatarUrl;
          }
          
          if(userId && $scope.hotelState.allCustomersById[userId] && $scope.hotelState.allCustomersById[userId].sex && $scope.hotelState.allCustomersById[userId].sex=="w")
          {
            return avatar_f;
          }
          
          if(userId == undefined)//current user
          {
            return  $scope.hotelState.profileData.sex &&  $scope.hotelState.profileData.sex=="w" ? avatar_f : avatar_m;
          }
          
          return avatar_m;
        }

        //////////////////// PING

        function showStaffElement(elt)
        {
          if(elt && elt.classList.contains("hidden"))
          {
            elt.classList.remove("hidden");
          }
        };
        
        $scope.removeNotStaffElts = function()
        {
          
          if(!$scope.hotelState || $scope.hotelState.profileData || $scope.hotelState.profileData.id<=0 || !$scope.hotelState.profileData.firstName)
          {
            return;
          }

          if(!$scope.hotelState.profileData.hotelStaff && !$scope.hotelState.profileData.admin)
          {
            return;
          }

          var staffContents = document.getElementsByClassName("staffContent");

          for(var s=0; s<staffContents.length; s++)
          {
            showStaffElement(staffContents[s]);
          }
        };
        
        
        
        //
        //var serverRequestInterval;
        //function startServerCommunication() {
        //  //init();
        //  serverRequestInterval = workerTimer.setInterval($rootScope.initPingService, 8000);
        //};
        //function stopServerCommunication() {
        //  serverRequestInterval = workerTimer.clearInterval(serverRequestInterval);
        //};
        
        $scope.scrollDownById = function(elemId)
        {
          var elem = document.getElementById(elemId);
          if(elem)
          {
            setTimeout(function () {elem.scrollTop = elem.scrollHeight;}, 600);
          }
        }
        
        ///################### WATCHERS ######################################################   
          
        $rootScope.$on('$stateChangeStart', function(next, current) {
          $rootScope.showLoading(true);
        });
        
        $rootScope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {

          $rootScope.showLoading(false);
            
          //TODO Eugen: startState checkin????
          if(to && to.name != "access.login")
          {
            //$scope.hotelState.setPreviousRouteState(from, fromParams);
            $scope.hotelState.setPreviousRouteState(from, fromParams);

            //$scope.hotelState.updateState();
            //$scope.hotelState.checkNextRouteState(to.name);
            $rootScope.updateHeaderTitle(to.name);
            $rootScope.setNavbarHeaderColor($rootScope.isSmartDevice ? "bg-orange" : "bg-black");
          }
            
          $scope.mainState.successMsg = false;
          $scope.mainState.errorMsg = false;
          $rootScope.rootErrorMsg = false;
          $rootScope.closeStartWerbung();
            
          if(to.name=="app.wall" && !$scope.hotelState.profileData.logged)
          {
              return;
          }
            
            var stateString = to.name;

            if(stateString=="app.chat")
            {
                stateString +="#"+ toParams.receiverId;
            }
            
          $rootScope.sendServiceWorkerPostMessage({ command: 'updateState', key: stateString});

          $rootScope.closeModal();
        });

        //$scope.$watch(function() {
        //  return $rootScope.header.tabIndex;
        //}, function() {
        //  $scope.userPLevel = $rootScope.uPLevel;
        //}, true);
        
        ////TODO Eugen: remove!
        //$scope.clickTab = function(index){
        //  $scope.app.header.tabIndex = index;
        //}
        
        ////TODO Eugen: remove!
        $scope.$watch('app.header.tabIndex', function(newTabIndex, oldTabIndex) {
          
              if(newTabIndex!=oldTabIndex && newTabIndex>=0 && oldTabIndex>=0 && $scope.hotelState && $scope.hotelState.selectHeaderTab)
              {
                $scope.hotelState.selectHeaderTab(newTabIndex, oldTabIndex);
              }
          
              return;
          });


        

        //Init automaticly
        //$rootScope.initPingService(true);

        $rootScope.myWait = function(sec)
        {
          var currentTime = new Date().getTime();

          while (currentTime + sec >= new Date().getTime()) {
          }
        }
        
        $rootScope.clickLoading = function(newState, eltId, href, stateParams) {
          
          //$rootScope.showLoading(true);
            
          var curState = $state.current.name;
          
          if(newState && curState==newState && (!stateParams || $stateParams == stateParams))
          {
            //$rootScope.showLoading(false);            
            return;
          }
            
          $rootScope.closeModal();

          if(newState && !$scope.hotelState.profileData.checkedIn && $scope.hotelState.requireCheckinStates.indexOf(newState)>=0)
          {
              $scope.openNeedCheckinPopup();
              $scope.hotelState.checkHeaderTab();
              return;
          }

          if(newState && !$scope.hotelState.profileData.logged && $scope.hotelState.requireLoginStates.indexOf(newState)>=0)
          {
              if(!stateParams)
              {
                  stateParams = {};
              }
              //TODO Eugen: This state can be reached only with valid login! Otherwise open a login popup!!!
              //save requested state in loginService
              $scope.loginService.setLoginRequestedState(newState, stateParams);
              $scope.openModal("login");              
              return;
          }
            
          if(href && (window.location.href+"").indexOf("/" + $rootScope.HOST_SUFFIX + href)>=0)
          {
            //$rootScope.showLoading(false);
            return;
          }
          
          if(eltId)
          {
            var elt = document.getElementById(eltId);

            if(elt)
            {
              var newStateAttr = elt.getAttribute("ui-sref")

              if(newStateAttr && curState==newStateAttr)
              {
                //$rootScope.showLoading(false);
                return
              }

              elt.classList.add("clickedItem");
            }
          }
          
          if(href)
          {
            //var hasSuffix = (href+"").indexOf("/" + $rootScope.HOST_SUFFIX)>=0;
            window.location.href =  "/" + $rootScope.HOST_SUFFIX + href;
          }
          
          if(newState)
          {
              if(!stateParams)
              {
                  stateParams = {};
              }
                 
              setTimeout(function(){$state.go(newState, stateParams);}, 10);
            //$state.go(newState);
          }
        };

        $rootScope.setNavbarHeaderColor = function(newColor)
        {
          $scope.app.rootSettings.navbarHeaderColor = newColor;
        }
        
        var arrowBackElt = null;
        
        $scope.mainStepBack = function()
        {
          $rootScope.showLoading(true);
          
          if(!arrowBackElt)
          {
            arrowBackElt = document.getElementById("hback");
          }
          if(arrowBackElt && !arrowBackElt.classList.contains("clickedBackArrow") )
          {
            arrowBackElt.classList.add("clickedBackArrow");
          }
          //alert($location.url());
          //colorOnClick('hback');
            
          $scope.hideAside() ;
            
          setTimeout($scope.hotelState.goStateBack, 500);

        }
        
        //$rootScope.$on( "$routeChangeStart", function(event, next, current) {
        //
        //  event.preventDefault();
        //  $rootScope.$evalAsync(function() {
        //    //$location.path("/access/login");
        //    $state.go("app.login");
        //
        //  });
        //
        //  //if ($scope.hotelState.profileData.id == 0) {
        //  //    $rootScope.relocate(event, "/access/login");
        //  //}
        //  //
        //  ////if not checkIn page and sill no current hotel -> go to checkin
        //  //else if( (current+"").indexOf("login")<0 && (next+"").indexOf("checkIn")<0 && $scope.hotelState.currentHotelId==0)
        //  //{
        //  //    $rootScope.relocate(event, "/app/checkIn");
        //  //}
        //  ////if on login page, but user is already registered in hotel
        //  //else if(((current+"").indexOf("login")>0 || (current+"").indexOf("checkin")>0) && $scope.hotelState.currentHotelId>0)
        //  //{
        //  //    $rootScope.relocate(event, "/app/hotel");
        //  //}
        //});
        

        //$scope.isAccessPage = function()
        //{
        //  var nowState = $state.current.name
        //  return (nowState+"").indexOf("access")>=0;
        //}
          

          $rootScope.relocateLogin = function()
          {
              
              if($scope.hotelState.profileData.systemMessages && $scope.hotelState.profileData.systemMessages.length>0)
              {
                  //on social login -> start relocate!!!
                  var relocateState = $scope.hotelState.profileData.systemMessages["relocateState"];

                  var relocateStateParams = $scope.hotelState.profileData.systemMessages["relocateStateParams"]? $scope.hotelState.profileData.systemMessages["relocateStateParams"] : "";

                  try
                  {
                      relocateStateParams = JSON.parse(relocateStateParams);
                  }
                  catch(e)
                  {
                      relocateStateParams = $scope.hotelState.profileData.systemMessages["relocateStateParams"]? $scope.hotelState.profileData.systemMessages["relocateStateParams"] : "";
                  }


                  $scope.hotelState.profileData.systemMessages = {};

                  $state.go(relocateState, relocateStateParams);

                  return true;
              }

              return false;
          }


        var aside = document.getElementById('app-aside-div');
        
        $scope.setHeaderColor = function(){
          
         //if(!aside)/
         //{
           aside = document.getElementById('app-aside-div');
         //}
          
          if(aside)
          {

              var openMenu = aside.classList.contains ("off-screen");

              if(openMenu)
              {
                  $scope.app.rootSettings.navbarHeaderColorCopy = $scope.app.rootSettings.navbarHeaderColor;
                  $scope.app.rootSettings.navbarHeaderColor = "bg-black";
              }
              else if($scope.app.rootSettings.navbarHeaderColorCopy)
              {
                  //$scope.app.rootSettings.navbarHeaderColor = $scope.app.rootSettings.navbarHeaderColorCopy;
                  $scope.app.rootSettings.navbarHeaderColor = $state.current.name=="app.chat"? "bg-white" : "bg-orange";

              }
          }
        }
       
        $rootScope.hideAside = function()
        {
            return $scope.hideAside();
        }
          
        $scope.hideAside = function()
        {
          if(!aside)
          {
            aside = document.getElementById('app-aside-div');
          }

          if(aside)
          {
            aside.className = aside.className.replace('show','').replace('off-screen','');
          }
        };
          
          
        //var localWorker = false;  
          
        var worker = null;
          
        try{
            worker = new Worker( '/' + $rootScope.HOST_SUFFIX + 'angulr/js/lib/timer-worker.js');
        }  
        catch(error)  
        {
            worker = new Worker($rootScope.HOST + $rootScope.HOST_SUFFIX + 'angulr/js/lib/timer-worker.js');
        }
          
        var workerTimer = {
          id: 0,
          callbacks: {},

          setInterval: function(cb, interval, context) {
            this.id++;
            var id = this.id;
            this.callbacks[id] = { fn: cb, context: context };
            worker.postMessage({ command: 'interval:start', interval: interval, id: id });
            return id;
          },

          onMessage: function(e) {
            switch (e.data.message) {
              case 'interval:tick':
                var callback = this.callbacks[e.data.id];
                if (callback && callback.fn) callback.fn.apply(callback.context);
                break;
              case 'interval:cleared':
                delete this.callbacks[e.data.id];
                break;
            }
          },

          clearInterval: function(id) {
            worker.postMessage({ command: 'interval:clear', id: id });
          },
            
          clearAllIntervals: function() {
            worker.postMessage({ command: 'interval:clearAll'});
          }
        };

        worker.onmessage = workerTimer.onMessage.bind(workerTimer);

        $rootScope.getTimeWebWorker = function()
        {
          return workerTimer;
        }
        ///////////////////////////////////////////////////////////////

        //  onchange="angular.element(this).scope().newFile_changed(this)"
        $scope.newFile_changed = function(element, entityName, entityId) {

          if(!entityId)
          {
              entityId = (element.parentNode.id+"").indexOf("img")>=0? element.parentNode.id.replace("img","") : undefined;
          };

          $rootScope.setEntityLogo = function(entity, entityId, logoUrl)
          {
              var arrayObj;
              
              if(entity=="hotel")
              {
                  arrayObj = $scope.mainState.hotelArray;
              }
              else if(entity == "activity")
              {
                  arrayObj = $scope.hotelState.allActivities;
              }
              
              if(arrayObj)
              {
                  for(var e=0; e<arrayObj.length; e++)
                  {
                      if(arrayObj[e].id && arrayObj[e].id == entityId || arrayObj[e].activityId && arrayObj[e].activityId == entityId)
                      {
                          arrayObj[e].pictureUrl = logoUrl;
                          break;
                      }
                  }
              }
              
          }
          
            
            
          $scope.$apply(function(scope) {
            //$scope.localState.newFile = element.files[0];

            $scope.mainState.tempUploadFiles[entityName+"_"+entityId] = {
                file: element.files[0],
                entityName: entityName
            }
            //$scope.mainState.tempUploadFiles = element.files[0];
            //$scope.mainState.tempUploadEntityName = entityName;
            
            //var reader = new FileReader();
            //reader.onload = function(e) {
            //};
            //reader.readAsDataURL(photofile);
          });
        };

          $scope.scrollTo = function(id) {
              $location.hash(id);
              $anchorScroll();
          }
          
          $scope.decodeActivityList = function(activityList)
          {
              var activityImageCacher = document.getElementById("activityImageCache");

              //TODO Eugen: hier is null??
              if(activityImageCacher)
              {
                  activityImageCacher.innerHTML="";
              }

              for(var a=0; a<activityList.length; a++)
              {
                  activityList[a] = $scope.hotelService.decodeActivity(activityList[a]);

                  if(activityImageCacher)
                  {
                      activityImageCacher.innerHTML += "<img src='" + activityList[a].pictureUrl + "' />"
                  }
              }

              return activityList;
          }
        
        $scope.uploadNewImage = function(entityName, entityId, senderId) {
 
          var defer = $q.defer();  
            
          if(!senderId)
          {
              senderId = $scope.hotelState.profileData.id;
          }
            
          if(!$scope.mainState.tempUploadFiles || !$scope.mainState.tempUploadFiles[entityName + "_" + entityId] )
          {
            //$scope.mainState.tempUploadEntityName = undefined;
            //$scope.mainState.tempUploadFiles = undefined;
              defer.reject();
            return defer.promise;
          }
          
          //var blob = dataURItoBlob($scope.myCroppedImage);
          //blob.name = "avatar" + $scope.hotelState.profileData.id;
          var files = [$scope.mainState.tempUploadFiles[entityName + "_" + entityId].file];
            
          $scope.mainState.uploadFiles = files;
          //$scope.files=[blob];
          angular.forEach(files, function(file) {
            if (file && !file.$error) {
              file.upload = Upload.upload({
                url: '/'+$rootScope.HOST_SUFFIX+'files/upload/customer/'+senderId+'/model/'+entityName+'/'+entityId,
                file: file
              });

              file.upload.then(function (response) {
                $timeout(function () {
                  file.result = response.data;
                  if(response.status == 200)
                  {
                    //SessionCustomer.get(function(response) {
                    //    $scope.hotelState.setProfileData(response);
                    //    //$state.go("app.me");
                    //});
                    defer.resolve(file.result);  
                  }
                  else{
                      defer.reject();
                  }
                });
              }, function (response) {

                defer.reject(response.status);
                  
                if (response.status > 0)
                  $scope.mainState.errorMsg = "FILE UPLOAD ERROR: " + response.status + ': ' + response.data;
              });

              file.upload.progress(function (evt) {
                file.progress = Math.min(100, parseInt(100.0 *
                evt.loaded / evt.total));
              });
            }
          });

          $scope.mainState.tempUploadFiles[entityName + "_" + entityId] = undefined;
            
          return defer.promise;  
        };
          
          
          //######################################
          
          $scope.markMainMessagesRead = function()
          {
              if(!$scope.mainState.readUncheckedMessages || $scope.mainState.readUncheckedMessages.length==0)
              {
                  return;
              }
              
              $localStorage.readUncheckedMessages = $scope.mainState.readUncheckedMessages;

              var CheckReadMessageService = $resource('./chat/markReadMessage/receiverId/:customerId/messageIds/:messageIds', {customerId:'@customerId', messageIds:'@messageIds' }, {'confirm': {method: 'GET', isArray: true,
                  headers: {
                      'Content-Type': 'application/json;charset=UTF-8',
                      'Accept': 'application/json, text/plain, */*'
                  }}});

              CheckReadMessageService.confirm({customerId: $scope.hotelState.profileData.id, messageIds: $scope.mainState.readUncheckedMessages},

                  function(resOk){
                      $scope.mainState.readUncheckedMessages = [];
                      $localStorage.readUncheckedMessages = $scope.mainState.readUncheckedMessages;
                      //if(delIndex > -1)
                      //{
                      //    $scope.mainState.readUncheckedMessages.splice(delIndex, 1);
                      //}
                  },

                  function(error){
                      ;
                  }
              );
          }

          $scope.onHotelCheckinClick = function (clickHotelId, ev) {

              if (!$scope.checkinService) {
                  $scope.checkinService = HotelCheckin;
              }

              $scope.checkinService.resetWholeInfo();


              if (!clickHotelId) {
                  $scope.mainState.errorMsg = $filter('translate')('alert.checkin.chooseHotel');
                  $rootScope.topPage();
                  $rootScope.showLoading(false);
                  return;
              }

              // ###############

              {
                  var confirm = $mdDialog.confirm(
                      {
                          clickOutsideToClose: true
                      })
                      .title($filter('translate')('page.checkin.sureCheckinHeader'))
                      .content($filter('translate')('page.checkin.sureCheckin'))
                      .ariaLabel('Lucky day')
                      .ok('OK')
                      .cancel($filter('translate')('system.cancel'))
                      .targetEvent(ev);

                  $mdDialog.show(confirm).then(function() {

                      //######## OK BUTTON ##############

                      if (clickHotelId)
                          $scope.checkinService.hotelId = clickHotelId;

                      $rootScope.showLoading(true);

                      $scope.hotelState.emptyCheckinData();

                      $scope.mainState.disableCheckin = true;

                      $scope.checkinService.doCheckin().then(function () {
                          $scope.mainState.disableCheckin = false;
                          //$scope.localState.showManualCheckin = true;
                          $scope.mainState.showCheckinWellcomePopup = true;
                          $state.go($scope.hotelState.profileData.logged? 'app.hotel' : 'app.hotelPreview');
                      }, function (error) {
                          $scope.mainState.disableCheckin = false;
                          if($scope.localState)
                          {
                              $scope.localState.showManualCheckin = true;
                          } 
                          $rootScope.showLoading(false);
                          //setTimeout(showManualSelection, 1000);
                      });

                      // ########## END OK BUTTON ###############


                  }, function() {
                      //$scope.mainState.showCheckinWellcomePopup = false;
                  });
              }




              // #################

          };
          
          //######################################
          

          // Generate the user private channel
          var channel = generateUserChannel();

          var client;
          var isPushEnabled = false;
          
          window.addEventListener('load', function() {

              
              //if(!$scope.hotelState.profileData.admin)
              //{
              //    return;
              //}
              
              //Eugen: from google
              //var pushButton = document.querySelector('.js-push-button');
              //
              //if(pushButton)
              //{
              //    pushButton.addEventListener('click', function() {
              //        if (isPushEnabled) {
              //            unsubscribe();
              //        } else {
              //            subscribe();
              //        }
              //    });
              //}

              // start Chrome Push Manager to obtain device id and register it with Realtime
              // a service worker will be launched in background to receive the incoming push notifications
              var chromePushManager = new ChromePushManager('/service-worker.js', function(error, registrationId){
                  
                  $rootScope.sendServiceWorkerPostMessage({ command: 'updateCustomerId', key: $scope.hotelState.profileData.id});
                  
                  var stateString = $state.current.name;
                  
                  if(stateString=="app.chat")
                  {
                      stateString +="#"+ $stateParams.receiverId;
                  }
                  
                  
                  $rootScope.sendServiceWorkerPostMessage({ command: 'updateState', key: stateString});

                  window.addEventListener("beforeunload", function (e) {

                      var stateString = $state.current.name;

                      if(stateString=="app.chat")
                      {
                          stateString +="#"+$stateParams.receiverId;
                      }
                      
                      $rootScope.sendServiceWorkerPostMessage({ command: 'unloadState', key: stateString});
                  });
                  
                  //Eugen: If the promise returned by the subscribe() method resolves, you’ll be given a PushSubscription object which will contain an endpoint.
                  //Eugen: "registrationId" - The endpoint should be saved on your server for each user, since you’ll need them to send push messages at a later date.
                  //https://developers.google.com/cloud-messaging/http-server-ref#downstream-http-messages-json
                  
                  $scope.hotelService.chromePushRegistrationId = registrationId;
                  
                  if(error && error.message)
                  {
                      //alert("Factory ok: " + error.message);
                  }

                  $scope.hotelState.profileData.systemMessages["chromePushRegistrationId"]  = registrationId;
                  //reset systemMessages!!
                  $scope.hotelState.submitProfileData(true);

                  if ('serviceWorker' in navigator) {
                      // Set up a listener for messages posted from the service worker.
                      // The service worker is set to post a message to all its clients once it's run its activation
                      // handler and taken control of the page, so you should see this message event fire once.
                      // You can force it to fire again by visiting this page in an Incognito window.
                      navigator.serviceWorker.addEventListener('message', function(event) {
                          $rootScope.listenServiceWorkerPostMessage(event.data);
                      });
                  }
              });
          });

            // generate a GUID
          function S4() {
              return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
          }

            // generate the user private channel and save it at the local storage
            // so we always use the same channel for each user
          function generateUserChannel(){
              var userChannel = localStorage.getItem("channel");
              if (userChannel == null || userChannel == "null"){
                  var guid = (S4() + S4() + "-" + S4() + "-4" + S4().substr(0,3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
                  userChannel = 'channel-' + guid;
                  localStorage.setItem("channel", userChannel);
              }
              return userChannel;
          }

          $rootScope.sendPush = function()
          {
              if (client) {
                  client.send(channel, "This will trigger a push notification");
              };
          }
            
          //######################################
          
          // Service worker communication

          $rootScope.sendServiceWorkerPostMessage = function(commandMessage) {
              // This wraps the message posting/response in a promise, which will resolve if the response doesn't
              // contain an error, and reject with the error if it does. If you'd prefer, it's possible to call
              // controller.postMessage() and set up the onmessage handler independently of a promise, but this is
              // a convenient wrapper.
              return new Promise(function(resolve, reject) {
                  var messageChannel = new MessageChannel();
                  messageChannel.port1.onmessage = function(event) {
                      if (event.data.error) {
                          reject(event.data.error);
                      } else {
                          resolve(event.data);
                      }
                  };

                  // This sends the message data as well as transferring messageChannel.port2 to the service worker.
                  // The service worker can then use the transferred port to reply via postMessage(), which
                  // will in turn trigger the onmessage handler on messageChannel.port1.
                  // See https://html.spec.whatwg.org/multipage/workers.html#dom-worker-postmessage
                  if(navigator.serviceWorker.controller)
                  {
                      navigator.serviceWorker.controller.postMessage(commandMessage,
                          [messageChannel.port2]);
                  }
              });
          }


          $rootScope.listenServiceWorkerPostMessage = function(data){
            //TODO Eugen: event from service worker;
          }
          //######################################
          $rootScope.unlockModal = function()
          {
              var allFocusable = document.getElementsByClassName("focusModal");

              for(var f=0; f<allFocusable.length; f++)
              {
                  var elem = allFocusable[f];

                  elem.addEventListener('touchstart', function(e) {
                      e.target.focus();
                      //e.preventDefault();
                      e.stopPropagation();
                  });
              }
          }
          
          $rootScope.closeModal = function(){
              //Eugen: dummy function, that will be rewritten in modal controller!!!
          };
          
          $scope.openModal = function (templateType, modalEntityId, size) {

              $rootScope.unlockModal();
              
              $rootScope.showLoading(true);
              
              var loginTemplateUrl = 'angulr/tpl/hotel/blocks/modal.loginform.html';
              var checkinTemplateUrl = 'angulr/tpl/hotel/blocks/modal.hotelCodeForm.html';
              var editActivityTemplateUrl = 'angulr/tpl/hotel/blocks/modal.editActivityForm.html';
              var editHotelTemplateUrl = 'angulr/tpl/hotel/blocks/modal.editHotelForm.html';
              var hintTemplateUrl = 'angulr/tpl/hotel/blocks/modal.hint.html';
              
              var selectTemplateUrl = loginTemplateUrl;
              
              if(templateType)
              {
                  switch (templateType){
                      
                      case "checkin":
                      {
                          selectTemplateUrl = checkinTemplateUrl;
                          break;
                      } 
                        
                      case "editActivity":
                      {
                          selectTemplateUrl = editActivityTemplateUrl;
                          break;
                      } 
                      
                      case "editHotel":
                      {
                          selectTemplateUrl = editHotelTemplateUrl;
                          break;
                      } 
                      
                      case "hint":
                      {
                          selectTemplateUrl = hintTemplateUrl;
                          break;
                      }

                      case "login":
                      default:
                      {
                          selectTemplateUrl = loginTemplateUrl;
                          break;
                      }
                  }
              }
              
              var modalInstance = $modal.open({
                  //templateUrl: 'myModalContent.html', //TODO Eugen: var! The value of it was saved in templateCache before!!!
                  templateUrl: selectTemplateUrl, //REAL basic MODEL-Instance Controller
                  controller: 'MyModalInstanceCtrl', //REAL basic MODEL-Instance Controller
                  size: size? size : 'lg', //MY Custom size
                  scope: $scope,
                  resolve: {
                      modalEntityType : function () {
                          return  templateType;
                      },
                      modalEntityId: function () {
                          return  modalEntityId? modalEntityId : -1;
                      },
                      deps: ['$ocLazyLoad',
                              function( $ocLazyLoad){
                                  
                                  if(templateType=="editActivity")
                                  {
                                      return $ocLazyLoad.load('angulr/js/controllers/hotel/datumPicker.js')
                                      .then(
                                          function(){
                                              return $ocLazyLoad.load('angulr/js/controllers/hotel/blocks/activityCtrl.js');
                                          }
                                      ).then(
                                          function(){
                                              return $ocLazyLoad.load('angulr/js/controllers/hotel/editActivity.js');
                                          }
                                      );
                                  }
                                  else if(templateType=="editHotel")
                                  {
                                      return $ocLazyLoad.load('angulr/js/controllers/hotel/datumPicker.js')
                                      .then(
                                          function(){
                                              return $ocLazyLoad.load('angulr/js/controllers/hotel/blocks/hotelCtrl.js');
                                          }
                                      )
                                      .then(
                                          function(){
                                              return $ocLazyLoad.load('angulr/js/controllers/hotel/editHotel.js');
                                          }
                                      )
                                      ;
                                  }
                                  else{
                                      return null;
                                  }
                                   
                              }]
                  }
              });

              //setTimeout($rootScope.unlockModal, 500);
              //setTimeout($rootScope.unlockModal, 1500);
              
              modalInstance.result.then(function (newState) {
                  //TODO Eugen: LISTENER ON OK Close actions. WITH CUSTOM READY-PARAM!!!!
                  
                  //if(!stateParams)
                  //{
                  //    stateParams = {};
                  //}

                  if(newState)
                  {
                      $state.go(newState);
                  }
                  
              }, function () {
                  //TODO Eugen CANCEL ERROR Close!!!
                  $log.info('Modal dismissed at: ' + new Date());
                  
                  //Eugen: onModalClse:
                  $scope.mainState.successMsg = false;
                  $scope.mainState.errorMsg = false;
                  $rootScope.rootErrorMsg = false;

                  $scope.hotelState.checkHeaderTab();
                  
                  if($state.current.name=="app.wall" && !$scope.hotelState.profileData.logged)
                  {
                      $scope.hotelState.goStateBack();
                  }
                  
                  //Eugen: I cannot update a hotel in editHotel state
                  if($state.current.name=="app.editHotel")
                  {
                      $scope.hotelState.goStateBack();
                  }
              });
          };
        
      }])

    //TODO Eugen: MyModalInstanceCtrl- ROOT CONTROLLER FOR MODAL inhalt!!!!

    //TODO itmes -> custom resolve Parameter ubergeben
    
    .controller('MyModalInstanceCtrl', ['$scope', '$rootScope', '$modalInstance', 'modalEntityType', 'modalEntityId', function($scope, $rootScope, $modalInstance, modalEntityType, modalEntityId) 
    {

        $rootScope.showLoading(false);
        
        if(modalEntityType)
        {
            switch (modalEntityType){
                
                case "editActivity":
                {
                    $scope.defaultEditOpen = true;
                    $scope.editActivityId = modalEntityId;
                    break;
                } 
                
                case "editHotel":
                {
                    $scope.defaultEditOpen = true;
                    $scope.editHotelId = modalEntityId;
                    break;
                }
                    
                default:
                {
                    break;
                }
            }
        }
        
        $scope.customParam = null;

        $rootScope.closeModal = function(){
            if($modalInstance.opened)
            {
                $modalInstance.close();
            }
        };
        
        $scope.ok = function (newState) {
            //TODO Eugen: INIT OK Close actions!!!!
            $modalInstance.close(newState);
        };

        $scope.cancel = function () {

            //TODO Eugen: INIT CANCEL Close actions!!!!

            $modalInstance.dismiss('cancel');
        };
        
    }])

    //TODO Eugen: this Controller creates MyModalInstanceCtrl
    
    //TODO Eugen: ALL WE NEED -> OPEN() in ModalPopupCtrl !!!!
    .controller('ModalPopupCtrl', ['$scope', '$modal', '$log', function($scope, $modal, $log) {

        
}])

//TODO Eugen: myModalContent.html - variable for current model tpl inhalt!!!!
//TODO Eugen: open('lg') - lg is size of model window!!!!

//<span ng-controller="ModalDemoCtrl">
//<script type="text/ng-template" id="myModalContent.html">
//<div ng-include="'tpl/modal.form.html'"></div>
//</script>
//<button class="btn btn-success" ng-click="open('lg')">Form in a modal</button>
//</span>

; 
// Generated by CoffeeScript 1.7.1
/*
   Stomp Over WebSocket http://www.jmesnil.net/stomp-websocket/doc/ | Apache License V2.0

   Copyright (C) 2010-2013 [Jeff Mesnil](http://jmesnil.net/)
   Copyright (C) 2012 [FuseSource, Inc.](http://fusesource.com)
 */
(function(){var t,e,n,i,r={}.hasOwnProperty,o=[].slice;t={LF:"\n",NULL:"\x00"};n=function(){var e;function n(t,e,n){this.command=t;this.headers=e!=null?e:{};this.body=n!=null?n:""}n.prototype.toString=function(){var e,i,o,s,u;e=[this.command];o=this.headers["content-length"]===false?true:false;if(o){delete this.headers["content-length"]}u=this.headers;for(i in u){if(!r.call(u,i))continue;s=u[i];e.push(""+i+":"+s)}if(this.body&&!o){e.push("content-length:"+n.sizeOfUTF8(this.body))}e.push(t.LF+this.body);return e.join(t.LF)};n.sizeOfUTF8=function(t){if(t){return encodeURI(t).match(/%..|./g).length}else{return 0}};e=function(e){var i,r,o,s,u,a,c,f,h,l,p,d,g,b,m,v,y;s=e.search(RegExp(""+t.LF+t.LF));u=e.substring(0,s).split(t.LF);o=u.shift();a={};d=function(t){return t.replace(/^\s+|\s+$/g,"")};v=u.reverse();for(g=0,m=v.length;g<m;g++){l=v[g];f=l.indexOf(":");a[d(l.substring(0,f))]=d(l.substring(f+1))}i="";p=s+2;if(a["content-length"]){h=parseInt(a["content-length"]);i=(""+e).substring(p,p+h)}else{r=null;for(c=b=p,y=e.length;p<=y?b<y:b>y;c=p<=y?++b:--b){r=e.charAt(c);if(r===t.NULL){break}i+=r}}return new n(o,a,i)};n.unmarshall=function(n){var i,r,o,s;r=n.split(RegExp(""+t.NULL+t.LF+"*"));s={frames:[],partial:""};s.frames=function(){var t,n,o,s;o=r.slice(0,-1);s=[];for(t=0,n=o.length;t<n;t++){i=o[t];s.push(e(i))}return s}();o=r.slice(-1)[0];if(o===t.LF||o.search(RegExp(""+t.NULL+t.LF+"*$"))!==-1){s.frames.push(e(o))}else{s.partial=o}return s};n.marshall=function(e,i,r){var o;o=new n(e,i,r);return o.toString()+t.NULL};return n}();e=function(){var e;function r(t){this.ws=t;this.ws.binaryType="arraybuffer";this.counter=0;this.connected=false;this.heartbeat={outgoing:1e4,incoming:1e4};this.maxWebSocketFrameSize=16*1024;this.subscriptions={};this.partialData=""}r.prototype.debug=function(t){var e;return typeof window!=="undefined"&&window!==null?(e=window.console)!=null?e.log(t):void 0:void 0};e=function(){if(Date.now){return Date.now()}else{return(new Date).valueOf}};r.prototype._transmit=function(t,e,i){var r;r=n.marshall(t,e,i);if(typeof this.debug==="function"){this.debug(">>> "+r)}while(true){if(r.length>this.maxWebSocketFrameSize){this.ws.send(r.substring(0,this.maxWebSocketFrameSize));r=r.substring(this.maxWebSocketFrameSize);if(typeof this.debug==="function"){this.debug("remaining = "+r.length)}}else{return this.ws.send(r)}}};r.prototype._setupHeartbeat=function(n){var r,o,s,u,a,c;if((a=n.version)!==i.VERSIONS.V1_1&&a!==i.VERSIONS.V1_2){return}c=function(){var t,e,i,r;i=n["heart-beat"].split(",");r=[];for(t=0,e=i.length;t<e;t++){u=i[t];r.push(parseInt(u))}return r}(),o=c[0],r=c[1];if(!(this.heartbeat.outgoing===0||r===0)){s=Math.max(this.heartbeat.outgoing,r);if(typeof this.debug==="function"){this.debug("send PING every "+s+"ms")}this.pinger=i.setInterval(s,function(e){return function(){e.ws.send(t.LF);return typeof e.debug==="function"?e.debug(">>> PING"):void 0}}(this))}if(!(this.heartbeat.incoming===0||o===0)){s=Math.max(this.heartbeat.incoming,o);if(typeof this.debug==="function"){this.debug("check PONG every "+s+"ms")}return this.ponger=i.setInterval(s,function(t){return function(){var n;n=e()-t.serverActivity;if(n>s*2){if(typeof t.debug==="function"){t.debug("did not receive server activity for the last "+n+"ms")}return t.ws.close()}}}(this))}};r.prototype._parseConnect=function(){var t,e,n,i;t=1<=arguments.length?o.call(arguments,0):[];i={};switch(t.length){case 2:i=t[0],e=t[1];break;case 3:if(t[1]instanceof Function){i=t[0],e=t[1],n=t[2]}else{i.login=t[0],i.passcode=t[1],e=t[2]}break;case 4:i.login=t[0],i.passcode=t[1],e=t[2],n=t[3];break;default:i.login=t[0],i.passcode=t[1],e=t[2],n=t[3],i.host=t[4]}return[i,e,n]};r.prototype.connect=function(){var r,s,u,a;r=1<=arguments.length?o.call(arguments,0):[];a=this._parseConnect.apply(this,r);u=a[0],this.connectCallback=a[1],s=a[2];if(typeof this.debug==="function"){this.debug("Opening Web Socket...")}this.ws.onmessage=function(i){return function(r){var o,u,a,c,f,h,l,p,d,g,b,m,v;c=typeof ArrayBuffer!=="undefined"&&r.data instanceof ArrayBuffer?(o=new Uint8Array(r.data),typeof i.debug==="function"?i.debug("--- got data length: "+o.length):void 0,function(){var t,e,n;n=[];for(t=0,e=o.length;t<e;t++){u=o[t];n.push(String.fromCharCode(u))}return n}().join("")):r.data;i.serverActivity=e();if(c===t.LF){if(typeof i.debug==="function"){i.debug("<<< PONG")}return}if(typeof i.debug==="function"){i.debug("<<< "+c)}d=n.unmarshall(i.partialData+c);i.partialData=d.partial;m=d.frames;v=[];for(g=0,b=m.length;g<b;g++){f=m[g];switch(f.command){case"CONNECTED":if(typeof i.debug==="function"){i.debug("connected to server "+f.headers.server)}i.connected=true;i._setupHeartbeat(f.headers);v.push(typeof i.connectCallback==="function"?i.connectCallback(f):void 0);break;case"MESSAGE":p=f.headers.subscription;l=i.subscriptions[p]||i.onreceive;if(l){a=i;h=f.headers["message-id"];f.ack=function(t){if(t==null){t={}}return a.ack(h,p,t)};f.nack=function(t){if(t==null){t={}}return a.nack(h,p,t)};v.push(l(f))}else{v.push(typeof i.debug==="function"?i.debug("Unhandled received MESSAGE: "+f):void 0)}break;case"RECEIPT":v.push(typeof i.onreceipt==="function"?i.onreceipt(f):void 0);break;case"ERROR":v.push(typeof s==="function"?s(f):void 0);break;default:v.push(typeof i.debug==="function"?i.debug("Unhandled frame: "+f):void 0)}}return v}}(this);this.ws.onclose=function(t){return function(){var e;e="Whoops! Lost connection to "+t.ws.url;if(typeof t.debug==="function"){t.debug(e)}t._cleanUp();return typeof s==="function"?s(e):void 0}}(this);return this.ws.onopen=function(t){return function(){if(typeof t.debug==="function"){t.debug("Web Socket Opened...")}u["accept-version"]=i.VERSIONS.supportedVersions();u["heart-beat"]=[t.heartbeat.outgoing,t.heartbeat.incoming].join(",");return t._transmit("CONNECT",u)}}(this)};r.prototype.disconnect=function(t,e){if(e==null){e={}}this._transmit("DISCONNECT",e);this.ws.onclose=null;this.ws.close();this._cleanUp();return typeof t==="function"?t():void 0};r.prototype._cleanUp=function(){this.connected=false;if(this.pinger){i.clearInterval(this.pinger)}if(this.ponger){return i.clearInterval(this.ponger)}};r.prototype.send=function(t,e,n){if(e==null){e={}}if(n==null){n=""}e.destination=t;return this._transmit("SEND",e,n)};r.prototype.subscribe=function(t,e,n){var i;if(n==null){n={}}if(!n.id){n.id="sub-"+this.counter++}n.destination=t;this.subscriptions[n.id]=e;this._transmit("SUBSCRIBE",n);i=this;return{id:n.id,unsubscribe:function(){return i.unsubscribe(n.id)}}};r.prototype.unsubscribe=function(t){delete this.subscriptions[t];return this._transmit("UNSUBSCRIBE",{id:t})};r.prototype.begin=function(t){var e,n;n=t||"tx-"+this.counter++;this._transmit("BEGIN",{transaction:n});e=this;return{id:n,commit:function(){return e.commit(n)},abort:function(){return e.abort(n)}}};r.prototype.commit=function(t){return this._transmit("COMMIT",{transaction:t})};r.prototype.abort=function(t){return this._transmit("ABORT",{transaction:t})};r.prototype.ack=function(t,e,n){if(n==null){n={}}n["message-id"]=t;n.subscription=e;return this._transmit("ACK",n)};r.prototype.nack=function(t,e,n){if(n==null){n={}}n["message-id"]=t;n.subscription=e;return this._transmit("NACK",n)};return r}();i={VERSIONS:{V1_0:"1.0",V1_1:"1.1",V1_2:"1.2",supportedVersions:function(){return"1.1,1.0"}},client:function(t,n){var r,o;if(n==null){n=["v10.stomp","v11.stomp"]}r=i.WebSocketClass||WebSocket;o=new r(t,n);return new e(o)},over:function(t){return new e(t)},Frame:n};if(typeof exports!=="undefined"&&exports!==null){exports.Stomp=i}if(typeof window!=="undefined"&&window!==null){i.setInterval=function(t,e){return window.setInterval(e,t)};i.clearInterval=function(t){return window.clearInterval(t)};window.Stomp=i}else if(!exports){self.Stomp=i}}).call(this);
;(function () {
	'use strict';

	/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */

	/*jslint browser:true, node:true*/
	/*global define, Event, Node*/


	/**
	 * Instantiate fast-clicking listeners on the specified layer.
	 *
	 * @constructor
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	function FastClick(layer, options) {
		var oldOnClick;

		options = options || {};

		/**
		 * Whether a click is currently being tracked.
		 *
		 * @type boolean
		 */
		this.trackingClick = false;


		/**
		 * Timestamp for when click tracking started.
		 *
		 * @type number
		 */
		this.trackingClickStart = 0;


		/**
		 * The element being tracked for a click.
		 *
		 * @type EventTarget
		 */
		this.targetElement = null;


		/**
		 * X-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartX = 0;


		/**
		 * Y-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartY = 0;


		/**
		 * ID of the last touch, retrieved from Touch.identifier.
		 *
		 * @type number
		 */
		this.lastTouchIdentifier = 0;


		/**
		 * Touchmove boundary, beyond which a click will be cancelled.
		 *
		 * @type number
		 */
		this.touchBoundary = options.touchBoundary || 10;


		/**
		 * The FastClick layer.
		 *
		 * @type Element
		 */
		this.layer = layer;

		/**
		 * The minimum time between tap(touchstart and touchend) events
		 *
		 * @type number
		 */
		this.tapDelay = options.tapDelay || 200;

		/**
		 * The maximum time for a tap
		 *
		 * @type number
		 */
		this.tapTimeout = options.tapTimeout || 700;

		if (FastClick.notNeeded(layer)) {
			return;
		}

		// Some old versions of Android don't have Function.prototype.bind
		function bind(method, context) {
			return function() { return method.apply(context, arguments); };
		}


		var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
		var context = this;
		for (var i = 0, l = methods.length; i < l; i++) {
			context[methods[i]] = bind(context[methods[i]], context);
		}

		// Set up event handlers as required
		if (deviceIsAndroid) {
			layer.addEventListener('mouseover', this.onMouse, true);
			layer.addEventListener('mousedown', this.onMouse, true);
			layer.addEventListener('mouseup', this.onMouse, true);
		}

		layer.addEventListener('click', this.onClick, true);
		layer.addEventListener('touchstart', this.onTouchStart, false);
		layer.addEventListener('touchmove', this.onTouchMove, false);
		layer.addEventListener('touchend', this.onTouchEnd, false);
		layer.addEventListener('touchcancel', this.onTouchCancel, false);

		// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
		// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
		// layer when they are cancelled.
		if (!Event.prototype.stopImmediatePropagation) {
			layer.removeEventListener = function(type, callback, capture) {
				var rmv = Node.prototype.removeEventListener;
				if (type === 'click') {
					rmv.call(layer, type, callback.hijacked || callback, capture);
				} else {
					rmv.call(layer, type, callback, capture);
				}
			};

			layer.addEventListener = function(type, callback, capture) {
				var adv = Node.prototype.addEventListener;
				if (type === 'click') {
					adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
						if (!event.propagationStopped) {
							callback(event);
						}
					}), capture);
				} else {
					adv.call(layer, type, callback, capture);
				}
			};
		}

		// If a handler is already declared in the element's onclick attribute, it will be fired before
		// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
		// adding it as listener.
		if (typeof layer.onclick === 'function') {

			// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
			// - the old one won't work if passed to addEventListener directly.
			oldOnClick = layer.onclick;
			layer.addEventListener('click', function(event) {
				oldOnClick(event);
			}, false);
			layer.onclick = null;
		}
	}

	/**
	* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	*
	* @type boolean
	*/
	var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

	/**
	 * Android requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


	/**
	 * iOS requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


	/**
	 * iOS 4 requires an exception for select elements.
	 *
	 * @type boolean
	 */
	var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


	/**
	 * iOS 6.0-7.* requires the target element to be manually derived
	 *
	 * @type boolean
	 */
	var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

	/**
	 * BlackBerry requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

	/**
	 * Determine whether a given element requires a native click.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element needs a native click
	 */
	FastClick.prototype.needsClick = function(target) {
		switch (target.nodeName.toLowerCase()) {

		// Don't send a synthetic click to disabled inputs (issue #62)
		case 'button':
		case 'select':
		case 'textarea':
			if (target.disabled) {
				return true;
			}

			break;
		case 'input':

			// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
			if ((deviceIsIOS && target.type === 'file') || target.disabled) {
				return true;
			}

			break;
		case 'label':
		case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
		case 'video':
			return true;
		}

		return (/\bneedsclick\b/).test(target.className);
	};


	/**
	 * Determine whether a given element requires a call to focus to simulate click into element.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	 */
	FastClick.prototype.needsFocus = function(target) {
		switch (target.nodeName.toLowerCase()) {
		case 'textarea':
			return true;
		case 'select':
			return !deviceIsAndroid;
		case 'input':
			switch (target.type) {
			case 'button':
			case 'checkbox':
			case 'file':
			case 'image':
			case 'radio':
			case 'submit':
				return false;
			}

			// No point in attempting to focus disabled inputs
			return !target.disabled && !target.readOnly;
		default:
			return (/\bneedsfocus\b/).test(target.className);
		}
	};


	/**
	 * Send a click event to the specified element.
	 *
	 * @param {EventTarget|Element} targetElement
	 * @param {Event} event
	 */
	FastClick.prototype.sendClick = function(targetElement, event) {
		var clickEvent, touch;

		// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
		if (document.activeElement && document.activeElement !== targetElement) {
			document.activeElement.blur();
		}

		touch = event.changedTouches[0];

		// Synthesise a click event, with an extra attribute so it can be tracked
		clickEvent = document.createEvent('MouseEvents');
		clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
		clickEvent.forwardedTouchEvent = true;
		targetElement.dispatchEvent(clickEvent);
	};

	FastClick.prototype.determineEventType = function(targetElement) {

		//Issue #159: Android Chrome Select Box does not open with a synthetic click event
		if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
			return 'mousedown';
		}

		return 'click';
	};


	/**
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.focus = function(targetElement) {
		var length;

		// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
		if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
			length = targetElement.value.length;
			targetElement.setSelectionRange(length, length);
		} else {
			targetElement.focus();
		}
	};


	/**
	 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	 *
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.updateScrollParent = function(targetElement) {
		var scrollParent, parentElement;

		scrollParent = targetElement.fastClickScrollParent;

		// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
		// target element was moved to another parent.
		if (!scrollParent || !scrollParent.contains(targetElement)) {
			parentElement = targetElement;
			do {
				if (parentElement.scrollHeight > parentElement.offsetHeight) {
					scrollParent = parentElement;
					targetElement.fastClickScrollParent = parentElement;
					break;
				}

				parentElement = parentElement.parentElement;
			} while (parentElement);
		}

		// Always update the scroll top tracker if possible.
		if (scrollParent) {
			scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
		}
	};


	/**
	 * @param {EventTarget} targetElement
	 * @returns {Element|EventTarget}
	 */
	FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

		// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
		if (eventTarget.nodeType === Node.TEXT_NODE) {
			return eventTarget.parentNode;
		}

		return eventTarget;
	};


	/**
	 * On touch start, record the position and scroll offset.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchStart = function(event) {
		var targetElement, touch, selection;

		// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
		if (event.targetTouches.length > 1) {
			return true;
		}

		targetElement = this.getTargetElementFromEventTarget(event.target);
		touch = event.targetTouches[0];

		if (deviceIsIOS) {

			// Only trusted events will deselect text on iOS (issue #49)
			selection = window.getSelection();
			if (selection.rangeCount && !selection.isCollapsed) {
				return true;
			}

			if (!deviceIsIOS4) {

				// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
				// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
				// with the same identifier as the touch event that previously triggered the click that triggered the alert.
				// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
				// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
				// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
				// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
				// random integers, it's safe to to continue if the identifier is 0 here.
				if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
					event.preventDefault();
					return false;
				}

				this.lastTouchIdentifier = touch.identifier;

				// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
				// 1) the user does a fling scroll on the scrollable layer
				// 2) the user stops the fling scroll with another tap
				// then the event.target of the last 'touchend' event will be the element that was under the user's finger
				// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
				// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
				this.updateScrollParent(targetElement);
			}
		}

		this.trackingClick = true;
		this.trackingClickStart = event.timeStamp;
		this.targetElement = targetElement;

		this.touchStartX = touch.pageX;
		this.touchStartY = touch.pageY;

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			event.preventDefault();
		}

		return true;
	};


	/**
	 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.touchHasMoved = function(event) {
		var touch = event.changedTouches[0], boundary = this.touchBoundary;

		if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
			return true;
		}

		return false;
	};


	/**
	 * Update the last position.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchMove = function(event) {
		if (!this.trackingClick) {
			return true;
		}

		// If the touch has moved, cancel the click tracking
		if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
			this.trackingClick = false;
			this.targetElement = null;
		}

		return true;
	};


	/**
	 * Attempt to find the labelled control for the given label element.
	 *
	 * @param {EventTarget|HTMLLabelElement} labelElement
	 * @returns {Element|null}
	 */
	FastClick.prototype.findControl = function(labelElement) {

		// Fast path for newer browsers supporting the HTML5 control attribute
		if (labelElement.control !== undefined) {
			return labelElement.control;
		}

		// All browsers under test that support touch events also support the HTML5 htmlFor attribute
		if (labelElement.htmlFor) {
			return document.getElementById(labelElement.htmlFor);
		}

		// If no for attribute exists, attempt to retrieve the first labellable descendant element
		// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
		return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
	};


	/**
	 * On touch end, determine whether to send a click event at once.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchEnd = function(event) {
		var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

		if (!this.trackingClick) {
			return true;
		}

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			this.cancelNextClick = true;
			return true;
		}

		if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
			return true;
		}

		// Reset to prevent wrong click cancel on input (issue #156).
		this.cancelNextClick = false;

		this.lastClickTime = event.timeStamp;

		trackingClickStart = this.trackingClickStart;
		this.trackingClick = false;
		this.trackingClickStart = 0;

		// On some iOS devices, the targetElement supplied with the event is invalid if the layer
		// is performing a transition or scroll, and has to be re-detected manually. Note that
		// for this to function correctly, it must be called *after* the event target is checked!
		// See issue #57; also filed as rdar://13048589 .
		if (deviceIsIOSWithBadTarget) {
			touch = event.changedTouches[0];

			// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
			targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
			targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
		}

		targetTagName = targetElement.tagName.toLowerCase();
		if (targetTagName === 'label') {
			forElement = this.findControl(targetElement);
			if (forElement) {
				this.focus(targetElement);
				if (deviceIsAndroid) {
					return false;
				}

				targetElement = forElement;
			}
		} else if (this.needsFocus(targetElement)) {

			// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
			// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
			if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
				this.targetElement = null;
				return false;
			}

			this.focus(targetElement);
			this.sendClick(targetElement, event);

			// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
			// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
			if (!deviceIsIOS || targetTagName !== 'select') {
				this.targetElement = null;
				event.preventDefault();
			}

			return false;
		}

		if (deviceIsIOS && !deviceIsIOS4) {

			// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
			// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
			scrollParent = targetElement.fastClickScrollParent;
			if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
				return true;
			}
		}

		// Prevent the actual click from going though - unless the target node is marked as requiring
		// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
		if (!this.needsClick(targetElement)) {
			event.preventDefault();
			this.sendClick(targetElement, event);
		}

		return false;
	};


	/**
	 * On touch cancel, stop tracking the click.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.onTouchCancel = function() {
		this.trackingClick = false;
		this.targetElement = null;
	};


	/**
	 * Determine mouse events which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onMouse = function(event) {

		// If a target element was never set (because a touch event was never fired) allow the event
		if (!this.targetElement) {
			return true;
		}

		if (event.forwardedTouchEvent) {
			return true;
		}

		// Programmatically generated events targeting a specific element should be permitted
		if (!event.cancelable) {
			return true;
		}

		// Derive and check the target element to see whether the mouse event needs to be permitted;
		// unless explicitly enabled, prevent non-touch click events from triggering actions,
		// to prevent ghost/doubleclicks.
		if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

			// Prevent any user-added listeners declared on FastClick element from being fired.
			if (event.stopImmediatePropagation) {
				event.stopImmediatePropagation();
			} else {

				// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
				event.propagationStopped = true;
			}

			// Cancel the event
			event.stopPropagation();
			event.preventDefault();

			return false;
		}

		// If the mouse event is permitted, return true for the action to go through.
		return true;
	};


	/**
	 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	 * an actual click which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onClick = function(event) {
		var permitted;

		// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
		if (this.trackingClick) {
			this.targetElement = null;
			this.trackingClick = false;
			return true;
		}

		// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
		if (event.target.type === 'submit' && event.detail === 0) {
			return true;
		}

		permitted = this.onMouse(event);

		// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
		if (!permitted) {
			this.targetElement = null;
		}

		// If clicks are permitted, return true for the action to go through.
		return permitted;
	};


	/**
	 * Remove all FastClick's event listeners.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.destroy = function() {
		var layer = this.layer;

		if (deviceIsAndroid) {
			layer.removeEventListener('mouseover', this.onMouse, true);
			layer.removeEventListener('mousedown', this.onMouse, true);
			layer.removeEventListener('mouseup', this.onMouse, true);
		}

		layer.removeEventListener('click', this.onClick, true);
		layer.removeEventListener('touchstart', this.onTouchStart, false);
		layer.removeEventListener('touchmove', this.onTouchMove, false);
		layer.removeEventListener('touchend', this.onTouchEnd, false);
		layer.removeEventListener('touchcancel', this.onTouchCancel, false);
	};


	/**
	 * Check whether FastClick is needed.
	 *
	 * @param {Element} layer The layer to listen on
	 */
	FastClick.notNeeded = function(layer) {
		var metaViewport;
		var chromeVersion;
		var blackberryVersion;
		var firefoxVersion;

		// Devices that don't support touch don't need FastClick
		if (typeof window.ontouchstart === 'undefined') {
			return true;
		}

		// Chrome version - zero for other browsers
		chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (chromeVersion) {

			if (deviceIsAndroid) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// Chrome 32 and above with width=device-width or less don't need FastClick
					if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}

			// Chrome desktop doesn't need FastClick (issue #15)
			} else {
				return true;
			}
		}

		if (deviceIsBlackBerry10) {
			blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

			// BlackBerry 10.3+ does not require Fastclick library.
			// https://github.com/ftlabs/fastclick/issues/251
			if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// user-scalable=no eliminates click delay.
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// width=device-width (or less than device-width) eliminates click delay.
					if (document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}
			}
		}

		// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
		if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		// Firefox version - zero for other browsers
		firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (firefoxVersion >= 27) {
			// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

			metaViewport = document.querySelector('meta[name=viewport]');
			if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
				return true;
			}
		}

		// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
		// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
		if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		return false;
	};


	/**
	 * Factory method for creating a FastClick object
	 *
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	FastClick.attach = function(layer, options) {
		return new FastClick(layer, options);
	};


	if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {

		// AMD. Register as an anonymous module.
		define(function() {
			return FastClick;
		});
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = FastClick.attach;
		module.exports.FastClick = FastClick;
	} else {
		window.FastClick = FastClick;
	}
}());

var intervalIds = {};

self.onmessage = function(e) {
    switch (e.data.command) {
        case 'interval:start':
            var intvalId = setInterval(function() {
                postMessage({
                    message: 'interval:tick',
                    id: e.data.id
                });
            }, e.data.interval);

            postMessage({
                message: 'interval:started',
                id: e.data.id
            });

            intervalIds[e.data.id] = intvalId;
            break;

        case 'interval:clear':
            clearInterval(intervalIds[e.data.id]);

            postMessage({
                message: 'interval:cleared',
                id: e.data.id
            });

            delete intervalIds[e.data.id];
            break;
        
        //intervals are never deleted, so remobe all!
        case 'interval:clearAll':
            
            var keys = [];
            
            for (var key in intervalIds) {
                if (intervalIds.hasOwnProperty(key)) {
                    keys.push(key);
                }
            }
            
            for(var k=0; k<keys.length; k++)
            {
                var nextClientIntervalId = keys[k];
                clearInterval(intervalIds[nextClientIntervalId]);
                delete intervalIds[nextClientIntervalId];
            }
            
            break;
    }
};
angular.module('app')
    .directive('insertNotification', function(){
      return {
        restrict: 'A',
        scope: {
          trigger: '=insertNotification'
        },
        link: function postLink(scope, elem) {
          scope.$watch('trigger', function(newValue, oldValue) {
            //alert(elem[0].innerHtml);
            elem[0].innerHtml = newValue;
          });
        }
      };
    });

////app
//angular.module('app')
//    .directive("ngLoginSubmit", function(){
//    return {
//        restrict: "A",
//        scope: {
//            onSubmit: "=ngLoginSubmit"
//        },
//        link: function(scope, element, attrs) {
//            $(element)[0].onsubmit = function() {
//                $("#login-login").val($("#hotelicoLoginMail", element).val());
//                $("#login-password").val($("#hotelicoLoginPassword", element).val());
//
//                scope.onSubmit(function() {
//                    $("#hotelicoLoginForm")[0].submit();
//                });
//                return false;
//            };
//        }
//    };
//});
angular.module('app').directive('stopEvent', function () {
    return {
        restrict: 'A',
        link: function (scope, element, attr) {
            element.on(attr.stopEvent, function (e) {
                e.stopPropagation();
            });
        }
    };
});

//angular.module('app')
//    .directive('input', [
//        function() {
//            return {
//                restrict: 'E',
//                link: link
//            };
//        }
//    ]);
//
//angular.module('app')
//    .directive('textarea', [
//        function() {
//            return {
//                restrict: 'E',
//                link: link
//            };
//        }
//    ]);
//
//angular.module('app')
//    .directive('label', [
//        function() {
//            return {
//                restrict: 'E',
//                link: link
//            };
//        }
//    ]);
//
//angular.module('app')
//    .directive('form', [
//        function() {
//            return {
//                restrict: 'E',
//                link: link
//            };
//        }
//    ]);
//angular.module('app')
//    .directive('div', [
//        function() {
//            return {
//                restrict: 'E',
//                link: link
//            };
//        }
//    ]);
//angular.module('app')
//    .directive('button', [
//        function() {
//            return {
//                restrict: 'E',
//                link: link
//            };
//        }
//    ]);
//
//function link(scope, elem) {
//    // bind the events iff this is an input/textarea within a modal
//    if (elem.parents('.modal').length) {
//        elem.on('touchstart', function(e) {
//            elem.focus();
//            e.preventDefault();
//            e.stopPropagation();
//        });
//    }
//}
//;
//angular.module('app', ['angular-img-cropper']);
//angular.module('app').controller("ImageCropperCtrl",[ '$scope', function($scope)
//{
//    $scope.cropper = {};
//    $scope.cropper.sourceImage = null;
//    $scope.cropper.croppedImage = null;
//    $scope.bounds = {};
//    $scope.bounds.left = 0;
//    $scope.bounds.right = 0;
//    $scope.bounds.top = 0;
//    $scope.bounds.bottom = 0;
//}]);
angular.module('angular-img-cropper', []).directive("imageCropper", ['$document', '$window', 'imageCropperDataShare', function ($document, $window, imageCropperDataShare) {
    return {
        scope: {
            image: "=",
            croppedImage: "=",
            cropWidth: "=",
            cropHeight: "=",
            keepAspect: "=",
            touchRadius: "=",
            cropAreaBounds: "=",
            minWidth: "=",
            minHeight: "="
        },
        restrict: "A",
        link: function (scope, element) {
            var crop;
            var __extends = __extends || function (d, b) {
                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    function __() {
                        this.constructor = d;
                    }

                    __.prototype = b.prototype;
                    d.prototype = new __();
                };

            var Handle = (function () {
                function Handle(x, y, radius) {
                    this.over = false;
                    this.drag = false;
                    this.position = new Point(x, y);
                    this.offset = new Point(0, 0);
                    this.radius = radius;
                }

                Handle.prototype.setDrag = function (value) {
                    this.drag = value;
                    this.setOver(value);
                };
                Handle.prototype.draw = function (ctx) {
                };
                Handle.prototype.setOver = function (over) {
                    this.over = over;
                };
                Handle.prototype.touchInBounds = function (x, y) {
                    return (x > this.position.x - this.radius && x < this.position.x + this.radius && y > this.position.y - this.radius && y < this.position.y + this.radius);
                };
                Handle.prototype.getPosition = function () {
                    return this.position;
                };
                Handle.prototype.setPosition = function (x, y) {
                    this.position.x = x;
                    this.position.y = y;
                };
                return Handle;
            })();
            var PointPool = (function () {
                function PointPool(inst) {
                    this.borrowed = 0; //for debugging
                    PointPool.instance = this;
                    var prev = null;
                    for (var i = 0; i < inst; i++) {
                        if (i === 0) {
                            this.firstAvailable = new Point();
                            prev = this.firstAvailable;
                        }
                        else {
                            var p = new Point();
                            prev.setNext(p);
                            prev = p;
                        }
                    }
                }

                PointPool.prototype.borrow = function (x, y) {
                    if (this.firstAvailable == null) {
                        throw "Pool exhausted";
                    }
                    this.borrowed++;
                    var p = this.firstAvailable;
                    this.firstAvailable = p.getNext();
                    p.x = x;
                    p.y = y;
                    return p;
                };
                PointPool.prototype.returnPoint = function (p) {
                    this.borrowed--;
                    p.x = 0;
                    p.y = 0;
                    p.setNext(this.firstAvailable);
                    this.firstAvailable = p;
                };
                return PointPool;
            })();
            var CropService = (function () {
                function CropService() {
                }

                CropService.init = function (canvas) {
                    this.canvas = canvas;
                    this.ctx = this.canvas.getContext("2d");
                };
                CropService.DEG2RAD = 0.0174532925;
                return CropService;
            })();
            var DragMarker = (function (_super) {
                __extends(DragMarker, _super);
                function DragMarker(x, y, radius) {
                    _super.call(this, x, y, radius);
                    this.iconPoints = new Array();
                    this.scaledIconPoints = new Array();
                    this.getDragIconPoints(this.iconPoints, 1);
                    this.getDragIconPoints(this.scaledIconPoints, 1.2);
                }

                DragMarker.prototype.draw = function (ctx) {
                    if (this.over || this.drag) {
                        this.drawIcon(ctx, this.scaledIconPoints);
                    }
                    else {
                        this.drawIcon(ctx, this.iconPoints);
                    }
                };
                DragMarker.prototype.getDragIconPoints = function (arr, scale) {
                    var maxLength = 17 * scale;
                    var arrowWidth = 14 * scale;
                    var arrowLength = 8 * scale;
                    var connectorThroat = 4 * scale;
                    arr.push(PointPool.instance.borrow(-connectorThroat / 2, maxLength - arrowLength));
                    arr.push(PointPool.instance.borrow(-arrowWidth / 2, maxLength - arrowLength));
                    arr.push(PointPool.instance.borrow(0, maxLength));
                    arr.push(PointPool.instance.borrow(arrowWidth / 2, maxLength - arrowLength));
                    arr.push(PointPool.instance.borrow(connectorThroat / 2, maxLength - arrowLength));
                    arr.push(PointPool.instance.borrow(connectorThroat / 2, connectorThroat / 2));
                    arr.push(PointPool.instance.borrow(maxLength - arrowLength, connectorThroat / 2));
                    arr.push(PointPool.instance.borrow(maxLength - arrowLength, arrowWidth / 2));
                    arr.push(PointPool.instance.borrow(maxLength, 0));
                    arr.push(PointPool.instance.borrow(maxLength - arrowLength, -arrowWidth / 2));
                    arr.push(PointPool.instance.borrow(maxLength - arrowLength, -connectorThroat / 2));
                    arr.push(PointPool.instance.borrow(connectorThroat / 2, -connectorThroat / 2));
                    arr.push(PointPool.instance.borrow(connectorThroat / 2, -maxLength + arrowLength));
                    arr.push(PointPool.instance.borrow(arrowWidth / 2, -maxLength + arrowLength));
                    arr.push(PointPool.instance.borrow(0, -maxLength));
                    arr.push(PointPool.instance.borrow(-arrowWidth / 2, -maxLength + arrowLength));
                    arr.push(PointPool.instance.borrow(-connectorThroat / 2, -maxLength + arrowLength));
                    arr.push(PointPool.instance.borrow(-connectorThroat / 2, -connectorThroat / 2));
                    arr.push(PointPool.instance.borrow(-maxLength + arrowLength, -connectorThroat / 2));
                    arr.push(PointPool.instance.borrow(-maxLength + arrowLength, -arrowWidth / 2));
                    arr.push(PointPool.instance.borrow(-maxLength, 0));
                    arr.push(PointPool.instance.borrow(-maxLength + arrowLength, arrowWidth / 2));
                    arr.push(PointPool.instance.borrow(-maxLength + arrowLength, connectorThroat / 2));
                    arr.push(PointPool.instance.borrow(-connectorThroat / 2, connectorThroat / 2));
                };
                DragMarker.prototype.drawIcon = function (ctx, points) {
                    ctx.beginPath();
                    ctx.moveTo(points[0].x + this.position.x, points[0].y + this.position.y);
                    for (var k = 0; k < points.length; k++) {
                        var p = points[k];
                        ctx.lineTo(p.x + this.position.x, p.y + this.position.y);
                    }
                    ctx.closePath();
                    ctx.fillStyle = 'rgba(255,228,0,1)';
                    ctx.fill();
                };
                DragMarker.prototype.recalculatePosition = function (bounds) {
                    var c = bounds.getCentre();
                    this.setPosition(c.x, c.y);
                    PointPool.instance.returnPoint(c);
                };
                return DragMarker;
            })(Handle);
            var CornerMarker = (function (_super) {
                __extends(CornerMarker, _super);
                function CornerMarker(x, y, radius) {
                    _super.call(this, x, y, radius);
                }

                CornerMarker.prototype.drawCornerBorder = function (ctx) {
                    var sideLength = 10;
                    if (this.over || this.drag) {
                        sideLength = 12;
                    }
                    var hDirection = 1;
                    var vDirection = 1;
                    if (this.horizontalNeighbour.position.x < this.position.x) {
                        hDirection = -1;
                    }
                    if (this.verticalNeighbour.position.y < this.position.y) {
                        vDirection = -1;
                    }
                    ctx.beginPath();
                    ctx.lineJoin = "miter";
                    ctx.moveTo(this.position.x, this.position.y);
                    ctx.lineTo(this.position.x + (sideLength * hDirection), this.position.y);
                    ctx.lineTo(this.position.x + (sideLength * hDirection), this.position.y + (sideLength * vDirection));
                    ctx.lineTo(this.position.x, this.position.y + (sideLength * vDirection));
                    ctx.lineTo(this.position.x, this.position.y);
                    ctx.closePath();
                    ctx.lineWidth = 2;
                    ctx.strokeStyle = 'rgba(255,228,0,1)';
                    ctx.stroke();
                };
                CornerMarker.prototype.drawCornerFill = function (ctx) {
                    var sideLength = 10;
                    if (this.over || this.drag) {
                        sideLength = 12;
                    }
                    var hDirection = 1;
                    var vDirection = 1;
                    if (this.horizontalNeighbour.position.x < this.position.x) {
                        hDirection = -1;
                    }
                    if (this.verticalNeighbour.position.y < this.position.y) {
                        vDirection = -1;
                    }
                    ctx.beginPath();
                    ctx.moveTo(this.position.x, this.position.y);
                    ctx.lineTo(this.position.x + (sideLength * hDirection), this.position.y);
                    ctx.lineTo(this.position.x + (sideLength * hDirection), this.position.y + (sideLength * vDirection));
                    ctx.lineTo(this.position.x, this.position.y + (sideLength * vDirection));
                    ctx.lineTo(this.position.x, this.position.y);
                    ctx.closePath();
                    ctx.fillStyle = 'rgba(0,0,0,1)';
                    ctx.fill();
                };
                CornerMarker.prototype.moveX = function (x) {
                    this.setPosition(x, this.position.y);
                };
                CornerMarker.prototype.moveY = function (y) {
                    this.setPosition(this.position.x, y);
                };
                CornerMarker.prototype.move = function (x, y) {
                    this.setPosition(x, y);
                    this.verticalNeighbour.moveX(x);
                    this.horizontalNeighbour.moveY(y);
                };
                CornerMarker.prototype.addHorizontalNeighbour = function (neighbour) {
                    this.horizontalNeighbour = neighbour;
                };
                CornerMarker.prototype.addVerticalNeighbour = function (neighbour) {
                    this.verticalNeighbour = neighbour;
                };
                CornerMarker.prototype.getHorizontalNeighbour = function () {
                    return this.horizontalNeighbour;
                };
                CornerMarker.prototype.getVerticalNeighbour = function () {
                    return this.verticalNeighbour;
                };
                CornerMarker.prototype.draw = function (ctx) {
                    this.drawCornerFill(ctx);
                    this.drawCornerBorder(ctx);
                };
                return CornerMarker;
            })(Handle);
            var Bounds = (function () {
                function Bounds(x, y, width, height) {
                    if (x === void 0) {
                        x = 0;
                    }
                    if (y === void 0) {
                        y = 0;
                    }
                    if (width === void 0) {
                        width = 0;
                    }
                    if (height === void 0) {
                        height = 0;
                    }
                    this.left = x;
                    this.right = x + width;
                    this.top = y;
                    this.bottom = y + height;
                }

                Bounds.prototype.getWidth = function () {
                    return this.right - this.left;
                };
                Bounds.prototype.getHeight = function () {
                    return this.bottom - this.top;
                };
                Bounds.prototype.getCentre = function () {
                    var w = this.getWidth();
                    var h = this.getHeight();
                    return PointPool.instance.borrow(this.left + (w / 2), this.top + (h / 2));
                };
                return Bounds;
            })();
            var Point = (function () {
                function Point(x, y) {
                    if (x === void 0) {
                        x = 0;
                    }
                    if (y === void 0) {
                        y = 0;
                    }
                    this.x = x;
                    this.y = y;
                }

                Point.prototype.setNext = function (p) {
                    this.next = p;
                };
                Point.prototype.getNext = function () {
                    return this.next;
                };
                return Point;
            })();
            var CropTouch = (function () {
                function CropTouch(x, y, id) {
                    if (x === void 0) {
                        x = 0;
                    }
                    if (y === void 0) {
                        y = 0;
                    }
                    if (id === void 0) {
                        id = 0;
                    }
                    this.id = 0;
                    this.x = x;
                    this.y = y;
                    this.id = id;
                }

                return CropTouch;
            })();
            var ImageCropper = (function () {
                function ImageCropper(canvas, x, y, width, height, keepAspect, touchRadius) {
                    if (x === void 0) {
                        x = 0;
                    }
                    if (y === void 0) {
                        y = 0;
                    }
                    if (width === void 0) {
                        width = 100;
                    }
                    if (height === void 0) {
                        height = 50;
                    }
                    if (keepAspect === void 0) {
                        keepAspect = true;
                    }
                    if (touchRadius === void 0) {
                        touchRadius = 20;
                    }
                    this.keepAspect = false;
                    this.aspectRatio = 0;
                    this.currentDragTouches = new Array();
                    this.isMouseDown = false;
                    this.ratioW = 1;
                    this.ratioH = 1;
                    this.fileType = 'png';
                    this.imageSet = false;
                    this.pointPool = new PointPool(200);
                    CropService.init(canvas);
                    this.buffer = document.createElement('canvas');
                    this.cropCanvas = document.createElement('canvas');
                    this.buffer.width = canvas.width;
                    this.buffer.height = canvas.height;
                    this.tl = new CornerMarker(x, y, touchRadius);
                    this.tr = new CornerMarker(x + width, y, touchRadius);
                    this.bl = new CornerMarker(x, y + height, touchRadius);
                    this.br = new CornerMarker(x + width, y + height, touchRadius);
                    this.tl.addHorizontalNeighbour(this.tr);
                    this.tl.addVerticalNeighbour(this.bl);
                    this.tr.addHorizontalNeighbour(this.tl);
                    this.tr.addVerticalNeighbour(this.br);
                    this.bl.addHorizontalNeighbour(this.br);
                    this.bl.addVerticalNeighbour(this.tl);
                    this.br.addHorizontalNeighbour(this.bl);
                    this.br.addVerticalNeighbour(this.tr);
                    this.markers = [this.tl, this.tr, this.bl, this.br];
                    this.center = new DragMarker(x + (width / 2), y + (height / 2), touchRadius);
                    this.canvas = canvas;
                    this.ctx = this.canvas.getContext("2d");
                    this.keepAspect = keepAspect;
                    this.aspectRatio = height / width;
                    this.draw(this.ctx);
                    this.croppedImage = new Image();
                    this.currentlyInteracting = false;
                    window.addEventListener('mousemove', this.onMouseMove.bind(this));
                    window.addEventListener('mouseup', this.onMouseUp.bind(this));
                    canvas.addEventListener('mousedown', this.onMouseDown.bind(this));
                    window.addEventListener('touchmove', this.onTouchMove.bind(this), false);
                    canvas.addEventListener('touchstart', this.onTouchStart.bind(this), false);
                    window.addEventListener('touchend', this.onTouchEnd.bind(this), false);
                }

                ImageCropper.prototype.resizeCanvas = function (width, height) {
                    this.canvas.width = width;
                    this.canvas.height = height;
                    this.buffer.width = width;
                    this.buffer.height = height;
                    this.draw(this.ctx);
                };
                ImageCropper.prototype.draw = function (ctx) {
                    var bounds = this.getBounds();
                    if (this.srcImage) {
                        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
                        var sourceAspect = this.srcImage.height / this.srcImage.width;
                        var canvasAspect = this.canvasHeight / this.canvasWidth;
                        var w = this.canvasWidth;
                        var h = this.canvasHeight;
                        if (canvasAspect > sourceAspect) {
                            w = this.canvasWidth;
                            h = this.canvasWidth * sourceAspect;
                        }
                        else {
                            h = this.canvasHeight;
                            w = this.canvasHeight / sourceAspect;
                        }
                        this.ratioW = w / this.srcImage.width;
                        this.ratioH = h / this.srcImage.height;
                        if (canvasAspect < sourceAspect) {
                            this.drawImageIOSFix(ctx, this.srcImage, 0, 0, this.srcImage.width, this.srcImage.height, this.buffer.width / 2 - w / 2, 0, w, h);
                        }
                        else {
                            this.drawImageIOSFix(ctx, this.srcImage, 0, 0, this.srcImage.width, this.srcImage.height, 0, this.buffer.height / 2 - h / 2, w, h);
                        }
                        this.buffer.getContext('2d').drawImage(this.canvas, 0, 0, this.canvasWidth, this.canvasHeight);
                        ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
                        ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);
                        ctx.drawImage(this.buffer, bounds.left, bounds.top, Math.max(bounds.getWidth(), 1), Math.max(bounds.getHeight(), 1), bounds.left, bounds.top, bounds.getWidth(), bounds.getHeight());
                        var marker;
                        for (var i = 0; i < this.markers.length; i++) {
                            marker = this.markers[i];
                            marker.draw(ctx);
                        }
                        this.center.draw(ctx);
                        ctx.lineWidth = 2;
                        ctx.strokeStyle = 'rgba(255,228,0,1)';
                        ctx.strokeRect(bounds.left, bounds.top, bounds.getWidth(), bounds.getHeight());
                    }
                    else {
                        ctx.fillStyle = 'rgba(192,192,192,1)';
                        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                    }
                };
                ImageCropper.prototype.dragCrop = function (x, y, marker) {
                    var bounds = this.getBounds();
                    var left = x - (bounds.getWidth() / 2);
                    var right = x + (bounds.getWidth() / 2);
                    var top = y - (bounds.getHeight() / 2);
                    var bottom = y + (bounds.getHeight() / 2);
                    if (right >= this.maxXClamp) {
                        x = this.maxXClamp - bounds.getWidth() / 2;
                    }
                    if (left <= this.minXClamp) {
                        x = bounds.getWidth() / 2 + this.minXClamp;
                    }
                    if (top < this.minYClamp) {
                        y = bounds.getHeight() / 2 + this.minYClamp;
                    }
                    if (bottom >= this.maxYClamp) {
                        y = this.maxYClamp - bounds.getHeight() / 2;
                    }
                    this.tl.moveX(x - (bounds.getWidth() / 2));
                    this.tl.moveY(y - (bounds.getHeight() / 2));
                    this.tr.moveX(x + (bounds.getWidth() / 2));
                    this.tr.moveY(y - (bounds.getHeight() / 2));
                    this.bl.moveX(x - (bounds.getWidth() / 2));
                    this.bl.moveY(y + (bounds.getHeight() / 2));
                    this.br.moveX(x + (bounds.getWidth() / 2));
                    this.br.moveY(y + (bounds.getHeight() / 2));
                    marker.setPosition(x, y);

                    if (scope.cropAreaBounds && this.imageSet) {
                        scope.cropAreaBounds = this.getCropBounds();
                        scope.$apply();
                    }
                };

                ImageCropper.prototype.enforceMinSize = function (x, y, marker) {

                    var xLength = x - marker.getHorizontalNeighbour().getPosition().x;
                    var yLength = y - marker.getVerticalNeighbour().getPosition().y;
                    var xOver = scope.minWidth - Math.abs(xLength);
                    var yOver = scope.minHeight - Math.abs(yLength);

                    if (xLength == 0 || yLength == 0) {
                        x = marker.getPosition().x;
                        y = marker.getPosition().y;

                        return PointPool.instance.borrow(x, y);
                    }

                    if(scope.keepAspect) {
                        if (xOver > 0 && (yOver / this.aspectRatio) > 0) {
                            if (xOver > (yOver / this.aspectRatio)) {
                                if (xLength < 0) {
                                    x -= xOver;

                                    if (yLength < 0) {
                                        y -= xOver * this.aspectRatio;
                                    }
                                    else {
                                        y += xOver * this.aspectRatio;
                                    }
                                }
                                else {
                                    x += xOver;
                                    if (yLength < 0) {
                                        y -= xOver * this.aspectRatio;
                                    }
                                    else {
                                        y += xOver * this.aspectRatio;
                                    }
                                }
                            }
                            else {
                                if (yLength < 0) {
                                    y -= yOver;

                                    if (xLength < 0) {
                                        x -= yOver / this.aspectRatio;
                                    }
                                    else {
                                        x += yOver / this.aspectRatio;
                                    }

                                }
                                else {
                                    y += yOver;
                                    if (xLength < 0) {
                                        x -= yOver / this.aspectRatio;
                                    }
                                    else {
                                        x += yOver / this.aspectRatio;
                                    }
                                }
                            }
                        }
                        else {
                            if (xOver > 0) {
                                if (xLength < 0) {
                                    x -= xOver;

                                    if (yLength < 0) {
                                        y -= xOver * this.aspectRatio;
                                    }
                                    else {
                                        y += xOver * this.aspectRatio;
                                    }
                                }
                                else {
                                    x += xOver;
                                    if (yLength < 0) {
                                        y -= xOver * this.aspectRatio;
                                    }
                                    else {
                                        y += xOver * this.aspectRatio;
                                    }
                                }
                            }
                            else if (yOver > 0) {
                                if (yLength < 0) {
                                    y -= yOver;

                                    if (xLength < 0) {
                                        x -= yOver / this.aspectRatio;
                                    }
                                    else {
                                        x += yOver / this.aspectRatio;
                                    }
                                }
                                else {
                                    y += yOver;
                                    if (xLength < 0) {
                                        x -= yOver / this.aspectRatio;
                                    }
                                    else {
                                        x += yOver / this.aspectRatio;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if(xOver > 0)
                        {
                            if (xLength < 0) {
                                x -= xOver;
                            }
                            else {
                                x += xOver;
                            }
                        }
                        if(yOver > 0)
                        {
                            if (yLength < 0) {
                                y -= yOver;
                            }
                            else {
                                y += yOver;
                            }
                        }
                    }

                    if (x < this.minXClamp || x > this.maxXClamp || y < this.minYClamp || y > this.maxYClamp) {
                        x = marker.getPosition().x;
                        y = marker.getPosition().y;
                    }

                    return PointPool.instance.borrow(x, y);
                };
                ImageCropper.prototype.dragCorner = function (x, y, marker) {
                    var iX = 0;
                    var iY = 0;
                    var ax = 0;
                    var ay = 0;
                    var newHeight = 0;
                    var newWidth = 0;
                    var newY = 0;
                    var newX = 0;
                    var anchorMarker;
                    var fold = 0;


                    if (scope.keepAspect) {
                        anchorMarker = marker.getHorizontalNeighbour().getVerticalNeighbour();
                        ax = anchorMarker.getPosition().x;
                        ay = anchorMarker.getPosition().y;
                        if (x <= anchorMarker.getPosition().x) {
                            if (y <= anchorMarker.getPosition().y) {
                                iX = ax - (100 / this.aspectRatio);
                                iY = ay - (100 / this.aspectRatio * this.aspectRatio);
                                fold = this.getSide(PointPool.instance.borrow(iX, iY), anchorMarker.getPosition(), PointPool.instance.borrow(x, y));
                                if (fold > 0) {
                                    newHeight = Math.abs(anchorMarker.getPosition().y - y);
                                    newWidth = newHeight / this.aspectRatio;
                                    newY = anchorMarker.getPosition().y - newHeight;
                                    newX = anchorMarker.getPosition().x - newWidth;
                                    var min = this.enforceMinSize(newX, newY, marker);
                                    marker.move(min.x, min.y);
                                    PointPool.instance.returnPoint(min);
                                }
                                else if (fold < 0) {
                                    newWidth = Math.abs(anchorMarker.getPosition().x - x);
                                    newHeight = newWidth * this.aspectRatio;
                                    newY = anchorMarker.getPosition().y - newHeight;
                                    newX = anchorMarker.getPosition().x - newWidth;
                                    var min = this.enforceMinSize(newX, newY, marker);
                                    marker.move(min.x, min.y);
                                    PointPool.instance.returnPoint(min);
                                }
                            }
                            else {
                                iX = ax - (100 / this.aspectRatio);
                                iY = ay + (100 / this.aspectRatio * this.aspectRatio);
                                fold = this.getSide(PointPool.instance.borrow(iX, iY), anchorMarker.getPosition(), PointPool.instance.borrow(x, y));
                                if (fold > 0) {
                                    newWidth = Math.abs(anchorMarker.getPosition().x - x);
                                    newHeight = newWidth * this.aspectRatio;
                                    newY = anchorMarker.getPosition().y + newHeight;
                                    newX = anchorMarker.getPosition().x - newWidth;
                                    var min = this.enforceMinSize(newX, newY, marker);
                                    marker.move(min.x, min.y);
                                    PointPool.instance.returnPoint(min);
                                }
                                else if (fold < 0) {
                                    newHeight = Math.abs(anchorMarker.getPosition().y - y);
                                    newWidth = newHeight / this.aspectRatio;
                                    newY = anchorMarker.getPosition().y + newHeight;
                                    newX = anchorMarker.getPosition().x - newWidth;
                                    var min = this.enforceMinSize(newX, newY, marker);
                                    marker.move(min.x, min.y);
                                    PointPool.instance.returnPoint(min);
                                }
                            }
                        }
                        else {
                            if (y <= anchorMarker.getPosition().y) {
                                iX = ax + (100 / this.aspectRatio);
                                iY = ay - (100 / this.aspectRatio * this.aspectRatio);
                                fold = this.getSide(PointPool.instance.borrow(iX, iY), anchorMarker.getPosition(), PointPool.instance.borrow(x, y));
                                if (fold < 0) {
                                    newHeight = Math.abs(anchorMarker.getPosition().y - y);
                                    newWidth = newHeight / this.aspectRatio;
                                    newY = anchorMarker.getPosition().y - newHeight;
                                    newX = anchorMarker.getPosition().x + newWidth;
                                    var min = this.enforceMinSize(newX, newY, marker);
                                    marker.move(min.x, min.y);
                                    PointPool.instance.returnPoint(min);
                                }
                                else if (fold > 0) {
                                    newWidth = Math.abs(anchorMarker.getPosition().x - x);
                                    newHeight = newWidth * this.aspectRatio;
                                    newY = anchorMarker.getPosition().y - newHeight;
                                    newX = anchorMarker.getPosition().x + newWidth;
                                    var min = this.enforceMinSize(newX, newY, marker);
                                    marker.move(min.x, min.y);
                                    PointPool.instance.returnPoint(min);
                                }
                            }
                            else {
                                iX = ax + (100 / this.aspectRatio);
                                iY = ay + (100 / this.aspectRatio * this.aspectRatio);
                                fold = this.getSide(PointPool.instance.borrow(iX, iY), anchorMarker.getPosition(), PointPool.instance.borrow(x, y));
                                if (fold < 0) {
                                    newWidth = Math.abs(anchorMarker.getPosition().x - x);
                                    newHeight = newWidth * this.aspectRatio;
                                    newY = anchorMarker.getPosition().y + newHeight;
                                    newX = anchorMarker.getPosition().x + newWidth;
                                    var min = this.enforceMinSize(newX, newY, marker);
                                    marker.move(min.x, min.y);
                                    PointPool.instance.returnPoint(min);
                                }
                                else if (fold > 0) {
                                    newHeight = Math.abs(anchorMarker.getPosition().y - y);
                                    newWidth = newHeight / this.aspectRatio;
                                    newY = anchorMarker.getPosition().y + newHeight;
                                    newX = anchorMarker.getPosition().x + newWidth;
                                    var min = this.enforceMinSize(newX, newY, marker);
                                    marker.move(min.x, min.y);
                                    PointPool.instance.returnPoint(min);
                                }
                            }
                        }
                    }
                    else {
                        var min = this.enforceMinSize(x, y, marker);
                        marker.move(min.x, min.y);
                        PointPool.instance.returnPoint(min);
                    }
                    this.center.recalculatePosition(this.getBounds());

                    if (scope.cropAreaBounds && this.imageSet) {
                        scope.cropAreaBounds = this.getCropBounds();
                        scope.$apply();
                    }
                };
                ImageCropper.prototype.getSide = function (a, b, c) {
                    var n = this.sign((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x));
                    //TODO move the return of the pools to outside of this function
                    PointPool.instance.returnPoint(a);
                    PointPool.instance.returnPoint(c);
                    return n;
                };
                ImageCropper.prototype.sign = function (x) {
                    if (+x === x) {
                        return (x === 0) ? x : (x > 0) ? 1 : -1;
                    }
                    return NaN;
                };
                ImageCropper.prototype.handleRelease = function (newCropTouch) {

                    if (newCropTouch == null) {
                        return;
                    }
                    var index = 0;
                    for (var k = 0; k < this.currentDragTouches.length; k++) {
                        if (newCropTouch.id == this.currentDragTouches[k].id) {
                            this.currentDragTouches[k].dragHandle.setDrag(false);
                            newCropTouch.dragHandle = null;
                            index = k;
                        }
                    }
                    this.currentDragTouches.splice(index, 1);
                    this.draw(this.ctx);
                };
                ImageCropper.prototype.handleMove = function (newCropTouch) {
                    var matched = false;
                    for (var k = 0; k < this.currentDragTouches.length; k++) {
                        if (newCropTouch.id == this.currentDragTouches[k].id && this.currentDragTouches[k].dragHandle != null) {
                            var dragTouch = this.currentDragTouches[k];
                            var clampedPositions = this.clampPosition(newCropTouch.x - dragTouch.dragHandle.offset.x, newCropTouch.y - dragTouch.dragHandle.offset.y);
                            newCropTouch.x = clampedPositions.x;
                            newCropTouch.y = clampedPositions.y;
                            PointPool.instance.returnPoint(clampedPositions);
                            if (dragTouch.dragHandle instanceof CornerMarker) {
                                this.dragCorner(newCropTouch.x, newCropTouch.y, dragTouch.dragHandle);
                            }
                            else {
                                this.dragCrop(newCropTouch.x, newCropTouch.y, dragTouch.dragHandle);
                            }
                            this.currentlyInteracting = true;
                            matched = true;
                            imageCropperDataShare.setPressed(this.canvas);
                            break;
                        }
                    }
                    if (!matched) {
                        for (var i = 0; i < this.markers.length; i++) {
                            var marker = this.markers[i];
                            if (marker.touchInBounds(newCropTouch.x, newCropTouch.y)) {
                                newCropTouch.dragHandle = marker;
                                this.currentDragTouches.push(newCropTouch);
                                marker.setDrag(true);
                                newCropTouch.dragHandle.offset.x = newCropTouch.x - newCropTouch.dragHandle.getPosition().x;
                                newCropTouch.dragHandle.offset.y = newCropTouch.y - newCropTouch.dragHandle.getPosition().y;
                                this.dragCorner(newCropTouch.x - newCropTouch.dragHandle.offset.x, newCropTouch.y - newCropTouch.dragHandle.offset.y, newCropTouch.dragHandle);
                                break;
                            }
                        }
                        if (newCropTouch.dragHandle == null) {
                            if (this.center.touchInBounds(newCropTouch.x, newCropTouch.y)) {
                                newCropTouch.dragHandle = this.center;
                                this.currentDragTouches.push(newCropTouch);
                                newCropTouch.dragHandle.setDrag(true);
                                newCropTouch.dragHandle.offset.x = newCropTouch.x - newCropTouch.dragHandle.getPosition().x;
                                newCropTouch.dragHandle.offset.y = newCropTouch.y - newCropTouch.dragHandle.getPosition().y;
                                this.dragCrop(newCropTouch.x - newCropTouch.dragHandle.offset.x, newCropTouch.y - newCropTouch.dragHandle.offset.y, newCropTouch.dragHandle);
                            }
                        }
                    }
                };
                ImageCropper.prototype.updateClampBounds = function () {
                    var sourceAspect = this.srcImage.height / this.srcImage.width;
                    var canvasAspect = this.canvas.height / this.canvas.width;
                    var w = this.canvas.width;
                    var h = this.canvas.height;
                    if (canvasAspect > sourceAspect) {
                        w = this.canvas.width;
                        h = this.canvas.width * sourceAspect;
                    }
                    else {
                        h = this.canvas.height;
                        w = this.canvas.height / sourceAspect;
                    }
                    this.minXClamp = this.canvas.width / 2 - w / 2;
                    this.minYClamp = this.canvas.height / 2 - h / 2;
                    this.maxXClamp = this.canvas.width / 2 + w / 2;
                    this.maxYClamp = this.canvas.height / 2 + h / 2;
                };
                ImageCropper.prototype.getCropBounds = function () {
                    var h = this.canvas.height - (this.minYClamp * 2);
                    var bounds = this.getBounds();
                    bounds.top = Math.round((h - bounds.top + this.minYClamp) / this.ratioH);
                    bounds.bottom = Math.round((h - bounds.bottom + this.minYClamp) / this.ratioH);
                    bounds.left = Math.round((bounds.left - this.minXClamp) / this.ratioW);
                    bounds.right = Math.round((bounds.right - this.minXClamp) / this.ratioW);
                    return bounds;
                };
                ImageCropper.prototype.clampPosition = function (x, y) {
                    if (x < this.minXClamp) {
                        x = this.minXClamp;
                    }
                    if (x > this.maxXClamp) {
                        x = this.maxXClamp;
                    }
                    if (y < this.minYClamp) {
                        y = this.minYClamp;
                    }
                    if (y > this.maxYClamp) {
                        y = this.maxYClamp;
                    }
                    return PointPool.instance.borrow(x, y);
                };
                ImageCropper.prototype.isImageSet = function () {
                    return this.imageSet;
                };
                ImageCropper.prototype.setImage = function (img) {
                    if (!img) {
                        throw "Image is null";
                    }
                    this.imageSet = true;
                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    var bufferContext = this.buffer.getContext('2d');
                    bufferContext.clearRect(0, 0, this.buffer.width, this.buffer.height);
                    var splitName = img.src.split('.');
                    var fileType = splitName[1];
                    if (fileType == 'png' || fileType == 'jpg') {
                        this.fileType = fileType;
                    }
                    this.srcImage = img;
                    this.updateClampBounds();
                    var sourceAspect = this.srcImage.height / this.srcImage.width;
                    var cropBounds = this.getBounds();
                    var cropAspect = cropBounds.getHeight() / cropBounds.getWidth();
                    var w = this.canvas.width;
                    var h = this.canvas.height;
                    this.canvasWidth = w;
                    this.canvasHeight = h;
                    var cX = this.canvas.width / 2;
                    var cY = this.canvas.height / 2;
                    var tlPos = PointPool.instance.borrow(cX - cropBounds.getWidth() / 2, cY + cropBounds.getHeight() / 2);
                    var trPos = PointPool.instance.borrow(cX + cropBounds.getWidth() / 2, cY + cropBounds.getHeight() / 2);
                    var blPos = PointPool.instance.borrow(cX - cropBounds.getWidth() / 2, cY - cropBounds.getHeight() / 2);
                    var brPos = PointPool.instance.borrow(cX + cropBounds.getWidth() / 2, cY - cropBounds.getHeight() / 2);
                    this.tl.setPosition(tlPos.x, tlPos.y);
                    this.tr.setPosition(trPos.x, trPos.y);
                    this.bl.setPosition(blPos.x, blPos.y);
                    this.br.setPosition(brPos.x, brPos.y);
                    PointPool.instance.returnPoint(tlPos);
                    PointPool.instance.returnPoint(trPos);
                    PointPool.instance.returnPoint(blPos);
                    PointPool.instance.returnPoint(brPos);
                    this.center.setPosition(cX, cY);
                    if (cropAspect > sourceAspect) {
                        var imageH = Math.min(w * sourceAspect, h);
                        var cropW = imageH / cropAspect;
                        tlPos = PointPool.instance.borrow(cX - cropW / 2, cY + imageH / 2);
                        trPos = PointPool.instance.borrow(cX + cropW / 2, cY + imageH / 2);
                        blPos = PointPool.instance.borrow(cX - cropW / 2, cY - imageH / 2);
                        brPos = PointPool.instance.borrow(cX + cropW / 2, cY - imageH / 2);
                        this.tl.setPosition(tlPos.x, tlPos.y);
                        this.tr.setPosition(trPos.x, trPos.y);
                        this.bl.setPosition(blPos.x, blPos.y);
                        this.br.setPosition(brPos.x, brPos.y);
                        PointPool.instance.returnPoint(tlPos);
                        PointPool.instance.returnPoint(trPos);
                        PointPool.instance.returnPoint(blPos);
                        PointPool.instance.returnPoint(brPos);
                    }
                    else if (cropAspect < sourceAspect) {
                        var imageW = Math.min(h / sourceAspect, w);
                        var cropH = imageW * cropAspect;
                        tlPos = PointPool.instance.borrow(cX - imageW / 2, cY + cropH / 2);
                        trPos = PointPool.instance.borrow(cX + imageW / 2, cY + cropH / 2);
                        blPos = PointPool.instance.borrow(cX - imageW / 2, cY - cropH / 2);
                        brPos = PointPool.instance.borrow(cX + imageW / 2, cY - cropH / 2);
                        this.tl.setPosition(tlPos.x, tlPos.y);
                        this.tr.setPosition(trPos.x, trPos.y);
                        this.bl.setPosition(blPos.x, blPos.y);
                        this.br.setPosition(brPos.x, brPos.y);
                        PointPool.instance.returnPoint(tlPos);
                        PointPool.instance.returnPoint(trPos);
                        PointPool.instance.returnPoint(blPos);
                        PointPool.instance.returnPoint(brPos);
                    }

                    this.vertSquashRatio = this.detectVerticalSquash(img);
                    this.draw(this.ctx);
                    var croppedImg = this.getCroppedImage(scope.cropWidth, scope.cropHeight);
                    scope.croppedImage = croppedImg.src;

                    if (scope.cropAreaBounds && this.imageSet) {
                        scope.cropAreaBounds = this.getCropBounds();
                        scope.$apply();
                    }
                };
                ImageCropper.prototype.getCroppedImage = function (fillWidth, fillHeight) {
                    var bounds = this.getBounds();
                    if (!this.srcImage) {
                        throw "Source image not set.";
                    }
                    if (fillWidth && fillHeight) {
                        var sourceAspect = this.srcImage.height / this.srcImage.width;
                        var canvasAspect = this.canvas.height / this.canvas.width;
                        var w = this.canvas.width;
                        var h = this.canvas.height;
                        if (canvasAspect > sourceAspect) {
                            w = this.canvas.width;
                            h = this.canvas.width * sourceAspect;
                        }
                        else if (canvasAspect < sourceAspect) {
                            h = this.canvas.height;
                            w = this.canvas.height / sourceAspect;
                        }
                        else {
                            h = this.canvas.height;
                            w = this.canvas.width;
                        }
                        this.ratioW = w / this.srcImage.width;
                        this.ratioH = h / this.srcImage.height;
                        this.cropCanvas.width = fillWidth;
                        this.cropCanvas.height = fillHeight;
                        var offsetH = (this.buffer.height - h) / 2 / this.ratioH;
                        var offsetW = (this.buffer.width - w) / 2 / this.ratioW;
                        this.drawImageIOSFix(this.cropCanvas.getContext('2d'), this.srcImage, Math.max(Math.round((bounds.left) / this.ratioW - offsetW), 0), Math.max(Math.round(bounds.top / this.ratioH - offsetH), 0), Math.max(Math.round(bounds.getWidth() / this.ratioW), 1), Math.max(Math.round(bounds.getHeight() / this.ratioH), 1), 0, 0, fillWidth, fillHeight);
                        this.croppedImage.width = fillWidth;
                        this.croppedImage.height = fillHeight;
                    }
                    else {
                        this.cropCanvas.width = Math.max(bounds.getWidth(), 1);
                        this.cropCanvas.height = Math.max(bounds.getHeight(), 1);
                        this.cropCanvas.getContext('2d').drawImage(this.buffer, bounds.left, bounds.top, Math.max(bounds.getWidth(), 1), Math.max(bounds.getHeight(), 1), 0, 0, bounds.getWidth(), bounds.getHeight());
                        this.croppedImage.width = this.cropCanvas.width;
                        this.croppedImage.height = this.cropCanvas.height;
                    }
                    this.croppedImage.src = this.cropCanvas.toDataURL("image/" + this.fileType);
                    return this.croppedImage;
                };
                ImageCropper.prototype.getBounds = function () {
                    var minX = Number.MAX_VALUE;
                    var minY = Number.MAX_VALUE;
                    var maxX = -Number.MAX_VALUE;
                    var maxY = -Number.MAX_VALUE;
                    for (var i = 0; i < this.markers.length; i++) {
                        var marker = this.markers[i];
                        if (marker.getPosition().x < minX) {
                            minX = marker.getPosition().x;
                        }
                        if (marker.getPosition().x > maxX) {
                            maxX = marker.getPosition().x;
                        }
                        if (marker.getPosition().y < minY) {
                            minY = marker.getPosition().y;
                        }
                        if (marker.getPosition().y > maxY) {
                            maxY = marker.getPosition().y;
                        }
                    }
                    var bounds = new Bounds();
                    bounds.left = minX;
                    bounds.right = maxX;
                    bounds.top = minY;
                    bounds.bottom = maxY;
                    return bounds;
                };
                ImageCropper.prototype.setBounds = function (bounds) {

                    var topLeft;
                    var topRight;
                    var bottomLeft;
                    var bottomRight;

                    var currentBounds = this.getBounds();
                    for (var i = 0; i < this.markers.length; i++) {
                        var marker = this.markers[i];

                        if (marker.getPosition().x == currentBounds.left) {
                            if (marker.getPosition().y == currentBounds.top) {
                                topLeft = marker;
                            }
                            else {
                                bottomLeft = marker;
                            }
                        }
                        else {
                            if (marker.getPosition().y == currentBounds.top) {
                                topRight = marker;
                            }
                            else {
                                bottomRight = marker;
                            }
                        }
                    }

                    topLeft.setPosition(bounds.left, bounds.top);
                    topRight.setPosition(bounds.right, bounds.top);
                    bottomLeft.setPosition(bounds.left, bounds.bottom);
                    bottomRight.setPosition(bounds.right, bounds.bottom);

                    this.center.recalculatePosition(bounds);
                    this.center.draw(this.ctx);

                };
                ImageCropper.prototype.getMousePos = function (canvas, evt) {
                    var rect = canvas.getBoundingClientRect();
                    return PointPool.instance.borrow(evt.clientX - rect.left, evt.clientY - rect.top);
                };
                ImageCropper.prototype.getTouchPos = function (canvas, touch) {
                    var rect = canvas.getBoundingClientRect();
                    return PointPool.instance.borrow(touch.clientX - rect.left, touch.clientY - rect.top);
                };
                ImageCropper.prototype.onTouchMove = function (e) {
                    if (crop.isImageSet()) {
                        e.preventDefault();
                        if (e.touches.length >= 1) {
                            for (var i = 0; i < e.touches.length; i++) {
                                var touch = e.touches[i];
                                var touchPosition = this.getTouchPos(this.canvas, touch);
                                var cropTouch = new CropTouch(touchPosition.x, touchPosition.y, touch.identifier);
                                PointPool.instance.returnPoint(touchPosition);
                                this.move(cropTouch, e);
                            }
                        }
                        this.draw(this.ctx);
                    }
                };
                ImageCropper.prototype.onMouseMove = function (e) {

                    if (crop.isImageSet()) {
                        var mousePosition = this.getMousePos(this.canvas, e);
                        this.move(new CropTouch(mousePosition.x, mousePosition.y, 0), e);
                        var dragTouch = this.getDragTouchForID(0);
                        if (dragTouch) {
                            dragTouch.x = mousePosition.x;
                            dragTouch.y = mousePosition.y;
                        }
                        else {
                            dragTouch = new CropTouch(mousePosition.x, mousePosition.y, 0);
                        }
                        PointPool.instance.returnPoint(mousePosition);
                        this.drawCursors(dragTouch, e);
                        this.draw(this.ctx);
                    }
                };
                ImageCropper.prototype.move = function (cropTouch, e) {
                    if (this.isMouseDown) {
                        this.handleMove(cropTouch);
                    }
                };
                ImageCropper.prototype.getDragTouchForID = function (id) {
                    for (var i = 0; i < this.currentDragTouches.length; i++) {
                        if (id == this.currentDragTouches[i].id) {
                            return this.currentDragTouches[i];
                        }
                    }
                };
                ImageCropper.prototype.drawCursors = function (cropTouch, e) {
                    var cursorDrawn = false;
                    if (cropTouch != null) {
                        if (cropTouch.dragHandle == this.center) {
                            imageCropperDataShare.setStyle(this.canvas, 'move');
                            cursorDrawn = true;
                        }
                        if (cropTouch.dragHandle != null && cropTouch.dragHandle instanceof CornerMarker) {

                            this.drawCornerCursor(cropTouch.dragHandle, cropTouch.dragHandle.getPosition().x, cropTouch.dragHandle.getPosition().y, e);
                            cursorDrawn = true;
                        }
                    }
                    var didDraw = false;
                    if (!cursorDrawn) {
                        for (var i = 0; i < this.markers.length; i++) {
                            didDraw = didDraw || this.drawCornerCursor(this.markers[i], cropTouch.x, cropTouch.y, e);
                        }
                        if (!didDraw) {
                            imageCropperDataShare.setStyle(this.canvas, 'initial');
                        }
                    }
                    if (!didDraw && !cursorDrawn && this.center.touchInBounds(cropTouch.x, cropTouch.y)) {
                        this.center.setOver(true);
                        imageCropperDataShare.setOver(this.canvas);
                        imageCropperDataShare.setStyle(this.canvas, 'move');
                    }
                    else {
                        this.center.setOver(false);
                    }
                };
                ImageCropper.prototype.drawCornerCursor = function (marker, x, y, e) {
                    if (marker.touchInBounds(x, y)) {
                        marker.setOver(true);
                        if (marker.getHorizontalNeighbour().getPosition().x > marker.getPosition().x) {
                            if (marker.getVerticalNeighbour().getPosition().y > marker.getPosition().y) {
                                imageCropperDataShare.setOver(this.canvas);
                                imageCropperDataShare.setStyle(this.canvas, 'nwse-resize');
                            }
                            else {
                                imageCropperDataShare.setOver(this.canvas);
                                imageCropperDataShare.setStyle(this.canvas, 'nesw-resize');
                            }
                        }
                        else {
                            if (marker.getVerticalNeighbour().getPosition().y > marker.getPosition().y) {
                                imageCropperDataShare.setOver(this.canvas);
                                imageCropperDataShare.setStyle(this.canvas, 'nesw-resize');
                            }
                            else {
                                imageCropperDataShare.setOver(this.canvas);
                                imageCropperDataShare.setStyle(this.canvas, 'nwse-resize');
                            }
                        }
                        return true;
                    }
                    marker.setOver(false);
                    return false;
                };
                ImageCropper.prototype.onTouchStart = function (e) {
                    if (crop.isImageSet()) {
                        this.isMouseDown = true;
                    }
                };
                ImageCropper.prototype.onTouchEnd = function (e) {
                    if (crop.isImageSet()) {
                        for (var i = 0; i < e.changedTouches.length; i++) {
                            var touch = e.changedTouches[i];
                            var dragTouch = this.getDragTouchForID(touch.identifier);
                            if (dragTouch != null) {
                                if (dragTouch.dragHandle instanceof CornerMarker || dragTouch.dragHandle instanceof DragMarker) {
                                    dragTouch.dragHandle.setOver(false);
                                }
                                this.handleRelease(dragTouch);
                            }
                        }

                        if (crop.isImageSet() && this.currentlyInteracting) {
                            var img = this.getCroppedImage(scope.cropWidth, scope.cropHeight);
                            scope.croppedImage = img.src;
                            scope.$apply();
                        }

                        if (this.currentDragTouches.length == 0) {
                            this.isMouseDown = false;
                            this.currentlyInteracting = false;
                        }
                    }
                };
                //http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
                ImageCropper.prototype.drawImageIOSFix = function (ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
                    // Works only if whole image is displayed:
                    // ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
                    // The following works correct also when only a part of the image is displayed:
                    ctx.drawImage(img, sx * this.vertSquashRatio, sy * this.vertSquashRatio, sw * this.vertSquashRatio, sh * this.vertSquashRatio, dx, dy, dw, dh);
                };
                ImageCropper.prototype.detectVerticalSquash = function (img) {
                    var iw = img.naturalWidth, ih = img.naturalHeight;
                    var canvas = document.createElement('canvas');
                    canvas.width = 1;
                    canvas.height = ih;
                    var ctx = canvas.getContext('2d');
                    ctx.drawImage(img, 0, 0);
                    var data = ctx.getImageData(0, 0, 1, ih).data;
                    // search image edge pixel position in case it is squashed vertically.
                    var sy = 0;
                    var ey = ih;
                    var py = ih;
                    while (py > sy) {
                        var alpha = data[(py - 1) * 4 + 3];
                        if (alpha === 0) {
                            ey = py;
                        }
                        else {
                            sy = py;
                        }
                        py = (ey + sy) >> 1;
                    }
                    var ratio = (py / ih);
                    return (ratio === 0) ? 1 : ratio;
                };
                ImageCropper.prototype.onMouseDown = function (e) {
                    if (crop.isImageSet()) {
                        this.isMouseDown = true;
                    }
                };
                ImageCropper.prototype.onMouseUp = function (e) {
                    if (crop.isImageSet()) {
                        imageCropperDataShare.setReleased(this.canvas);
                        this.isMouseDown = false;
                        this.handleRelease(new CropTouch(0, 0, 0));

                        if (this.currentlyInteracting == true) {
                            var img = this.getCroppedImage(scope.cropWidth, scope.cropHeight);
                            scope.croppedImage = img.src;
                            scope.$apply();
                        }
                        this.currentlyInteracting = false;
                    }
                };

                return ImageCropper;
            })();
            angular.element(document).ready(function () {
                var el = angular.element(element[0]);
                var canvas = el[0];
                var width = scope.cropWidth;
                var height = scope.cropHeight;
                var keepAspect = scope.keepAspect;
                var touchRadius = scope.touchRadius;
                crop = new ImageCropper(canvas, canvas.width / 2 - width / 2, canvas.height / 2 - height / 2, width, height, keepAspect, touchRadius);

            });

            scope.$watch('image',
                function (newValue) {
                    if (newValue != null) {
                        var imageObj = new Image();
                        imageObj.addEventListener("load", function () {

                            crop.setImage(imageObj);
                            var img = crop.getCroppedImage(scope.cropWidth, scope.cropHeight);
                            scope.croppedImage = img.src;
                            scope.$apply();
                        }, false);
                        imageObj.src = newValue;
                    }
                }
            );
        }
    };
}]);

angular.module('angular-img-cropper').directive("imgCropperFileread", ['$timeout', function ($timeout) {
    return {
        scope: {
            image: "="
        },
        link: function (scope, element) {
            element.bind("change", function (changeEvent) {
                var reader = new FileReader();
                reader.onload = function (loadEvent) {
                    $timeout(function () {
                        scope.image = loadEvent.target.result;
                    }, 0);
                };
                if (changeEvent.target.files[0]) {
                    reader.readAsDataURL(changeEvent.target.files[0]);
                }
            });
        }
    };
}]);

angular.module('angular-img-cropper').directive('imgCropperFilereadCall', function factory() {
    return{
        scope: {
            control: '='
        },
        link : function (scope) {
            scope.internalControl = scope.control || {};
            scope.internalControl.load = function(elem) {

                var elemental = angular.element(document.querySelector(elem));
                var ev = document.createEvent("MouseEvent");
                ev.initEvent("click", true, false);
                elemental[0].dispatchEvent(ev);
            };
        }
    };
});

angular.module('angular-img-cropper').factory("imageCropperDataShare", function () {
    var share = {};
    var pressed;
    var over;
    share.setPressed = function (canvas) {
        pressed = canvas;
    };

    share.setReleased = function (canvas) {
        if (canvas === pressed) {
            pressed = undefined;
        }
    };

    share.setOver = function (canvas) {
        over = canvas;
    };

    share.setStyle = function (canvas, style) {
        if (pressed !== undefined) {
            if (pressed === canvas) {
                angular.element(document.documentElement).css('cursor', style);
            }
        }
        else {
            if (canvas === over) {
                angular.element(document.documentElement).css('cursor', style);
            }
        }
    };
    return share;
});
angular.module('app')
    .directive('scrollToBottom', function(){
      return {
        restrict: 'A',
        scope: {
          trigger: '=scrollToBottom'
        },
        link: function postLink(scope, elem) {
          scope.$watch('trigger', function() {
            //alert(elem[0].innerHtml);
            elem[0].scrollTop = elem[0].scrollHeight;
          });
        }
      };
    });

//angular.module('app')
//  .directive('setNgAnimate', ['$animate', function ($animate) {
//    return {
//        link: function ($scope, $element, $attrs) {
//            $scope.$watch( function() {
//                return $scope.$eval($attrs.setNgAnimate, $scope);
//            }, function(valnew, valold){
//                $animate.enabled(!!valnew, $element);
//            });
//        }
//    };
//  }]);
angular.module('app')
  .directive('uiButterbar', ['$rootScope', '$anchorScroll', function($rootScope, $anchorScroll) {
     return {
      restrict: 'AC',
      template:'<span class="bar"></span>',
      link: function(scope, el, attrs) {        
        el.addClass('butterbar hide');
        scope.$on('$stateChangeStart', function(event) {
          $anchorScroll();
          el.removeClass('hide').addClass('active');
        });
        scope.$on('$stateChangeSuccess', function( event, toState, toParams, fromState ) {
          event.targetScope.$watch('$viewContentLoaded', function(){
            el.addClass('hide').removeClass('active');
          })
        });
      }
     };
  }]);
angular.module('app')
  .directive('uiFocus', function($timeout, $parse) {
    return {
      link: function(scope, element, attr) {
        var model = $parse(attr.uiFocus);
        scope.$watch(model, function(value) {
          if(value === true) {
            $timeout(function() {
              element[0].focus();
            });
          }
        });
        element.bind('blur', function() {
           scope.$apply(model.assign(scope, false));
        });
      }
    };
  });
 angular.module('app')
  .directive('uiFullscreen', ['uiLoad', 'JQ_CONFIG', '$document', '$window', function(uiLoad, JQ_CONFIG, $document, $window) {
    return {
      restrict: 'AC',
      template:'<i class="fa fa-expand fa-fw text"></i><i class="fa fa-compress fa-fw text-active"></i>',
      link: function(scope, el, attr) {
        el.addClass('hide');
        uiLoad.load(JQ_CONFIG.screenfull).then(function(){
          // disable on ie11
          if (screenfull.enabled && !navigator.userAgent.match(/Trident.*rv:11\./)) {
            el.removeClass('hide');
          }
          el.on('click', function(){
            var target;
            attr.target && ( target = $(attr.target)[0] );            
            screenfull.toggle(target);
          });
          $document.on(screenfull.raw.fullscreenchange, function () {
            if(screenfull.isFullscreen){
              el.addClass('active');
            }else{
              el.removeClass('active');
            }
          });
        });
      }
    };
  }]);

'use strict';

/**
 * 0.1.1
 * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.
 *
 * It is possible to specify a default set of parameters for each jQuery plugin.
 * Under the jq key, namespace each plugin by that which will be passed to ui-jq.
 * Unfortunately, at this time you can only pre-define the first parameter.
 * @example { jq : { datepicker : { showOn:'click' } } }
 *
 * @param ui-jq {string} The $elm.[pluginName]() to call.
 * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function
 *     Multiple parameters can be separated by commas
 * @param [ui-refresh] {expression} Watch expression and refire plugin on changes
 *
 * @example <input ui-jq="datepicker" ui-options="{showOn:'click'},secondParameter,thirdParameter" ui-refresh="iChange">
 */
angular.module('ui.jq', ['ui.load']).
  value('uiJqConfig', {}).
  directive('uiJq', ['uiJqConfig', 'JQ_CONFIG', 'uiLoad', '$timeout', function uiJqInjectingFunction(uiJqConfig, JQ_CONFIG, uiLoad, $timeout) {

  return {
    restrict: 'A',
    compile: function uiJqCompilingFunction(tElm, tAttrs) {

      if (!angular.isFunction(tElm[tAttrs.uiJq]) && !JQ_CONFIG[tAttrs.uiJq]) {
        throw new Error('ui-jq: The "' + tAttrs.uiJq + '" function does not exist');
      }
      var options = uiJqConfig && uiJqConfig[tAttrs.uiJq];

      return function uiJqLinkingFunction(scope, elm, attrs) {

        function getOptions(){
          var linkOptions = [];

          // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method
          if (attrs.uiOptions) {
            linkOptions = scope.$eval('[' + attrs.uiOptions + ']');
            if (angular.isObject(options) && angular.isObject(linkOptions[0])) {
              linkOptions[0] = angular.extend({}, options, linkOptions[0]);
            }
          } else if (options) {
            linkOptions = [options];
          }
          return linkOptions;
        }

        // If change compatibility is enabled, the form input's "change" event will trigger an "input" event
        if (attrs.ngModel && elm.is('select,input,textarea')) {
          elm.bind('change', function() {
            elm.trigger('input');
          });
        }

        // Call jQuery method and pass relevant options
        function callPlugin() {
          $timeout(function() {
            elm[attrs.uiJq].apply(elm, getOptions());
          }, 0, false);
        }

        function refresh(){
          // If ui-refresh is used, re-fire the the method upon every change
          if (attrs.uiRefresh) {
            scope.$watch(attrs.uiRefresh, function() {
              callPlugin();
            });
          }
        }

        if ( JQ_CONFIG[attrs.uiJq] ) {
          uiLoad.load(JQ_CONFIG[attrs.uiJq]).then(function() {
            callPlugin();
            refresh();
          }).catch(function() {
            
          });
        } else {
          callPlugin();
          refresh();
        }
      };
    }
  };
}]);
angular.module('app')
  .directive('uiModule', ['MODULE_CONFIG','uiLoad', '$compile', function(MODULE_CONFIG, uiLoad, $compile) {
    return {
      restrict: 'A',
      compile: function (el, attrs) {
        var contents = el.contents().clone();
        return function(scope, el, attrs){
          el.contents().remove();
          uiLoad.load(MODULE_CONFIG[attrs.uiModule])
          .then(function(){
            $compile(contents)(scope, function(clonedElement, scope) {
              el.append(clonedElement);
            });
          });
        }
      }
    };
  }]);
angular.module('app')
    .directive('uiNav', ['$timeout', '$rootScope', '$location', '$state', function($timeout, $rootScope, $location, $state) {
      return {
        restrict: 'AC',
        link: function(scope, el, attr) {
          var _window = $(window),
              _mb = 768,
              wrap = $('.app-aside'),
              next,
              backdrop = '.dropdown-backdrop';
          // unfolded
          el.on('click', 'a', function(e) {
            next && next.trigger('mouseleave.nav');
            var _this = $(this);
            _this.parent().siblings( ".active" ).toggleClass('active');
            _this.next().is('ul') &&  _this.parent().toggleClass('active') &&  e.preventDefault();
            // mobile
            var newState = _this[0].getAttribute("ui-sref");
            
            //var ignore =  _this[0].classList.contains("ignoreUiSref");
              
            if(newState)
            {
              //ectract only state name, without params
              newState = newState.split("(")[0];
              
              if($state.current.name!=newState)
              {
                $rootScope.showLoading(true);
              }
            }
            
            _this.next().is('ul') || ( ( _window.width() < _mb ) && $('.off-screen').removeClass('show off-screen') );
          });

          // folded & fixed
          el.on('mouseenter', 'a', function(e){
            next && next.trigger('mouseleave.nav');
            $('> .nav', wrap).remove();
            if ( !$('.app-aside-fixed.app-aside-folded').length || ( _window.width() < _mb ) || $('.app-aside-dock').length) return;
            var _this = $(e.target)
                , top
                , w_h = $(window).height()
                , offset = 50
                , min = 150;

            !_this.is('a') && (_this = _this.closest('a'));
            if( _this.next().is('ul') ){
              next = _this.next();
            }else{
              return;
            }

            _this.parent().addClass('active');
            top = _this.parent().position().top + offset;
            next.css('top', top);
            if( top + next.height() > w_h ){
              next.css('bottom', 0);
            }
            if(top + min > w_h){
              next.css('bottom', w_h - top - offset).css('top', 'auto');
            }
            next.appendTo(wrap);

            next.on('mouseleave.nav', function(e){
              $(backdrop).remove();
              next.appendTo(_this.parent());
              next.off('mouseleave.nav').css('top', 'auto').css('bottom', 'auto');
              _this.parent().removeClass('active');
            });

            $('.smart').length && $('<div class="dropdown-backdrop"/>').insertAfter('.app-aside').on('click', function(next){
              next && next.trigger('mouseleave.nav');
            });

          });

          wrap.on('mouseleave', function(e){
            next && next.trigger('mouseleave.nav');
            $('> .nav', wrap).remove();
          });
        }
      };
    }]);
angular.module('app')
  .directive('uiScrollTo', ['$location', '$anchorScroll', function($location, $anchorScroll) {
    return {
      restrict: 'AC',
      link: function(scope, el, attr) {
        el.on('click', function(e) {
          $location.hash(attr.uiScrollTo);
          $anchorScroll();
        });
      }
    };
  }]);

angular.module('app')
  .directive('uiShift', ['$timeout', function($timeout) {
    return {
      restrict: 'A',
      link: function(scope, el, attr) {
        // get the $prev or $parent of this el
        var _el = $(el),
            _window = $(window),
            prev = _el.prev(),
            parent,
            width = _window.width()
            ;

        !prev.length && (parent = _el.parent());
        
        function sm(){
          $timeout(function () {
            var method = attr.uiShift;
            var target = attr.target;
            _el.hasClass('in') || _el[method](target).addClass('in');
          });
        }
        
        function md(){
          parent && parent['prepend'](el);
          !parent && _el['insertAfter'](prev);
          _el.removeClass('in');
        }

        (width < 768 && sm()) || md();

        _window.resize(function() {
          if(width !== _window.width()){
            $timeout(function(){
              (_window.width() < 768 && sm()) || md();
              width = _window.width();
            });
          }
        });
      }
    };
  }]);
angular.module('app')
  .directive('uiToggleClass', ['$timeout', '$document', function($timeout, $document) {
    return {
      restrict: 'AC',
      link: function(scope, el, attr) {
        el.on('click', function(e) {
          e.preventDefault();
          var classes = attr.uiToggleClass.split(','),
              targets = (attr.target && attr.target.split(',')) || Array(el),
              key = 0;
          angular.forEach(classes, function( _class ) {
            var target = targets[(targets.length && key)];            
            ( _class.indexOf( '*' ) !== -1 ) && magic(_class, target);
            $( target ).toggleClass(_class);
            key ++;
          });
          $(el).toggleClass('active');

          function magic(_class, target){
            var patt = new RegExp( '\\s' + 
                _class.
                  replace( /\*/g, '[A-Za-z0-9-_]+' ).
                  split( ' ' ).
                  join( '\\s|\\s' ) + 
                '\\s', 'g' );
            var cn = ' ' + $(target)[0].className + ' ';
            while ( patt.test( cn ) ) {
              cn = cn.replace( patt, ' ' );
            }
            $(target)[0].className = $.trim( cn );
          }
        });
      }
    };
  }]);
angular
	.module("hotelApp.activityDto", [ "ngResource" ])
	//app
	.factory("HotelActivityDto", function($resource) {
	return $resource("./activity/customer/:customerId/activity/:activityId", {
		customerId: '@customerId',
		activityId: '@activityId'
		
	}, {
		update: {
			method: "PUT",
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		},
		get: {
			method: 'get' ,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		},
		//getByHotelId: {
		//	method: 'get' ,
		//	headers: {
		//		'Content-Type': 'application/json;charset=UTF-8',
		//		'Accept': 'application/json, text/plain, */*'
		//	}
		//},
		checkLogin: {
			method: 'POST' ,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		},
		remove: {
			method: "DELETE",
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		}
		,save: {
			method: 'POST'
			,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		}
	});
});
	
//
//
////(function(angular, SockJS, Stomp, _, undefined) {
//angular.module("hotelApp.activityService", [])
////app	
//	.service("ActivityService", function($q, $timeout, $rootScope, HotelState) {
//
//	var activityService = {}, activityListener = $q.defer(), activitySocket = {
//			client: null,
//			stomp: null
//		},
//
//	//List of already sended but jet not received message IDs 
//	activityIds = [];
//
//	
//	var getTimeFromDate = function(date)
//	{
//		if(!date)
//			return undefined;
//		
//		if(date instanceof Date)
//		{
//			return date.getTime();
//		}
//		
//		return date;
//	};
//	
//	activityService.RECONNECT_TIMEOUT = 30000;
//
//	//Path to Spring Controller
//	activityService.ACTIVITY_SOCKET_URL = "/" + ($rootScope.HOST_SUFFIX? $rootScope.HOST_SUFFIX : "") + "activity/activity";
//	//activityService.ACTIVITY_SOCKET_URL = "/activity/activity";
//
//	//Unique Topic of this Chat
//	activityService.ACTIVITY_TOPIC = "/activitytopic/message";
//
//	// TODO ???
//	activityService.ACTIVITY_BROKER = "/app/activity";
//
//	//receive to Controller
//	activityService.receive = function() {
//		// send server-promise to client controller
//		return activityListener.promise;
//	};
//
//	
//	
//	//send from Controller
//	activityService.send = function(activityObj, activityId) {
//		//generate random message activityId
//		if(!activityId)
//        {
//            activityId = (new Date).getTime();
//            activityObj.activityId = activityId;
//        }
//		
//		//Socket SEND Methode
//		var response = activitySocket.stomp.send(activityService.ACTIVITY_BROKER, {
//			priority: 9
//		}, JSON.stringify(activityObj)
//        );
//        
//		activityIds.push(activityId);
//	};
//
//	var reconnect = function() {
//		$timeout(function() {
//			initialize();
//		}, this.RECONNECT_TIMEOUT);
//	};
//
//	var getActivity = function(data) {
//		var activity = JSON.parse(data);
//		
//		var out = activity;
//		out.sendTime = new Date(activity.sendTime);
//		//out.validTo = new Date(activity.validTo);
//		if (_.contains(activityIds, activity.activityId)) {
//			out.self = true;
//			activityIds = _.remove(activityIds, activity.activityId);
//		}
//		return out;
//	};
//
//	var startListener = function() {
//
//		// SUBSCRIBE a UNIQUE TOPIC!!! Other i will not get
//		activitySocket.stomp.subscribe(activityService.ACTIVITY_TOPIC, function(data) {
//			activityListener.notify(getActivity(data.body));
//		});
//	};
//
//    activityService.checkSocketConnection = function() {
//
//        if(!activitySocket.stomp || !activitySocket.stomp.connected)
//        {
//            initialize();
//        }
//    };
//
//    var initialize = function() {
//		activitySocket.client = new SockJS(activityService.ACTIVITY_SOCKET_URL);
//		activitySocket.stomp = Stomp.over(activitySocket.client);
//		activitySocket.stomp.connect({}, startListener);
//		activitySocket.stomp.onclose = reconnect;
//	};
//
//	initialize();
//	return activityService;
//});
////})(angular, SockJS, Stomp, _);
//	angular.module("hotelApp.chatService", []).
app.service("ChatService", function($q, $timeout, $rootScope) {
   
    var socketService = {}, chatListener = $q.defer(), chatSocket = {
            client: null,
            stomp: null
        },

    //List of already sended but jet not received message IDs 
    messageIds = [], notSendMessageObjs = [];

    //Write in console!!!
    socketService.debugMode = 0;

    //ONLY IF SAVE THE CREATED CHATSubscription, WE CAN unsubscribe IT !!!!
    socketService.chatSubscription = "";

    // conInterval -> 'setInterval', that will try to reconnect on error untill 'clearInterval'
    socketService.conInterval = false;

    socketService.configObj = {

        //CHATSubscription url
        chatSubscriptionQueue : null,

        useHeartbeat: false,

        headers: {

        },

        connectHeaders: {
            //login: {},
            //passcode: {},
            //host: ""
        }
    };

    //reconnect setInterval timeout
    socketService.RECONNECT_TIMEOUT = 30000;

    //Path for basic SocjkJs -> to Spring Controller
    socketService.CHAT_SOCKET_URL = "/"+($rootScope.HOST_SUFFIX? $rootScope.HOST_SUFFIX : "")+"chat/chat";

    //Unique Topic of this Chat // part of SUBSCRIBE_URL
    socketService.CHAT_TOPIC = "/chattopic/message";

    // TODO ???
    // stomp.send() URL
    socketService.CHAT_BROKER = "/app/chat";

    //########################################
    
    //################ START INDIVIDUAL #######################
    //receive to Controller
    socketService.disconnectSocket = function () {

        if (chatSocket.stomp && chatSocket.stomp.connected) {
            chatSocket.stomp.disconnect(function () {
                //alert("See you next time!");
            });
        }

    }

    //receive to Controller
    socketService.getNotSendChat = function() {
        // send server-promise to client controller
        return notSendMessageObjs;
    };
    
    socketService.receiveChat = function () {
        // send server-promise to client controller
        return chatListener.promise;
    };

    socketService.resubscribeWithCustomerData = function (hotelState) {
        socketService.hotelState = hotelState;

        if (chatSocket.stomp && chatSocket.stomp.connected) 
        {
            //### RE-SUBSCRIBE CHATS, IF LOGGED IN
            var chatSubscriptionQueueTemp = socketService.hotelState && socketService.hotelState.profileData.id > 0 ? socketService.CHAT_TOPIC + "/" + socketService.hotelState.profileData.id : null;

            //check if subscription exists or was changed
            if(socketService.configObj && socketService.configObj.chatSubscriptionQueue && socketService.configObj.chatSubscriptionQueue==chatSubscriptionQueueTemp)
            {
                return;
            }
            
            if (socketService.chatSubscription) {
                socketService.chatSubscription.unsubscribe();
                $rootScope.myWait(2000);
            }

            if (socketService.hotelState && socketService.hotelState.profileData.id > 0) {
                subscribeChatTopic();
            }

            // ###########################################
        }
        else {
            initConnect();
        }
    }

    //entferne nicht gesendeten element
    var removeMsgFromArray = function (messageId) {
        for (var u = 0; u < notSendMessageObjs.length; u++) {
            try {
                var nextMsgObjJson = JSON.parse(notSendMessageObjs[u]);
            }
            catch (e) {
                nextMsgObjJson = notSendMessageObjs[u];
            }

            if (nextMsgObjJson.messageId == messageId) {
                notSendMessageObjs.splice(u, 1);
                return;
            }
        }
    }

    socketService.removeMsg = function (messageId) {
        return removeMsgFromArray(messageId);
    }

    var getMessage = function (data) {
        var message = JSON.parse(data);
        var out = message;
        out.message = decodeURIComponent(message.message);
        out.sendTime = new Date(message.sendTime);
        if (_.contains(messageIds, message.messageId)) {
            out.self = true;
            removeMsgFromArray(message.messageId);
            messageIds = _.remove(messageIds, message.messageId);
        }
        return out;
    };

    //send from Controller
    socketService.sendChat = function(message, senderId, receiverId, hotelStaff, messageId) {
        //generate random message id

        var isNew = false;

        if(!messageId)
        {
            isNew = true;
            messageId = Math.floor(Math.random() * 1000000);
        }

        var msgObj = JSON.stringify({ //MESSAGE CONTENT
            message: encodeURIComponent(message),
            receiverId : receiverId,
            senderId: senderId,
            hotelStaff: hotelStaff,
            creationTime: (new Date).getTime(),
            messageId: messageId
        });

        //Socket SEND Methode
        if(!chatSocket.stomp || !chatSocket.stomp.connected)
        {
            socketService.checkSocketConnection().then(function()
            {
                setTimeout(function() {
                    socketService.sendChat(message, senderId, receiverId, hotelStaff, messageId);
                }, 500);
            });
        }
        else
        chatSocket.stomp.send(socketService.CHAT_BROKER, {
            priority: 9
        }, msgObj);


        var msgJson = JSON.parse(msgObj);

        msgJson.decodeMessage = decodeURIComponent(msgJson.message);


        if(isNew)
        {
            messageIds.push(messageId);
            notSendMessageObjs.push(msgJson);
        }

        msgJson.sendTime = new Date();

        return msgJson;
    };


    // ############## END INDIVIDUAL ######################

    socketService.stopAndEmptyCustomer = function () {
        socketService.hotelState = null;

        socketService.disconnectSocket();
    }

    socketService.checkSocketConnection = function () {

        var defer = $q.defer();
        
        setTimeout(function(){
            if (!chatSocket.stomp || !chatSocket.stomp.connected) 
            {
                initConnect();
                defer.resolve();
            }
        }, 1500)
       
        return defer.promise;
    };

    //var getMessage = function (data) {
    //    var message = JSON.parse(data), out = {};
    //
    //    return message;
    //};

    var subscribeChatTopic = function () {
        socketService.configObj.chatSubscriptionQueue = socketService.hotelState && socketService.hotelState.profileData.id > 0 ? socketService.CHAT_TOPIC + "/" + socketService.hotelState.profileData.id : null;

        if (!socketService.configObj.chatSubscriptionQueue) {
            //NO chatSubscription WITHOUT CUSTOMER_ID
            return;
        }

        socketService.chatSubscription =
            // #### START WsWorker.chatSubscription
            chatSocket.stomp.subscribe(socketService.configObj.chatSubscriptionQueue,
                /*onMessage*/
                function (message) {

                    chatListener.notify(getMessage(message.body));

                    //TODO Eugen: acknolidge Server, about receive!!!! 
                    //TODO Eugen: -> DELIEVERED TO CUSTOMER!!!!!
                    chatSocket.stomp.ack(message.headers["message-id"], message.chatSubscription, message.headers);
                }
                //TODO Eugen: //, socketService.configObj.headers
            );
    }

    var initConnect = function (e) {
        //ONLY IF NOW NOT CONNECTED!!!
        if (!chatSocket.stomp || !chatSocket.stomp.connected) {

            //WsWorker.debugMode = 1;

            if (socketService.debugMode)
                console.log("Connecting...");

            //TODO Eugen test it!!!
            socketService.configObj = e ? e.data.config : socketService.configObj;

            //var ws = new WebSocket(chatSocket.config.wsUrl);
            //chatSocket.stomp = Stomp.over(ws);

            if(!chatSocket.client && !chatSocket.stomp)
            {
                chatSocket.client = new SockJS(socketService.CHAT_SOCKET_URL);
                chatSocket.stomp = Stomp.over(chatSocket.client);
            }

            if (!socketService.debugMode)
                chatSocket.stomp.debug = null;

            //TODO Eugen test it!!!
            if (socketService.configObj.useHeartbeat) {
                chatSocket.stomp.heartbeat.outgoing = 20000;
                chatSocket.stomp.heartbeat.incoming = 20000;
            }

            chatSocket.stomp.connect(socketService.configObj.connectHeaders,
                /*onConnect*/function () {

                    subscribeChatTopic();
                    //subscribeActivityTopic();

                    // ### END WsWorker.chatSubscription

                    if (socketService.debugMode)
                        console.log("Connected");
                },
                /*onError*/function (error) {

                    if (socketService.debugMode)
                        console.log("Error: " + (error ? error : "unknown"));

                    if ((!chatSocket.stomp || !chatSocket.stomp.connected) && !socketService.conInterval) {

                        
                        /*
                        //if error -> TRY TO RE-CONNECT EVERY 30 sec !!
                        // conInterval -> 'setInterval', that will try to reconnect on error untill 'clearInterval'
                        socketService.conInterval = setInterval(function () {
                            if (chatSocket.stomp && chatSocket.stomp.connected) 
                            {
                                clearInterval(socketService.conInterval);
                                socketService.conInterval = false;
                            }
                            initConnect();
                        }, socketService.RECONNECT_TIMEOUT);
                        */
                        var timerWorker = $rootScope.getTimeWebWorker();
                        socketService.conInterval = timerWorker.setInterval(
                            function(){
                                if (chatSocket.stomp && chatSocket.stomp.connected) {
                                    timerWorker.clearInterval(socketService.conInterval);
                                    //clearInterval(socketService.conInterval);
                                    socketService.conInterval = false;
                                }
                                initConnect();
                            }
                            ,socketService.RECONNECT_TIMEOUT);
                    }

                }
                //TODO Eugen: HOST -> , socketService.configObj.host
            );
        }
    }

    return socketService;
});
angular.module("hotelApp.customerDto", [ "ngResource" ]).factory("CustomerDto", function($resource) {
	return $resource("./customers/customers/:id/requesterId/:requesterId", {
		
		id: '@id',
		hotelId: '@hotelId',
		requesterId: '@requesterId',
		password: '@password'  //password will be sended automaticly in header , good because java dto-object has no password field to receive!
	}, {
		update: {
			method: "PUT",
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		},
		get: {
			method: 'get' ,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		},
		checkLogin: {
			method: 'POST' ,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		},
		remove: {
			method: "DELETE",
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		},
		save: {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		}
	});
});
//app
angular.module("hotelApp.hotelCheckinService", [ "ngResource", "hotelApp.sessionCustomerService", "hotelApp.hotelDto", "hotelApp.sessionCustomerService", "hotelApp.hotelState" ])
    .factory("HotelCheckin", function($q, $rootScope, $resource, $state, $location, $cookies, $timeout, HotelDto, SessionCustomer, HotelState, HotelService, CustomerDto, $filter, $log, NotificationService ) {
        
        var _self = this;
        
        var deferredCheckin = $q.defer();

        var service = {

            hotelId: 0,

            checkinRestService : $resource("./customers/updateCheckin", {
                password: '@password'
            }, {
                get: {
                    method: 'GET' ,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*'
                    }
                }
                ,update: {
                    method: 'POST' ,
                    headers: {
                        //Problems here
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*'
                    }
                }
            }),
            
            hotelByCodeService : $resource("./hotels/customer/:customerId/hotelCode/:hotelCode", {
                hotelCode: '@hotelCode',
                customerId: '@customerId'
            }, {
                get: {
                    method: 'GET' ,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*'
                    }
                }
            }),
            
            hotelCode: null,
            
            checkinSuccess : false,
            checkinResponse : false,
            
            //checkinDates : {
                checkinFrom : null,
                checkinTo : null,
            //},
                
            config: function(){

                _self = this;

                _self.hotelState = HotelState;
                _self.hotelService = HotelService;
                
                HotelState.getDeferredState().then(function(hotelState){
                    _self.hotelState = hotelState;
                    deferredCheckin.resolve(_self);
                });
                
            },
            
            getCheckinRestService: function(){
                
                return _self.checkinRestService;
            },

            resetWholeInfo: function(){
                _self.resetHotelSelectInfo();
                _self.hotelCode = null;
            },
            
            resetHotelSelectInfo: function(){
                _self.checkinSuccess = false;
                _self.checkinResponse = false;
                _self.hotelId= 0;
                //_self.hotelCode= undefined;
            },
            
            getDeferredState: function () {
                return deferredCheckin.promise;
            }
            ,

            ///**
            // * Load hotels based on the available hotel identification indicators
            // */
            //loadHotels : function() {
            //
            //    return HotelDto.query({customerId: $scope.hotelState.profileData.id})
            //},
            //
            //loadHotelCities = function() {
            //
            //    HotelCitiesService.getCities({customerId:$scope.hotelState.profileData.id}, function(cityArray) {
            //        $scope.hotelCitiesArray = cityArray;
            //    });
            //},
            //
            //getHotelByCity = function(city) {
            //
            //    var HotelByCityService = $resource('./hotels/customer/:customerId/hotel/city/:city', {customerId:'@customerId', city:'@city' }, {'getHotelsByCity': {method: 'GET', isArray: true}});
            //
            //    HotelByCityService.getHotelsByCity({customerId:$scope.hotelState.profileData.id, city: city}, function(hotelsArray) {
            //        $scope.hotelsFilteredByCityArray = hotelsArray;
            //    });
            //},

            doCheckin: function() {

                var checkinDeffered = $q.defer();
                
                if(_self.checkinSuccess || _self.checkinResponse)
                {
                    checkinDeffered.resolve();
                    return checkinDeffered.promise;
                }

                _self.checkinSuccess = false;
                _self.checkinResponse = false;

                if(_self.hotelId<=0 && !_self.hotelCode)
                {
                    checkinDeffered.resolve();

                    return checkinDeffered.promise;
                }
    
                //var fullCheckin = _self.hotelCode? true : false;
    
                var checkinDateFrom = _self.checkinFrom!=null? new Date(_self.checkinFrom):null;
                var checkinDateTo = _self.checkinFrom!=null? new Date(_self.checkinFrom):null;
    
                if(!_self.hotelId && _self.hotelId>0 && !_self.hotelCode)
                {
                    $rootScope.rootErrorMsg = $filter('translate')('alert.checkin.chooseHotel');
                    $rootScope.topPage();
                    $rootScope.showLoading(false);
                    checkinDeffered.resolve();

                    return checkinDeffered.promise;
                }
    
                if(checkinDateFrom==null)
                {
                    //$scope.mainState.errorMsg = "Please choose a valid start date";
                    //return;
                    checkinDateFrom = new Date();
    
                }
    
                if(checkinDateTo==null)
                {
                    //$scope.mainState.errorMsg = "Please choose a valid checkout date";
                    //return;
                    checkinDateTo = new Date();
    
                    var sundayOfLastWeek = checkinDateTo.getDate() - checkinDateTo.getDay();
                    var sundayOfThisWeek = sundayOfLastWeek + 7; //letzte tag is Samstag, aber wir brauchen Sonntag in DE
                    //End of week: Sunday at 12:00
                    checkinDateTo.setDate(sundayOfThisWeek);
                    checkinDateTo.setHours(12);
    
                    ////If we checkin at sunday (first day), than +7 days
                    //if(checkinDateFrom.getDay()==0)
                    //{
                    //	checkinDateTo.setDate(checkinDateTo.getDate() + 7);
                    //}
    
                }
    
                if(_self.hotelId)
                    _self.hotelState.profileData.hotelId = _self.hotelId;
    
                if(_self.hotelCode)
                    _self.hotelState.profileData.hotelCode = _self.hotelCode;
    
                //if(fullCheckin)
                //    _self.hotelState.profileData.fullCheckin = fullCheckin;

                _self.hotelState.profileData.checkinFrom = checkinDateFrom;

                _self.hotelState.profileData.checkinTo = checkinDateTo;
    
                if(_self.hotelState.profileData.checkedIn && (_self.hotelState.profileData.fullCheckin || !_self.hotelCode))
                {
                    checkinDeffered.resolve();

                    //TODO Eugen: whot to do if already checkin???
                    return checkinDeffered.promise;
                }
                
                //Eugen: NO LOADING IN SERVICE: ONLY BEFORE AND AFTER!!!
                //$rootScope.showLoading(true);

                if(_self.hotelState.profileData.id ==0 || !_self.hotelState.profileData.logged)
                {
                    _self.hotelState.profileData.checkedIn = true;
                    
                    if(_self.hotelState.profileData.hotelId && _self.hotelState.profileData.hotelId>0)
                    {
                        NotificationService.resubscribeWithHotelData();

                        $state.go("app.hotelPreview", {hotelId: _self.hotelState.profileData.hotelId});
                    }
                    
                    else if(!_self.hotelState.profileData.hotelCode)
                    {
                        _self.hotelState.profileData.hotelCode = _self.hotelService.getCookie('hotelicoNoLoginHotelCode');

                    }
                    else if(_self.hotelState.profileData.hotelCode)
                    {
                        _self.hotelService.setCookie('hotelicoNoLoginHotelCode', _self.hotelState.profileData.hotelCode);

                        if(_self.hotelState.profileData.hotelCode=="demo")
                        {
                            var demoHotelIdElt = document.getElementById("demoHotelId");

                            if(demoHotelIdElt && demoHotelIdElt.innerText)
                            {
                                var demoHotelId = demoHotelIdElt.innerText;
                                //$scope.getUpdateMainHotelObject(demoHotelId).then(function(hotelObj){
                                _self.hotelState.profileData.hotelId = demoHotelId;
                                _self.hotelService.setCookie('hotelicoNoLoginHotelId', _self.hotelState.profileData.hotelId);

                                NotificationService.resubscribeWithHotelData();

                                $state.go("app.hotelPreview", {hotelId: _self.hotelState.profileData.hotelId});
                                //});
                            }
                        }
                        else{
                            _self.hotelByCodeService.get({customerId : _self.hotelState.profileData.id , hotelCode: _self.hotelState.profileData.hotelCode}, function(hotelObj){
                                
                                if(!hotelObj.id)
                                {
                                    $rootScope.rootErrorMsg = $filter('translate')('alert.error.noHotelFound');
                                    $rootScope.showLoading(false);
                                    _self.hotelState.profileData.checkedIn = false;
                                    _self.hotelState.profileData.hotelId = 0;
                                    _self.hotelState.profileData.hotelCode = "";
                                    _self.hotelService.setCookie('hotelicoNoLoginHotelCode', "");
                                    _self.hotelService.setCookie('hotelicoNoLoginHotelId', "");

                                    checkinDeffered.resolve();
                                }
                               else{
                                    _self.hotelState.profileData.hotelId = hotelObj.id;
                                    _self.hotelService.setCookie('hotelicoNoLoginHotelId', _self.hotelState.profileData.hotelId);

                                    NotificationService.resubscribeWithHotelData();

                                    $state.go("app.hotelPreview", {hotelId: _self.hotelState.profileData.hotelId});
                                }
                         
                            });
                        } 
                    }
                    
                    //TODO Eugen: if no hotelId and hotelCode???
                    
                    checkinDeffered.reject("noLogin")
                    return checkinDeffered.promise;
                }
                
                //TODO Eugen: angular error receive!
                var checkinResponse = _self.getCheckinRestService().update({ id : _self.hotelState.profileData.id }, _self.hotelState.profileData, function()
                {
                    $rootScope.rootErrorMsg = false;
                    _self.checkinResponse = true;

                    _self.hotelState.setProfileData(checkinResponse);
    
                    if(checkinResponse.id && checkinResponse.id>0)
                    {
    
                        if(checkinResponse.errorResponse && checkinResponse.errorResponse!='undefined')
                        {
                            $rootScope.rootErrorMsg = checkinResponse.errorResponse;
                            $rootScope.topPage();
                            $rootScope.showLoading(false);
                            //_self.checkinResponse = false;
                            checkinDeffered.resolve();

                            return
                        }
                        else if(checkinResponse.hotelId > 0)
                        {
                            _self.checkinSuccess = true;

                            NotificationService.resubscribeWithHotelData();

                            //reset info for next checkin process
                            _self.hotelCode = null;
                            _self.hotelId = 0;
                            
                            //Eugen: double call
                            //_self.hotelState.emptyCheckinData();
    
                            $rootScope.showLoading(true);
                            $state.go("app.hotel");
                            checkinDeffered.resolve();
                        }
                        else if(checkinResponse.hotelId == 0)
                        {
                            $rootScope.rootErrorMsg = $filter('translate')('alert.error.noHotelFound');
                            $rootScope.showLoading(false);
                            //_self.checkinResponse = false;
                            checkinDeffered.resolve();

                        }
                    }

                    checkinDeffered.resolve();


                }, function(error){
                    
                    //$scope.mainState.errorMsg = "connection problem";
                    $rootScope.showLoading(false);
                    checkinDeffered.resolve();

                });
    
                $timeout(function(){
                    if(_self.doCheckin) {
                        _self.doCheckin();
                    }
                }, 8000);
                
                return checkinDeffered.promise;
            },

            //TODO Eugen: if not logged
            resetCheckin : function()
            {
                _self.hotelService.setCookie('hotelicoNoLoginHotelCode', "");
                _self.hotelService.setCookie('hotelicoNoLoginHotelId', "");
                
                if(_self.hotelState)
                {
                    if(_self.hotelState.profileData.id>0)
                    {
                        var user = CustomerDto.get({id:_self.hotelState.profileData.id, requesterId: _self.hotelState.profileData.id}, function() {
    
                            //Eugen: REST HOTEL_ID
                            user.hotelId = "0";
    
                            //if($rootScope.virtualHotel.id>0)
                            //{
                            //    user.hotelId = $rootScope.virtualHotel.id;
                            //}
    
                            if(user.checkedIn)
                            {
                                $rootScope.showLoading(true);
    
                                _self.getCheckinRestService().update({id: user.id}, user, function(response){

                                    _self.hotelState.setProfileData(response);

                                    _self.hotelState.emptyCheckinData();

                                    NotificationService.resubscribeWithHotelData();

                                    $state.go("app.checkin");
    
                                }, function(error){
                                    $rootScope.rootErrorMsg = error;
                                });
                            }else{
                                _self.hotelState.updateState(user);
                            }
    
                        });
                    }
                    else //IF CHECKIN, BUT NOT LOGGED
                    {
                        _self.hotelState.profileData.hotelId = 0;
                        _self.hotelState.profileData.checkedIn = false;
                        _self.hotelState.profileData.hotelName = undefined;
                        _self.hotelState.profileData.hotelCity = undefined;
                        _self.hotelState.profileData.hotelCode = undefined;
                        $state.go("app.checkin");
                    }
                }
    
            },
            
            checkHotelCode: function(hotelId, inputHotelCode){

                var checkHotelCodeDeffered = $q.defer();
                
                var requesterId = _self.hotelState.profileData.id? _self.hotelState.profileData.id : -1;
                
                _self.hotelByCodeService.get({customerId : requesterId , hotelCode: inputHotelCode}, function(hotelObj){

                    if(hotelObj.id && hotelObj.id==hotelId)
                    {
                        checkHotelCodeDeffered.resolve(hotelObj);
                    }
                    else{
                        $rootScope.showLoading(false);

                        checkHotelCodeDeffered.reject($filter('translate')('alert.error.wrongHotelCode'));
                    }

                }, function(error){
                    checkHotelCodeDeffered.reject(error);
                });
                
                return checkHotelCodeDeffered.promise;
            }
        
     };

      service.config();  
      //service.getState().setStaticService(service);  
        
     return service;
        
});
 

angular.module("hotelApp.hotelDto", [ "ngResource" ])
	.factory("HotelDto", function($resource) {
	return $resource("./hotels/customer/:customerId/hotel/:hotelId", {
		hotelId: '@hotelId',
		customerId: '@customerId'
	}, {
		update: {
			method: "PUT",
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		},
		get: { 
			//cache: true, 
			method: 'get' },
		getList: { 
			//cache: true, 
			method: 'get',
			isArray: true,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		},
		remove: {
			method: "DELETE",
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		}
		
	});
});


//app
angular.module("hotelApp.hotelLoginService", [ "ngResource", "hotelApp.sessionCustomerService", "hotelApp.sessionCustomerService", "hotelApp.hotelState", "hotelApp.customerDto", 'hotelApp.hotelService' ])
    .factory("HotelLogin", function($q, $rootScope, $resource, $state, $location, $cookies, $timeout, SessionCustomer, HotelState, $filter, $window, CustomerDto, HotelService, LogoutCustomer, NotificationService, HotelNotification) {
        
        var _self = this;
        
        var _hotelState = HotelState;
        var _hotelService = HotelService;
        
        var deferredLogin = $q.defer();

        var service = {

            loginRestService : $resource("./customers/login/email/:loginemail/password/:loginpassword", {
                loginemail: '@loginemail',
                loginpassword: '@loginpassword'
            }, {
                get: {
                    method: 'GET' ,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*'
                    }
                }
                ,check: {
                    method: 'POST' ,
                    headers: {
                        //Problems here
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*'
                    }
                }
                ,update: {
                    method: "PUT",
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*'
                    }
                }
            }),

            loginSocialService : $resource("./social/login/auth/:type/:loginId", {
                type: '@type',
                loginId: '@loginId'
            }, {
                get: {
                    method: 'GET' ,
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*'
                    }
                }
                ,check: {
                    method: 'POST' ,
                    headers: {
                        //Problems here
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*'
                    }
                }
                ,update: {
                    method: "PUT",
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*'
                    }
                }
            }),
            
            initLogin: function(){

                _self = this;
                
            },

            /**
             * If user requested State, then requires login, save the requested State hier and open login popup!
             */
            loginRequestedState : null,
            loginRequestedStateParams : {},

            getLoginRequestedState: function(){

                if (_self.loginRequestedState)
                {
                    return _self.loginRequestedState;
                }
                
                //if there no requested state, return default
                return _hotelState.getDefaultStartState();
            },
            
            getLoginRequestedStateParams: function(){

                return _self.loginRequestedStateParams;
            },

            setLoginRequestedState: function(requestedState, requestedStateParams)
            {
                _self.loginRequestedState = requestedState;
                _self.loginRequestedStateParams = requestedStateParams;

            },
            
            resetRequestedState: function(){
                _self.loginRequestedState = null;
                _self.loginRequestedStateParams = {}
            },

            fillPreLoginProperties: function(logingObj)
            {
                // ############ hide popup ###################
                if(_hotelState.profileData.hideCheckinPopup)
                    logingObj.hideCheckinPopup = true;
                
                if(_hotelState.profileData.hideHotelListPopup)
                    logingObj.hideHotelListPopup = true;

                if(_hotelState.profileData.hideWallPopup)
                    logingObj.hideWallPopup = true;

                // ########## checkin Info ###################
                if(!logingObj.hotelCode && _hotelState.profileData.hotelCode)
                {
                    logingObj.hotelCode = _hotelState.profileData.hotelCode;
                }

                if((!logingObj.hotelId || logingObj.hotelId==0) && (_hotelState.profileData.hotelId!="0" || _hotelState.profileData.hotelId>0))
                {
                    logingObj.hotelId = _hotelState.profileData.hotelId;
                }
                
                logingObj.checkinFrom = _hotelState.profileData.checkinFrom;
                logingObj.checkinTo = _hotelState.profileData.checkinTo;
                
                return logingObj;
            },

            loginSocial : function (type, eltId) {

                $rootScope.clickLoading(null, eltId);
                $rootScope.showLoading(true);

                var socialLogin = new _self.loginSocialService();

                $rootScope.rootErrorMsg = false;

                socialLogin.prefferedLanguage = _hotelState.getPrefferedLanguage();

                socialLogin = _self.fillPreLoginProperties(socialLogin);

                socialLogin.guestAccount = true;

                var requestedState = _self.getLoginRequestedState();
                var requestedStateParams = _self.getLoginRequestedStateParams();
                
                //TODO eugen: test it!!!
                socialLogin.systemMessages["requestedState"] = requestedState;
                socialLogin.systemMessages["requestedStateParams"] = JSON.stringify(requestedStateParams);

                _self.loginId = new Date().getTime()+"";
                _self.socType = type+"";
                
                _self.loginSocialService.check({type: type, loginId: _self.loginId}, socialLogin, function(resp){
                   
                   if(_self.socType && _self.loginId)
                   {
                       $rootScope.clickLoading(null, null, 'social/login/auth/'+_self.socType+'/'+_self.loginId);
                   }
                    //_self.loginSocialService.get({type: type, loginId: _self.loginId});
                    _self.loginId = null;
                    _self.socType = null;
                }, function(error){
                    $rootScope.showLoading(false);
                    $rootScope.rootErrorMsg="login error";
                });
                
            },
            
            guestRegister : function (guestUser) {

                var guest = new CustomerDto();
                
                $rootScope.rootErrorMsg = false;
                
                guest.firstName = guestUser.firstName;
                guest.sex = guestUser.sex;
    
                guest.prefferedLanguage = _hotelState.getPrefferedLanguage();
    
                if (guest.sex == undefined) {
                    //if (_self.loginTabState.guest) {
                        $rootScope.rootErrorMsg = $filter('translate')('alert.error.noGender');
                    //}
                    return;
                }
    
                if (guest.firstName == undefined || guest.firstName == "") {
                    //guest.firstName = "anonymous";
                    //if (_self.loginTabState.guest) {
                        $rootScope.rootErrorMsg = $filter('translate')('alert.error.noName');
                    //}
                    return;
                }
    
                if (guest.lastName == undefined) {
                    guest.lastName = "";
                }

                guest = _self.fillPreLoginProperties(guest);
                
                guest.guestAccount = true;
    
                $rootScope.showLoading(true);
                $rootScope.rootErrorMsg = false;

                guest.$save(function (responseUser) {
    
                    $rootScope.showLoading(false);
    
                    if (responseUser.id && responseUser.id > 0) {
                       
                        //TODO Eugen???
                        //_self.localState.currentUser = responseUser;
    
                        if (responseUser.id>0) {
                            //$cookies.hotelicoUserId = $scope.localState.currentUser.id;
                            HotelService.setCookie('hotelicoUserId', responseUser.id);
    
                            $cookies.hotelicoUserEmail = responseUser.eMail;
    
                            $cookies.hotelicoLogout = false;
    
                            //if(_hotelState)
                            //{
                            //    _hotelState.setProfileData(responseUser);
                            //}
                            ////TODO Eugen:
                            //else
                            {
                                _hotelState.initState(responseUser);
                            }
    
                            //$location.path('/app/checkin');
                            $rootScope.closeModal();
                            
                            var requestedState = _self.getLoginRequestedState();
                            var requestedStateParams = _self.getLoginRequestedStateParams();
                            $state.go(requestedState, requestedStateParams);
                            _self.resetRequestedState();
                        }
    
                    }
                    else if (responseUser.errorResponse) {
                        $rootScope.rootErrorMsg = responseUser.errorResponse;
                        $rootScope.showLoading(false);
                        //$rootScope.topPage();
                    }
                }, function (error) {
                    $rootScope.rootErrorMsg = $filter('translate')('system.noConnection');
                    $rootScope.showLoading(false);
                    _self.resetRequestedState();
                });

            },
                
            loginPassword : function (checkUser) {

                $rootScope.showLoading(true);
                
                var loginError = "";
                
                if (checkUser.password.length < 6) {
                    loginError = $filter('translate')('alert.error.shortPassword');
                }
                
                if(loginError)
                {
                    $rootScope.rootErrorMsg = loginError;
                    $rootScope.showLoading(false);
                    //$rootScope.topPage();
                    return;
                }

                checkUser = _self.fillPreLoginProperties(checkUser);

                $rootScope.rootErrorMsg = false;

                _self.loginRestService.update({loginemail: checkUser.email, loginpassword: checkUser.password}, checkUser, function (loggedUser) {
                    if (loggedUser && loggedUser.id && loggedUser.id > 0) {
                        //$cookies.hotelicoUserId = loggedUser.id;
                        //$cookies.hotelicoUserEmail = loggedUser.eMail;
                        //$cookies.hotelicoLogout = false;
                    }
                    else if (loggedUser.errorResponse) {
                        $rootScope.rootErrorMsg = loggedUser.errorResponse;
                        $rootScope.showLoading(false);
                        return;
                    }
                    else {
                        $rootScope.rootErrorMsg =  $filter('translate')('alert.error.wrongMailPassword');
                        $rootScope.showLoading(false);
                        return;
                    }
                    //$rootScope.showLoading(false);

                    var requestedState = _self.getLoginRequestedState();
                    var requestedStateParams = _self.getLoginRequestedStateParams();

                    //_hotelState.relocateOnLoginState = requestedState;
                    //_hotelState.relocateOnLoginStateParams = requestedStateParams;
                    
                    _hotelState.initState(loggedUser, requestedState, requestedStateParams);

                    $rootScope.closeModal();
                    $rootScope.showLoading(false);
                    
                    $state.go(requestedState, requestedStateParams);
                    _self.resetRequestedState();

                }, function (error) {
                    $rootScope.rootErrorMsg = $filter('translate')('system.noConnection');
                    $rootScope.showLoading(false);
                    _self.resetRequestedState();

                });
            },
            
            getLogin: function(email, password){
                
                //TODO Eugen:
               return _self.loginRestService.get({loginemail: email, loginpassword: password});
            },
            
            resetLogin : function()
            {
                if(_hotelState)
                {
                    _hotelState.emptyLoginData();
                }
    
                LogoutCustomer.get();

                _hotelService.delCookie("hotelicoUserId");
    
                NotificationService.resubscribeWithCustomerData();

                $rootScope.sendServiceWorkerPostMessage({ command: 'updateCustomerId', key: -1});
                
                //Reset notifications, if logout!!!  
                HotelNotification.notificationObj = {};
    
                $state.go(_hotelState.getDefaultStartState(), {stopLogin : true});

                $window.location.reload();
            }
        
     }
        
     service.initLogin();  
        
     return service;
        
});
 

//app
angular.module("hotelApp.hotelNotification", [ "ngResource", "hotelApp.hotelState", "hotelApp.notificationService" ])
    .factory("HotelNotification", function($q, $rootScope, $resource, $state, $location, NotificationService, HotelState) {

        var _self = this;
        
        var deferredState = $q.defer();

        /////////////////// Notification
        var PingService = $resource('./customers/:customerId/customerPing', {customerId:'@customerId', hotelId:'@hotelId' }, {'ping': {method: 'GET'}});
        
        var notificationInitObj = {
            unreadChatsCounter : 0,
            hotelUnreadActivitiesNumber : 0,
            lastMessagesToMe : [],
            lastMessageTimesToMe : [],
            lastMessageSeenByCustomer : [],
            unreadChatProSenderCount : [],
            hotelOnlineGuestIds : [],
            lastSeenOnlineHotelGuests : [],
            newRegisteredCustomerIds: []
        };

        var notificationService = {

             notificationObj : null,
            
             PING_TIMEOUT : 8000,
            
             activeRequestInterval : null,
            
             intervalWorker : null,

             lastSuccesfulPingTime : null,

            config: function()
            {
                _self = this;
                
                HotelState.getDeferredState().then(function(hotelState){
                    _self.hotelState = hotelState;
                    _self.emptyNotification();
                    //_self.setPingListener();
                    deferredState.resolve(_self);
                });

                return;
            },
            
            getDeferredState: function () {
                return deferredState.promise;
            },
                
             emptyNotification : function()
             {
                 _self.notificationObj = angular.copy(notificationInitObj);
                 return;
             },

             pingRequest : function(activate)  {
                 
                //EUGEN: check if last ping time is too old
                if(_self.lastSuccesfulPingTime && (_self.lastSuccesfulPingTime + 5000 > new Date().getTime()))
                {
                    return;
                }
                 
                console.log("ping - " + new Date());
    
                //$scope.app.rootSettings.prefferedLanguage= $translate.use()? $translate.use() : "en";
    
                if( _self.hotelState.profileData &&  _self.hotelState.profileData.id>0)// && _self.hotelState.profileData.hotelId>0)
                {
                    PingService.ping({customerId: _self.hotelState.profileData.id}, function()
                        {
                            console.log("ping Response - " + new Date());
                            _self.lastSuccesfulPingTime = new Date().getTime();
                        },
                        function(error){
                        
                            //$rootScope.rootErrorMsg = error;
                        
                            //TODO EUGEN: show no internet connection
                        }
                    );
                }
            },
            
            handleNotification: function(notification) {

                if(notification!=undefined)
                {
                    if(notification.unreadChatsCounter)
                        _self.notificationObj.unreadChatsCounter = notification.unreadChatsCounter;
                   
                    if(notification.hotelUnreadActivitiesNumber)
                        _self.notificationObj.hotelUnreadActivitiesNumber = notification.hotelUnreadActivitiesNumber;
                    
                    if(notification.lastMessagesToMe)
                    {
                        _self.notificationObj.lastMessagesToMe = notification.lastMessagesToMe;

                        for (var n in notification.lastMessagesToMe)
                        {
                            try{
                                _self.notificationObj.lastMessagesToMe[n] = decodeURIComponent( notification.lastMessagesToMe[n]);
                            }
                            catch(e)
                            {
                                _self.notificationObj.lastMessagesToMe[n] = "";
                            }

                            if(_self.notificationObj.lastMessagesToMe[n].length> $rootScope.cutMessageIndex + 1)
                            {
                                _self.notificationObj.lastMessagesToMe[n] = _self.notificationObj.lastMessagesToMe[n].substring(0,$rootScope.cutMessageIndex) + "..";
                            }
                        }
                    }

                    if(notification.lastMessageTimesToMe)
                         _self.notificationObj.lastMessageTimesToMe = notification.lastMessageTimesToMe;

                    if(notification.lastMessageSeenByCustomer && notification.lastMessagesToMe)
                         _self.notificationObj.lastMessageSeenByCustomer = notification.lastMessageSeenByCustomer;

                    if(notification.unreadChatProSenderCount)
                         _self.notificationObj.unreadChatProSenderCount = notification.unreadChatProSenderCount;
    
                    var tempHotelOnlineGuestIds = notification.hotelOnlineGuestIds;

                    if(notification.lastSeenOnlineHotelGuests)
                        _self.notificationObj.lastSeenOnlineHotelGuests = notification.lastSeenOnlineHotelGuests;

                    //if new message to me, and chatPartner not in my real hotel
                    if (notification.customerEvent) 
                    {
                        var newEventType = notification.customerEvent["event"];
                        var eventHotelId = notification.customerEvent["hotelId"];

                        if (newEventType == "EVENT_WALL_NEW_MESSAGE") {
                        
                            if ($state.current.name != "app.wall" && _self.hotelState.profileData && eventHotelId == _self.hotelState.profileData.hotelId && _self.hotelState.profileData.checkedIn) {
                                _self.notificationObj.hotelUnreadWallNumber = "+1";
                            }
                        }
                        else
                        {
                            _self.hotelState.handleHotelEvent(notification.customerEvent);
                        }
                    }
    
                    //EUGEN: send CHAT EVENTS only in chatList State!!!!!!
                    var curState = $state.current.name;
                    if(curState=="app.chatList")
                    {
                        //Find new Chat partners
                        for (var key in notification.unreadChatProSenderCount) {
                            if (key === 'length' || !notification.unreadChatProSenderCount.hasOwnProperty(key)) continue;
                           
                            var nextUnreadSenderId = key;
    
                            if(nextUnreadSenderId && nextUnreadSenderId>0 && nextUnreadSenderId!=_self.hotelState.profileData.id)
                            {
                                var newHotelChatEvent = [];

                                newHotelChatEvent["event"] = "EVENT_CHAT_NEW_MESSAGE";
                                newHotelChatEvent["entityId"] = nextUnreadSenderId;
                                newHotelChatEvent["senderId"] = nextUnreadSenderId;
                                newHotelChatEvent["entity"] = "Customer";

                                //newHotelChatEvent["hotelId"] = ;
                                 //newHotelChatEvent["entityId"];
                                //newHotelChatEvent["message"];
                                
                                //EUGEN: new chat event!
                                _self.hotelState.handleHotelEvent(newHotelChatEvent);

                            }
                        }
                    }
                }
                else {
                   _self.emptyNotification();
                }
    
                if(tempHotelOnlineGuestIds)
                {
                    _self.notificationObj.hotelOnlineGuestIds = [];
    
                    for(var t=0; t<tempHotelOnlineGuestIds.length; t++)
                    {
                        var nextOnlineId = tempHotelOnlineGuestIds[t];

                        _self.notificationObj.hotelOnlineGuestIds[nextOnlineId] = true;
    
                        var regularFound = false;
                        var notHotelCustomer = false;
    
                        //regular
                        for(var r=0; r< _self.hotelState.hotelCustomers.length; r++)
                        {
                            if( _self.hotelState.hotelCustomers[r].id == nextOnlineId)
                            {
                                _self.hotelState.hotelCustomers[r].online = true;
                                regularFound=true;
                                break;
                            }
                        }
    
                        if(!regularFound &&  _self.hotelState.contactCustomers)
                        {
                            for(var h=0; h< _self.hotelState.contactCustomers.length; h++)
                            {
                                if( _self.hotelState.contactCustomers[h].id == nextOnlineId)
                                {
                                    _self.hotelState.contactCustomers[h].online = true;
                                    notHotelCustomer=true;
                                    break;
                                }
                            }
                        }
    
                    }
                }
    
                if(_self.notificationObj.unreadChatsCounter=="0")
                    _self.notificationObj.unreadChatsCounter = null;
    
                if(_self.notificationObj.hotelUnreadActivitiesNumber=="0")
                    _self.notificationObj.hotelUnreadActivitiesNumber = null;
    
            }
            
        };

        notificationService.config();
        
        return notificationService;
        

    });
angular.module("hotelApp.hotelService", ["pascalprecht.translate" ])
    .factory("HotelService", function($translate, $filter, $resource, $q ) {
        
        var _self = this;
        
        var initCustomer = {
            id: 0,
            firstName: undefined,
            lastName: undefined,
            email: undefined,
            languageArray: [],
            jobTitle: undefined,
            company: undefined,
            //authPassword: false,
            hotelStaff: false,
            logged: false,
            checkedIn: false,
            showAvatar: true,
            city: undefined,
            originalCity: undefined,
            avatarUrl: undefined,
            sex: "m",
            fullCheckin: false,
            online: false,
            country: undefined,
            password: undefined,
            status: undefined,
            birthdayTime: undefined,
            systemMessages: {},
            hideHotelListPopup: false,
            hideCheckinPopup: false,
            hotelId: 0
            //confirmPassword: undefined
            //authLinkedIn: false,
            //linkedIn: {
            //	memberId: undefined
            //}
        };

        var initActivity = {
            description: undefined,
            shortDescription: undefined,
            title: undefined,
            timeValid: true,
            pictureUrl: undefined
        };

        var initialHotel = {
            id : -1,
            name : "New Hotel",
            currentHotelAccessCode : undefined,
            description : undefined,
            info : undefined,
            postalCode : undefined,
            city : undefined,
            house : undefined,
            street : undefined,
            email : undefined,
            fax : undefined,
            phone : undefined,
            pictureUrl : undefined
        };
        
        //var getUserWithLastMessagesService = $resource("./customers/customerwithmessage/:getId/sender/:senderId", {
        //    getId: '@getId',
        //    senderId: '@senderId'
        //}, {
        //    getCustomerWithLastMessage: {
        //        method: 'get' ,
        //        headers: {
        //            'Content-Type': 'application/json;charset=UTF-8',
        //            'Accept': 'application/json, text/plain, */*'
        //        }
        //    }
        //});

        //var ActivityRemoveService = $resource('./activity/customer/:customerId/activity/:activityId', {customerId:'@customerId', activityId:'@activityId' }, {'remove': {method: 'GET'}});


        var service = {

            initService: function(){
                _self = this;
                //$translateProvider.determinePreferredLanguage();
            },

            getInitCustomer: function () {
                var initCustomerInstance = angular.copy(initCustomer);
                
                return initCustomerInstance;
            }, 
            
            getInitHotel: function () {
                var newHotel = angular.copy(initialHotel);
                newHotel.creationTime = (new Date()).getTime();
                return newHotel;
            },
            
            //getDemoHotel: function (){
            //    
            //    var defer = $q.defer();
            //    
            //    var demoHotelIdElt = document.getElementById("demoHotelId");
            //
            //    if(demoHotelIdElt && demoHotelIdElt.innerText)
            //    {
            //        var demoHotelId = demoHotelIdElt.innerText;
            //
            //        $scope.getUpdateMainHotelObject(demoHotelId).then(function(demoHotel)
            //        {
            //            defer.resolve(demoHotel);
            //        }, function(err)
            //        {
            //            defer.reject();
            //        });
            //    }
            //    else {
            //        defer.reject();
            //    }
            //    
            //    return defer.promise;
            //},

            getInitActivity: function () {

                var newActivity = angular.copy(initActivity);
                newActivity.activityId = (new Date()).getTime();
                return newActivity;
            },
            
            encodeCustomer : function(customerObj){

                ///################# Languages ##############################

                var encodedCustomer = angular.copy(customerObj);
                
                if(encodedCustomer.languages && encodedCustomer.languages.length>0 && encodedCustomer.languages[0].name)
                {
                    var languageKeys = [];

                    for (var l = 0; l < encodedCustomer.languages.length; l++) {
                        languageKeys.push(encodedCustomer.languages[l].name);
                    }

                    encodedCustomer.languages =  languageKeys;
                }

                if(!encodedCustomer.systemMessages)
                {
                    encodedCustomer.systemMessages = {};
                }
                
                if(encodedCustomer.systemMessages["feedbackMessage"])
                {
                    encodedCustomer.systemMessages["feedbackMessage"] = encodeURIComponent(encodedCustomer.systemMessages["feedbackMessage"]);
                }

                if(_self.chromePushRegistrationId)
                {
                    encodedCustomer.systemMessages["chromePushRegistrationId"]  = _self.chromePushRegistrationId;
                } 
                
                if(_self.geoLocation && _self.geoLocation.latitude && _self.geoLocation.longitude)
                {
                    encodedCustomer.systemMessages["latitude"]  = _self.geoLocation.latitude;
                    encodedCustomer.systemMessages["longitude"]  = _self.geoLocation.longitude;
                }
                
                if(_self.tempCreationHotel && _self.tempCreationHotel.creationTime)
                {
                    encodedCustomer.systemMessages["staffHotelCreationTime"]  = _self.tempCreationHotel.creationTime;
                } 
                
                if(!customerObj.logged && _self.initGuestId)         
                {
                    encodedCustomer.systemMessages["initGuestId"]  = _self.initGuestId;
                }

                ///#################### END Languages ##########################

                //EUGEN: PROTECT AGAINST SERIALIZATION ERRORS, ALL TEMP FIELDS WEG
                encodedCustomer.confirmPassword = undefined;
                encodedCustomer.age = undefined;
                
                return encodedCustomer;
            },
            
            myDecode: function(encodeObj){
                
                var decodeObj = null;
                
                try{
                    decodeObj = decodeURIComponent(encodeObj);
                }
                catch(error){
                    decodeObj = encodeObj;
                };
                
                return decodeObj;
            },
            
            decodeWall: function(wallMsg) {
                
                if(!wallMsg)
                {
                    return wallMsg;
                }
                
                wallMsg.message = _self.myDecode(wallMsg.message);
                
                if(wallMsg.sendTime && !(wallMsg.sendTime instanceof Date))
                {
                    wallMsg.sendTime = new Date(wallMsg.sendTime);
                }
                
                return wallMsg;
            },

            encodeWall: function(wallObj){
                
                if(!wallObj)
                {
                    return wallObj;
                }
                
                var encodedWall = angular.copy(wallObj);
                
                if(encodedWall.message)
                {
                    encodedWall.message = encodeURIComponent(encodedWall.message);
                }
                
                return encodedWall;
            },
            
            decodeCustomer : function(customerObj) {
                
                if(!customerObj)
                {
                    return customerObj;
                }
                
                if(customerObj.lastMessageToMe)
                {
                    customerObj.lastMessageToMe = _self.myDecode(customerObj.lastMessageToMe);
                }

                if (customerObj.lastMessageTimeToMe && !(customerObj.lastMessageTimeToMe instanceof Date))
                    customerObj.lastMessageTimeToMe = new Date(customerObj.lastMessageTimeToMe);
                
                return customerObj;
            },
            
            encodeHotel: function(hotelObj){

                if(!hotelObj)
                {
                    return hotelObj;
                }
                
                var encodedHotel = angular.copy(hotelObj);
                
                if (encodedHotel.description) {
                    encodedHotel.description = encodeURIComponent(encodedHotel.description);
                }
                else{
                    encodedHotel.description = "";
                }

                if (encodedHotel.info) {
                    encodedHotel.info = encodeURIComponent(encodedHotel.info);
                }

                if (encodedHotel.title) {
                    encodedHotel.title = encodeURIComponent(encodedHotel.title);
                }
                
                return encodedHotel;
            },
            
            decodeHotel: function (hotelObj) {
                
                if (!hotelObj) {
                    return hotelObj;
                }

                if (hotelObj.description) 
                {
                    hotelObj.description = _self.myDecode(hotelObj.description);
                }

                if (hotelObj.title) 
                {
                    hotelObj.title = _self.myDecode(hotelObj.title);
                }

                if (hotelObj.info) 
                {
                    hotelObj.info = _self.myDecode(hotelObj.info);
                }

                return hotelObj;
            },
            
            encodeActivity: function(activityObj) {

                if(!activityObj)
                {
                    return activityObj;
                }
                
                var encodedActivity = angular.copy(activityObj);
                
                if(encodedActivity.description == undefined)
                {
                    encodedActivity.description = "";
                } 
                
                if(encodedActivity.shortDescription == undefined)
                {
                    encodedActivity.shortDescription = "";
                }
                
                encodedActivity.shortDescription = encodeURIComponent(encodedActivity.shortDescription);
                encodedActivity.description = encodeURIComponent(encodedActivity.description);
                encodedActivity.title = encodeURIComponent(encodedActivity.title);

                //Remove not needed elts for serialization
                encodedActivity.validFromString = undefined;
                encodedActivity.validToString = undefined;
                encodedActivity.pictureUrl = undefined;
                encodedActivity.customerCounter = undefined;
                encodedActivity.active = undefined;
                encodedActivity.timeValid = undefined;
                encodedActivity.hotelName = undefined;
                
                return encodedActivity;
            },
            
            decodeActivity: function(activityObj) {

                if(!activityObj)
                {
                    return activityObj;
                }
                
                activityObj.shortDescription = _self.myDecode(activityObj.shortDescription);
            
                activityObj.description = _self.myDecode(activityObj.description); 
            
                activityObj.title = _self.myDecode(activityObj.title);
                
                if(activityObj.description == "undefined")
                {
                    activityObj.description = "";
                }
                
                return activityObj;
            },

            //removeActivity : function(profileData, activityId) {
            //
            //    ActivityRemoveService.remove({customerId: profileData.id, activityId: activityId}, function(response){
            //        response.$promise.then(function(value){
            //            $scope.removeLocalActivity(activityId);
            //        });
            //    });
            //},
            
            setCookie: function (name, value)//, expires, path, domain, secure) {
            {
                var expireDate = new Date();
                expireDate.setDate(expireDate.getDate() + 60);
                var expires = expireDate.toUTCString();
                var path = false;//'/';
                var domain = false;//'hoteliCo';
                var secure = false;

                document.cookie = name + "=" + escape(value) +
                ((expires) ? "; expires=" + expires : "") +
                ((path) ? "; path=" + path : "") +
                ((domain) ? "; domain=" + domain : "") +
                ((secure) ? "; secure" : "");
            },

            // ?????????? cookie ? ?????? name, ???? ????, ???? ???, ?? undefined
            getCookie: function (name) {
                var matches = document.cookie.match(new RegExp(
                    "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
                ));
                return matches ? decodeURIComponent(matches[1]) : undefined;
            },

            delCookie: function (name) {
                document.cookie = name + "=" + "; expires=Thu, 01 Jan 1970 00:00:01 GMT";
            },
            
            validateCustomerInfo: function(customerObj, checkPasswordMode, guestMode) {
            
                if (customerObj.email == undefined) {
                    return $filter('translate')('alert.error.emptyMail');
                }
                if ((customerObj.email + "").indexOf("@") < 0) {
                    return $filter('translate')('alert.error.wrongMail');
                }
                
                if(customerObj.languages=="undefined" && !guestMode)
                {
                    return $filter('translate')('alert.error.noLanguage');
                }
                
                if (checkPasswordMode && (customerObj.password == undefined || customerObj.password != customerObj.confirmPassword)) {
                    return $filter('translate')('alert.error.passwordNotEqual');
                }
                if (checkPasswordMode && customerObj.password.length < 6) {
                    return $filter('translate')('alert.error.shortPassword');
                }
            
                return "";
            },
        
            validateHotelInfo: function(hotelObj){
               
                if (hotelObj.currentHotelAccessCode == undefined) {
                    return $filter('translate')('alert.error.emptyCode');
                }
                if (hotelObj.name == undefined) {
                    return $filter('translate')('alert.error.emptyName');
                }
                
                //if(!hotelObj.description || hotelObj.description.length> _self.validationUtils.maxHotelDescription)
                //{
                //    return $filter('translate')('alert.error.descriptionLong');
                //}
                return "";
            },

            getEntityLogo: function(requesterId, entityType, entityId)
            {
                var getEntityLogoService = $resource("./files/logo/requester/:requesterId/entityType/:entityType/entityId/:entityId", {
                        requesterId: '@requesterId',
                        entityType: '@entityType',
                        entityId: '@entityId'
                    },
                    {
                        getImage: {
                            method: 'get',
                            headers: {
                                'Content-Type': 'application/json;charset=UTF-8',
                                'Accept': 'application/json, text/plain, */*'
                            }
                        }
                    }
                );

                var imageDefer = $q.defer();
                
                var imageResponseCustomerObj = getEntityLogoService.getImage({requesterId: requesterId, entityType: entityType, entityId: entityId}, function(){
                   
                        //If pictureUrl was set
                        if(imageResponseCustomerObj.systemMessages.pictureUrl)
                        {
                            imageDefer.resolve(imageResponseCustomerObj.systemMessages)
                        }
                        else{
                            imageDefer.reject();
                        }
                    }, 
                    function(error)
                    {
                        imageDefer.reject(error);
    
                    }
                );
                
                return imageDefer.promise;
                
            },
            
            /**
             * Validation utils
             */
            validationUtils : {
                
                maxHotelDescription: 5000,
                
                maxActivityDescription: 1000,
                maxActivityShortDescription: 300
            },

            /**
             * save the chrome push id
             */
            chromePushRegistrationId: null,

            /**
             * save the lang lot gps location of client
             */
            geoLocation: null,

            /**
             * If a user no logged, we save his initId, for recognation
             */
            initGuestId: Math.floor(Math.random() * 1000000),
            
            /**
             * save the detected gps city of customer
             */
            gpsCity: null,

            //setGpsCity: function(gpsCity)
            //{
            //    _self.gpsCity = gpsCity;
            //    $rootScope.$broadcast("gpsCityUpdated", _self.gpsCity);
            //},
            
            validateActivityInfo: function(activityObj){
                
                if(!activityObj.shortDescription || activityObj.shortDescription.length==0)
                {
                    return $filter('translate')('alert.error.emptyShortDescription');
                } 
                
                //if(!activityObj.description || activityObj.description.length == 0)
                //{
                //    return $filter('translate')('alert.error.emptyDescription');
                //}
                
                if(!activityObj.shortDescription || activityObj.shortDescription.length> _self.validationUtils.maxActivityShortDescription)
                {
                    return $filter('translate')('alert.error.shortDescriptionLong');
                }

                if(!activityObj.description || activityObj.description.length> _self.validationUtils.maxActivityDescription)
                {
                    return $filter('translate')('alert.error.descriptionLong');
                }
                
                return "";
            },
            
            getLanguageArray : function(){
                
                var languages = [{icon: "<img src='angulr/icons/flags/at.png' />", name: "at", ticked: false},
                    {icon: "<img src='angulr/icons/flags/de.png' />", name: "de", ticked: false},
                    {icon: "<img src='angulr/icons/flags/en.png' />", name: "en", ticked: false},
                    {icon: "<img src='angulr/icons/flags/fr.png' />", name: "fr", ticked: false},
                    {icon: "<img src='angulr/icons/flags/nl.png' />", name: "nl", ticked: false},
                    {icon: "<img src='angulr/icons/flags/pl.png' />", name: "pl", ticked: false},
                    {icon: "<img src='angulr/icons/flags/ru.png' />", name: "ru", ticked: false},
                    {icon: "<img src='angulr/icons/flags/us.png' />", name: "us", ticked: false}];
                
                return languages;
            },

            systemLanguagesArray : {"en":'English', "de":'German' /*, "ru":'Russian'*/},
            
            _getSystemLanguagesArray: function(){
                return angular.copy(_self.systemLanguagesArray);
            },
            
            convertLanguageKey: function(langFullKey){
                
                if(!langFullKey)
                {
                    return undefined;
                }
                
                var underscoreIndex = langFullKey.indexOf("_"); //de_DE

                var langKey = "";
                
                if (underscoreIndex !== -1) {
                    langKey = langFullKey.substring(underscoreIndex + 1).toLowerCase();
                } else {
                    langKey = (langFullKey+"").toLowerCase();
                }
                
                return langKey;
            },
            
            convertLangLabelToAvailableKey: function(langLabel){
                for (var key in _self.systemLanguagesArray) {
                    if (key === 'length' || !_self.systemLanguagesArray.hasOwnProperty(key)) continue;
                    
                    if(_self.systemLanguagesArray[key] == langLabel){
                        return key;
                    };
                };

                _self.getDefaultLanguageViewKey();
            },
            
            getDefaultLanguageViewKey: function (){
                 return  _self.convertLanguageKey($translate.preferredLanguage());
             },  
            
            getSystemLanguageViewKeys: function(){
                
                var keys = [];
                
                for (var key in _self.systemLanguagesArray) {
                    if (key === 'length' || !_self.systemLanguagesArray.hasOwnProperty(key)) continue;
                    keys.push(key);
                }
                
                return keys;
            },
            
            getDefaultAllowedLanguageViewKey: function (initKey)
            {
                var defSysLangKey = "";
                
                if(initKey)
                {
                    defSysLangKey = _self.convertLanguageKey(initKey)
                }
                else
                {
                    defSysLangKey = _self.convertLanguageKey($translate.preferredLanguage());
                }
                
                //for(var l=0; l < _self.systemLanguagesArray.length; l++)
                //{
                    if( _self.systemLanguagesArray[defSysLangKey])
                    {
                        return defSysLangKey;
                    }
                //}

                defSysLangKey = "en";
                    
                return defSysLangKey;
             },
            
            getDefaultSystemLanguageLabel : function(){
                
                var usedLanguageKey = _self.getDefaultLanguageViewKey();
                return _self.systemLanguagesArray[usedLanguageKey] || 'English';
                
                //return usedLanguage;
            },

            getSystemLanguagesArray: function(){
                
                var availableSystemLanguages = [];

                var sysLangKeys = _self.getSystemLanguageViewKeys();
                
                for (var i = 0; i < sysLangKeys.length; i++) {

                    var langKey = sysLangKeys[i];

                    availableSystemLanguages[i] = {
                        name: _self.systemLanguagesArray[langKey],
                        langKey: langKey,
                        langKeyLabel: langKey.charAt(0).toUpperCase() + langKey.slice(1),
                        icon: "<img src='angulr/icons/flags/" + langKey + ".png' />",
                        ticked: false
                    };

                    //if (langKey == $scope.localState.selectSystemLanguage) {
                    //    $scope.localState.availableSystemLanguages[i].ticked = true;
                    //}
                }

                return availableSystemLanguages;
            }  
            
        //}
     };

      service.initService();  
        
     return service;
        
});
 

angular.module("hotelApp.hotelState", [ "ngResource", "hotelApp.sessionCustomerService", "hotelApp.customerDto", "hotelApp.hotelDto" ])
    .factory("HotelState", function($q, $rootScope, $timeout, $resource, $state, $stateParams, $location, $cookies, SessionCustomer, CustomerDto, HotelDto, HotelService) {

        var _self = this;
        
        var _service = HotelService;
        
        var deferredState = $q.defer();
        
            var getUserWithLastMessagesService = $resource("./customers/customerwithmessage/:getId/sender/:senderId", {
            getId: '@getId',
            senderId: '@senderId'
            }, 
            {
            getCustomerWithLastMessage: {
                method: 'get',
                headers: {
                    'Content-Type': 'application/json;charset=UTF-8',
                    'Accept': 'application/json, text/plain, */*'
                }
            }
        });

        var getAnonymGeoLocationCityService = $resource("./hotels/getGpsHotelCity/requesterId/:requesterId/lat/:lat/lon/:lon", {
                lat: '@lat',
                lon: '@lon'
            },
            {
                getGeoLocationCity: {
                    method: 'get',
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*'
                    }
                }
            });
        
        
        var state = {
            
            //defaultCustomState : "app.activityList",

            /**
             * complex states with onInitCheck, that can be loaded after login/checkin prufung, otherwise rederection to other state
             */
            checkTransitionStates : ["tryaccess.login", "tryaccess.checkin", "access.login", "access.hotelLogin", "access.werbung", "app.hotel", "app.hotelPreview", "app.checkin"],

            /**
             * simple rendering states, that have no login checking transition
             */
            noLoginCheckStates : ["app.activityList", "app.hotelList", "app.register", "access.hotelLogin", "app.hotelRegister", "app.forgotpwd", "app.agb", "app.impressum"],

            /**
             * States that can be called (clicked) only with valid login or with login-popup!!! 
             */
                
            requireLoginStates: ["app.chat", "app.chatList", "app.hotel", "app.me", "app.avatar", "app.wall"],

            /**
             * States that can be called (clicked) only with checkin with hotelId>0!!!
             */
            requireCheckinStates: ["app.wall", "app.chatList"],
            
            /**
             * allowed first request url, before $state exists. WITHOUT CHECKED LOGIN!
             */
            noLoginUrls: ["app/activityList", "app/register", "access/hotelLogin", "app/hotelRegister", "app/forgotpwd", "app/about", "app/checkin"],
            
            currentHotel: null,
            
            defaultStartState: "app.checkin",
        
            profileData: _service.getInitCustomer(),
            
            prefferedLanguage : "en",

            //pushRelocatePrefix : "chatlist/false",
            
            initState: function (initData, initRelocateState, initRelocateStateParams) {

                _self = this;

                _service = HotelService;

                _self.relocateOnLoginState = initRelocateState;
                _self.relocateOnLoginStateParams = initRelocateStateParams;
                
                _self.initProfileData(initData).then(function () 
                {
                    if (_self.profileData && _self.profileData.id > 0) {

                        //local login relocate 

                        if(_self.relocateOnLoginState)
                        {
                            $state.go(_self.relocateOnLoginState, _self.relocateOnLoginStateParams);
                            _self.relocateOnLoginState = null;
                            _self.relocateOnLoginStateParams = null;
                        }
                        else{
                            //TODO relocate on social login
                            if(!$rootScope.relocateLogin())
                            {
                                var requestedUrl = $location.path();

                                var pathPrefixSplit = requestedUrl.split("/");
                                var pathPrefix = pathPrefixSplit.length>2? pathPrefixSplit[1] + "/" + pathPrefixSplit[2] : "";
                                
                                //Push Redirect
                                if((requestedUrl+"").indexOf("chatList/false")>=0)
                                {
                                    //Push Redirect
                                    $state.go("app.chatList");
                                }
                                else if((requestedUrl+"").indexOf("chat/")>=0)
                                {
                                    var urlSplit = requestedUrl.split("chat/");
                                    
                                    var partnerId = "";
                                    
                                    if(urlSplit.length>1)
                                    {
                                        partnerId = urlSplit[1];
                                    }
                                    //Push Redirect
                                    $state.go("app.chat", {receiverId: partnerId});
                                }
                                //else if(pathPrefix && _self.noLoginUrls.indexOf(pathPrefix)>0)
                                else if(pathPrefix && pathPrefix=="app/about")
                                {
                                    //load current allowed url
                                    ;
                                }
                                else{
                                    $state.go(_self.profileData.checkedIn ? "app.hotel" : "app.checkin");
                                }
                            }
                        }
                        deferredState.resolve(_self);
                    }
                    else {

                        if(_self.unloggedCheckinHotelId)
                        {
                            _self.profileData.checkedIn = true;
                            _self.profileData.hotelId = _self.unloggedCheckinHotelId;
                        }
                        
                        deferredState.reject("noLogin");
                    }

                });
                
                return _self.getDeferredState();
            },

            noCustomerFound: false,

            //virtualHotel: null,

            //defaultTitle: "Hotelico",

            //prefferedLanguage: HotelService.getDefaultSystemLanguageLabel(),

            /**
             * Load hotels based on the available hotel identification indicators
             */
            allCustomersById: [],

            //#######  CHAT ARRAYS ###########
            /**
             * all hotel customers, with or without contact with me
             * //TODO Eugen: EMPTY ON CHECKOUT OR HOTEL CHANGE!!!!
             */
            hotelCustomers: [],

            /**
             * only hotel staff, not visible outside of hotel scope
             * //TODO Eugen: EMPTY ON CHECKOUT OR HOTEL CHANGE!!!!
             */
            hotelStaffCustomers: [],
               
            ///**
            // * all other (virtual) customers for chatting
            // */
            //allChatCustomers: [],
            ///**
            // * All customers with messages with me
            // */
            //allContactCustomers: [],

            /**
             * All contacts, that are not in the same real hotel with me<br>
             * //TODO Eugen: EMPTY ON CHECKOUT OR HOTEL CHANGE!!!!
             */
            contactCustomers: [],
            //################################

            hotelActivities: [],
            
            allActivities : [],
            
            historyRouteStates: [],

            /**
             * save the temp creation hotel
             */
            tempCreationHotel: null,
            
            /**
             * whole chat lists by partnerId
             */
            chatHistoryByPartnerId: [],
            
            getDeferredState: function () {
                return deferredState.promise;
            },
            
            initProfileData: function (initCustomerData) {

                var initDeferred = $q.defer();

                initCustomerData = _service.decodeCustomer(initCustomerData);
                
                if (initCustomerData && initCustomerData.id > 0) {
                    _self.setProfileData(initCustomerData);
                    initDeferred.resolve(_self.profileData);
                }
                //realProfileFrom Server
                else //if(!initCustomerData)
                {
                    SessionCustomer.get(function (serverCustomer) {

                        if (serverCustomer && serverCustomer.id > 0 && serverCustomer.firstName) {
                            _self.setProfileData(serverCustomer);
                            initDeferred.resolve(_self.profileData);
                        }
                        else {
                            var cookieId = _service.getCookie('hotelicoUserId');

                            if (!cookieId || cookieId <= 0) {
                                _self.noCustomerFound = true;

                                //if (cookieCustomer.errorResponse) {
                                //    $rootScope.rootErrorMsg = cookieCustomer.errorResponse;
                                //    $rootScope.topPage();
                                //}

                                //_service.setCookie('hotelicoUserId', 0);

                                //if($state.name!="access.login")
                                //    $state.go("access.login", {stopLogin: true});

                                initDeferred.reject("noLogin");

                                var pathPrefixSplit = $location.path().split("/");
                                var pathPrefix = pathPrefixSplit.length>2? pathPrefixSplit[1] + "/" + pathPrefixSplit[2] : "";
                                
                                var hotelCode = pathPrefixSplit.length>3? pathPrefixSplit[3] : "";
                                
                                if(pathPrefix == "app/checkin")
                                {
                                    $state.go("app.checkin", {hotelCode: hotelCode});
                                }
                                else
                                if(!pathPrefix || _self.noLoginUrls.indexOf(pathPrefix)<0)
                                //if(!$state.current.name || _self.noLoginCheckStates.indexOf($state.current.name)<0)
                                {
                                    //TODO Eugen: defaultState
                                    $state.go(_self.getDefaultStartState(), {stopLogin: true});
                                }

                                _self.unloggedCheckinHotelId  = _service.getCookie('hotelicoNoLoginHotelId');

                                //if(unloggedCheckinHotelId)
                                //{
                                //    _self.hotelState.profileData.hotelId = unloggedCheckinHotelId;
                                //    _self.hotelState.profileData.checkedIn = true;
                                //}
                                
                                return;
                            }

                            //try to load sessionCustomer from cookies
                            var cookieCustomer = CustomerDto.get({id: cookieId, requesterId: cookieId}, function () {

                                if (cookieCustomer.id > 0 && cookieCustomer.firstName) {
                                    SessionCustomer.save({id: cookieCustomer.id}, cookieCustomer);
                                    {
                                        _self.setProfileData(cookieCustomer);
                                        initDeferred.resolve(_self.profileData);
                                    }
                                    ;
                                    //, 
                                    //    function(error){
                                    //        initDeferred.reject(error);
                                    //});

                                }
                                else {

                                    _self.noCustomerFound = true;

                                    if (cookieCustomer.errorResponse) {
                                        $rootScope.rootErrorMsg = cookieCustomer.errorResponse;
                                        $rootScope.topPage();
                                    }

                                    _service.setCookie('hotelicoUserId', 0);

                                    $state.go(_self.getDefaultStartState(), {stopLogin: true});

                                    initDeferred.reject("noLogin");
                                }

                            }, function (error) {
                                _self.noCustomerFound = true;
                                initDeferred.reject(error);
                            });
                        }
                    });
                }


                return initDeferred.promise;
            },

            getDefaultStartState: function()
            {
                return _self.defaultStartState;
            },
            
            setPreviousRouteState: function (routeState, params) {

                if(_self.ignoreNextHistoryState)
                {
                    _self.ignoreNextHistoryState = false;
                    return;
                }
                
                var stateName = routeState.name;

                //we have 3 root states
                if(stateName=="app.hotel" || stateName=="app.checkin" || stateName=="access.login")
                {
                    _self.historyRouteStates = [];
                    return;
                }

                var stateObj = [];
                stateObj["stateName"] = routeState.name;
                stateObj["stateParams"] = params;

                if(!_self.historyRouteStates)
                {
                    _self.historyRouteStates = [];
                }

                var lastState = _self.historyRouteStates.length>0? _self.historyRouteStates[_self.historyRouteStates.length-1] : null;

                if(!lastState || stateObj["stateName"]!=lastState["stateName"] || stateObj["stateParams"]!=lastState["stateParams"])
                {
                    _self.historyRouteStates.push(stateObj);
                }
                //_self.checkNextRouteState(routeState.name);
            },

            resetHistoryRouteStates: function () {
                _self.historyRouteStates = [];
            },
            
            //updateProfileData: function () {
            //    return _self.setProfileData(_self.profileData);
            //},

            setPrefferedLanguage : function (langKey) {
               
                var viewKey = _service.convertLanguageKey(langKey);

                _self.prefferedLanguage = viewKey;

                if(_self.profileData && _self.profileData.id>0 && _self.profileData.prefferedLanguage != viewKey)
                {
                    _self.profileData.prefferedLanguage = viewKey;
                    _self.submitProfileData(true);
                }
                
                return;
            },
            
            getPrefferedLanguage : function(){
                
                if(_self.profileData && _self.profileData.prefferedLanguage)
                {
                    return _self.profileData.prefferedLanguage;
                }
                
                return _self.prefferedLanguage;
            },
            
            //getNotLoggedCookieSettings: function()
            //{
            //    _self.profileData.hideCheckinPopup = _service.getCookie('hotelicohideCheckinPopup')=="true";
            //    _self.profileData.hideWallPopup = _service.getCookie('hotelicohideWallPopup')=="true";
            //    _self.profileData.hideHotelListPopup = _service.getCookie('hotelicohideHotelListPopup')=="true";
            //},
            
            getPreviousRouteState: function () {

                var prevState = null;

                if (_self.historyRouteStates && _self.historyRouteStates.length > 0) {
                    prevState = _self.historyRouteStates.splice(-1, 1)[0];
                    //_self.historyRouteStates = _self.historyRouteStates.slice(_self.historyRouteStates.length-1,_self.historyRouteStates.length);

                    if (prevState["stateName"] == $state.current.name && prevState["stateParams"] == $state.params )
                    {
                        return _self.getPreviousRouteState();
                    }
                }
                else {
                    prevState = [];
                    prevState["stateName"] = "app.hotel";
                    prevState["stateParams"] = {};
                }

                return prevState;

            },

            setProfileData: function (customerData, onlyStateUpdate) {

                //var nowState = $state.current.name;

                //if (nowState && (nowState+"").indexOf("access")<0 && $rootScope.setNavbarHeaderColor) {
                //    $rootScope.setNavbarHeaderColor($rootScope.isSmartDevice ? "bg-orange" : "bg-black");
                //}

                if (!customerData || !customerData.id || customerData.id == 0 || !customerData.firstName) {
                    return _self.initProfileData();
                }

                //if user is authentificated
                if (customerData && customerData.id && customerData.logged && customerData.id > 0) {

                    //$rootScope.header.showTab = true;

                    if (!onlyStateUpdate) {
                        if (!_self.profileData || !_self.profileData.id || _self.profileData.id == 0) {
                            //_self.profileId = customerData.id;
                            _service.setCookie('hotelicoUserId', customerData.id);
                            $rootScope.sendServiceWorkerPostMessage({ command: 'updateCustomerId', key: customerData.id});

                            //If logged IN -> forget not logged actions!!!
                            _service.setCookie('hotelicoNoLoginHotelCode', "");
                            _service.setCookie('hotelicoNoLoginHotelId', "");
                        }

                        _self.profileData = customerData;
                        _self.prefferedLanguage = _self.profileData.prefferedLanguage;
                        _self.showProfile = true;
                        
                    }
                }
                else {
                    return _self.emptyLoginData();
                }

            },
            
            submitProfileData: function (saveOnServerResponse, changedProfile) {
                
                var submitDeffered = $q.defer();

                if (!changedProfile) {
                    changedProfile = _self.profileData;
                }

                if(!changedProfile && !_self.profileData)
                {
                    $rootScope.rootErrorMsg = "No Data initialized";
                    $rootScope.showLoading(false);
                    submitDeffered.reject("No Data initialized");
                    return submitDeffered.promise;
                }
                
                var encodedProfile = _service.encodeCustomer(changedProfile);

                //if(_self.chromePushRegistrationId)
                //{
                //    encodedProfile.systemMessages["chromePushRegistrationId"] = _self.chromePushRegistrationId;
                //}
                
                var updatedId = changedProfile.id? changedProfile.id : -1;
                var requesterId = changedProfile.id? changedProfile.id : -1;
                
                CustomerDto.update({id: updatedId, requesterId: requesterId}, encodedProfile, function (responseProfile) {

                        var decodedProfile = _service.decodeCustomer(responseProfile);

                        if (saveOnServerResponse) {
                            _self.setProfileData(decodedProfile)
                        }

                        submitDeffered.resolve(decodedProfile);
                    },
                    function (error) {
                        
                        if(encodedProfile.systemMessages && encodedProfile.systemMessages["latitude"])
                        {
                            getAnonymGeoLocationCityService.getGeoLocationCity({requesterId: _service.initGuestId, lat: encodedProfile.systemMessages["latitude"], lon: encodedProfile.systemMessages["longitude"]},
                                function(notif)
                                {
                                    if(notif.customerEvent && notif.customerEvent.pushMessage)
                                    {
                                        _service.gpsCity = notif.customerEvent.pushMessage;
                                        $rootScope.$broadcast("gpsCityUpdated", _service.gpsCity);
                                    }
                                }
                            )
                        }
                        submitDeffered.reject(error);
                    }
                )

                return submitDeffered.promise;
            },
            
            
            registerCustomer: function(customerObj){

                var registerDeffered = $q.defer();

                var errorObj = _service.validateCustomerInfo(customerObj);
                
                if(errorObj && errorObj.length>0)
                {
                    $rootScope.rootErrorMsg = errorObj;
                    $rootScope.topPage();
                    registerDeffered.reject(errorObj);
                    return registerDeffered.promise;
                }
                
                var encodedCustomerObj = _service.encodeCustomer(customerObj);
                
                
                var regCustomer = new CustomerDto();
                //$scope.mainState.errorMsg = false;
                regCustomer.firstName = encodedCustomerObj.firstName;
                regCustomer.lastName = encodedCustomerObj.lastName;

                regCustomer.jobTitle = encodedCustomerObj.jobTitle;
                regCustomer.jobDescriptor = encodedCustomerObj.jobDescriptor;
                regCustomer.password = encodedCustomerObj.password;
                regCustomer.email = encodedCustomerObj.email;
                regCustomer.city = encodedCustomerObj.city;
                regCustomer.originalCity = encodedCustomerObj.originalCity;

                regCustomer.company = encodedCustomerObj.company;

                regCustomer.sex = encodedCustomerObj.sex;

                regCustomer.languages = encodedCustomerObj.languages;

                regCustomer.prefferedLanguage = encodedCustomerObj.prefferedLanguage? encodedCustomerObj.prefferedLanguage : _service.getDefaultAllowedLanguageViewKey();

                //case staff register
                regCustomer.hotelStaff = encodedCustomerObj.hotelStaff;
                regCustomer.hotelId = encodedCustomerObj.hotelId;
                
                regCustomer.$save(function(createdCustomer){
                    
                    createdCustomer = _service.decodeCustomer(createdCustomer);

                    registerDeffered.resolve(createdCustomer);
                }, function(error){
                    registerDeffered.reject(error);
                });
                    
                return registerDeffered.promise;
                
            },

            submitHotelData: function(hotelObject, senderId) {

                var submitHotelDeffered = $q.defer();

                if (!hotelObject) {
                    hotelObject = _self.currentHotel;
                }

                if(!senderId)
                {
                    senderId = _self.profileData && _self.profileData.id>0? _self.profileData.id : -1;
                }

                if (hotelObject.info == undefined) {
                    hotelObject.info = "";
                }
                
                var encodedHotel = _service.encodeHotel(hotelObject);
                
                HotelDto.update({customerId: senderId, hotelId: encodedHotel.id}, encodedHotel, function(response) {

                    var decodedHotel = _service.decodeHotel(response);
                    
                    submitHotelDeffered.resolve(decodedHotel);
                    
                }, function(error){
                    submitHotelDeffered.reject(error);
                });
                
                return submitHotelDeffered.promise;
            },
            
            selectHeaderTab: function (newTabIndex, oldTabIndex) {

                if (oldTabIndex == newTabIndex) {
                    return;
                }

                var newState = $state.current.name;

                //if (newState == "app.chatList") // && newTabIndex != 2) 
                //{
                //    if (!_self.profileData.checkedIn && newTabIndex == 1) {
                //        //$rootScope.clickLoading("app.checkin");
                //        $state.go("app.checkin");
                //        return;
                //    }
                //    else 
                //    if (newTabIndex == 1 && _self.profileData.checkedIn) {
                //        if(newState!="app.chatList" || $stateParams.hotelScope!="true")
                //        {
                //            $state.go("app.chatList", {hotelScope: true, filterCity: "", filterHotelId:""});
                //        }
                //        return;
                //    }
                //    else 
                //    if (newTabIndex == 2) {
                //        
                //        return;
                //    }
                //    //else {
                //    //    if(newState!="app.chatList" || $stateParams.hotelScope!="false")
                //    //    {
                //    //        $state.go("app.chatList", {hotelScope: false, filterCity: "", filterHotelId:""});
                //    //    }
                //    //    return;
                //    //}
                //
                //    //return;
                //}
                //else 
                if (newTabIndex == 0) {
                    //$rootScope.clickLoading("app.activityList");
                    //$state.go("app.activityList");
                    var nextState = !_self.profileData ? _self.getDefaultStartState() : _self.profileData.checkedIn ? (_self.profileData.logged? "app.hotel" : "app.hotelPreview") : "app.checkin";
                    $state.go(nextState);
                    return;
                }
                else if (newTabIndex == 1) {
                    //var nextState = !_self.profileData ? _self.getDefaultStartState() : _self.profileData.checkedIn ? (_self.profileData.logged? "app.hotel" : "app.hotelPreview") : "app.checkin";
                    //$state.go(nextState);
                    
                    $rootScope.clickLoading("app.chatList");
                    return;
                }
                else if (newTabIndex == 2) {
                    //$state.go("app.about");
                    $rootScope.clickLoading("app.wall");
                }

                //$timeout(function(){
                //    $rootScope.header.tabIndex = newTabIndex;
                //}, 100);
                return;
            },
            
            checkHeaderTab: function()
            {
                var newState = $state.current.name;
                
                if(newState == "app.wall" || (!_self.profileData.checkedIn && $state.current.name=='app.activityList'))
                {
                    $rootScope.header.tabIndex = 2;
                }
                else if(newState == "app.chat" || newState == "app.chatList")
                {
                    $rootScope.header.tabIndex = 1;
                }
                else 
                    $rootScope.header.tabIndex = 0;
            },
            /**
             * ALL IMPORTANT STATES should call it at start, to check (hotelState)
             * @param nowState
             * @returns {boolean}
             */
            checkNextRouteState: function (nowState) {
                //############## Calculate new State ###########################

                var stateChanged = false;

                if (!nowState) {
                    nowState = $state.current.name;
                }

                if (nowState == "app.hotelRegister") {
                    //return  - because I don't want to get standard state for the current tab!
                    return;
                }

                if (nowState == "") {
                    if ((window.location.href + "").indexOf("access/login") >= 0) {
                        nowState = "tryaccess.login";
                    }
                    else if ((window.location.href + "").indexOf("app/checkin") >= 0) {
                        nowState = "tryaccess.checkin";
                    }
                }

                if (!_self.profileData || _self.profileData.id <= 0 || !_self.profileData.firstName) {
                    $state.go(_self.getDefaultStartState(), {stopLogin: true});
                    return false;
                }
                //IF TRANSITIONAL STATES, MAYBE NEW STATE!!!!
                else if (_self.profileData && _self.profileData.logged && (_self.checkTransitionStates.indexOf(nowState)>=0)) {
                    var nextState = _self.profileData.checkedIn ? "app.hotel" : "app.checkin";

                    if (nextState == nowState) {
                        return true;
                    }

                    stateChanged = true;
                    $state.go(nextState);

                    return false;
                }
                else if (nowState == "tryaccess.login" || nowState == "tryaccess.checkin") {
                    $state.go(_self.getDefaultStartState());
                }

                //if(!stateChanged && nowState && (nowState+"").indexOf("access")<0)
                //{
                //    $rootScope.updateHeaderTitle(nowState);
                //}

                return true;
            },

            emptyCheckinData: function () {

                _self.hotelCustomers = [];
                _self.hotelStaffCustomers = [];
                _self.contactCustomers = [];

                _self.hotelActivities = [];
                _self.currentHotel = _service.getInitHotel();
            },

            //
            emptyLoginData: function () {

                var nowState = $state.current.name;
                $rootScope.header.showTab = false;

                _self.emptyCheckinData();

                _self.profileData = _service.getInitCustomer();
                _self.showProfile = false;

                $rootScope.updateHeaderTitle(nowState);

                _service.delCookie('hotelicoUserId');

                $cookies.hotelicoLogout = true;

                if ( (nowState + "").indexOf("about") < 0 && _self.noLoginCheckStates.indexOf(nowState)<0)
                {
                    $state.go(_self.getDefaultStartState(), {stopLogin: true});
                }

                return false;
            },

            getCurrentHotel: function (hotelId, customerObject, forceUpdate) {

                var deferredCurHotel = $q.defer();

                if (!customerObject) {
                    if (!_self.profileData || !_self.profileData.logged) {
                        deferredCurHotel.reject("NoLogin");
                        return deferredCurHotel.promise;
                    }

                    customerObject = _self.profileData;
                }

                if (!hotelId) {
                    hotelId = _self.profileData.hotelId;
                }

                //Current hotel already loaded
                if (!forceUpdate && hotelId == customerObject.hotelId && _self.currentHotel && _self.currentHotel.id == hotelId) {
                    deferredCurHotel.resolve(_self.currentHotel);
                    return deferredCurHotel.promise;
                }

                if (hotelId && hotelId > 0 && customerObject.id > 0) {
                    _self.currentHotel = HotelDto.get({customerId: customerObject.id, hotelId: hotelId}, function (hotelObj) {

                        _self.currentHotel = _service.decodeHotel(hotelObj);
                        //_self.currentHotelId = _self.currentHotel.id;

                        //ON PROMISE: always update title of app on hotel change
                        if ($rootScope.updateHeaderTitle && !hotelObj.virtual) {
                            $rootScope.updateHeaderTitle($state.current.name, _self.currentHotel.name);
                        }

                        var hotelImageCacher = document.getElementById("hotelImageCache");

                        if (hotelImageCacher) {
                            hotelImageCacher.innerHTML = "";
                            hotelImageCacher.innerHTML += "<img src='" + hotelObj.pictureUrl + "' />"
                        }

                        deferredCurHotel.resolve(_self.currentHotel);

                    });
                }
                else {
                    //_self.currentHotel = _service.getInitHotel();
                    deferredCurHotel.reject("noCheckin");
                }

                return deferredCurHotel.promise;
            },

            //getCurrentHotelId: function () {
            //
            //    if (_self.currentHotel && _self.currentHotel.id > 0) {
            //        return _self.currentHotel.id;
            //    }
            //    else {
            //
            //        //TODO Eugen: load current hotel
            //        return _self.getVirtualHotel().id;
            //    }
            //
            //},

            //getVirtualHotel: function () {
            //
            //    if (_self.virtualHotel) {
            //        return _self.virtualHotel;
            //    }
            //
            //    if (!_self.profileData) {
            //        return null;
            //    }
            //
            //    var virtualHotelPromise = HotelDto.get({customerId: _self.profileData.id, hotelId: -999}, function (virtualHotel) {
            //
            //        if (virtualHotel.id > 0) {
            //            _self.virtualHotel = _service.decodeHotel(virtualHotel);
            //
            //            var hotelImageCacher = document.getElementById("hotelImageCache");
            //
            //            if (hotelImageCacher) {
            //                hotelImageCacher.innerHTML = "";
            //                hotelImageCacher.innerHTML += "<img src='" + virtualHotel.pictureUrl + "' />"
            //            }
            //        }
            //        else {
            //            _self.virtualHotel = null;
            //        }
            //        
            //        deferredState.resolve(_self);
            //
            //        return _self.virtualHotel;
            //
            //    });
            //
            //    return virtualHotelPromise;
            //},

            getHotelCustomers: function (hotelId, forceUpdate) {

                var deferredHotelCustomers = $q.defer();

                if (!hotelId) {
                    hotelId = _self.profileData.hotelId;
                }

                if (!forceUpdate && _self.hotelCustomers && _self.hotelCustomers.length > 0 && _self.hotelCustomers[0].hotelId == hotelId) {
                    deferredHotelCustomers.resolve(hotelCustomers);
                    return deferredHotelCustomers.promise;
                }

                if (hotelId > 0 && _self.profileData.id > 0) {

                    var CustomersByHotelService = $resource('./customers/customers/:customerId/hotel/:hotelId/addStaff/:addStaff', {customerId: '@customerId', hotelId: '@hotelId', addStaff: '@addStaff'}, {'getCustomers': {method: 'GET', isArray: true}});

                    var hotelCustomers = CustomersByHotelService.getCustomers({customerId: _self.profileData.id, hotelId: hotelId, addStaff: true}, function () {

                        _self.hotelCustomers = [];
                        _self.hotelStaffCustomers = [];

                        for (var c = 0; c < hotelCustomers.length; c++) {
                            
                            hotelCustomers[c] = _service.decodeCustomer(hotelCustomers[c]);
                            
                            //ADD all on central array
                            _self.allCustomersById[hotelCustomers[c].id] = hotelCustomers[c];

                            if (hotelCustomers[c].id != _self.profileData.id) {
                                if (hotelCustomers[c].hotelStaff)
                                    _self.hotelStaffCustomers[_self.hotelStaffCustomers.length] = hotelCustomers[c];
                                else {
                                    //All hotel customers, egal ob kontakt mit mir oder nicht
                                    _self.hotelCustomers[_self.hotelCustomers.length] = hotelCustomers[c];
                                }

                            }
                        }

                        deferredHotelCustomers.resolve(hotelCustomers);
                    });
                }
                else {
                    _self.hotelCustomers = [];
                    _self.hotelStaffCustomers = [];
                    //_self.staffCustomer = null;
                    deferredHotelCustomers.reject("noLogin");
                }

                return deferredHotelCustomers.promise;

            },

            /// add new customer to chatList

            waitingCustomerEvents : [],

            handleHotelEvent: function (eventObject) 
            {
                var newCustomerId = eventObject && eventObject["senderId"] ? eventObject["senderId"] : 0;

                if (newCustomerId && newCustomerId > 0) {
                    if (!_self.waitingCustomerEvents) {
                        _self.waitingCustomerEvents = [];
                    }

                    _self.waitingCustomerEvents[newCustomerId] = eventObject;

                    var changedCustomer = getUserWithLastMessagesService.getCustomerWithLastMessage({getId: newCustomerId, senderId: _self.profileData.id}, function () {

                        if (!changedCustomer || changedCustomer.id <= 0 || !_self.waitingCustomerEvents[changedCustomer.id]) {
                            return;
                        }

                        //var newCustomerEvent = _self.waitingCustomerEvents[changedCustomer.id];

                        var newEventType = eventObject["event"];

                        var eventHotelId = eventObject["hotelId"];

                        var entityId = eventObject["entityId"];

                        var entity = eventObject["entity"];

                        var eventMessage = eventObject["message"];

                        changedCustomer = _service.decodeCustomer(changedCustomer);
                        
                        //SET TO WHOLE CUSTOMERS ARRRAY
                        _self.allCustomersById[changedCustomer.id] = changedCustomer;

                        var addedToChatHotel = false;
                        var removedFromChatHotel = false;
                        var addedToChatPartners = false;
                        var removedFromChatPartners = false;

                        ////if new message to me, and chatPartner not in my real hotel
                        //if (newEventType == "EVENT_WALL_NEW_MESSAGE") {
                        //    //TODO Eugen: alert about wall message  
                        //
                        //    if($state.current.name == "app.wall")
                        //    {
                        //        return;
                        //    }
                        //    
                        //    if (eventHotelId == _self.profileData.hotelId && _self.profileData.checkedIn) {
                        //
                        //    }
                        //
                        //    return;
                        //}
                        //else 
                        if ((newEventType+"").indexOf("EVENT_LOGO_")>=0) {
                            if (entity == "Hotel") {
                                
                                if(eventHotelId == _self.profileData.hotelId)
                                {
                                    _self.currentHotel.pictureUrl = eventMessage;
                                }
                                
                                $rootScope.setEntityLogo(entity, entityId, eventMessage);
                                
                            }
                            else if (entity == "HotelActivity") {
                                
                                if(eventHotelId == _self.profileData.hotelId)
                                {
                                    for (var a = 0; a < _self.hotelActivities.length; a++) {
                                        if (_self.hotelActivities[a].activityId == entityId) {
                                            _self.hotelActivities[a].pictureUrl = eventMessage;
                                            break;
                                        }
                                    } 
                                }

                                for (var a = 0; a < _self.allActivities.length; a++) {
                                    if (_self.allActivities[a].activityId == entityId) {
                                        _self.allActivities[a].pictureUrl = eventMessage;
                                        break;
                                    }
                                }
                                
                                $rootScope.setEntityLogo(entity, entityId, eventMessage);
                            }
                            else if (entity == "Customer" && _self.allCustomersById[entityId]) {
                                _self.allCustomersById[entityId].avatarUrl = eventMessage;
                                
                                if(_self.profileData && _self.profileData.id == entityId)
                                {
                                    _self.profileData.avatarUrl = eventMessage;
                                }
                            }


                            return;
                        }
                        //if new message to me, and chatPartner not in my real hotel
                        else if (newEventType == "EVENT_CHAT_NEW_MESSAGE") {
                            if (!changedCustomer.lastMessageToMe) // || (_self.profileData.checkedIn && changedCustomer.hotelId == _self.profileData.hotelId))
                            {
                                return;
                            }

                            if(_self.profileData.checkedIn && changedCustomer.hotelId == _self.profileData.hotelId)
                            {
                                for (var c = 0; c < _self.hotelCustomers.length; c++) {
                                    if (_self.hotelCustomers[c].id == changedCustomer.id) {
                                        _self.hotelCustomers[c] = changedCustomer;
                                        return;
                                        //return;
                                    }
                                }

                                _self.hotelCustomers.push(changedCustomer);

                                addedToChatHotel = true;
                            }
                            else{
                                
                                for (var c = 0; c < _self.contactCustomers.length; c++) {
                                    if (_self.contactCustomers[c].id == changedCustomer.id) {
                                        _self.contactCustomers[c] = changedCustomer;
                                        return;
                                        //return;
                                    }
                                }

                                _self.contactCustomers.push(changedCustomer);

                                addedToChatPartners = true;
                            }

                            $rootScope.$broadcast('chatListChangeEvent', []);

                        }
                        //if the new customer is checkin in my real hotel
                        else if (newEventType == "EVENT_CHECKIN") {
                            if (entityId != _self.profileData.hotelId || !_self.profileData.checkedIn || changedCustomer.id == _self.profileData.id) {
                                return;
                            }

                            $rootScope.addToasterMessage('success', eventMessage, changedCustomer.firstName + " " + changedCustomer.lastName);

                            for (var c = 0; c < _self.hotelCustomers.length; c++) {
                                if (_self.hotelCustomers[c].id == changedCustomer.id) {
                                    _self.hotelCustomers[c] = changedCustomer;
                                    return;
                                }
                            }

                            _self.hotelCustomers.push(changedCustomer);
                            addedToChatHotel = true;
                        }
                        //if new customer checkout and not in my hotel more
                        else if (newEventType == "EVENT_CHECKOUT") {
                            if (!_self.hotelCustomers || entityId != _self.profileData.hotelId || !_self.profileData.checkedIn) {
                                return;
                            }

                            for (var c = 0; c < _self.hotelCustomers.length; c++) {
                                if (_self.hotelCustomers[c].id == changedCustomer.id) {
                                    //remove checkout customer from my real hotel
                                    _self.hotelCustomers.splice(c, 1);
                                    return;
                                }
                            }

                            removedFromChatHotel = true;
                        }
                        ////If not in my real hotel and has chat with me
                        //if(changedCustomer.lastMessageToMe && (eventHotelId!=_self.currentHotel.id || _self.currentHotel.virtual) && _self.contactCustomers) //chat with me
                        //{
                        //    for(var c=0; c<_self.contactCustomers.length; c++)
                        //    {
                        //        if(_self.contactCustomers[c].id == changedCustomer.id)
                        //        {
                        //            _self.contactCustomers[c] = changedCustomer;
                        //            return;
                        //        }
                        //    }
                        //
                        //    _self.contactCustomers.push(changedCustomer);
                        //    addedToChatPartners = true;
                        //}
                        else if (newEventType == "EVENT_REGISTER" && _self.allCustomersById)//other chat vip users
                        {
                            $rootScope.addToasterMessage('success', eventMessage, changedCustomer.firstName + " " + changedCustomer.lastName);

                            //_self.allCustomersById.push(changedCustomer);
                        }
                        else if (newEventType == "EVENT_REMOVE_ACTIVITY"){
                            
                            if(eventHotelId == _self.profileData.hotelId)
                            {
                                for (var a = 0; a < _self.hotelActivities.length; a++) {
                                    if (_self.hotelActivities[a].activityId == entityId) {
                                        _self.hotelActivities.splice(a, 1);
                                        break;
                                    }
                                }
                            }

                            for (var a = 0; a < _self.allActivities.length; a++) {
                                if (_self.allActivities[a].activityId == entityId) {
                                    _self.allActivities.splice(a, 1);
                                    break;
                                }
                            }
                        }
                        
                        ////if added to real hotel chat list, remove from chat list
                        //if( addedToChatHotel && _self.contactCustomers)
                        //{
                        //    //TODO Eugen: remove from chatPartners
                        //    for(var c=0; c<_self.contactCustomers.length; c++)
                        //    {
                        //        if(_self.contactCustomers[c].id == changedCustomer.id)
                        //        {
                        //            _self.contactCustomers.splice(c, 1);
                        //            removedFromChatPartners = true;
                        //        }
                        //    }
                        //}

                        ////remove from vip lists
                        //if((addedToChatPartners && !removedFromChatHotel) || (addedToChatHotel && !removedFromChatPartners))
                        //{
                        //    //TODO Eugen: remove from chatPartners -> with filter
                        //    //for(var c=0; c<_self.allChatCustomers.length; c++)
                        //    //{
                        //    //    if(_self.allChatCustomers[c].id == changedCustomer.id)
                        //    //    {
                        //    //        _self.allChatCustomers.splice(c, 1);
                        //    //        removedFromOtherList = true;
                        //    //    }
                        //    //}
                        //}

                        ////if removed from chatHotel, and has no messages to me -> so add to vip list
                        //if(removedFromChatHotel && !addedToChatPartners)
                        //{
                        //    _self.allChatCustomers.push(changedCustomer);
                        //}
                        ////}

                    });
                }

            },

            //_goStateBack : function() {


            //break;
            //
            //var currentState = $state.current.name;
            //
            //if (currentState.length > 0) {
            //
            //    switch (currentState) {
            //        case "app.chat":
            //            //$location.path("/app/chatList");
            //            $state.go("app.chatList");
            //            break;
            //
            //        case "app.avatar":
            //            //$location.path("/app/me");
            //            $state.go("app.me");
            //
            //            break;
            //
            //        case "app.user":
            //        case "app.me":
            //            //$location.path("/app/chat");
            //            //var chatPartnerId = $stateParams.userId;
            //
            //           
            //
            //        //case "app.chatList":
            //        //  $location.path("/app/hotel");
            //        //  break;
            //
            //        //case "app.editActivity":
            //        //  lastIsId? $location.path("/app/activities") : $location.path("/app/hotel");
            //        //  break;
            //
            //        default:
            //$location.path("/app/hotel");
            //            $state.go("app.hotel");
            //            break;
            //    }
            //}
            //},

            //getMessage: function(){
            //    return $q.when("Hello World!");
            //}
            //_service : this,

                //setStaticService
        //:
        //    function (val) {
        //        _service = val;
        //    },

            updateState : function (newProfil) {
                if (newProfil && newProfil.id > 0 && newProfil.firstName && _self.setProfileData) {
                    _self.setProfileData(newProfil);
                }
                else if (_self.profileData && _self.profileData.id > 0 && _self.setProfileData) {
                    _self.setProfileData(_self.profileData);
                }
    
            },

            goStateBack: function () {

                _self.ignoreNextHistoryState = true;
                
                var nextStateObj = [];
                nextStateObj["stateName"] = "app.hotel";
                nextStateObj["stateParams"] = {};
    
                if (_self.profileData && _self.profileData.logged && _self.profileData.id > 0 && _self.getPreviousRouteState) {
                    var prevStateObj = _self.getPreviousRouteState();
    
                    if (prevStateObj && prevStateObj["stateName"] && nextStateObj["stateParams"]) {
                        nextStateObj = prevStateObj;
                    }
    
                    $state.go(nextStateObj["stateName"], nextStateObj["stateParams"]);
                    return;
                }
                else {
    
                    $state.go(_self.getDefaultStartState());
                }
    
                return;
            }
    };
        
    state.initState();  
    
    return state;
        
});
 

//app
angular.module("hotelApp.logoutCustomerService", [ "ngResource" ])
	
	.factory("LogoutCustomer", function($resource) {
	return $resource("./customers/logout", {
		//eMail: '@eMail',
		//password: '@password'
	}, {
		get: { 
			method: 'GET' ,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		} 
		,logout: { 
			method: 'POST' ,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		} 
	});
});
//app
angular.module("hotelApp.notificationService", [])
	.service("NotificationService", function($q, $timeout, $rootScope) {

		var socketService = {}, notificationListener = $q.defer(), activityListener = $q.defer(), notificationSocket = {
				client: null,
				stomp: null
        }, 
			
        //List of already sended but jet not received message IDs 
        messageIds = [];
        
        //Write in console!!!
        socketService.debugMode = 0;
        
        //ONLY IF SAVE THE CREATED notificationSubscription, WE CAN unsubscribe IT !!!!
        socketService.notificationSubscription = "";        
        socketService.activitySubscription = "";

        // conInterval -> 'setInterval', that will try to reconnect on error untill 'clearInterval'
        socketService.conInterval = false;
		
        socketService.configObj = {
           
            //notificationSubscription url
            notificationSubscriptionQueue : null,
            activitySubscriptionQueue : null,
           
            useHeartbeat: false,
            
            headers: {
                
            },

            connectHeaders: {
                //login: {},
                //passcode: {},
                //host: ""
            }
        };

        //reconnect setInterval timeout
        socketService.RECONNECT_TIMEOUT = 30000;


        //Path for basic SocjkJs -> to Spring Controller
        socketService.NOTIFICATION_SOCKET_URL = "/"+($rootScope.HOST_SUFFIX? $rootScope.HOST_SUFFIX : "")+"notify";
         
		//Unique Topic of this Chat // part of SUBSCRIBE_URL
		socketService.NOTIFICATION_TOPIC = "/notificationtopic/message";
        socketService.ACTIVITY_TOPIC = "/activitytopic/message";
        
		// TODO ???
        // stomp.send() URL
		socketService.NOTIFICATION_BROKER = "/app/notification";
		socketService.ACTIVITY_BROKER = "/app/activity";
        
		//########################################

		//receive to Controller
		socketService.disconnectSocket = function() {

            if(notificationSocket.stomp && notificationSocket.stomp.connected)
            {
                notificationSocket.stomp.disconnect(function() {
                    //alert("See you next time!");
                });
            }
            
        }
        
		socketService.receiveNotification = function() {
			// send server-promise to client controller
			return notificationListener.promise;
		};
        
        socketService.receiveActivity = function() {
			// send server-promise to client controller
			return activityListener.promise;
		};

		socketService.resubscribeWithCustomerData = function(hotelState)
		{
			socketService.hotelState = hotelState;

            if(notificationSocket.stomp && notificationSocket.stomp.connected)
            {
                //### RE-SUBSCRIBE NOTIFICATIONS, IF LOGGED IN ############################
                var tempNotificationSubscriptionQueue = socketService.hotelState && socketService.hotelState.profileData.id>0? socketService.NOTIFICATION_TOPIC + "/" + socketService.hotelState.profileData.id : null;

                //check if subscription exists or was changed
                if(!socketService.configObj || !socketService.configObj.notificationSubscriptionQueue || socketService.configObj.notificationSubscriptionQueue!=tempNotificationSubscriptionQueue)
                {
                    if(socketService.notificationSubscription)
                    {
                        socketService.notificationSubscription.unsubscribe();
                    }

                    if(socketService.hotelState && socketService.hotelState.profileData.id>0)
                    {
                        subscribeNotificationTopic();
                    }
                }
                
                // ###########################################

                //### RE-SUBSCRIBE ACTIVITIES, IF CHECKED IN HOTEL

                var activitySubscriptionQueueTemp = socketService.hotelState && socketService.hotelState.profileData.hotelId>0? socketService.ACTIVITY_TOPIC + "/" + socketService.hotelState.profileData.hotelId : null;

                //check if subscription exists or was changed
                if(!socketService.configObj || !socketService.configObj.activitySubscriptionQueue || socketService.configObj.activitySubscriptionQueue!=activitySubscriptionQueueTemp)
                {
                    if(socketService.activitySubscription)
                    {
                        socketService.activitySubscription.unsubscribe();
                        $rootScope.myWait(2000);
                    }

                    if(socketService.hotelState && socketService.hotelState.profileData.hotelId>0)
                    {
                        subscribeActivityTopic();
                    }
                }

                // ###########################################
                
            }
            else{
                initConnect();
            }
        }
        
        socketService.resubscribeWithHotelData = function(hotelState)
        {
            return socketService.resubscribeWithCustomerData(hotelState);
            
			//socketService.hotelState = hotelState;
        //
        //    if(notificationSocket.stomp && notificationSocket.stomp.connected)
        //    {
        //        //### RE-SUBSCRIBE ACTIVITIES, IF CHECKED IN HOTEL
        //
        //        var activitySubscriptionQueueTemp = socketService.hotelState && socketService.hotelState.profileData.hotelId>0? socketService.ACTIVITY_TOPIC + "/" + socketService.hotelState.profileData.hotelId : null;
        //
        //        //check if subscription exists or was changed
        //        if(socketService.configObj && socketService.configObj.activitySubscriptionQueue && socketService.configObj.activitySubscriptionQueue==activitySubscriptionQueueTemp)
        //        {
        //            return;    
        //        }
        //        
        //        if(socketService.activitySubscription)
        //        {
        //            socketService.activitySubscription.unsubscribe();
        //            $rootScope.myWait(2000);
        //        }
        //        
        //        if(socketService.hotelState && socketService.hotelState.profileData.hotelId>0)
        //        {
        //            subscribeActivityTopic();
        //        }
        //        
        //        // ###########################################
        //    }
        //    else{
        //        initConnect();
        //    }
        }

        socketService.stopAndEmptyCustomer = function()
        {
            socketService.hotelState = null;

            socketService.disconnectSocket();
        }
    
        //send from Controller
		socketService.send = function(message, senderId, hotelId) {
			//generate random message id
			var id = Math.floor(Math.random() * 1000000);;
        
			//Socket SEND Methode
			notificationSocket.stomp.send(socketService.NOTIFICATION_BROKER, {
				priority: 9
			}, JSON.stringify({ //MESSAGE CONTENT
				message: message,
				hotelId : hotelId,
				senderId: senderId,
				creationTime: (new Date).getTime(),
				id: id
			}));
			messageIds.push(id);
		};

	    socketService.checkSocketConnection = function() {

            setTimeout(function(){
                if (!notificationSocket.stomp || !notificationSocket.stomp.connected)
                {
                    initConnect();
                }
            }, 1500);
		};  
	
		var getMessage = function(data) {
			var message = JSON.parse(data), out = {};
			
			return message;
		};
        
        var subscribeNotificationTopic = function()
        {
            socketService.configObj.notificationSubscriptionQueue = socketService.hotelState && socketService.hotelState.profileData.id>0? socketService.NOTIFICATION_TOPIC + "/" + socketService.hotelState.profileData.id : null;

            if(!socketService.configObj.notificationSubscriptionQueue)
            {
                //NO notificationSubscription WITHOUT CUSTOMER_ID
                return;
            }
            
            socketService.notificationSubscription =
                // #### START WsWorker.notificationSubscription
                notificationSocket.stomp.subscribe(socketService.configObj.notificationSubscriptionQueue,
                    /*onMessage*/
                    function (message) {

                        notificationListener.notify(getMessage(message.body));
                        
                        //TODO Eugen: acknolidge Server, about receive!!!! 
                        //TODO Eugen: -> DELIEVERED TO CUSTOMER!!!!!
                        notificationSocket.stomp.ack(message.headers["message-id"], message.notificationSubscription, message.headers);
                    }
                    //TODO Eugen: //, socketService.configObj.headers
                );
        } 
        
        var subscribeActivityTopic = function()
        {
            socketService.configObj.activitySubscriptionQueue = socketService.hotelState && socketService.hotelState.profileData.hotelId>0? socketService.ACTIVITY_TOPIC + "/" + socketService.hotelState.profileData.hotelId : null;

            if(!socketService.configObj.activitySubscriptionQueue)
            {
                //NO notificationSubscription WITHOUT CUSTOMER_ID
                return;
            }
            
            socketService.activitySubscription =
                // #### START WsWorker.notificationSubscription
                notificationSocket.stomp.subscribe(socketService.configObj.activitySubscriptionQueue,
                    /*onMessage*/
                    function (message) {

                        activityListener.notify(getMessage(message.body));
                        
                        //TODO Eugen: acknolidge Server, about receive!!!! 
                        //TODO Eugen: -> DELIEVERED TO CUSTOMER!!!!!
                        notificationSocket.stomp.ack(message.headers["message-id"], message.activitySubscription, message.headers);
                    } 
                    //TODO Eugen: //,socketService.configObj.headers
            );
        }
        
        var initConnect = function(e)
        {
            //ONLY IF NOW NOT CONNECTED!!!
            if (!notificationSocket.stomp || !notificationSocket.stomp.connected) {

                //WsWorker.debugMode = 1;

                if (socketService.debugMode)
                    console.log("Connecting...");

                //TODO Eugen test it!!!
                socketService.configObj = e ? e.data.config : socketService.configObj;

                //var ws = new WebSocket(notificationSocket.config.wsUrl);
                //notificationSocket.stomp = Stomp.over(ws);

                if(!notificationSocket.stomp && !notificationSocket.client)
                {
                    notificationSocket.client = new SockJS(socketService.NOTIFICATION_SOCKET_URL);
                    notificationSocket.stomp = Stomp.over(notificationSocket.client);
                }
                
                if (!socketService.debugMode)
                    notificationSocket.stomp.debug = null;

                //TODO Eugen test it!!!
                if(socketService.configObj.useHeartbeat)
                {
                    notificationSocket.stomp.heartbeat.outgoing = 20000;
                    notificationSocket.stomp.heartbeat.incoming = 20000;
                }

                notificationSocket.stomp.connect(socketService.configObj.connectHeaders,
                    /*onConnect*/function () {
   
                        subscribeNotificationTopic();
                        subscribeActivityTopic();
                        
                        // ### END WsWorker.notificationSubscription

                        if (socketService.debugMode)
                            console.log("Connected");
                    },
                    /*onError*/function (error) {

                        if (socketService.debugMode)
                            console.log("Error: " + (error ? error : "unknown"));

                        if ((!notificationSocket.stomp || !notificationSocket.stomp.connected) && !socketService.conInterval) {
                            
                            //##########################################################
                            /*
                            //if error -> TRY TO RE-CONNECT EVERY 30 sec !!
                            // conInterval -> 'setInterval', that will try to reconnect on error untill 'clearInterval'
                            socketService.conInterval = setInterval(function () {
                                if (notificationSocket.stomp && notificationSocket.stomp.connected) {
                                    clearInterval(socketService.conInterval);
                                    socketService.conInterval = false;
                                }
                                initConnect();
                            }, socketService.RECONNECT_TIMEOUT);
                            */
                            
                            var timerWorker = $rootScope.getTimeWebWorker();
                            socketService.conInterval = timerWorker.setInterval(
                                function(){
                                    if (notificationSocket.stomp && notificationSocket.stomp.connected) {
                                        timerWorker.clearInterval(socketService.conInterval);
                                        //clearInterval(socketService.conInterval);
                                        socketService.conInterval = false;
                                    }
                                    initConnect();
                                }
                                ,socketService.RECONNECT_TIMEOUT);
                        }

                    }
                    //TODO Eugen: HOST -> , socketService.configObj.host
                );
            }
        }
        
		return socketService;
	});
//angular.module("hotelApp.serverCommunicatorService", [ "ngResource", "hotelApp.sessionCustomerService", "hotelApp.customerDto", "hotelApp.hotelDto", "hotelApp.sessionCustomerService" ])
//    .factory("ServerCommunicator", function($q, $rootScope, $resource, $state, $location, SessionCustomer, CustomerDto, HotelDto, SessionCustomer) {
//
//        var _self = this;
//    
//        var communicator = {
//            
//            method: function()
//            {
//                return;
//            }
//            
//        }
//        
//        return communicator;
//    
//    });
angular.module("hotelApp.sessionCustomerService", [ "ngResource" ]).factory("SessionCustomer", function($resource) {
	return $resource("./customers/validSessionCustomer", {
		//eMail: '@eMail',
		//password: '@password'
	}, {
		get: { 
			method: 'GET' ,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		} 
		,save: { 
			method: 'POST' ,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		} 
	});
});
	
'use strict';

/**
 * 0.1.1
 * Deferred load js/css file, used for ui-jq.js and Lazy Loading.
 * 
 * @ flatfull.com All Rights Reserved.
 * Author url: http://themeforest.net/user/flatfull
 */

angular.module('ui.load', [])
	.service('uiLoad', ['$document', '$q', '$timeout', function ($document, $q, $timeout) {

		var loaded = [];
		var promise = false;
		var deferred = $q.defer();

		/**
		 * Chain loads the given sources
		 * @param srcs array, script or css
		 * @returns {*} Promise that will be resolved once the sources has been loaded.
		 */
		this.load = function (srcs) {
			srcs = angular.isArray(srcs) ? srcs : srcs.split(/\s+/);
			var self = this;
			if(!promise){
				promise = deferred.promise;
			}
      angular.forEach(srcs, function(src) {
      	promise = promise.then( function(){
      		return src.indexOf('.css') >=0 ? self.loadCSS(src) : self.loadScript(src);
      	} );
      });
      deferred.resolve();
      return promise;
		}

		/**
		 * Dynamically loads the given script
		 * @param src The url of the script to load dynamically
		 * @returns {*} Promise that will be resolved once the script has been loaded.
		 */
		this.loadScript = function (src) {
			if(loaded[src]) return loaded[src].promise;

			var deferred = $q.defer();
			var script = $document[0].createElement('script');
			script.src = src;
			script.onload = function (e) {
				$timeout(function () {
					deferred.resolve(e);
				});
			};
			script.onerror = function (e) {
				$timeout(function () {
					deferred.reject(e);
				});
			};
			$document[0].body.appendChild(script);
			loaded[src] = deferred;

			return deferred.promise;
		};

		/**
		 * Dynamically loads the given CSS file
		 * @param href The url of the CSS to load dynamically
		 * @returns {*} Promise that will be resolved once the CSS file has been loaded.
		 */
		this.loadCSS = function (href) {
			if(loaded[href]) return loaded[href].promise;

			var deferred = $q.defer();
			var style = $document[0].createElement('link');
			style.rel = 'stylesheet';
			style.type = 'text/css';
			style.href = href;
			style.onload = function (e) {
				$timeout(function () {
					deferred.resolve(e);
				});
			};
			style.onerror = function (e) {
				$timeout(function () {
					deferred.reject(e);
				});
			};
			$document[0].head.appendChild(style);
			loaded[href] = deferred;

			return deferred.promise;
		};
}]);
//angular.module("hotelApp.userDto", [ "ngResource" ]).factory("UserDto",  ['$resource', function($resource) {
//	return $resource("./users/users/:id", {
//		id: '@id',
//		hotelId: '@hotelId'
//		
//	}, {
//		update: {
//			method: "PUT"
//		},
//		get: {
//			method: 'get' ,
//			headers: {
//				'Content-Type': 'application/json;charset=UTF-8',
//				'Accept': 'application/json, text/plain, */*'
//			}
//		},
//		getByHotelId: {
//			method: 'get' ,
//			headers: {
//				'Content-Type': 'application/json;charset=UTF-8',
//				'Accept': 'application/json, text/plain, */*'
//			}
//		},
//		//checkLogin: {
//		//	method: 'POST' ,
//		//	headers: {
//		//		'Content-Type': 'application/json;charset=UTF-8',
//		//		'Accept': 'application/json, text/plain, */*'
//		//	}
//		//},
//		remove: {
//			method: "DELETE",
//			headers: {
//				'Content-Type': 'application/json;charset=UTF-8',
//				'Accept': 'application/json, text/plain, */*'
//			}
//		},
//		save: {
//			method: 'POST',
//			headers: {
//				'Content-Type': 'application/json;charset=UTF-8',
//				'Accept': 'application/json, text/plain, */*'
//			}
//		},
//		add: {
//			method: 'POST',
//			headers: {
//				'Content-Type': 'application/json;charset=UTF-8',
//				'Accept': 'application/json, text/plain, */*'
//			}
//		},
//		register: {
//			method: 'PUT',
//			headers: {
//				'Content-Type': 'application/json;charset=UTF-8',
//				'Accept': 'application/json, text/plain, */*'
//			}
//		}
//	});
//}]);
//
//




//(function(angular, SockJS, Stomp, _, undefined) {
//	angular.module("hotelApp.wallService", [])
app.service("WallService", function($q, $timeout, $rootScope) {

	var wallSocketService = {}, wallListener = $q.defer(), wallSocket = {
			client: null,
			stomp: null
		},

	//List of already sended but jet not received message IDs 
	messageIds = [], notSendMessageObjs = [];

	//Write in console!!!
	wallSocketService.debugMode = 0;
	
	//ONLY IF SAVE THE CREATED wallSubscription, WE CAN unsubscribe IT !!!!
	wallSocketService.wallSubscription = "";
	
	// conInterval -> 'setInterval', that will try to reconnect on error untill 'clearInterval'
	wallSocketService.conInterval = false;

	wallSocketService.configObj = {

		//wallSubscription url
		wallSubscriptionQueue : null,

		useHeartbeat: false,

		headers: {

		},

		connectHeaders: {
			//login: {},
			//passcode: {},
			//host: ""
		}
	};
	
	wallSocketService.WALL_RECONNECT_TIMEOUT = 3000;

	//Path to Spring Controller
	wallSocketService.WALL_SOCKET_URL = "/" + ($rootScope.HOST_SUFFIX? $rootScope.HOST_SUFFIX : "") + "wall/wall";
	//wallSocketService.WALL_SOCKET_URL = "/wall/wall";

	//Unique Topic of this Chat
	wallSocketService.WALL_TOPIC = "/walltopic/message";

	// TODO ???
	wallSocketService.WALL_BROKER = "/app/wall";

	//receive to Controller
	wallSocketService.receiveWall = function() {
		// send server-promise to client controller
		return wallListener.promise;
	};

	//receive to Controller
	wallSocketService.getNotSendWall = function() {
		// send server-promise to client controller
		return notSendMessageObjs;
	};

	wallSocketService.resubscribeWithHotelData = function (hotelState) {
		wallSocketService.hotelState = hotelState;

		if (wallSocket.stomp && wallSocket.stomp.connected) 
		{
			//### RE-SUBSCRIBE wallS, IF LOGGED IN
			var wallSubscriptionQueueTemp = wallSocketService.hotelState && wallSocketService.hotelState.profileData.hotelId > 0 ? wallSocketService.WALL_TOPIC + "/" + wallSocketService.hotelState.profileData.hotelId : null;

			//check if subscription exists or was changed
			if(wallSocketService.configObj && wallSocketService.configObj.wallSubscriptionQueue && wallSocketService.configObj.wallSubscriptionQueue==wallSubscriptionQueueTemp)
			{
				return;
			}
			
			if (wallSocketService.wallSubscription) {
				wallSocketService.wallSubscription.unsubscribe();
				$rootScope.myWait(2000);
			}
        
			if (wallSocketService.hotelState && wallSocketService.hotelState.profileData.hotelId > 0) {
				subscribeWallTopic();
			}
        
			// ###########################################
		}
		else 
		{
			initConnect();
		}
	}
	wallSocketService.checkSocketConnection = function () {

		setTimeout(function(){
			if (!wallSocket.stomp || !wallSocket.stomp.connected)
			{
				initConnect();
			}
		}, 1500);
		
		
	};
	//send from Controller
	wallSocketService.sendWall = function(message, senderId, hotelId, hotelStaff, messageId) {

		var isNew = false;

		if(!messageId)
		{
			isNew = true;
			messageId = Math.floor(Math.random() * 1000000);
		}

		var msgObj = JSON.stringify({ //MESSAGE CONTENT
			message: encodeURIComponent(message),
			hotelId : hotelId,
			senderId: senderId,
			hotelStaff: hotelStaff,
			creationTime: (new Date).getTime(),
			messageId: messageId
		});
		
		//Socket SEND Methode
		if(!wallSocket.stomp  || !wallSocket.stomp.connected)
		{
			wallSocketService.checkSocketConnection().then(function()
			{
				setTimeout(function() {
					wallSocket.sendWall(message, senderId, hotelId, hotelStaff, messageId);
				}, 500);
			});
		}
		else
		//Socket SEND Methode
		wallSocket.stomp.send(wallSocketService.WALL_BROKER, {
			priority: 9
		}, msgObj);
		//messageIds.push(id);

		var msgJson = JSON.parse(msgObj);

		msgJson.decodeMessage = decodeURIComponent(msgJson.message);
		msgJson.senderName = "Waiting";
		msgJson.sendTime = new Date();

		if(isNew)
		{
			messageIds.push(messageId);
			notSendMessageObjs.push(msgJson);
		}


		return msgJson;
	};

	//var reconnect = function() {
	//	$timeout(function() {
	//		initialize();
	//	}, this.WALL_RECONNECT_TIMEOUT);
	//};

	//entferne nicht gesendeten element
	var removeMsgFromArray = function(messageId)
	{
		for(var u=0; u < notSendMessageObjs.length; u++)
		{
			try
			{
				var nextMsgObjJson = JSON.parse(notSendMessageObjs[u]);
			}
			catch(e)
			{
				nextMsgObjJson = notSendMessageObjs[u];
			}

			if(nextMsgObjJson.messageId == messageId)
			{
				notSendMessageObjs.splice(u, 1);
				return;
			}
		}
	}

	wallSocketService.removeWallMsg = function(messageId)
	{
		return removeMsgFromArray(messageId);
	}

	var getMessage = function(data) {
		var message = JSON.parse(data);
		var out = message;
		out.message = decodeURIComponent(message.message);
		out.sendTime = new Date(message.sendTime);
		if (_.contains(messageIds, message.messageId)) {
			out.self = true;
			removeMsgFromArray(message.messageId);
			messageIds = _.remove(messageIds, message.messageId);
		}
		return out;
	};

	//var startListener = function() {
    //
	//	// SUBSCRIBE a UNIQUE TOPIC!!! Other i will not get
	//	wallSocket.stomp.subscribe(wallSocketService.WALL_TOPIC, function(data) {
	//		wallListener.notify(getMessage(data.body));
	//	});
	//};
	
	var subscribeWallTopic = function () {
		
		wallSocketService.configObj.wallSubscriptionQueue = wallSocketService.hotelState && wallSocketService.hotelState.profileData.hotelId > 0 ? wallSocketService.WALL_TOPIC + "/" + wallSocketService.hotelState.profileData.hotelId : null;
        
		if (!wallSocketService.configObj.wallSubscriptionQueue) {
			//NO wallSubscription WITHOUT CUSTOMER_ID
			return;
		}

		wallSocketService.wallSubscription =
			// #### START WsWorker.wallSubscription
			//wallSocket.stomp.subscribe(wallSocketService.configObj.wallSubscriptionQueue,
			wallSocket.stomp.subscribe(wallSocketService.configObj.wallSubscriptionQueue,
				/*onMessage*/
				function (message) {

					wallListener.notify(getMessage(message.body));

					//TODO Eugen: acknolidge Server, about receive!!!! 
					//TODO Eugen: -> DELIEVERED TO CUSTOMER!!!!!
					wallSocket.stomp.ack(message.headers["message-id"], message.wallSubscription, message.headers);
				}
				//TODO Eugen: //, socketService.configObj.headers
			);
	}
	
	//var initConnect = function() {
	//	wallSocket.client = new SockJS(wallSocketService.WALL_SOCKET_URL);
	//	wallSocket.stomp = Stomp.over(wallSocket.client);
	//	wallSocket.stomp.connect({}, startListener);
	//	wallSocket.stomp.onclose = reconnect;
	//};

	var initConnect = function (e) {
		//ONLY IF NOW NOT CONNECTED!!!
		if (!wallSocket.stomp || !wallSocket.stomp.connected) {

			//WsWorker.debugMode = 1;

			if (wallSocketService.debugMode)
				console.log("Connecting...");

			//TODO Eugen test it!!!
			wallSocketService.configObj = e ? e.data.config : wallSocketService.configObj;

			//var ws = new WebSocket(wallSocket.config.wsUrl);
			//wallSocket.stomp = Stomp.over(ws);

			if(!wallSocket.client && !wallSocket.stomp)
			{
				wallSocket.client = new SockJS(wallSocketService.WALL_SOCKET_URL);
				wallSocket.stomp = Stomp.over(wallSocket.client);
			}

			if (!wallSocketService.debugMode)
				wallSocket.stomp.debug = null;

			//TODO Eugen test it!!!
			if (wallSocketService.configObj.useHeartbeat) {
				wallSocket.stomp.heartbeat.outgoing = 20000;
				wallSocket.stomp.heartbeat.incoming = 20000;
			}

			wallSocket.stomp.connect(wallSocketService.configObj.connectHeaders,
				/*onConnect*/function () {

					subscribeWallTopic();
					//subscribeActivityTopic();

					// ### END WsWorker.wallSubscription

					if (wallSocketService.debugMode)
						console.log("Connected");
				},
				/*onError*/function (error) {

					if (wallSocketService.debugMode)
						console.log("Error: " + (error ? error : "unknown"));

					if ((!wallSocket.stomp || !wallSocket.stomp.connected) && !wallSocketService.conInterval) {

						//if error -> TRY TO RE-CONNECT EVERY 30 sec !!
						// conInterval -> 'setInterval', that will try to reconnect on error untill 'clearInterval'
						
						/*
						wallSocketService.conInterval = setInterval(function () {
							if (wallSocket.stomp && wallSocket.stomp.connected) {
								clearInterval(wallSocketService.conInterval);
								wallSocketService.conInterval = false;
							}
							initConnect();
						}, wallSocketService.RECONNECT_TIMEOUT);
						*/
						
						var timerWorker = $rootScope.getTimeWebWorker();
						wallSocketService.conInterval = timerWorker.setInterval(
							function(){
								if (wallSocket.stomp && wallSocket.stomp.connected) {
									timerWorker.clearInterval(wallSocketService.conInterval);
									//clearInterval(socketService.conInterval);
									wallSocketService.conInterval = false;
								}
								initConnect();
							}
							,wallSocketService.RECONNECT_TIMEOUT);
					}

				}
				//TODO Eugen: HOST -> , wallSocketService.configObj.host
			);
		}
	}
	
	//wallSocketService.startNew = function()
	//{
	//	wallSocket.client.close();
	//	initConnect();
	//}
	//wallSocket.stomp.

	initConnect();
	return wallSocketService;
});
//})(angular, SockJS, Stomp, _);
'use strict';

/* Filters */
// need load the moment.js to use this filter. 
angular.module('app')
  .filter('fromNow', function() {
    return function(date) {
      return moment(date).fromNow();
    }
  });
'use strict';

/* Controllers */

  // bootstrap controller
  app.controller('AccordionDemoCtrl', ['$scope', function($scope) {
    $scope.oneAtATime = true;

    $scope.groups = [
      {
        title: 'Accordion group header - #1',
        content: 'Dynamic group body - #1'
      },
      {
        title: 'Accordion group header - #2',
        content: 'Dynamic group body - #2'
      }
    ];

    $scope.items = ['Item 1', 'Item 2', 'Item 3'];

    $scope.addItem = function() {
      var newItemNo = $scope.items.length + 1;
      $scope.items.push('Item ' + newItemNo);
    };

    $scope.status = {
      isFirstOpen: true,
      isFirstDisabled: false
    };
  }])
  ; 
  app.controller('AlertDemoCtrl', ['$scope', function($scope) {
    $scope.alerts = [
      { type: 'success', msg: 'Well done! You successfully read this important alert message.' },
      { type: 'info', msg: 'Heads up! This alert needs your attention, but it is not super important.' },
      { type: 'warning', msg: 'Warning! Best check yo self, you are not looking too good...' }
    ];

    $scope.addAlert = function() {
      $scope.alerts.push({type: 'danger', msg: 'Oh snap! Change a few things up and try submitting again.'});
    };

    $scope.closeAlert = function(index) {
      $scope.alerts.splice(index, 1);
    };
  }])
  ; 
  app.controller('ButtonsDemoCtrl', ['$scope', function($scope) {
    $scope.singleModel = 1;

    $scope.radioModel = 'Middle';

    $scope.checkModel = {
      left: false,
      middle: true,
      right: false
    };
  }])
  ; 
  app.controller('CarouselDemoCtrl', ['$scope', function($scope) {
    $scope.myInterval = 5000;
    var slides = $scope.slides = [];
    $scope.addSlide = function() {
      slides.push({
        image: 'img/c' + slides.length + '.jpg',
        text: ['Carousel text #0','Carousel text #1','Carousel text #2','Carousel text #3'][slides.length % 4]
      });
    };
    for (var i=0; i<4; i++) {
      $scope.addSlide();
    }
  }])
  ; 
  app.controller('DropdownDemoCtrl', ['$scope', function($scope) {
    $scope.items = [
      'The first choice!',
      'And another choice for you.',
      'but wait! A third!'
    ];

    $scope.status = {
      isopen: false
    };

    $scope.toggled = function(open) {
      //console.log('Dropdown is now: ', open);
    };

    $scope.toggleDropdown = function($event) {
      $event.preventDefault();
      $event.stopPropagation();
      $scope.status.isopen = !$scope.status.isopen;
    };
  }])
  ; 
  app.controller('ModalInstanceCtrl', ['$scope', '$modalInstance', 'items', function($scope, $modalInstance, items) {
    $scope.items = items;
    $scope.selected = {
      item: $scope.items[0]
    };

    $scope.ok = function () {
      $modalInstance.close($scope.selected.item);
    };

    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
  }])
  ; 
  app.controller('ModalDemoCtrl', ['$scope', '$modal', '$log', function($scope, $modal, $log) {
    $scope.items = ['item1', 'item2', 'item3'];
    $scope.open = function (size) {
      var modalInstance = $modal.open({
        templateUrl: 'myModalContent.html',
        controller: 'ModalInstanceCtrl',
        size: size,
        resolve: {
          items: function () {
            return $scope.items;
          }
        }
      });

      modalInstance.result.then(function (selectedItem) {
        $scope.selected = selectedItem;
      }, function () {
        $log.info('Modal dismissed at: ' + new Date());
      });
    };
  }])
  ; 
  app.controller('PaginationDemoCtrl', ['$scope', '$log', function($scope, $log) {
    $scope.totalItems = 64;
    $scope.currentPage = 4;

    $scope.setPage = function (pageNo) {
      $scope.currentPage = pageNo;
    };

    $scope.pageChanged = function() {
      $log.info('Page changed to: ' + $scope.currentPage);
    };

    $scope.maxSize = 5;
    $scope.bigTotalItems = 175;
    $scope.bigCurrentPage = 1;
  }])
  ; 
  app.controller('PopoverDemoCtrl', ['$scope', function($scope) {
    $scope.dynamicPopover = 'Hello, World!';
    $scope.dynamicPopoverTitle = 'Title';
  }])
  ; 
  app.controller('ProgressDemoCtrl', ['$scope', function($scope) {
    $scope.max = 200;

    $scope.random = function() {
      var value = Math.floor((Math.random() * 100) + 1);
      var type;

      if (value < 25) {
        type = 'success';
      } else if (value < 50) {
        type = 'info';
      } else if (value < 75) {
        type = 'warning';
      } else {
        type = 'danger';
      }

      $scope.showWarning = (type === 'danger' || type === 'warning');

      $scope.dynamic = value;
      $scope.type = type;
    };
    $scope.random();

    $scope.randomStacked = function() {
      $scope.stacked = [];
      var types = ['success', 'info', 'warning', 'danger'];

      for (var i = 0, n = Math.floor((Math.random() * 4) + 1); i < n; i++) {
          var index = Math.floor((Math.random() * 4));
          $scope.stacked.push({
            value: Math.floor((Math.random() * 30) + 1),
            type: types[index]
          });
      }
    };
    $scope.randomStacked();
  }])
  ; 
  app.controller('TabsDemoCtrl', ['$scope', function($scope) {
    $scope.tabs = [
      { title:'Dynamic Title 1', content:'Dynamic content 1' },
      { title:'Dynamic Title 2', content:'Dynamic content 2', disabled: true }
    ];
  }])
  ; 
  app.controller('RatingDemoCtrl', ['$scope', function($scope) {
    $scope.rate = 7;
    $scope.max = 10;
    $scope.isReadonly = false;

    $scope.hoveringOver = function(value) {
      $scope.overStar = value;
      $scope.percent = 100 * (value / $scope.max);
    };
  }])
  ; 
  app.controller('TooltipDemoCtrl', ['$scope', function($scope) {
    $scope.dynamicTooltip = 'Hello, World!';
    $scope.dynamicTooltipText = 'dynamic';
    $scope.htmlTooltip = 'I\'ve been made <b>bold</b>!';
  }])
  ; 
  app.controller('TypeaheadDemoCtrl', ['$scope', '$http', function($scope, $http) {
    $scope.selected = undefined;
    $scope.states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Dakota', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];
    // Any function returning a promise object can be used to load values asynchronously
    $scope.getLocation = function(val) {
      return $http.get('http://maps.googleapis.com/maps/api/geocode/json', {
        params: {
          address: val,
          sensor: false
        }
      }).then(function(res){
        var addresses = [];
        angular.forEach(res.data.results, function(item){
          addresses.push(item.formatted_address);
        });
        return addresses;
      });
    };
  }])
  ; 
  app.controller('DatepickerDemoCtrl', ['$scope', function($scope) {
    $scope.today = function() {
      $scope.dt = new Date();
    };
    $scope.today();

    $scope.clear = function () {
      $scope.dt = null;
    };

    // Disable weekend selection
    $scope.disabled = function(date, mode) {
      return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
    };

    $scope.toggleMin = function() {
      $scope.minDate = $scope.minDate ? null : new Date();
    };
    $scope.toggleMin();

    $scope.open = function($event) {
      $event.preventDefault();
      $event.stopPropagation();

      $scope.opened = true;
    };

    $scope.dateOptions = {
      formatYear: 'yy',
      startingDay: 1,
      class: 'datepicker'
    };

    $scope.initDate = new Date('2016-15-20');
    $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
    $scope.format = $scope.formats[0];
  }])
  ; 
  app.controller('TimepickerDemoCtrl', ['$scope', function($scope) {
    $scope.mytime = new Date();

    $scope.hstep = 1;
    $scope.mstep = 15;

    $scope.options = {
      hstep: [1, 2, 3],
      mstep: [1, 5, 10, 15, 25, 30]
    };

    $scope.ismeridian = true;
    $scope.toggleMode = function() {
      $scope.ismeridian = ! $scope.ismeridian;
    };

    $scope.update = function() {
      var d = new Date();
      d.setHours( 14 );
      d.setMinutes( 0 );
      $scope.mytime = d;
    };

    $scope.changed = function () {
      //console.log('Time changed to: ' + $scope.mytime);
    };

    $scope.clear = function() {
      $scope.mytime = null;
    };
  }]);
'use strict';
app
//angular.module('hotelApp.hotel', ['ngRoute','ngCookies', 'ngResource', 'hotelApp.sessionCustomerService', /*'hotelApp.fileUploader',*/ 'hotelApp.activityService', 'hotelApp.activityDto'])

    .controller('ActivityListController', ['$scope', '$rootScope', '$location', '$resource', '$stateParams', 'HotelDto', 'HotelActivityDto', '$window', '$state', '$filter', '$mdDialog',
        function($scope, $rootScope, $location, $resource, $stateParams, HotelDto, HotelActivityDto, $window, $state, $filter, $mdDialog) {

            $scope.localState = {
                ready : 0,
                
                showActivityHotelLink:true, //Show Hotel Link in activities!!!
                //showPeFilteredHotelBlock:false, //Show selected Hotel Block!!!
                //showHotelCityFilterBlock:false, //Show selected Hotel Block!!!
                
                selectedFilterHotel : undefined,
                selectedCityHotel : undefined,

                //hotelCitySelectorUpdator: 0, //watcher down controller
                activitiesLoading: true,
                //newActivityFile : null,

                noActivityFound: false,
                searchFilter : {},
                strictSearch : true,

                filterActivities : []
            };

            $scope.accordionStatus = {
                editHotelOpen: false,
                infoHotelOpen: false,
                descriptionHotelOpen: false,
                newActivityOpen: false,
                isEditHotelDisabled: false,
                isInfoHotelDisabled: false,
                isDescriptionHotelDisabled: false,
                isNewActivityDisabled: false
            };

            var HotelActivitiesService = $resource('./activity/activities/customer/:customerId/hotel/:hotelId', {customerId:'@customerId', hotelId:'@hotelId'}, {'getActivities': {method: 'GET', isArray: true}});

            //################ filter Cities and Hotels #########################

            $scope.updateLocalFilter = function(onlySetIfEmpty, subSetToSearch){


                if(onlySetIfEmpty && $scope.localState.filterActivities && $scope.localState.filterActivities.length>0)
                {
                    return;
                }
                //var subSetToSearch = null;
                
                if($scope.localState.selectedFilterHotel && $scope.localState.selectedFilterHotel.id>0){
                    $scope.localState.searchFilter.hotelId = $scope.localState.selectedFilterHotel.id;
                }
                else if($scope.mainState.selectedCity != "-1" && $scope.mainState.selectedCity != undefined && $scope.mainState.selectedCity.toUpperCase() != $filter('translate')('alert.info.allCities').toUpperCase())
                {
                    $scope.localState.searchFilter.hotelCity = $scope.mainState.selectedCity;
                }
                
                //Eugen: Check if it is activityList, not hotelList
                if(!subSetToSearch || subSetToSearch.length==0 || !subSetToSearch[0].activityId)
                {
                    subSetToSearch = $scope.hotelState.allActivities;
                }
                
                $scope.localState.filterActivities = $filter('filter')(subSetToSearch, $scope.localState.searchFilter, true);//, $scope.localState.strictSearch);

                $scope.localState.noActivityFound = $scope.localState.filterActivities.length==0 && $scope.hotelState.allActivities.length>0;
                
                if($scope.localState.noActivityFound || $scope.localState.filterActivities.length>0)
                {
                    $scope.localState.activitiesLoading = false;
                }
                
                $scope.localState.copyActivities = angular.copy($scope.localState.filterActivities);

            }

            ////######################## HOTEL LIST -> UPDATE HOTEL ######################

            //$scope.isActivityOpened = function(activityId){
            //
            //    return $scope.localState.openActivities[activityId];
            //}
            //
            //$scope.openActivity = function(activityId){
            //
            //    var open = $scope.isActivityOpened(activityId);
            //
            //    if(open)
            //        $scope.localState.openActivities[activityId]=false;
            //    else{
            //        $scope.localState.openActivities[activityId]=true;
            //    }
            //};

            //$scope.submitNewActivity = function()
            //{
            //    $scope.localState.newActivityForm = document.forms['newActivityForm'];
            //
            //    if($scope.localState.newActivityForm)
            //        $scope.localState.newActivityForm.submit();
            //};

            //$scope.submitActivity = function() {
            //
            //    $scope.mainState.successMsg = false;
            //
            //    if(!$scope.localState.newactivity.shortDescription)
            //    {
            //        $scope.mainState.errorMsg = "Activity short description is empty";
            //        return;
            //    };
            //
            //    if($scope.localState.newactivity.shortDescription.length>0)
            //    {
            //        //var newActivity = new HotelActivityDto();
            //
            //        //newActivity.title = $scope.localState.newactivity.title;
            //        $scope.localState.newactivity.hotelId = $scope.hotelState.currentHotel.id;
            //        $scope.localState.newactivity.senderId = $scope.hotelState.profileData.id;
            //
            //        //Encode separatly, not display encoding bindings
            //        var encodedActivity = $scope.hotelService.encodeActivity($scope.localState.newactivity);
            //
            //        ActivityService.send(encodedActivity, $scope.localState.newactivity.activityId);
            //
            //        $scope.myWait(500);
            //
            //        $scope.uploadNewImage("activity", $scope.localState.newactivity.activityId);
            //
            //        $scope.localState.newactivity = $scope.hotelService.getInitActivity();
            //
            //        $scope.mainState.successMsg = "Activity wurde erzeugt";
            //
            //        $scope.accordionStatus.newActivityOpen = false;
            //
            //        //$window.location.reload();
            //
            //    }
            //    else{
            //        $scope.mainState.errorMsg = "Activity description to short";
            //        return;
            //    }
            //
            //};

           

            //$scope.removeActivity = function(activityId) {
            //
            //    ActivityRemoveService.remove({customerId: $scope.hotelState.profileData.id, activityId: activityId}, function(response){
            //        response.$promise.then(function(value){
            //            
            //            for(var a=0; a<$scope.hotelState.hotelActivities.length; a++)
            //            {
            //                if($scope.hotelState.hotelActivities[a].activityId == activityId)
            //                {
            //                    $scope.hotelState.hotelActivities.splice(a, 1);
            //                    $scope.mainState.successMsg = "Activity wurde entfernt";
            //
            //                    break;
            //                }
            //            }
            //            
            //        });
            //    });
            //};

            $scope.addUpdateActivity = function(newActivity)
            {
                var activityUpdated = false;

                if(newActivity.activityId>0)
                {
                    for(var a=0; a<$scope.hotelState.allActivities.length; a++)
                    {
                        if($scope.hotelState.allActivities[a].activityId == newActivity.activityId)
                        {
                            $scope.hotelState.allActivities[a] = newActivity;
                            activityUpdated = true;
                            break;
                        }
                    }
                }

                if(!activityUpdated)
                {
                    $scope.hotelState.allActivities.push(newActivity);
                }

                $scope.updateLocalFilter();
            };

            //################# SERVICE LISTENER //////////////////////////////////////////////////////

            //ActivityService.receive().then(null, null, function(activity) {
            //
            //    if( $scope.hotelState.currentHotel
            //        &&
            //        $scope.hotelState.currentHotel.id == activity.hotelId)
            //    {
            //
            //        var decodedActivity = $scope.hotelService.decodeActivity(activity);
            //
            //        if($scope.showDetailActivity && $scope.showDetailActivity.activityId==decodedActivity.activityId)
            //        {
            //            $scope.showDetailActivity = decodedActivity;
            //        }
            //
            //        $scope.addUpdateActivity(decodedActivity);
            //
            //        //$scope.loadDetailActivity();
            //    }
            //});

            // #################### POPUP BLOCK #################

            $scope.showPopup = function(ev) {

                if($scope.mainState.hidePopup || !$scope.hotelState.profileData)
                {
                    return;
                }

                if($state.current.name == "app.activityList")
                {
                 
                    if($scope.hotelState.profileData.hideHotelListPopup || $scope.hotelService.getCookie('hotelicohideHotelListPopup')=="true")
                    {
                        return;
                    }
                    
                    var confirm = $mdDialog.confirm(
                        {
                            clickOutsideToClose: true
                        })
                        .title($filter('translate')('page.activities.popupHeader'))
                        .content($filter('translate')('page.activities.popupText'))
                        .ariaLabel('Lucky day')
                        .ok('OK')
                        .cancel($filter('translate')('alert.noPopupMore'))
                        .targetEvent(ev);

                    $mdDialog.show(confirm).then(function() {

                    }, function() {
                        $scope.hotelState.profileData.hideHotelListPopup = true;
                        $scope.hotelService.setCookie('hotelicohideHotelListPopup', true);

                        $scope.hotelState.submitProfileData(true);
                    });
                }
                
            };


            //##################### WATCHERS ####################

            $scope.$watch('mainState.globalIntervalCheck', function() {

                if($state.current.name == "app.activityList" )
                {
                    //if($scope.hotelState.profileData)
                    {
                        $scope.getUpdateModuleData();
                    }
                    //else {
                    //    $scope.hotelState.initState().then(function(reponse){
                    //        $scope.getUpdateModuleData();
                    //    });
                    //}
                }

            });

            

            /// ###################### GET-UPDATE BLOCK ////////////////////////
            $scope.emptyPreviousSearch = function()
            {
                $scope.localState.searchFilter = {};
                //$scope.localState.selectedCityHotel = null;
                $scope.localState.selectedFilterHotel = null;
            }
            
            $scope.getUpdateAllActivities = function()
            {
                //load {All} Activities
                if(!$scope.hotelState.allActivities || $scope.hotelState.allActivities.length==0)
                {
                    var requesterId = $scope.hotelState.profileData? $scope.hotelState.profileData.id : -1;
                    
                    HotelActivitiesService.getActivities({customerId: requesterId, hotelId: -1}, function(responseArray){

                        $scope.hotelState.allActivities = $scope.decodeActivityList(responseArray);

                        //Eugen: filterCitySelector Watcher!!!
                        //$scope.localState.hotelCitySelectorUpdator++;
                        $rootScope.$broadcast('hotelCitySelectorChangeEvent', []);
                        //$scope.onChangeHotelCitySelector();
                        
                        $scope.showLoading(false);

                    });

                }
                else{
                    
                    //Eugen: filterCitySelector Watcher!!!
                    //$scope.localState.hotelCitySelectorUpdator++;
                }
            };

            ///######################## INIT BLOCK ##############

            $scope.getUpdateModuleData = function()
            {
                    $scope.getUpdateAllActivities();
            };

            function initActivityList(){

                if($state.current.name=="app.hotelPreview")
                {
                    if(!$scope.hotelState.profileData.checkedIn)
                    {
                        $state.go("app.checkin");
                    }
                    else{
                        
                        var previewHotelId = $stateParams.hotelId? $stateParams.hotelId : $scope.hotelState.profileData.hotelId; 
                        
                        $scope.getUpdateMainHotelObject(previewHotelId).then(function(hotelObj){
                            $scope.localState.selectedFilterHotel = hotelObj;
                            $scope.showHotel = hotelObj;
                        });
                    }
                    
                }
                
                $scope.showPopup();
                $scope.getUpdateModuleData();
                $scope.updateLocalFilter();
                $scope.hotelState.checkHeaderTab();
            };

            initActivityList();
            
            //wait for hotel state
            //$scope.hotelState.getDeferredState().then(function() {
            //    initActivityList();
            //});
        }
    ]
)
;
'use strict';
app
//angular.module('hotelApp.chat', ['ngCookies', 'ngResource', 'hotelApp.chatService',  'hotelApp.customerDto', 'hotelApp.sessionCustomerService'])

.controller('ChatContr', 
	['$scope', '$rootScope', '$location', '$resource', 'ChatService', 'CustomerDto', 'SessionCustomer', '$modal', '$stateParams', '$state',
	function($scope, $rootScope, $location, $resource, ChatService, CustomerDto, SessionCustomer, $modal, $stateParams, $state) {

		$scope.localState = {
			ready : 0,
			showChatDiv : false,
			senderId: 0,
			chatPartner : null,
	
			//TODO eugen: load old messages from DB
			messages : [],
			waitingMessages : [],
			
			unreadMessagesCounter : [],
	
			filterCity : "all",
			filterHotelId : 0,

			 newMessage : "",
		 	 max : 1000,

		 	 waitingMsg : [],

		 	notSendMessageArray : [],
			
		 	notSendCounter : 0
		};
		
		$scope.accordionStatus = {
			chatVipOpen: false,
			isChatVipDisabled: false
		};


		var ChatMessageService = $resource('./chat/messages/sender/:customerId/receiver/:receiverId', {customerId:'@customerId', receiverId:'@receiverId' }, {'getMessages': {method: 'GET', isArray: true,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}}});
		//var CheckReadMessageService = $resource('./chat/markRead/sender/:customerId/messageId/:messageId', {customerId:'@customerId', messageId:'@messageId' }, {'confirm': {method: 'GET'}});
		
		//var CheckReadMessageService = $resource('./chat/markReadMessage/receiverId/:customerId/messageId/:messageId', {customerId:'@customerId', messageId:'@messageId' }, {'confirm': {method: 'GET',
		//	headers: {
		//		'Content-Type': 'application/json;charset=UTF-8',
		//		'Accept': 'application/json, text/plain, */*'
		//	}}});
		
        var CheckReadSenderService = $resource('./chat/markReadChat/receiverId/:receiverId/senderId/:senderId/maxSeenChatMessageId/:maxSeenChatMessageId', {receiverId:'@receiverId', senderId:'@senderId', maxSeenChatMessageId:'@maxSeenChatMessageId' }, {'clear': {method: 'GET',
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}}});
		
        var ChatRestMessageService = $resource('./chat/messages/:messageId', { messageId:'@messageId' }, {'getMessages': {method: 'GET', isArray: true,
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}}, 
			update: { method: "PUT",
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		}});
		
		function emptyUnreadCounter(noConfirmToService){
			
			//remove unread counter!!!
			if ($scope.hotelNotification.notificationObj.unreadChatProSenderCount && $scope.hotelNotification.notificationObj.unreadChatProSenderCount[$scope.localState.receiverId]) {
				
				$scope.hotelNotification.notificationObj.unreadChatProSenderCount[$scope.localState.receiverId] = 0;
				
				//if(!noConfirmToService)
				//{
				//	CheckReadSenderService.clear({receiverId: $scope.hotelState.profileData.id, senderId: $scope.localState.receiverId, maxSeenChatMessageId : });
				//}
			}
		};
		
		$scope.getUpdateModuleData = function(sessionCustomer)
		{
			if(!sessionCustomer)
			{
				sessionCustomer = $scope.hotelState.profileData;
			}
			
			if(sessionCustomer.id && sessionCustomer.id>0)
			{
				$scope.localState.senderId = sessionCustomer.id;

				//if chat with one partner
				if($stateParams.receiverId && !isNaN($stateParams.receiverId) && $stateParams.receiverId>0)
				{
					$rootScope.showLoading(false);
					
					$scope.localState.receiverId = $stateParams.receiverId;

					$scope.localState.chatPartner = CustomerDto.get({id: $scope.localState.receiverId, requesterId: $scope.hotelState.profileData.id});

					$rootScope.chatPartner = $scope.localState.chatPartner;

					$rootScope.updateHeaderTitle();

					$scope.localState.showChatDiv = true;

					//update route info and header title
					$scope.hotelState.checkNextRouteState();
					
					//TODO Eugen: check if already loaded!!!
					if(!$scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId] || $scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId].length==0) {
						
						ChatMessageService.getMessages({customerId: sessionCustomer.id, receiverId: $scope.localState.receiverId}, function (messageArray) {
							
							if(!$scope.hotelState.chatHistoryByPartnerId)
							{
								$scope.hotelState.chatHistoryByPartnerId = [];
							}
							
							if(!$scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId])
							{
								$scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId] = [];
							}
							
							//save seen messageId, no duplicates
							var seenMsgId = [];
							
							var maxReceiverMessageId = 0;
							
							for (var m = 0; m < messageArray.length; m++) {
								
								var nextOldMessage = messageArray[m];
								
								if(seenMsgId[nextOldMessage.messageId])
								{
									continue;
								}								
								
								seenMsgId[nextOldMessage.messageId] = true;
								
								nextOldMessage.message = decodeURIComponent(nextOldMessage.message);
								nextOldMessage.sendTime = new Date(nextOldMessage.sendTime);
								
								if(nextOldMessage.message == "22")
								{
									var a = 6;
								}
								
								//mark oldMessage as read
								if(maxReceiverMessageId < nextOldMessage.messageId && nextOldMessage.receiverId == $scope.hotelState.profileData.id && $state.current.name=="app.chat" && $stateParams.receiverId==nextOldMessage.senderId)
								{
									maxReceiverMessageId = nextOldMessage.messageId;
								}
								
								$scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId].push(nextOldMessage);
							}

							if(maxReceiverMessageId>0)
							{
								//$scope.mainState.readUncheckedMessages.push(maxReceiverMessageId);
                                CheckReadSenderService.clear({receiverId: $scope.hotelState.profileData.id, senderId: $scope.localState.receiverId, maxSeenChatMessageId : maxReceiverMessageId });

                            }
							
							emptyUnreadCounter();

						});
					}
					else{
						emptyUnreadCounter();
					}
				}
				//else //chatlist!!!
				//{
				//	if(sessionCustomer.hotelId && sessionCustomer.hotelId>0)
				//	{
				//		if(!$scope.hotelState.currentHotel || $scope.hotelState.currentHotel==undefined || $scope.hotelState.currentHotel.id==undefined || $scope.hotelState.currentHotel.id==0 )
				//		{
				//			$scope.hotelState.setCurrentHotel(sessionCustomer.hotelId, sessionCustomer);
				//		}
				//		
				//		$scope.localState.hotelId =  sessionCustomer.hotelId;
				//		$scope.hotelState.getHotelCustomers($scope.hotelId);
				//		$scope.localState.ready = 1;
				//	}
				//	
				//	//GET not Hotel CHAT PARTNERS, THAT HAVE MESSAGES WITH ME
				//	
				//	var contactCustomers = notHotelChatPartnerService.getCustomers({customerId:sessionCustomer.id, filterCity: $scope.localState.filterCity, filterHotelId: $scope.localState.filterHotelId}, function() {
                //
                 //       for(var n=0; n<contactCustomers.length; n++)
                 //       {
				//			$scope.hotelState.allCustomersById[contactCustomers[n].id] = contactCustomers[n];
                 //       }
                //
				//		$scope.hotelState.contactCustomers = contactCustomers;
                //
				//	}, function(error)
				//	{
				//		$scope.mainState.errorMsg = error;
				//	});
                //
                //
				//	//$scope.loadVipChat();
                //
				//	//$scope.loadCustomerCities();
                //
				//}
			}
		}
		
		function scrollDown()
		{
			$scope.scrollDownById('chatContainer');
		}
		
		var inputElt = null;
		
		$scope.addChatMessage = function(message)
		{
			
			for(var w=$scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId].length-1; w>=0 ; w--)
			{
				if($scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId][w].messageId == message.messageId)
				{
					$scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId][w] = message;
					return;
				}
			}

			if(!$scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId])
			{
				$scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId] = [];
			}

			$scope.hotelState.chatHistoryByPartnerId[$scope.localState.receiverId].push(message);

			emptyUnreadCounter(true);
			
			scrollDown();
		};
		
		$scope.focusChatInput = function()
		{
			scrollDown();
			setTimeout(function(){scrollDown()}, 500);
		}
		
		$scope.removeWaitingMessage = function(message)
		{
			for(var w=0; w< $scope.localState.waitingMessages.length; w++)
			{
				if($scope.localState.waitingMessages[w].messageId == message.messageId)
				{
					$scope.localState.waitingMessages.splice(w,1);
					$scope.localState.notSendCounter = 0;
					$scope.localState.showResend = false;
					ChatService.removeMsg(message.messageId);

					break;
				}
			}
		};
		
		var checkOutgoingMsg = function()
		{
			$scope.localState.notSendMessageArray = [].concat(ChatService.getNotSendChat());
			
			if($scope.localState.notSendMessageArray.length>0)
			{
				$scope.localState.notSendCounter++;

				if($scope.localState.notSendCounter>3)
				{
					//$scope.openModal();
					$scope.localState.showResend = true;
					$scope.localState.notSendCounter = 0;
				}
				else {
					$scope.localState.showResend = false;
					for(var m=0; m<$scope.localState.notSendMessageArray.length; m++)
					{
						var nextMsg = $scope.localState.notSendMessageArray[m];
						
						var nextMsgJson = null;

						try
						{
							var nextMsgJson = JSON.parse(nextMsg);
						}
						catch(e)
						{
							nextMsgJson = nextMsg;
						}
						
						if(nextMsgJson.message)
						{
							nextMsgJson.message = decodeURIComponent(nextMsgJson.message);
						}
						
						$scope.localState.notSendMessageArray[m] = nextMsgJson;
						//alert("try to resend " + nextMsg.message);
						$scope.resendChatRessource(nextMsgJson);
					}
				}
				//check later result
				//setTimeout(checkOutgoingMsg, 3000);
			}
			else {
				$scope.localState.notSendCounter = 0;
			}
		};
		
		//$scope.resend = function(nextMsg){
		//	
		//	if(nextMsg)
		//	{
		//		ChatService.send(nextMsg.message, nextMsg.senderId, nextMsg.receiverId, $scope.hotelState.profileData.hotelStaff, nextMsg.messageId);
		//	}
		//	else{
		//		for(var l=0; l<$scope.notSendMessageArray.length; l++)
		//		{
		//			var next = $scope.notSendMessageArray[l];
		//			ChatService.send(next.message, next.senderId, next.receiverId, $scope.hotelState.profileData.hotelStaff, next.messageId);
		//		}
		//	}
		//	
		//	setTimeout(checkOutgoingMsg, 10000);
        //
		//}

		$scope.resendChatRessource = function(msgJson){

			


			//var isNew = false;
			//
			//if(!messageId)
			//{
			//	isNew = true;
			//	messageId = Math.floor(Math.random() * 1000000);
			//}
			//
			//var msgObj = JSON.stringify({ //MESSAGE CONTENT
			//	message: encodeURIComponent(message),
			//	hotelId : hotelId,
			//	senderId: senderId,
			//	//hotelStaff: hotelStaff,
			//	//sendTime: new Date(),
			//	messageId: messageId
			//})
			//
			//var msgJson = JSON.parse(msgObj);

			//if(nextMsg)
			{
				var chatRestObj = new ChatRestMessageService();
				chatRestObj.message = msgJson.message;
				chatRestObj.senderId = msgJson.senderId;
				//chatRestObj.hotelId = msgJson.hotelId;
				chatRestObj.receiverId = msgJson.receiverId,

				chatRestObj.hotelStaff = msgJson.hotelStaff;
				chatRestObj.messageId = msgJson.messageId;
				chatRestObj.$save(function(response){
					if(response && response.messageId>0)
					{
						$scope.addChatMessage(response);

						$scope.removeWaitingMessage(response);
					}
				}, function(error){
					console.log(error);
				});

				setTimeout(checkOutgoingMsg, 10000);

				return msgJson;
				//ChatRestMessageService.update({messageId: messageId}, chatRestObj, function(response){
				//	
				//})
				//WallService.send(nextMsg.message, nextMsg.senderId, nextMsg.receiverId, $scope.hotelState.profileData.hotelStaff, nextMsg.messageId);
			}

			//WallService.startNew();
			//
			//if(nextMsg)
			//{
			//	WallService.send(nextMsg.message, nextMsg.senderId, nextMsg.receiverId, $scope.hotelState.profileData.hotelStaff, nextMsg.messageId);
			//}
			//else{
			//	for(var l=0; l<$scope.notSendMessageArray.length; l++)
			//	{
			//		var next = $scope.notSendMessageArray[l];
			//		WallService.send(next.message, next.senderId, next.receiverId, $scope.hotelState.profileData.hotelStaff, next.messageId);
			//	}
			//}

			//setTimeout(checkOutgoingMsg, 1000);

		}

		 $scope.addMessage = function() {
			 
			 var msgObj = null;
			 
			 if($scope.localState.newMessage.length==0)
			 {
				 return;
			 }
			 
			 if($scope.localState.receiverId)
			 {
				 msgObj = ChatService.sendChat($scope.localState.newMessage, $scope.localState.senderId, $scope.localState.receiverId, $scope.hotelState.profileData.hotelStaff, null);
			 }
			
			 $scope.localState.waitingMessages.push(msgObj);
			 $scope.localState.newMessage = "";

			 if(inputElt==null)
			 {
				 inputElt = document.getElementById("chatInput");
			 }

			 if(inputElt!=null)
			 {
				 inputElt.focus();
			 }
			 
			 
			  setTimeout(checkOutgoingMsg, 10000);

		 };
		
		
		$scope.resetCurrentChat = function() {
		
			var url = $location.url();
			var urlSplit = url.split("/chat");
			
			var baseUrl = urlSplit[0] + "/chat";
			$location.path(baseUrl);
		 };
		
		 ChatService.receiveChat().then(null, null, function(message) {
			 
			 if( $scope.localState.receiverId && message.timestamp //ignore doppelt messages
				 &&
				 ((message.senderId==$scope.localState.senderId && message.receiverId==$scope.localState.receiverId)
				 || 
				 (message.receiverId==$scope.localState.senderId && message.senderId==$scope.localState.receiverId))
			 	)
			 {
				 $scope.addChatMessage(message);
				 
				 $scope.removeWaitingMessage(message);
				 
				 if(message.receiverId == $scope.hotelState.profileData.id && $state.current.name=="app.chat" && $stateParams.receiverId==message.senderId)
				 {
					 if(!message.seenByReceiver)
					 {
						 $scope.mainState.readUncheckedMessages.push(message.messageId);
						 $scope.markMainMessagesRead();
					 }
				 }
			 }
		 });

		
		//##################### INIT ###################################

        $rootScope.$on('checkChatSocketConnection', function(event, mass) {
            ChatService.checkSocketConnection();
        });
        
		function init(){

			$scope.localState.showAllCustomersLoading=true;
			$scope.localState.searchFilter = {};

			if($scope.hotelState.profileData && $scope.hotelState.profileData.id>0)
			{
				//$scope.hotelState.setProfileData($scope.hotelState.profileData);

                ChatService.resubscribeWithCustomerData($scope.hotelState);

                $scope.getUpdateModuleData($scope.hotelState.profileData);

				//$scope.hotelState.setProfileData($scope.hotelState.profileData);

				//imitate messages change
				setTimeout(scrollDown, 2000);


			}
			//else {
			//	var sessionCustomer = SessionCustomer.get(function () {
            //
			//		$scope.hotelState.setProfileData(sessionCustomer);
            //
			//		$scope.initChat(sessionCustomer);
            //
			//		$scope.hotelState.setProfileData(sessionCustomer);
            //
			//		//imitate messages change
			//		setTimeout(scrollDown, 2000);
            //
            //
			//	}, function(error){
			//		$scope.mainState.errorMsg = error;
			//	});
			//}

			setTimeout($rootScope.hideLoading, 5000);

		}
		
		$scope.hotelState.getDeferredState().then(function(){
			init();
		});
		
		//$scope.openModal = function (size) {
		//	var modalInstance = $modal.open({
		//		templateUrl: 'myModalContent.html',
		//		controller: 'ModalInstanceCtrl',
		//		size: size,
		//		resolve: {
		//			items: function () {
		//				
		//				for(var k=0; k<$scope.notSendMessageArray.length; k++)
		//				{
		//					try{
		//						$scope.notSendMessageArray[k] = JSON.parse($scope.notSendMessageArray[k]);
		//					}
		//					catch(e)
		//					{
		//						;
		//					}
		//				}
		//				
		//				return $scope.notSendMessageArray;
		//			}
		//		}
		//	});
        //
		//	modalInstance.result.then(function (selectedItem) {
		//		$scope.selected = selectedItem;
		//	}, function () {
		//		;
		//		//$log.info('Modal dismissed at: ' + new Date());
		//	});
		//};
		
 }])
	 
; 

'use strict';
app
//angular.module('hotelApp.chatList', ['ngCookies', 'ngResource', 'hotelApp.chatService'])

.controller('ChatListContr', 
	['$scope', '$rootScope', '$location', '$resource', '$modal', '$stateParams', '$filter', '$state', 'CustomerDto',
	function($scope, $rootScope, $location, $resource, $modal, $stateParams, $filter, $state, CustomerDto) {

		$scope.localState = {
			
			ready : 0,
			showChatDiv : false,
	
			filterCity : "-1",
			filterHotelId :-1,
			
			selectedFilterHotel: undefined,
			selectedCustomerCity: undefined,
			
            hotelScope: $stateParams.hotelScope && $stateParams.hotelScope=="true",
            
			showCityLoading: false,
		 	showAllCustomersLoading: false,
		 	//searchFilter : {} ,
			
			strictSearch : true,

			notChatPartnerPageNumber: 1,
			//Hotel scope
			filterHotelStaffCustomers: [],
			filteredHotelCustomers: [],
			filteredOutOfHotelContactCustomers: [],
			
            //noContactFound: false,
            //noOtherContactFound: false,
            
			//NOT Hotel scope
			filteredAllContactCustomers : [],
			filteredOtherCustomers : []
		};
		
		$scope.accordionStatus = {
			chatVipOpen: false,
			isChatVipDisabled: false
		};

		//GET ALL OTHER CHAT PARTNERS, THAT HAVE NO MESSAGES WITH ME
		var allNotContactCustomerService = $resource('./chat/allNotChatPartners/customer/:customerId/city/:filterCity/hotel/:filterHotelId/page/:pageNumber', {customerId:'@customerId', filterCity: '@filterCity', filterHotelId : '@filterHotelId', pageNumber: '@pageNumber'}, {'getCustomers': {method: 'GET', isArray: true}});
		var CustomerCitiesService = $resource('./customers/customers/:customerId/cities', {customerId:'@customerId'}, {'getCities': {method: 'GET', isArray: true}});
		//GET not Hotel CHAT PARTNERS, THAT HAVE MESSAGES WITH ME
		//var notHotelChatPartnerService = $resource('./chat/notHotelChatPartners/customer/:customerId/city/:filterCity/hotel/:filterHotelId', {customerId:'@customerId', filterCity: '@filterCity',filterHotelId : '@filterHotelId'}, {'getCustomers': {method: 'GET', isArray: true}});
		var allContactCustomerService = $resource('./chat/allContactChatPartners/customer/:customerId/city/:filterCity/hotel/:filterHotelId', {customerId:'@customerId', filterCity: '@filterCity',filterHotelId : '@filterHotelId'}, {'getCustomers': {method: 'GET', isArray: true}});


		$scope.loadMoreVip = function(){

			var nowSize = $scope.localState.filteredOtherCustomers.length;
			$scope.localState.notChatPartnerPageNumber = ((nowSize-nowSize%25)/25) + 1;

			if($scope.localState.notChatPartnerPageNumber>1)
			{
				$scope.loadVipChat();
			}
		};
		
		$scope.loadVipChat = function(sessionCustomer, filterCity, filterHotelId)
		{
			if($scope.accordionStatus.chatVipOpen || filterCity || filterHotelId)// && (!$scope.hotelState.allNotContactCustomers ||$scope.hotelState.allNotContactCustomers.length==0))
			{
				$rootScope.showLoading(true);
				
				if(!sessionCustomer)
				{
					sessionCustomer = $scope.hotelState.profileData;
				}
				
				var filterCityParam = filterCity? filterCity : $scope.localState.filterCity;
				var filterHotelIdParam = filterHotelId? filterHotelId: $scope.localState.filterHotelId;
				
				var allNotContactCustomers = allNotContactCustomerService.getCustomers({customerId:sessionCustomer.id, filterCity: filterCityParam, filterHotelId: filterHotelIdParam, pageNumber: $scope.localState.notChatPartnerPageNumber }, function() {

                    for(var n=0; n<allNotContactCustomers.length; n++)
                    {
						allNotContactCustomers[n] = $scope.hotelService.decodeCustomer(allNotContactCustomers[n]);
						$scope.hotelState.allCustomersById[allNotContactCustomers[n].id] = allNotContactCustomers[n];
                    }

					//$scope.hotelState.allNotContactCustomers = allNotContactCustomers;
					$scope.localState.showAllCustomersLoading = false;

					updateLocalFilter();
					
					$rootScope.showLoading(false);


				}, function(error)
				{					
					$rootScope.showLoading(false);
					$scope.mainState.errorMsg = error;
				});
			}
		}

		/**
		 * all contacts, without hotel scope
		 * @param sessionCustomer
		 */
        $scope.loadAllContactList = function(sessionCustomer)
		{
			//if($scope.accordionStatus.chatVipOpen && (!$scope.hotelState.allChatCustomers ||$scope.hotelState.allChatCustomers.length==0))
			{
				$rootScope.showLoading(true);
				
				if(!sessionCustomer)
				{
					sessionCustomer = $scope.hotelState.profileData;
				}
				
				//if($scope.localState.hotelScope)
				{
					//GET not Hotel CHAT PARTNERS, THAT HAVE MESSAGES WITH ME
					var contactCustomers = allContactCustomerService.getCustomers({customerId:sessionCustomer.id, filterCity: $scope.localState.filterCity, filterHotelId: $scope.localState.filterHotelId}, function() {

						for(var n=0; n<contactCustomers.length; n++)
						{
							contactCustomers[n] = $scope.hotelService.decodeCustomer(contactCustomers[n]);
							$scope.hotelState.allCustomersById[contactCustomers[n].id] = contactCustomers[n];
						}

						$scope.hotelState.contactCustomers = contactCustomers;
						$scope.localState.showAllContactCustomersLoading = false;

						updateLocalFilter();
						$rootScope.showLoading(false);

					}, function(error)
					{					
						$rootScope.showLoading(false);

						$scope.mainState.errorMsg = error;
					});
					//in hotelScope we have already all contact customers
					return;
				}
			}
		}
		
		//################ filter Cities and Hotels #########################
		
		$scope.initCustomerCitiesSelector = function()
		{
			var senderId = ($scope.hotelState.profileData && $scope.hotelState.profileData.id>0)? $scope.hotelState.profileData.id : -1;
			
			CustomerCitiesService.getCities({customerId: senderId}, function(cityArray) {
				
				var dummyAllCity = new CustomerDto();

				dummyAllCity.name = $filter('translate')('alert.info.allCities');
				dummyAllCity.city = dummyAllCity.name;
				
				$scope.localState.customerCitiesArray = [].concat(dummyAllCity);
				
				for(var c=0; c<cityArray.length; c++)
				{
					if(cityArray[c].city && cityArray[c].city!="null")
					{
						$scope.localState.customerCitiesArray.push(cityArray[c]);
					}
				}
				
				$scope.localState.showCityLoading=false;
				preFilterCityParam();
			});

			preFilterCityParam();
		};
		
		/**
		 * pre-select param city
		 */
		function preFilterCityParam(){

			if($scope.localState.preFilterCityParam && $scope.localState.customerCitiesArray)
			{
				for(var c=0; c<$scope.localState.customerCitiesArray.length; c++)
				{
					if($scope.localState.customerCitiesArray[c].city == $scope.localState.preFilterCityParam)
					{
						$scope.localState.selectedCustomerCity = $scope.localState.customerCitiesArray[c];

						//$scope.emptyPreviousSearch();

						$scope.onChangeCustomerCitySelector();

						break;
					}
				}

				//one time usage!!!
				$scope.localState.preFilterCityParam = false;
			}
		};
		
		$scope.onChangeCustomerCitySelector = function()
		{            
			var selectedCity = $scope.localState.selectedCustomerCity && $scope.localState.selectedCustomerCity.city? $scope.localState.selectedCustomerCity.city : "-1";
			//var senderId = ($scope.hotelState.profileData && $scope.hotelState.profileData.id>0)? $scope.hotelState.profileData.id : -1;

			$scope.localState.showCityHotelLoading = selectedCity && selectedCity!="-1";
			
			if(selectedCity && selectedCity!="-1")
			{
				//$scope.searchFilter.hotelCity = selectedCity;
				$scope.localState.filterCity = selectedCity ;
			}
			else {
				resetLocalFilterValues();
			}

			//TODO Eugen: update vip, if city was changed :((((
			if(!$scope.localState.hotelScope)
			{
				$scope.loadVipChat();
			}
			
			//##### new Search json
			updateLocalFilter();
			
			//EUGEN: this array already loaded in hotelList!!!
			$scope.getMainHotelsByCity(selectedCity, false).then(function(hotelsArray) {
				$scope.localState.hotelsFilteredByCityArray = hotelsArray;
				$scope.localState.filteredHotelsNOTEmpty = hotelsArray.length>0;
				$scope.localState.showCityHotelLoading = false;

				if($scope.localState.preFilterHotelIdParam)
				{
					for(var h=0; h<hotelsArray.length; h++)
					{
						if(hotelsArray[h].id == $scope.localState.preFilterHotelIdParam)
						{
							$scope.localState.selectedFilterHotel = hotelsArray[h];
							$scope.onChangeFilterHotelSelector($scope.localState.selectedFilterHotel.id);
							break;
						}
					}

					//one time usage!!!
					$scope.localState.preFilterHotelIdParam = false;
					
					//open other contacts, if hotelId pre filter Param!!!
					$scope.accordionStatus.chatVipOpen = true;
					$scope.loadVipChat();
				}

			});
			
		};

		$rootScope.$on('chatListChangeEvent', function(event, mass) { updateLocalFilter(); });

		function updateLocalFilter(){

			 if($scope.localState.hotelScope)
			 {
				 //HotelStaff, but only from my hotel
				 var hotelStaffCustomerFilter = $scope.getInitHotelStaffCustomerFilter();
				 hotelStaffCustomerFilter.hotelId = $scope.hotelState.profileData.hotelId;
				 

				 //normal customers, but only from my hotel
				 var hotelCustomerFilter = $scope.getInitHotelCustomerFilter();
				 hotelCustomerFilter.hotelId = $scope.hotelState.profileData.hotelId;
				 hotelCustomerFilter.inMyHotel = true;


				 //contact customers, but not from my hotel
				 var outOfHotelCustomerFilter = $scope.getInitChatCustomerFilter();
				 //TODO Eugen: not in my hotel!!!!
				 outOfHotelCustomerFilter.inMyHotel = false;


				 ////not in hotelScope filter on hotel!
				 //if($scope.localState.filterHotelId){
					// hotelStaffCustomerFilter.hotelId = $scope.localState.filterHotelId;
					// hotelCustomerFilter.hotelId = $scope.localState.filterHotelId;
					// outOfHotelCustomerFilter.hotelId = $scope.localState.filterHotelId;
				 //}
				 $scope.localState.filterHotelStaffCustomers = $filter('filter')($scope.hotelState.hotelStaffCustomers, hotelStaffCustomerFilter, true);//,  $scope.localState.strictSearch);

				 $scope.localState.filteredHotelCustomers = $filter('filter')($scope.hotelState.hotelCustomers, hotelCustomerFilter, true);//,  $scope.localState.strictSearch);
				 
				 //if($scope.localState.filterHotelStaffCustomers.length>0)
				 //{
					// outOfHotelCustomerFilter.id = "!"+$scope.localState.filterHotelStaffCustomers[0].id; 
				 //}
				 
                 $scope.localState.filteredOutOfHotelContactCustomers = $filter('filter')($scope.hotelState.contactCustomers, outOfHotelCustomerFilter, true);//,  $scope.localState.strictSearch);

				 //for(var e=0; e<$scope.hotelState.contactCustomers; e++){
					// if($scope.hotelState.contactCustomers[e]!=$scope.hotelState.profileData.hotelId)
				 //}
				 
			 }
			 else{

				 //all contact customers
				 var contactFilter = $scope.getInitChatCustomerFilter();
				 
				 //all not contact customers
				 var outerChatCustomerFilter = $scope.getInitOuterChatCustomerFilter();

				 if($scope.localState.filterCity && $scope.localState.filterCity!="-1" && $scope.localState.filterCity.toUpperCase() != $filter('translate')('alert.info.allCities').toUpperCase()){
					 outerChatCustomerFilter.city = $scope.localState.filterCity;
					 contactFilter.city = $scope.localState.filterCity;
				 }

				 if($scope.localState.filterHotelId && $scope.localState.filterHotelId!="-1" && $scope.localState.filterHotelId>0){
					 outerChatCustomerFilter.hotelId = $scope.localState.filterHotelId;
					 contactFilter.hotelId = $scope.localState.filterHotelId;
				 }
				 
				  $scope.localState.filteredAllContactCustomers = $filter('filter')($scope.hotelState.contactCustomers, contactFilter, true);//,  $scope.localState.strictSearch);

                  $scope.localState.noContactFound = $scope.localState.filteredAllContactCustomers.length==0 && $scope.hotelState.contactCustomers.length>0;
                 
                 //Eugen: heavy filter use only if accordion is open!!!
                 if($scope.accordionStatus.chatVipOpen)
                 {
                     //TODO Eugen: upload only 20 per request
                     $scope.localState.filteredOtherCustomers = $filter('filter')($scope.hotelState.allCustomersById, outerChatCustomerFilter, true);//,  $scope.localState.strictSearch);
                     $scope.localState.noOtherContactFound = $scope.localState.filteredOtherCustomers.length==0 && $scope.hotelState.allCustomersById.length>0;
                 }
			 }
			 
		 }
		
		$scope.onChangeFilterHotelSelector = function()
		{
			$scope.localState.filterHotelId = $scope.localState.selectedFilterHotel && $scope.localState.selectedFilterHotel.id>0? $scope.localState.selectedFilterHotel.id : -1;

			///### new search json
			updateLocalFilter();
		}

		//##################### INIT ###################################
		$scope.initChatListForCustomer = function(sessionCustomer)
		{
			if(sessionCustomer.id && sessionCustomer.id>0)
			{
				$scope.localState.senderId = sessionCustomer.id;

				//chatlist!!!
				if($scope.localState.hotelScope)
				{
					if(sessionCustomer.hotelId && sessionCustomer.hotelId>0)
					{
						$scope.hotelState.getCurrentHotel(sessionCustomer.hotelId, sessionCustomer).then(function(resp)
						{
							//LOAD EVERY TIME -> HOTEL CAN CHANGE: loads only contacts outer join of hotel scope!
							$scope.hotelState.getHotelCustomers($scope.hotelId).then(function(resp){
								updateLocalFilter();

							});//.then( function(customers)

							$scope.loadAllContactList();

							//);
						});

						$scope.localState.hotelId =  sessionCustomer.hotelId;
						$scope.localState.ready = 1;
					}
					
				}
				else //NOT HOTEL SCOPE
				{
					$scope.initCustomerCitiesSelector();
					$scope.loadAllContactList();
					$scope.loadVipChat($scope.hotelState.profileData, $stateParams.filterCity, $stateParams.filterHotelId);
				}
			}
		}

		$scope.switchVipCustomers = function()
		{
			$scope.accordionStatus.chatVipOpen != $scope.accordionStatus.chatVipOpen; 
			if($scope.accordionStatus.chatVipOpen)
			{
				$scope.loadVipChat();
			}
		}
		
		//##################### WATCHERS ####################

		$scope.$on('mainState.globalIntervalCheck', function(next, current) {

			if($state.current.name == "app.chatList")
			{
				$scope.getUpdateModuleData();
			}

		});

		function resetLocalFilterValues(){
			$scope.localState.filterCity = "-1";
			$scope.localState.filterHotelId = -1;
		}
		
		
		function getUpdateModuleData(){
            
            //$scope.localState.hotelScope = $stateParams.hotelScope && $stateParams.hotelScope=="true";
            //
			////If relocate to own hotel chat!
			//if($stateParams.filterHotelId)
			//{
			//	var realHotelScope = ($stateParams.filterHotelId == $scope.hotelState.profileData.hotelId);
			//	
			//	if(realHotelScope != $scope.localState.hotelScope)
			//	{
			//		$state.go("app.chatList", {hotelScope: realHotelScope, filterCity: $stateParams.filterCity, filterHotelId: $stateParams.filterHotelId });
			//		return;
			//	}
			//}

			//Eugen: temporell all is hotelScope
			$scope.localState.hotelScope = $scope.hotelState.profileData.checkedIn;

			//var realTabIndex = $scope.localState.hotelScope? 1:2;
			//
			//if($scope.app.header.tabIndex != realTabIndex)
			//{
			//	$scope.app.header.tabIndex = realTabIndex;
			//}
			
			$scope.localState.showCityLoading=true;
			$scope.localState.showAllCustomersLoading=true;
			resetLocalFilterValues();

			////#### init chat json

			$scope.hotelState.checkNextRouteState();
			
			if($scope.hotelState.profileData && $scope.hotelState.profileData.id>0)
			{
				$scope.initChatListForCustomer($scope.hotelState.profileData);

			}

			setTimeout($rootScope.hideLoading, 5000);
			updateLocalFilter();

		}

		$scope.hotelState.getDeferredState().then(function(){

            $rootScope.hideAside();

            $scope.localState.preFilterCityParam = $stateParams.filterCity;
			$scope.localState.preFilterHotelIdParam = $stateParams.filterHotelId;

			getUpdateModuleData();
		});
		
 }])
	 
; 

'use strict';
//app
angular.module('hotelApp.checkIn', ['ngRoute','ngCookies', 'ui.bootstrap', 'hotelApp.hotelDto', 'hotelApp.sessionCustomerService'])

.controller('CheckInController', 
['$scope', '$rootScope' , '$routeParams', '$http', '$q', '$location', '$cookies', 'HotelDto', 'SessionCustomer', '$state', '$stateParams', '$resource', '$mdDialog', '$filter', 'HotelCheckin',
function($scope, $rootScope, $routeParams, $http, Q, $location, $cookies, HotelDto, SessionCustomer, $state, $stateParams, $resource, $mdDialog, $filter, HotelCheckin) {
	
	$scope.localState = {

		ready: 0,

		disableAllHotelsInCity: true, //disable all hotels in city
		selectedHotelCity: null,
		selectedFilterHotel: null,

		availableSystemLanguages : $scope.hotelService.getSystemLanguagesArray(),

		selectSystemLanguage : $scope.hotelState.getPrefferedLanguage(),
		
		showManualCheckin: false,

		hideCodeInput: true,
		
		//$scope.selectedHotelCode = "PO3AX";
		disableCheckin: false,

		selectedHotelCode: "",
		pending: 0,
         
        hotelSelectCheckinButtonShow : true,
         
		checkinDates: {
			checkinFrom: null,
			checkinTo: null
		},

		hotelcodeFocus: false
	};
	
	$scope.accordionStatus = {
		infoHotelOpen : [] 
	}
	
	$scope.$watch('localState.selectSystemLanguage', function(){

		if($scope.localState.selectSystemLanguage && $scope.localState.selectSystemLanguage.length>0)
		{
			var langValue = $scope.localState.selectSystemLanguage[0].name;
			var langKey = $scope.hotelService.convertLangLabelToAvailableKey(langValue);
			if(langKey)
			{
				$scope.setNewLanguage(langKey);
			}
		}

	}, true);
	
	//SERVICE PRE-CALLER
	$scope.onHotelCodeSubmit = function (inputHotelCode) {
		
		if(!inputHotelCode)
		{
			inputHotelCode = $scope.localState.selectedHotelCode;
		}
		
		var nowHotelId = $scope.hotelState.profileData.hotelId;

		$scope.checkinService.checkHotelCode(nowHotelId, inputHotelCode).then(function(okHotelObj)
		{
			$scope.hotelState.profileData.hotelCode = inputHotelCode;
			
			if($scope.hotelState.profileData.logged)
			{
				$scope.onCheckinSubmit(inputHotelCode);
			}
			else{
				$scope.hotelState.profileData.fullCheckin = true;
			}
		},
		function(error){
			$rootScope.rootErrorMsg = error;
		});
		
		
	}

	 
	
	$scope.onCheckinSubmit = function (forceHotelCode) {

		//if($scope.hotelCheckin.checkinSuccess || $scope.hotelCheckin.checkinResponse)
		//{
		//	return;
		//}

		$rootScope.rootErrorMsg = false;
		$scope.errorMsg = false;
		
		//if(!$scope.hotelCheckin)
		//{
		//	$scope.hotelCheckin = HotelCheckin;	
		//}
		if (!$scope.checkinService) {
			$scope.checkinService = HotelCheckin;
		}

		$scope.checkinService.resetWholeInfo();

		var hotelId = $scope.localState.selectedFilterHotel != null ? $scope.localState.selectedFilterHotel.id : null;

		var hotelCode = $scope.localState.selectedHotelCity ? "" : $scope.localState.selectedHotelCode;

		if (forceHotelCode) {
			hotelCode = forceHotelCode;
		}

		var checkinDateFrom = $scope.localState.checkinDates.checkinFrom != null ? new Date($scope.localState.checkinDates.checkinFrom) : null;
		var checkinDateTo = $scope.localState.checkinDates.checkinTo != null ? new Date($scope.localState.checkinDates.checkinTo) : null;

		if (hotelId == null && hotelCode == null) {
			$scope.mainState.errorMsg = $filter('translate')('alert.checkin.chooseHotel');
			$rootScope.topPage();
			$rootScope.showLoading(false);
			return;
		}

		if (checkinDateFrom == null) {
			checkinDateFrom = new Date();
			$scope.checkinService.checkinDateFrom = checkinDateFrom;

		}

		if (checkinDateTo == null) {
			checkinDateTo = new Date();

			var sundayOfLastWeek = checkinDateTo.getDate() - checkinDateTo.getDay();
			var sundayOfThisWeek = sundayOfLastWeek + 7; //letzte tag is Samstag, aber wir brauchen Sonntag in DE
			//End of week: Sunday at 12:00
			checkinDateTo.setDate(sundayOfThisWeek);
			checkinDateTo.setHours(12);

			$scope.checkinService.checkinDateTo = checkinDateTo;
		}

		if (hotelId)
			$scope.checkinService.hotelId = hotelId;

		if (hotelCode) {

			$scope.checkinService.hotelCode = hotelCode;

			//if(hotelCode=="demo")
			//{
			//	var demoHotelIdElt = document.getElementById("demoHotelId");
			//
			//	if(demoHotelIdElt && demoHotelIdElt.innerText)
			//	{	var demoHotelId = demoHotelIdElt.innerText;
			//		$scope.getUpdateMainHotelObject(demoHotelId).then(function(hotelObj){
			//			$scope.localState.selectedFilterHotel = hotelObj;
			//		});
			//	}
			//}
		}

		$rootScope.showLoading(true);

		$scope.hotelState.emptyCheckinData();

		$scope.localState.disableCheckin = true;

		$scope.checkinService.doCheckin().then(function () {
			$scope.localState.disableCheckin = false;
			$scope.mainState.showCheckinWellcomePopup = true;
			//$scope.localState.showManualCheckin = true;
			$scope.localState.selectedHotelCity= null;
			$scope.closeModal();
			$scope.showLoading(false);

			//Eugen: always show manual checkin, if reset hidden hotelCode
			if($scope.localState.hideCodeInput)
			{
				//$scope.checkinService.hotelCode = "";
				$scope.localState.showManualCheckin = true;
				showManualSelection();
			}

		}, function (error) {
			$scope.localState.disableCheckin = false;
			$scope.localState.showManualCheckin = true;
			$scope.mainState.showCheckinWellcomePopup = true;
			$scope.localState.selectedHotelCity= null;

			$rootScope.showLoading(false);
			setTimeout(showManualSelection, 1000);
		});

	};


	function showManualSelection() {
		var hiddenContents = document.getElementsByClassName("hiddenContent");

		var eltsToRemove = [];

		if (hiddenContents && hiddenContents.length > 0) {
			for (var i = 0; i < hiddenContents.length; i++) {
				var nextElt = hiddenContents[i];
				eltsToRemove.push(nextElt)
			}

			for (var i = 0; i < eltsToRemove.length; i++) {
				var nextElt = eltsToRemove[i];

				if (nextElt.classList.contains("hiddenContent")) {
					nextElt.classList.remove("hiddenContent");
					nextElt.className = nextElt.className.replace("hiddenContent", '');
					//$log,info
				}
			}
		}
	}

	//############# START FILTER ####################
	$scope.emptyPreviousSearch = function () {
		$scope.localState.searchFilter = {};
		$scope.localState.selectedFilterHotel = null;
	};

	$scope.updateLocalFilter = function(onlySetIfEmpty, subSetToSearch)
	{
		$scope.mainState.errorMsg = false;

		$scope.showHotel = $scope.localState.selectedFilterHotel;
		
		//-----------------------------------
			
		if(onlySetIfEmpty && $scope.localState.filterHotels && $scope.localState.filterHotels.length>0)
		{
			return;
		}

		$scope.localState.searchFilter = {};

		if($scope.localState.selectedFilterHotel && $scope.localState.selectedFilterHotel.id>0)
		{
			$scope.localState.searchFilter.id = $scope.localState.selectedFilterHotel.id;
		}
		else if($scope.mainState.selectedCity != "-1" && $scope.mainState.selectedCity != undefined && $scope.mainState.selectedCity.toUpperCase() != $filter('translate')('alert.info.allCities').toUpperCase())
		{
			//$scope.localState.searchFilter.city = $scope.mainState.selectedCity;
			$scope.localState.searchFilter = {};
			$scope.localState.searchFilter.currentHotelAccessCode = "demo";
		}
		else { //nothing show
			$scope.localState.searchFilter = {};
			$scope.localState.searchFilter.currentHotelAccessCode = "demo";
		}

		if(!subSetToSearch)
		{
			subSetToSearch = $scope.mainState.hotelArray;
		}

		$scope.localState.filterHotels = $filter('filter')(subSetToSearch, $scope.localState.searchFilter, true);//,  $scope.localState.strictSearch);

		$scope.localState.noHotelFound = $scope.localState.filterHotels.length==0 && $scope.mainState.hotelArray.length>0;

		$scope.localState.copyHotels = angular.copy($scope.localState.filterHotels);


	};
	
	 

	//############ END FILTER ########################

	$scope.hideFocus = function (style) {
		
		if(!$rootScope.isSmartDevice)
		{
			return;
		}
		
		var focusElts =document.getElementsByClassName("hideOnFocus");

		if(focusElts && focusElts.length>0)
		{
			for(var f=0; f<focusElts.length; f++)
			{
				focusElts[f].style.display = style;
			}
		}
	}
	
	$scope.onHotelCodeInput = function () {
		$scope.checkinService.hotelCode = $scope.localState.selectedHotelCode;
		
		
		
	}

	//##################### WATCHERS ####################

	$scope.$on('mainState.globalIntervalCheck', function (next, current) {

		if ($state.current.name == "app.checkin") {
			setTimeout(function () {
				if ($scope.hotelState.profileData) {
					$scope.getUpdateModuleData();
				}
				else {
					$scope.hotelState.initState().then(function (reponse) {
						$scope.getUpdateModuleData();
					});
				}
			}, 1000)

		}

	});

	
	
	////###################### INIT BLOCK ###############

	$scope.getUpdateModuleData = function () {

		$scope.hotelState.updateState();
		$scope.hotelState.checkNextRouteState();

		$rootScope.showLoading(false);

		$scope.checkinService.resetWholeInfo();

		//in main.js
		$scope.getUpdateMainHotelList();

		$scope.localState.showCityLoading = true;
		$scope.getUpdateMainHotelCitiesSelectorList().then(function () {
			$scope.localState.showCityLoading = false;
		});

		setTimeout($scope.hideAside, 1000);
	};

	var popupInitiated = false;

	$scope.showPopup = function (ev) {

		if ($scope.mainState.hidePopup || $stateParams.hotelCode) {
			return;
		}

		if ($scope.hotelState.profileData.hideCheckinPopup || $scope.hotelService.getCookie('hotelicohideCheckinPopup') == "true") {
			return;
		}

		if(popupInitiated){
			return;
		}

		popupInitiated = true;

		var confirm = $mdDialog.confirm( {
			clickOutsideToClose: true
			})
			.title($filter('translate')('page.checkin.popupHeader'))
			.content($filter('translate')('page.checkin.popupText'))
			.ariaLabel('Lucky day')
			.ok('OK')
			.cancel($filter('translate')('alert.noPopupMore'))
			.targetEvent(ev);

		$mdDialog.show(confirm).then(function () {
			;
		}, function () {
			$scope.hotelState.profileData.hideCheckinPopup = true;
			$scope.hotelService.setCookie('hotelicohideCheckinPopup', true);

			
			$scope.hotelState.submitProfileData(true);
		});
	};

	
	
	$scope.hotelState.getDeferredState().then(function(stateObj)
	{

		$scope.initMainState(stateObj);
        $rootScope.relocateLogin();

	});
	
	function initSystemLanguages()
	{
		for (var i = 0; i < $scope.localState.availableSystemLanguages.length; i++) {

			if ($scope.localState.availableSystemLanguages[i].langKey == $scope.hotelState.getPrefferedLanguage()) {
				$scope.localState.availableSystemLanguages[i].ticked = true;
			}
		}
	};
	
	function preLoadDemoHotel()
	{
		var demoHotelIdElt = document.getElementById("demoHotelId");
		
		if(demoHotelIdElt && demoHotelIdElt.innerText)
		{
			var demoHotelId = demoHotelIdElt.innerText;

			$scope.getUpdateMainHotelObject(demoHotelId).then(function(demoHotel)
			{
				$scope.updateLocalFilter(null, [demoHotel])
			});
		}
		
	}

	$rootScope.$on('gpsCityUpdated', function(event, obj) {
		
		if(obj)
		{
			$scope.localState.preFilterCityParam = obj;

			$rootScope.$broadcast('hotelCitySelectorChangeEvent', obj );
		}
	});
	
	function initCheckin() {

		if(navigator && navigator.geolocation)
		{
			navigator.geolocation.getCurrentPosition(function(position) {
				$scope.hotelService.geoLocation = {latitude: position.coords.latitude, longitude: position.coords.longitude};
				$scope.hotelState.submitProfileData(true);
			});
		}

		//var scrollElt = document.getElementById("scrollingSuperElt");
        //
		//if(scrollElt)
		//{
		//	scrollElt.style.backgroundColor = "#fff";
		//}
		
		//$scope.showPopup();
		$scope.getUpdateModuleData();

        $rootScope.relocateLogin();
		
		initSystemLanguages();
		
		$scope.updateLocalFilter(null, []);
		
		setTimeout(preLoadDemoHotel, 500);
		
		//$rootScope.unlockModal();
	}

	initCheckin();
	
	if(!$stateParams.hotelCode && !$scope.hotelState.profileData.hotelCode && $scope.hotelState.profileData.id==0)
	{
		$scope.hotelState.profileData.hotelCode = $scope.hotelService.getCookie('hotelicoNoLoginHotelCode');
	}
	
	//CHECK HOTELCODE Param
	if($stateParams.hotelCode || $scope.hotelState.profileData.hotelCode)
	{
		$scope.localState.showManualCheckin = false;

		$rootScope.showLoading(true);
		
		if(!$scope.checkinService)
		{
			$scope.checkinService = HotelCheckin;
		}
		
		$scope.localState.selectedHotelCode = $stateParams.hotelCode? $stateParams.hotelCode : $scope.hotelState.profileData.hotelCode;
		$scope.onHotelCodeInput();
		$scope.onCheckinSubmit($scope.localState.selectedHotelCode);
	}
	else{
		$scope.localState.showManualCheckin = true;
		setTimeout(showManualSelection, 1000);
	}
	
	//RELOCATE BLOCK IF ALREADY CHECKEDIN
	if($scope.hotelState && $scope.hotelState.profileData && $scope.hotelState.profileData.checkedIn)
	{
		$scope.getUpdateMainHotelObject($scope.hotelState.profileData.hotelId).then(function(hotelObj){
			
			if(hotelObj.id>0)
			{
				$state.go($scope.hotelState.profileData.logged? "app.hotel" : "app.hotelPreview");
			}
		});
		
	}
	
	 
	
}]);
 

angular.module("hotelApp.datepicker", []).controller('DatepickerCheckinCtrl', ['$scope', function($scope) {
    $scope.today = function() {
        $scope.dt = new Date();
    };
    $scope.today();

    $scope.clear = function () {
        $scope.dt = null;
    };

    // Disable weekend selection
    $scope.disabled = function(date, mode) {
        return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
    };

    $scope.toggleMin = function() {
        $scope.minDate = $scope.minDate ? null : new Date();
    };
    $scope.toggleMin();

    $scope.open = function($event) {
        $event.preventDefault();
        $event.stopPropagation();

        $scope.opened = true;
    };

    $scope.dateOptions = {
        formatYear: 'yy',
        startingDay: 1,
        class: 'datepicker'
    };

    $scope.initDate = new Date('2016-15-20');
    $scope.formats = ['dd.MM.yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
    $scope.format = $scope.formats[0];
}])
; 
'use strict';
app
//angular.module('hotelApp.activities', ['ngCookies', 'ngResource', 'hotelApp.activityService', 'hotelApp.sessionCustomerService'])

    .controller('EditActivityContr',
    ['$scope', '$rootScope', '$cookies', '$location', '$resource', 'SessionCustomer', '$stateParams', '$window',

        function($scope, $rootScope, $cookies, $location, $resource, SessionCustomer, $stateParams, $window) {


        //TODO eugen: load old messages from DB
           
       $scope.localState = {
           //ready : 0,
            activities : [],

           filterActivities : [],
           copyActivities : [],
           
            showActivity : undefined,
            //newActivity : undefined,
            maxActivityShortDescription : $scope.hotelService.validationUtils.maxActivityShortDescription,
            maxActivityDescription : $scope.hotelService.validationUtils.maxActivityDescription
       }

        $scope.accordionStatus = {
            open: true,
            openEditActivity: true,
            isFirstOpen: true,
            isFirstDisabled: false

            //newActivityOpen: false,
            //isNewActivityDisabled: false,
            
            //openEditActivities: []
        };

        $scope.HotelActivitiesService = $resource('./activity/activities/customer/:customerId/hotel/:hotelId', {customerId:'@customerId', hotelId:'@hotelId'}, {'getActivities': {method: 'GET', isArray: true}});

        $scope.addUpdateActivity = function(newActivity)
        {
            var activityUpdated = false;
            var allActivityUpdated = false;

            if(newActivity.activityId>0)
            {
                for(var a=0; a<$scope.hotelState.hotelActivities.length; a++)
                {
                    if($scope.hotelState.hotelActivities[a].activityId == newActivity.activityId)
                    {
                        $scope.hotelState.hotelActivities[a] = newActivity;
                        activityUpdated = true;
                        break;
                    }
                }

                for(var a=0; a<$scope.hotelState.allActivities.length; a++)
                {
                    if($scope.hotelState.allActivities[a].activityId == newActivity.activityId)
                    {
                        $scope.hotelState.allActivities[a] = newActivity;
                        allActivityUpdated = true;
                        break;
                    }
                }
            }

            if(!activityUpdated)
            {
                $scope.hotelState.hotelActivities.push(newActivity);
            }
            
            if(!allActivityUpdated)
            {
                $scope.hotelState.allActivities.push(newActivity);
            }

            $scope.showActivity = newActivity;
            
            $scope.updateLocalFilter();

        };
        
        $scope.updateLocalFilter = function()
        {
            $scope.localState.filterActivities = [$scope.showActivity];
            $scope.localState.copyActivities = angular.copy($scope.localState.filterActivities);
        };
            
        function init()
        {
            if($scope.hotelState.profileData && $scope.hotelState.profileData.id>0)
            {
                var searchHotelId = $stateParams.hotelId? $stateParams.hotelId : $scope.hotelState.profileData.hotelId;
                
                $scope.HotelActivitiesService.getActivities({customerId: $scope.hotelState.profileData.id, hotelId: searchHotelId}, function(responseArray){
                    $scope.localState.activities = $scope.decodeActivityList(responseArray);
                    
                    $scope.loadDetailActivity();
                    $rootScope.showLoading(false);

                })
            }
            
            if($stateParams.edit || $scope.defaultEditOpen)
            {
                setTimeout(function () { $scope.accordionStatus.open = true; }, 1000);
                
            }
        }
            
        $scope.getFormatDate = function(time)
        {
            if(!time)
                return "";
            
            var d = new Date(time);
            
            if(!d)
                return "";
            
            var day = d.getDate();
            var monthIndex = d.getMonth();
            var year = d.getFullYear();
            return day+"."+(monthIndex+1)+"."+year;
        }

        //$scope.submitNewActivity = function() {
        //
        //    $scope.mainState.successMsg = false;
        //
        //    var errorObj = $scope.hotelService.validateActivityInfo($scope.localState.newActivity);
        //    if(errorObj && errorObj.length>0)
        //    {
        //        $scope.mainState.errorMsg = errorObj;
        //        $rootScope.topPage();
        //        return;
        //    };
        //
        //
        //    //newActivity.title = $scope.localState.newActivity.title;
        //    $scope.localState.newActivity.hotelId = $scope.hotelState.currentHotel.id;
        //    $scope.localState.newActivity.senderId = $scope.hotelState.profileData.id;
        //
        //    //Encode separatly, not display encoding bindings
        //    var encodedActivity = $scope.hotelService.encodeActivity($scope.localState.newActivity);
        //
        //    ActivityService.send(encodedActivity, $scope.localState.newActivity.activityId);
        //
        //    $scope.myWait(500);
        //
        //    $scope.uploadNewImage("activity", $scope.localState.newActivity.activityId);
        //
        //    $scope.localState.newActivity = $scope.hotelService.getInitActivity();
        //
        //    $scope.mainState.successMsg = $filter('translate')("activityUpdated");
        //
        //    $scope.accordionStatus.newActivityOpen = false;
        //
        //    //$window.location.reload();
        //
        //};
            
        $scope.loadDetailActivity = function()
        {
            if($scope.editActivityId == "new")
            {
                $scope.showActivity = $scope.hotelService.getInitActivity();

                $scope.showActivity.hotelId =  $scope.hotelState.profileData.hotelId;
                
                $scope.editActivityId = $scope.showActivity.activityId;

                $scope.localState.showActivityId = $scope.editActivityId;

                setTimeout(function () {
                    //default open edit activity accordion
                    //$scope.accordionStatus.openEditActivities[$scope.showActivity.activityId] = true;
                    //default open activity content
                    if(!$scope.accordionStatus.openActivities)
                    {
                        $scope.accordionStatus.openActivities = [];
                    }
                    $scope.accordionStatus.openActivities[$scope.showActivity.activityId] = true;
                    //prevent modal onTouch error
                    $rootScope.unlockModal();
                }, 100);

                return;
            }
            else 
            if($stateParams.activityId || $scope.editActivityId && $scope.editActivityId!="new")
            {
                var searchActivityId = $scope.editActivityId? $scope.editActivityId : $stateParams.activityId;

                $scope.localState.showActivityId = searchActivityId;

                for(var a=0; a<$scope.localState.activities.length; a++)
                {
                    if($scope.localState.activities[a].activityId == searchActivityId)
                    {
                        $scope.showActivity = $scope.localState.activities[a];
                        
                        if(!$scope.accordionStatus.openActivities)
                        {
                            $scope.accordionStatus.openActivities = [];
                        }
                        $scope.accordionStatus.openActivities[$scope.showActivity.activityId] = true;
                        
                        setTimeout(function () { 
                            //default open edit activity accordion
                            //$scope.accordionStatus.openEditActivities[$scope.showActivity.activityId] = true;
                            //default open activity content
                            if(!$scope.accordionStatus.openActivities)
                            {
                                $scope.accordionStatus.openActivities = [];
                            }
                            $scope.accordionStatus.openActivities[$scope.showActivity.activityId] = true;

                            //prevent modal onTouch error
                            $rootScope.unlockModal();
                        }, 500);

                        break;
                    }
                }
            }
        }

            $scope.hotelState.getDeferredState().then(function() {
                init();
            }, function(error){
                init();

            });
            
            if($scope.hotelState && $scope.hotelState.profileData.id>0)
            {
                init();
            }
            
            
            
            
    }])
; 

'use strict';
app
//angular.module('hotelApp.activities', ['ngCookies', 'ngResource', 'hotelApp.activityService', 'hotelApp.sessionCustomerService'])

    .controller('EditHotelContr',
    ['$scope', '$rootScope', '$cookies', '$location', '$resource', 'SessionCustomer', '$state', '$stateParams', '$filter',

        function($scope, $rootScope, $cookies, $location, $resource, SessionCustomer, $state, $stateParams, $filter) {
            
        //TODO eugen: load old messages from DB
       $scope.showHotel = $scope.hotelState.tempCreationHotel && $state.current.name == "app.hotelRegister"? $scope.hotelState.tempCreationHotel : angular.copy($scope.hotelState.currentHotel);
    
       if(!$scope.showHotel && $scope.editHotelId)     
       {
           for(var h=0; h<$scope.mainState.hotelArray.length; h++)
           {
               if($scope.mainState.hotelArray[h].id==$scope.editHotelId)
               {
                   $scope.showHotel = $scope.mainState.hotelArray[h];
                   break;
               }
           }
       }
            
        $scope.localState = {
           //ready : 0,
           // activities : [],
           //
            filterHotels : [],
            copyHotels : [],
            editHotelAccordionTitle: "'" + ($scope.showHotel? $scope.showHotel.name : "Hotel") + "' " + $filter('translate')('system.edit'),
            hotelBlockInternActivities : false,
            showHotelBlockFullInfo : true
           // //newActivity : undefined,
           // maxHotelShortDescription : $scope.hotelService.validationUtils.maxHotelShortDescription,
           // maxHotelDescription : $scope.hotelService.validationUtils.maxHotelDescription
       }

        $scope.accordionStatus = {
            editHotelOpen: true
            //isFirstOpen: true,
            //isFirstDisabled: false,
            //
            ////newActivityOpen: false,
            ////isNewActivityDisabled: false,
            //
            //openEditHotels: []
        };

        //$scope.HotelActivitiesService = $resource('./activity/activities/customer/:customerId/hotel/:hotelId', {customerId:'@customerId', hotelId:'@hotelId'}, {'getActivities': {method: 'GET', isArray: true}});
        //
        //$scope.addUpdateActivity = function(newActivity)
        //{
        //    var activityUpdated = false;
        //    var allActivityUpdated = false;
        //
        //    if(newActivity.activityId>0)
        //    {
        //        for(var a=0; a<$scope.hotelState.hotelActivities.length; a++)
        //        {
        //            if($scope.hotelState.hotelActivities[a].activityId == newActivity.activityId)
        //            {
        //                $scope.hotelState.hotelActivities[a] = newActivity;
        //                activityUpdated = true;
        //                break;
        //            }
        //        }
        //
        //        for(var a=0; a<$scope.hotelState.allActivities.length; a++)
        //        {
        //            if($scope.hotelState.allActivities[a].activityId == newActivity.activityId)
        //            {
        //                $scope.hotelState.allActivities[a] = newActivity;
        //                allActivityUpdated = true;
        //                break;
        //            }
        //        }
        //    }
        //
        //    if(!activityUpdated)
        //    {
        //        $scope.hotelState.hotelActivities.push(newActivity);
        //    }
        //    
        //    if(!allActivityUpdated)
        //    {
        //        $scope.hotelState.allActivities.push(newActivity);
        //    }
        //
        //    $scope.showActivity = newActivity;
        //    
        //    $scope.updateLocalFilter();
        //
        //};
        
        $scope.updateLocalFilter = function()
        {
            $scope.localState.filterHotels = [$scope.showHotel];
            $scope.localState.copyHotels = angular.copy($scope.localState.filterHotels);
        };
            
        function init()
        {
            //if($scope.hotelState.profileData && $scope.hotelState.profileData.id>0)
            //{
            //    var searchHotelId = $stateParams.hotelId? $stateParams.hotelId : $scope.hotelState.profileData.hotelId;
            //    
            //    //$scope.HotelActivitiesService.getActivities({customerId: $scope.hotelState.profileData.id, hotelId: searchHotelId}, function(responseArray){
            //    //    $scope.localState.activities = $scope.decodeActivityList(responseArray);
            //    //    
            //    //    $scope.loadDetailActivity();
            //    //    $rootScope.showLoading(false);
            //    //
            //    //})
            //}
            //$scope.localState.filterHotels.push(angular.copy($scope.showHotel));
            //$scope.localState.copyHotels.push(angular.copy($scope.showHotel));
            
            //if($stateParams.edit || $scope.defaultEditOpen)
            //{
            //    setTimeout(function () { $scope.accordionStatus.editHotelOpen = true; }, 1000);
            //    
            //}
        }

        $rootScope.$on('hotelUpdated', function(event, obj) {
            if(obj && obj.creationTime == $scope.showHotel.creationTime)
            {
                $scope.showHotel = obj;
                $scope.hotelState.currentHotel = $scope.showHotel;
            }
        });


        //    $scope.getFormatDate = function(time)
        //{
        //    if(!time)
        //        return "";
        //    
        //    var d = new Date(time);
        //    
        //    if(!d)
        //        return "";
        //    
        //    var day = d.getDate();
        //    var monthIndex = d.getMonth();
        //    var year = d.getFullYear();
        //    return day+"."+(monthIndex+1)+"."+year;
        //}
            
            
        //$scope.loadDetailHotel = function()
        //{
        //    if($scope.editHotelId == "new")
        //    {
        //        $scope.showHotel = $scope.hotelService.getInitHotel();
        //    
        //        $scope.showHotel.hotelId =  $scope.hotelState.profileData.hotelId;
        //        
        //        $scope.editHotelId = $scope.showHotel.hotelId;
        //    
        //        $scope.localState.showHotelId = $scope.editHotelId;
        //    
        //        setTimeout(function () {
        //            //default open edit activity accordion
        //            $scope.accordionStatus.openEditActivities[$scope.showHotel.hotelId] = true;
        //            //default open hotel content
        //            if(!$scope.accordionStatus.openActivities)
        //            {
        //                $scope.accordionStatus.openActivities = [];
        //            }
        //            $scope.accordionStatus.openActivities[$scope.showHotel.hotelId] = true;
        //            //prevent modal onTouch error
        //            $rootScope.unlockModal();
        //        }, 100);
        //    
        //        return;
        //    }
        //    else 
        //    if($stateParams.hotelId || $scope.editHotelId && $scope.editHotelId!="new")
        //    {
        //        var searchHotelId = $scope.editHotelId? $scope.editHotelId : $stateParams.hotelId;
        //
        //        $scope.localState.showHotelId = searchHotelId;
        //
        //        for(var a=0; a<$scope.localState.activities.length; a++)
        //        {
        //            if($scope.localState.activities[a].hotelId == searchHotelId)
        //            {
        //                $scope.showHotel = $scope.localState.activities[a];
        //               
        //                setTimeout(function () { 
        //                    //default open edit activity accordion
        //                    //$scope.accordionStatus.openEditActivities[$scope.showHotel.activityId] = true;
        //                    //default open activity content
        //                    if(!$scope.accordionStatus.openHotels)
        //                    {
        //                        $scope.accordionStatus.openHotels = [];
        //                    }
        //                    //$scope.accordionStatus.openActivities[$scope.showHotel.activityId] = true;
        //
        //                    //prevent modal onTouch error
        //                    $rootScope.unlockModal();
        //                }, 500);
        //
        //                break;
        //            }
        //        }
        //    }
        //}

            $scope.hotelState.getDeferredState().then(function() {
                init();
            }, function(error){
                init();

            });
            
            if($scope.hotelState && $scope.hotelState.profileData.id>0)
            {
                init();
            }
            
            
            
            
    }])
; 

'use strict';
app
//angular.module('hotelApp.profile', ['ngRoute', 'hotelApp.customerDto'])

    .controller('FeedController', ['$scope', '$rootScope', '$filter',
        function($scope, $rootScope, $filter) {

            
        $scope.localState = {
            feedText : undefined,
            availableFeedCustomers: [],
            selectedFeedCustomers: []
            //hotelFeedCustomersIds: "",
            //hotelFeedCustomersNames: "",
            //anonymName : "",
            //anonymMail : ""
        };
            
        $scope.submitFeed = function() {

            $scope.mainState.errorMsg = false;
        
            $scope.mainState.successMsg = false;
            
            if(!$scope.hotelState.profileData.hotelStaff && !$scope.hotelState.profileData.admin)
            {
                return;
            }

            var feedCustomer = $scope.hotelState.profileData;

            if($scope.localState.feedText != undefined)
            {
                if(!feedCustomer.systemMessages)
                {
                    feedCustomer.systemMessages = {};
                }
                
                //if($scope.localState.anonymName)
                //{
                //    feedCustomer.systemMessages["fromName"] = $scope.localState.anonymName;
                //} 
                //
                //if($scope.localState.anonymMail)
                //{
                //    feedCustomer.systemMessages["fromMail"] = $scope.localState.anonymMail;
                //}

                var hotelFeedCustomersIds = "";
                
                for(var i=0; i <  $scope.localState.selectedFeedCustomers.length; i++)
                {
                    if(hotelFeedCustomersIds!="")
                    {
                        hotelFeedCustomersIds += ",";
                    }
                    
                    hotelFeedCustomersIds += $scope.localState.selectedFeedCustomers[i].id;
                }
                
                feedCustomer.systemMessages["hotelFeedMessage"] = encodeURIComponent($scope.localState.feedText);
                feedCustomer.systemMessages["hotelFeedCustomerIds"] = hotelFeedCustomersIds;

            }
        
            $rootScope.showLoading(true);
        
        
            $scope.hotelState.submitProfileData(false, feedCustomer).then(function(updatedCustomer){
        
                if(!$scope.hotelState.profileData)
                {
                    $rootScope.topPage();
                    $scope.localState.feedText = undefined;
                    $scope.mainState.successMsg = $filter('translate')('alert.success.feedMsgOk');
                }
                else if(updatedCustomer && updatedCustomer.id>0)
                {
                    $rootScope.topPage();
        
                    $scope.localState.feedText = undefined;
                    $scope.mainState.successMsg = $filter('translate')('alert.success.feedMsgOk');
                }
                else{
                    //$scope.localState.feedText = decodeURIComponent($scope.hotelState.profileData.feed);
                    $scope.hotelState.profileData.systemMessages = {};
                    $scope.mainState.errorMsg = $filter('translate')('alert.error.connectionError');
                }
        
                $rootScope.showLoading(false);
            }, function(error){
                //TODO eugen: show error?
                $scope.mainState.errorMsg = $filter('translate')('alert.error.connectionError');
                $rootScope.showLoading(false);
            });
    
        }

        //$scope.hotelState.getDeferredState().then(function() {
        //
        //    $scope.initProfile($scope.hotelState.profileData);
        //});
            
        function initFeed()
        {
            $scope.hotelState.getHotelCustomers($scope.hotelId).then(function(respArray){

                //$scope.localState.hotelFeedCustomersIds = "";
                //$scope.localState.hotelFeedCustomersNames = "";

                for(var i=0; i< respArray.length; i++)
                {
                    var nextCustomer = respArray[i];
                    
                    if(nextCustomer.id == $scope.hotelState.profileData.id)
                    {
                        continue;
                    }
                    
                    //if($scope.localState.hotelFeedCustomersIds)
                    //{
                    //    $scope.localState.hotelFeedCustomersIds += ", ";
                    //    $scope.localState.hotelFeedCustomersNames += ", ";
                    //}
                    
                    var nextFeedCustomer = {};
                    nextFeedCustomer.id = respArray[i].id;
                    nextFeedCustomer.name = respArray[i].firstName + (respArray[i].lastName? " " + respArray[i].lastName: "");
                    nextFeedCustomer.icon = "<img src='"+respArray[i].avatarUrl+"' />";
                    nextFeedCustomer.ticked = true;

                    $scope.localState.availableFeedCustomers.push(nextFeedCustomer);
                    $scope.localState.selectedFeedCustomers.push(nextFeedCustomer);
                }
                
            });//.then( function(customers)
        }

        initFeed();
       
}]);
'use strict';
app
//angular.module('hotelApp.profile', ['ngRoute', 'hotelApp.customerDto'])

    .controller('FeedbackController', ['$scope', '$rootScope', '$filter',
        function($scope, $rootScope, $filter) {

            
        $scope.localState = {
            feedbackText : undefined,
            anonymName : "",
            anonymMail : ""
        };
            
        $scope.submitFeedback = function() {

            $scope.mainState.errorMsg = false;
        
            $scope.mainState.successMsg = false;
        
            var feedbackCustomer = $scope.hotelService.getInitCustomer();
        
            if($scope.hotelState.profileData)
            {
                feedbackCustomer = $scope.hotelState.profileData;
                //feedbackCustomer.age = undefined;
                //feedbackCustomer.confirmPassword = undefined;
            }
        
            if($scope.localState.feedbackText != undefined)
            {
                if(!feedbackCustomer.systemMessages)
                {
                    feedbackCustomer.systemMessages = {};
                }
                
                if($scope.localState.anonymName)
                {
                    feedbackCustomer.systemMessages["fromName"] = $scope.localState.anonymName;
                } 
                
                if($scope.localState.anonymMail)
                {
                    feedbackCustomer.systemMessages["fromMail"] = $scope.localState.anonymMail;
                }
                
                
                feedbackCustomer.systemMessages["feedbackMessage"] = encodeURIComponent($scope.localState.feedbackText);
            }
        
            $rootScope.showLoading(true);
        
        
            $scope.hotelState.submitProfileData(false, feedbackCustomer).then(function(updatedCustomer){
        
                if(!$scope.hotelState.profileData)
                {
                    $rootScope.topPage();
                    $scope.localState.feedbackText = undefined;
                    $scope.mainState.successMsg = $filter('translate')('alert.success.feedbackMsgOk');
                }
                else if(updatedCustomer && updatedCustomer.id>0)
                {
                    $rootScope.topPage();
        
                    $scope.localState.feedbackText = undefined;
                    $scope.mainState.successMsg = $filter('translate')('alert.success.feedbackMsgOk');
                }
                else{
                    //$scope.localState.feedbackText = decodeURIComponent($scope.hotelState.profileData.feedback);
                    $scope.hotelState.profileData.systemMessages = {};
                    $scope.mainState.errorMsg = $filter('translate')('alert.error.connectionError');
                }
        
                $rootScope.showLoading(false);
            }, function(error){
                //TODO eugen: show error?
                $scope.mainState.errorMsg = $filter('translate')('alert.error.connectionError');
                $rootScope.showLoading(false);
            });
    
        }

        //$scope.hotelState.getDeferredState().then(function() {
        //
        //    $scope.initProfile($scope.hotelState.profileData);
        //});
       
}]);
'use strict';
app
//angular.module('hotelApp.forgotpwd', ['ngRoute','ngCookies', 'hotelApp.customerDto','hotelApp.loginCustomerService','hotelApp.hotelDto', 'hotelApp.sessionCustomerService'])

.controller('ForgotpwdController', 
['$scope','$rootScope', '$cookies', '$state', '$resource', '$stateParams', '$filter', 'CustomerDto', 'SessionCustomer',
function($scope, $rootScope, $cookies, $state, $resource, $stateParams, $filter, CustomerDto, SessionCustomer) {

	$scope.ready = 0;
	
	$scope.isCollapsed = true;
	
	$scope.resetInfo = {
		email: undefined,
		resetcode: undefined,
		password : undefined,
		repeatPassword : undefined
	}
	
	
	$scope.submitResetPassword = function()
	{
		$scope.mainState.errorMsg = false;
		
		//if(!$stateParams.email || !$stateParams.email )
		//{
		//	return;
		//}
	
		var ResetPasswordService = $resource('./customers/resetPassword/email/:email/resetcode/:resetcode', {email:'@email', resetcode:'@resetcode' }, {'resetPassword': {method: 'GET', isArray: false}});

		ResetPasswordService.resetPassword({email: $stateParams.email, resetcode: $stateParams.resetcode}, function(response) {
			if(response && response.id && response.id>0)
			{
				$scope.resetProfile = $scope.hotelService.decodeCustomer(response);
				$scope.hotelState.initState($scope.resetProfile);
				$scope.showNewPasswordField = true;
			}
			else {
				$scope.mainState.errorMsg = $filter('translate')('alert.error.wrongResetCode');

			}
		}, function(error){
			$scope.mainState.errorMsg = $filter('translate')('alert.error.mailError');
		});
	}
	
	$scope.submitNewPassword = function()
	{
		CustomerDto.get({id: $scope.resetProfile.id, requesterId: -1}, function(responseObj){
			responseObj.password = $scope.resetInfo.password;
			CustomerDto.update({ id : responseObj.id, requesterId: responseObj.id }, responseObj, function(){
				$scope.hotelState.initState(responseObj);
				$state.go("app.hotel");
			});
		});
	}

	if($stateParams.resetcode)
	{
		$scope.submitResetPassword();
	}
	
	$scope.sendResetCode = function()
	{
		$scope.mainState.errorMsg = false;
		$scope.success = false;

		if(! $scope.resetInfo.email)
		{
			return;
		}
		
		var RequestResetCodeService = $resource('./customers/requestPasswordReset/email/:email', {email:'@email'}, {'getResetCode': {method: 'GET'}});

		RequestResetCodeService.getResetCode({email:$scope.resetInfo.email}, function(response) {
			if(response.errorResponse && response.errorResponse!="ok")
			{
				$scope.mainState.errorMsg = response.errorResponse;
			}
			else{
				//$scope.responseMsg = response.message;
				$scope.success = true;
				$scope.isCollapsed = false;

			}
		}, function(error){
			$scope.success = true;
			$scope.isCollapsed = false;
		});

		$scope.resetInfo.email = "";
	}
	
	var sessionCustomer = SessionCustomer.get(function () {

		if (sessionCustomer && sessionCustomer.id && sessionCustomer.id > 0 && sessionCustomer.logged) {
			$scope.showNewPasswordField = true;
			$scope.hotelState.initState(sessionCustomer);
		}

		$rootScope.showLoading(false);

		$rootScope.closeModal();

	});


}]);
'use strict';
//app
angular.module('hotelApp.hotel', ['ngRoute','ngCookies', 'ngResource', 'hotelApp.sessionCustomerService', 'hotelApp.activityDto'])

    .controller('HotelController', ['$scope', '$rootScope', '$location', '$resource', '$stateParams', 'HotelDto', '$window', '$state', '$filter', '$mdDialog',
    function($scope, $rootScope, $location, $resource, $stateParams, HotelDto, $window, $state, $filter, $mdDialog) {
        
        var editHotel = true;
        
        $scope.localState = {
            
            ready : 0,
            //editActivity : $scope.hotelService.getInitActivity(),

            hotelBlockInternActivities: true
            //,
            //showCityLoading: false
            //editActivityMap : []
            //FOR future: filter local hotel activities
            //searchFilter : {},
            //strictSearch : true,
            //filterActivities : []
            // editHotelAccordionIconClass : 'fa fa-pencil-square-o'
            //hotelScope: true
        };

        $scope.accordionStatus = {
            
            editHotelOpen: false,
            isEditHotelDisabled: false,

            infoHotelOpen: false,
            isInfoHotelDisabled: false,
            
            descriptionHotelOpen: false,
            isDescriptionHotelDisabled: false

            //newActivityOpen: false,
            //isNewActivityDisabled: false
        };

        var HotelActivitiesService = $resource('./activity/activities/customer/:customerId/hotel/:hotelId', {customerId:'@customerId', hotelId:'@hotelId'}, {'getActivities': {method: 'GET', isArray: true}});
        //var ActivityRemoveService = $resource('./activity/customer/:customerId/activity/:activityId', {customerId:'@customerId', activityId:'@activityId' }, {'remove': {method: 'GET'}});

        ////######################## HOTEL LIST -> UPDATE HOTEL ######################
        $scope.addUpdateActivity = function(newActivity)
        {
            var activityUpdated = false;

            if(newActivity.activityId>0)
            {
                for(var a=0; a<$scope.hotelState.hotelActivities.length; a++)
                {
                    if($scope.hotelState.hotelActivities[a].activityId == newActivity.activityId)
                    {
                        $scope.hotelState.hotelActivities[a] = newActivity;
                        activityUpdated = true;
                        break;
                    }
                }
            }

            if(!activityUpdated)
            {
                $scope.hotelState.hotelActivities.push(newActivity);
            }

            $scope.updateLocalFilter();

        };
        
        $scope.updateLocalFilter = function(onlySetIfEmpty){

            //TODO EUGEN: for every auto update!!!
            if(onlySetIfEmpty && $scope.localState.filterActivities && $scope.localState.filterActivities.length>0)
            {
                return;
            }
            
            $scope.localState.filterActivities = $filter('filter')($scope.hotelState.hotelActivities, $scope.localState.searchFilter, true);//,  $scope.localState.strictSearch);
            $scope.localState.filterHotels = [$scope.hotelState.currentHotel];

            
            
            $scope.localState.copyActivities = angular.copy($scope.localState.filterActivities);
            $scope.localState.copyHotels = angular.copy($scope.localState.filterHotels);
            //get copies only for staff and admin!
            //if($scope.hotelState.profileData.admin || $scope.hotelState.profileData.hotelStaff && $scope.hotelState.currentHotel && $scope.hotelState.profileData.hotelId == $scope.hotelState.currentHotel.id)
            //{
            //    for(var a=0; a<$scope.localState.filterActivities.length; a++)
            //    {
            //        $scope.localState.editActivityMap[$scope.localState.filterActivities[a].activityId] = angular.copy($scope.localState.filterActivities[a]);
            //    } 
            //}
            
        };

        // #################### POPUP BLOCK #################

        //$scope.onHotelCodeClick = function()
        //{
        //    $scope.openModal("checkin");
        //
        //}
        
        
        $scope.showPopup = function(ev) {

            //if($scope.mainState.showCheckinWellcomePopup)
            //{
            //    $scope.mainState.showCheckinWellcomePopup = false;
            //
            //    var confirm = $mdDialog.confirm(
            //        {
            //            clickOutsideToClose: true
            //        })
            //        .title($filter('translate')('alert.success.newCheckinPopupHeader'))
            //        .content($filter('translate')('alert.success.newCheckinPopup'))
            //        .ariaLabel('Lucky day')
            //        .ok('OK')
            //        .cancel($filter('translate')('alert.noPopupMore'))
            //        .targetEvent(ev);
            //
            //    $mdDialog.show(confirm).then(function() {
            //
            //    }, function() {
            //        $scope.mainState.showCheckinWellcomePopup = false;
            //    });
            //}
            
    //        if($scope.hotelState.profileData.hideHotelListPopup)
    //        {
    //            return;
    //        }
    //    
    //        var confirm = $mdDialog.confirm( {
    //    clickOutsideToClose: true
    //})
    //            .title('Planst Du einen Hotelaufenthalt?')
    //            .content('Hier siehst Du, was in anderen Städten und Hotels läuft. Verabrede dich mit Hotelgästen schon vor der Anreise im Hotel oder lasse Dir von denen Tipps zum Aufenthalt geben')
    //            .ariaLabel('Lucky day')
    //            .ok('OK')
    //            .cancel('Nicht mehr zeigen')
    //            .targetEvent(ev);
    //    
    //        $mdDialog.show(confirm).then(function() {
    //            $scope.hotelState.profileData.hideHotelListPopup = true;
    //            $scope.hotelService.setCookie('hotelicohideHotelListPopup', true);
    //
    //            $scope.hotelState.submitProfileData(true);
    //        }, function() {
    //            //$scope.hotelState.profileData.hideHotelListPopup = true;
    //        });
        };
        
        
        //##################### WATCHERS ####################

        $scope.$watch('mainState.globalIntervalCheck', function() {
           
            if($state.current.name == "app.hotel" )
            {
                if($scope.hotelState.profileData)
                {
                    $scope.getUpdateModuleData();
                }
                else {
                    $scope.hotelState.initState().then(function(reponse){
                        $scope.getUpdateModuleData();
                    });
                }
            }
            
        });

        /// ###################### GET-UPDATE BLOCK ////////////////////////

        /**
         * Copy Object for edit and show hotel-object
         * @param rewriteIfExists
         * @param curHotelObj
         */
        function setCurrentHotelAlias(rewriteIfExists, curHotelObj)
        {
            if(!curHotelObj)
            {
                curHotelObj = $scope.hotelState.currentHotel;
            }
            
            if(!$scope.localState.editHotel || rewriteIfExists)
            {
                $scope.localState.editHotel = curHotelObj;
            }
            
            if(!$scope.showHotel || rewriteIfExists)
            {
                $scope.showHotel = curHotelObj;
            }

            if(editHotel)
            {
                $scope.localState.editHotelAccordionTitle =  "'" + $scope.showHotel.name + "' " + $filter('translate')('system.edit');
                $scope.localState.showHotelBlockFullInfo = true;
                $scope.accordionStatus.editHotelOpen = true;
            }
        }
        
        /**
         * load currentHotel only it is not exists
         * @param customerObject
         */
        $scope.getUpdateCurHotel = function(forceUpdate)
        {
            var customerObject = $scope.hotelState.profileData;
            
            if(customerObject.id && customerObject.id>0)
            {
                if(customerObject.hotelId && customerObject.hotelId>0 || $stateParams.hotelId && customerObject.admin)
                {
                    $scope.localState.hotelId =  $stateParams.hotelId && customerObject.admin? $stateParams.hotelId : customerObject.hotelId;

                    //Noch kein currentHotel oder wir brauchen ein anderes als Admin
                    if(!$scope.hotelState.currentHotel || $scope.hotelState.currentHotel.id != $scope.localState.hotelId || forceUpdate)
                    {
                        $scope.hotelState.getCurrentHotel($scope.localState.hotelId, customerObject, forceUpdate).then(function(hotelResponse){

                            setCurrentHotelAlias(true, $scope.hotelState.currentHotel);
                            $rootScope.showLoading(false);

                        });
                    }
                    else //Current Hotel ist bereits geladen! auch admin virtuell
                    {
                        setCurrentHotelAlias(false, $scope.hotelState.currentHotel);

                        $rootScope.showLoading(false);
                    }

                    $scope.localState.ready = 1;

                }
                else //no hotel -> load virtual hotel
                {

                }
            }

        };

        $scope.getUpdateCurHotelActivityList = function()
        {
            //if load activities from Server
            if($scope.localState.hotelId && $scope.localState.hotelId>0 && ($scope.hotelState.hotelActivities.length==0 || $scope.localState.profileData && $scope.hotelState.hotelActivities[0].hotelId != $scope.localState.profileData.hotelId))
            {
                HotelActivitiesService.getActivities({customerId: $scope.hotelState.profileData.id, hotelId: $scope.localState.hotelId}, function(responseArray){
                  
                    $scope.hotelState.hotelActivities = $scope.decodeActivityList(responseArray);

                    $scope.updateLocalFilter();
                    
                    $scope.showLoading(false);

                });

            }
            else{ //If we have already all activities local

                $scope.updateLocalFilter(true);

                $rootScope.showLoading(false);
            }
        };
        
        ///######################## INIT BLOCK ##############

        $scope.getUpdateModuleData = function()
        {
            $scope.getUpdateCurHotel();
            $scope.getUpdateCurHotelActivityList();
        };
        
        function initHotel(){
            
            //$scope.localState.showCityLoading = true;
            
            $scope.hotelState.updateState();
            $scope.hotelState.checkNextRouteState();
            
            $rootScope.showLoading(true);

            $scope.getUpdateModuleData();
            $scope.showPopup();

            
        };
        
        //wait for hotel state
        $scope.hotelState.getDeferredState().then(function(stateObj) {
            
            $scope.initMainState(stateObj);

            if(!$rootScope.relocateLogin())
            {
                initHotel();
            }
        });

        if($stateParams.reloadHotel)
        {
            //$scope.getUpdateCurHotel(true);
            $window.location.reload();
        }
      
    }])
//.directive('progressBar', [
//    function () {
//        return {
//            link: function ($scope, el, attrs) {
//                $scope.$watch(attrs.progressBar, function (newValue) {
//                   // el.css('width', newValue.toString() + '%');
//                });
//            }
//        };
//    }
//])
;
'use strict';
app
//angular.module('hotelApp.hotelList', ['ngRoute','ngCookies', 'ngResource', 'hotelApp.sessionCustomerService', /*'hotelApp.fileUploader',*/ 'hotelApp.activityService', 'hotelApp.activityDto'])

    .controller('HotelListController',
    ['$scope', '$rootScope', '$location', '$resource', '$stateParams' ,'SessionCustomer', 'HotelDto', 'HotelCheckin', '$window', '$state', '$translate', 'editableOptions', 'editableThemes', '$filter', '$mdDialog',
        function($scope, $rootScope, $location, $resource, $stateParams, SessionCustomer, HotelDto, HotelCheckin, $window, $state, $translate, editableOptions, editableThemes, $filter, $mdDialog) {

        editableThemes.bs3.inputClass = 'input-sm';
        editableThemes.bs3.buttonsClass = 'btn-sm';
        editableOptions.theme = 'bs3';

        $scope.localState = {

            ready: 0,
            
            selectedFilterHotel : undefined,
            selectedCityHotel : undefined,
            
            searchFilter : {},
            
            strictSearch: true,
            
            newHotel: $scope.hotelService.getInitHotel(),

            filterHotels : [],
            
            //noHotelFound: false,

            showHotelBlockFullInfo : true,
            
            //hotelCitySelectorUpdator: 0, //watcher down controller

            maxHotelDescription: $scope.hotelService.validationUtils.maxHotelDescription
        };

        $scope.accordionStatus = {
            editHotelOpen: false,
            infoHotelOpen: [],
            descriptionHotelOpen: [],
            newActivityOpen: false,
            isEditHotelDisabled: false,
            isInfoHotelDisabled: false,
            isDescriptionHotelDisabled: false,
            isNewActivityDisabled: false
        };
            
        
        //################ filter Cities and Hotels #########################
        
        $scope.emptyPreviousSearch = function()
        {
            $scope.localState.searchFilter = {};
            $scope.localState.selectedFilterHotel=null;

            $scope.localState.filterHotels = $filter('filter')($scope.mainState.hotelArray, $scope.localState.searchFilter, true);//,  $scope.localState.strictSearch);

        };
            
        $scope.updateLocalFilter = function(onlySetIfEmpty, subSetToSearch)
        {            
            
            if(onlySetIfEmpty && $scope.localState.filterHotels && $scope.localState.filterHotels.length>0)
            {
                return;
            }
            
            $scope.localState.searchFilter = {};

            if($scope.localState.selectedFilterHotel && $scope.localState.selectedFilterHotel.id>0)
            {
                $scope.localState.searchFilter.id = $scope.localState.selectedFilterHotel.id;
            }
            else if($scope.mainState.selectedCity != "-1" && $scope.mainState.selectedCity != undefined && $scope.mainState.selectedCity.toUpperCase() != $filter('translate')('alert.info.allCities').toUpperCase())
            {
                $scope.localState.searchFilter.city = $scope.mainState.selectedCity;
            }
            
            if(!subSetToSearch)
            {
                subSetToSearch = $scope.mainState.hotelArray;
            }

            $scope.localState.filterHotels = $filter('filter')(subSetToSearch, $scope.localState.searchFilter, true);//,  $scope.localState.strictSearch);

            $scope.localState.noHotelFound = $scope.localState.filterHotels.length==0 && $scope.mainState.hotelArray.length>0;
            
            $scope.localState.copyHotels = angular.copy($scope.localState.filterHotels);


        };
            
        //##################### WATCHERS ####################

        $scope.$on('mainState.globalIntervalCheck', function(next, current) {
           
            if($state.current.name == "app.hotelList")
                 $scope.getUpdateModuleData();

        });
        ///############### INIT BLOCK #######################################

        $scope.getUpdateHotelList = function () {

            $scope.getUpdateMainHotelList().then(function(responseList){

                for (var h = 0; h < responseList.length; h++) {
                    $scope.accordionStatus.infoHotelOpen[responseList[h].id] = false;
                    $scope.accordionStatus.descriptionHotelOpen[responseList[h].id] = false;
                }
                
                $rootScope.showLoading(false);
                $scope.updateLocalFilter();

            });

        };
            
        $scope.getUpdateModuleData = function() {

            if ($state.current.name == "app.hotelList") {
                $scope.getUpdateHotelList();
                //$scope.localState.hotelCitySelectorUpdator++;
                $rootScope.$broadcast('hotelCitySelectorChangeEvent', []);
            }

            setTimeout(function () {
                $rootScope.showLoading(false)
            }, 1000);

        }

        function initHotelList(){
            $scope.getUpdateModuleData();
            $rootScope.showLoading(false);
            $scope.updateLocalFilter();
        }
            
        //$scope.hotelState.getDeferredState().then(function() {
        //    initHotelList();
        //});
            
        initHotelList();
            
        //if ($state.current.name == "app.hotelRegister") {
        //    $scope.getUpdateModuleData();
        //};
        
        
    }]);
'use strict';
app
//angular.module('hotelApp.hotel', ['ngRoute','ngCookies', 'ngResource', 'hotelApp.sessionCustomerService', /*'hotelApp.fileUploader',*/ 'hotelApp.activityService', 'hotelApp.activityDto'])

    .controller('HotelPreviewController', ['$scope', '$rootScope', '$location', '$resource', '$stateParams', 'HotelDto', '$window', '$state', '$filter', '$mdDialog',
            function($scope, $rootScope, $location, $resource, $stateParams, HotelDto, $window, $state, $filter, $mdDialog) {

                $scope.localState = {
                    ready : 0,

                    showActivityHotelLink:true, //Show Hotel Link in activities!!!
                    hotelBlockInternActivities: true,

                    //showPeFilteredHotelBlock:false, //Show selected Hotel Block!!!
                    //showHotelCityFilterBlock:false, //Show selected Hotel Block!!!

                    selectedFilterHotel : undefined,
                    selectedCityHotel : undefined,

                    //hotelCitySelectorUpdator: 0, //watcher down controller
                    activitiesLoading: true,
                    //newActivityFile : null,

                    noActivityFound: false,
                    searchFilter : {},
                    strictSearch : true,

                    filterActivities : []
                };

                $scope.accordionStatus = {
                    editHotelOpen: false,
                    infoHotelOpen: false,
                    descriptionHotelOpen: false,
                    newActivityOpen: false,
                    isEditHotelDisabled: false,
                    isInfoHotelDisabled: false,
                    isDescriptionHotelDisabled: false,
                    isNewActivityDisabled: false
                };

                var HotelActivitiesService = $resource('./activity/activities/customer/:customerId/hotel/:hotelId', {customerId:'@customerId', hotelId:'@hotelId'}, {'getActivities': {method: 'GET', isArray: true}});

                //################ filter Cities and Hotels #########################

                $scope.updateLocalFilter = function(onlySetIfEmpty, subSetToSearch){


                    if(onlySetIfEmpty && $scope.localState.filterActivities && $scope.localState.filterActivities.length>0)
                    {
                        return;
                    }
                    //var subSetToSearch = null;

                    if($scope.localState.selectedFilterHotel && $scope.localState.selectedFilterHotel.id>0){
                        $scope.localState.searchFilter.hotelId = $scope.localState.selectedFilterHotel.id;
                    }
                    //else if($scope.mainState.selectedCity != "-1" && $scope.mainState.selectedCity != undefined && $scope.mainState.selectedCity.toUpperCase() != $filter('translate')('alert.info.allCities').toUpperCase())
                    //{
                    //      $scope.localState.searchFilter.hotelCity = $scope.mainState.selectedCity;
                    //}

                    //Eugen: Check if it is activityList, not hotelList
                    if(!subSetToSearch || subSetToSearch.length==0 || !subSetToSearch[0].activityId)
                    {
                        subSetToSearch = $scope.hotelState.hotelActivities;
                    }

                    $scope.localState.filterActivities = $filter('filter')(subSetToSearch, $scope.localState.searchFilter, true);//, $scope.localState.strictSearch);

                    $scope.localState.noActivityFound = $scope.localState.filterActivities.length==0 && $scope.hotelState.hotelActivities.length>0;

                    if($scope.localState.noActivityFound || $scope.localState.filterActivities.length>0)
                    {
                        $scope.localState.activitiesLoading = false;
                    }

                    $scope.localState.copyActivities = angular.copy($scope.localState.filterActivities);

                }

                ////######################## HOTEL LIST -> UPDATE HOTEL ######################

                //$scope.isActivityOpened = function(activityId){
                //
                //    return $scope.localState.openActivities[activityId];
                //}
                //
                //$scope.openActivity = function(activityId){
                //
                //    var open = $scope.isActivityOpened(activityId);
                //
                //    if(open)
                //        $scope.localState.openActivities[activityId]=false;
                //    else{
                //        $scope.localState.openActivities[activityId]=true;
                //    }
                //};

                //$scope.submitNewActivity = function()
                //{
                //    $scope.localState.newActivityForm = document.forms['newActivityForm'];
                //
                //    if($scope.localState.newActivityForm)
                //        $scope.localState.newActivityForm.submit();
                //};

                //$scope.submitActivity = function() {
                //
                //    $scope.mainState.successMsg = false;
                //
                //    if(!$scope.localState.newactivity.shortDescription)
                //    {
                //        $scope.mainState.errorMsg = "Activity short description is empty";
                //        return;
                //    };
                //
                //    if($scope.localState.newactivity.shortDescription.length>0)
                //    {
                //        //var newActivity = new HotelActivityDto();
                //
                //        //newActivity.title = $scope.localState.newactivity.title;
                //        $scope.localState.newactivity.hotelId = $scope.hotelState.currentHotel.id;
                //        $scope.localState.newactivity.senderId = $scope.hotelState.profileData.id;
                //
                //        //Encode separatly, not display encoding bindings
                //        var encodedActivity = $scope.hotelService.encodeActivity($scope.localState.newactivity);
                //
                //        ActivityService.send(encodedActivity, $scope.localState.newactivity.activityId);
                //
                //        $scope.myWait(500);
                //
                //        $scope.uploadNewImage("activity", $scope.localState.newactivity.activityId);
                //
                //        $scope.localState.newactivity = $scope.hotelService.getInitActivity();
                //
                //        $scope.mainState.successMsg = "Activity wurde erzeugt";
                //
                //        $scope.accordionStatus.newActivityOpen = false;
                //
                //        //$window.location.reload();
                //
                //    }
                //    else{
                //        $scope.mainState.errorMsg = "Activity description to short";
                //        return;
                //    }
                //
                //};



                //$scope.removeActivity = function(activityId) {
                //
                //    ActivityRemoveService.remove({customerId: $scope.hotelState.profileData.id, activityId: activityId}, function(response){
                //        response.$promise.then(function(value){
                //            
                //            for(var a=0; a<$scope.hotelState.hotelActivities.length; a++)
                //            {
                //                if($scope.hotelState.hotelActivities[a].activityId == activityId)
                //                {
                //                    $scope.hotelState.hotelActivities.splice(a, 1);
                //                    $scope.mainState.successMsg = "Activity wurde entfernt";
                //
                //                    break;
                //                }
                //            }
                //            
                //        });
                //    });
                //};

                $scope.addUpdateActivity = function(newActivity)
                {
                    var activityUpdated = false;

                    if(newActivity.activityId>0)
                    {
                        for(var a=0; a<$scope.hotelState.hotelActivities.length; a++)
                        {
                            if($scope.hotelState.hotelActivities[a].activityId == newActivity.activityId)
                            {
                                $scope.hotelState.hotelActivities[a] = newActivity;
                                activityUpdated = true;
                                break;
                            }
                        }
                    }

                    if(!activityUpdated)
                    {
                        $scope.hotelState.hotelActivities.push(newActivity);
                    }

                    $scope.updateLocalFilter();
                };

                //################# SERVICE LISTENER //////////////////////////////////////////////////////

                //ActivityService.receive().then(null, null, function(activity) {
                //
                //    if( $scope.hotelState.currentHotel
                //        &&
                //        $scope.hotelState.currentHotel.id == activity.hotelId)
                //    {
                //
                //        var decodedActivity = $scope.hotelService.decodeActivity(activity);
                //
                //        if($scope.showDetailActivity && $scope.showDetailActivity.activityId==decodedActivity.activityId)
                //        {
                //            $scope.showDetailActivity = decodedActivity;
                //        }
                //
                //        $scope.addUpdateActivity(decodedActivity);
                //
                //        //$scope.loadDetailActivity();
                //    }
                //});

                // #################### POPUP BLOCK #################

                $scope.showPopup = function(ev) {

                    //if($scope.mainState.showCheckinWellcomePopup)
                    //{
                    //    $scope.mainState.showCheckinWellcomePopup = false;
                    //    
                    //    var confirm = $mdDialog.confirm(
                    //        {
                    //            clickOutsideToClose: true
                    //        })
                    //        .title($filter('translate')('alert.success.newCheckinPopupHeader'))
                    //        .content($filter('translate')('alert.success.newCheckinPopup'))
                    //        .ariaLabel('Lucky day')
                    //        .ok('OK')
                    //        .cancel($filter('translate')('alert.noPopupMore'))
                    //        .targetEvent(ev);
                    //
                    //    $mdDialog.show(confirm).then(function() {
                    //
                    //    }, function() {
                    //        $scope.mainState.showCheckinWellcomePopup = false;
                    //    });
                    //}

                };


                //##################### WATCHERS ####################

                $scope.$watch('mainState.globalIntervalCheck', function() {

                    if($state.current.name == "app.activityList" )
                    {
                        //if($scope.hotelState.profileData)
                        {
                            $scope.getUpdateModuleData();
                        }
                        //else {
                        //    $scope.hotelState.initState().then(function(reponse){
                        //        $scope.getUpdateModuleData();
                        //    });
                        //}
                    }

                });



                /// ###################### GET-UPDATE BLOCK ////////////////////////
                $scope.emptyPreviousSearch = function()
                {
                    $scope.localState.searchFilter = {};
                    //$scope.localState.selectedCityHotel = null;
                    $scope.localState.selectedFilterHotel = null;
                }

                $scope.getUpdateHotelActivities = function()
                {
                    var activitiesHotelId = $stateParams.hotelId? $stateParams.hotelId : $scope.hotelState.profileData && $scope.hotelState.profileData.hotelId>0 ? $scope.hotelState.profileData.hotelId : -1;

                    //load {All} Activities
                    if(!$scope.hotelState.hotelActivities || $scope.hotelState.hotelActivities.length==0 || $scope.hotelState.hotelActivities[0].hotelId != activitiesHotelId)
                    {
                        var requesterId = $scope.hotelState.profileData ? $scope.hotelState.profileData.id : -1;
                        
                        HotelActivitiesService.getActivities({customerId: requesterId, hotelId: activitiesHotelId}, function(responseArray){

                            $scope.hotelState.hotelActivities = $scope.decodeActivityList(responseArray);

                            //Eugen: filterCitySelector Watcher!!!
                            //$scope.localState.hotelCitySelectorUpdator++;
                            $rootScope.$broadcast('hotelCitySelectorChangeEvent', []);
                            //$scope.onChangeHotelCitySelector();

                            $scope.showLoading(false);

                        });

                    }
                    else{

                        //Eugen: filterCitySelector Watcher!!!
                        //$scope.localState.hotelCitySelectorUpdator++;
                    }
                };

                ///######################## INIT BLOCK ##############

                $scope.getUpdateModuleData = function()
                {
                    $scope.getUpdateHotelActivities();
                };

                function initActivityList(){

                    if($state.current.name=="app.hotelPreview")
                    {
                        if(!$scope.hotelState.profileData.checkedIn)
                        {
                            $state.go("app.checkin");
                        }
                        else{

                            var previewHotelId = $stateParams.hotelId? $stateParams.hotelId : $scope.hotelState.profileData.hotelId;

                            $scope.getUpdateMainHotelObject(previewHotelId).then(function(hotelObj){
                                $scope.localState.selectedFilterHotel = hotelObj;
                                $scope.showHotel = hotelObj;
                            });
                        }

                    }

                    $scope.showPopup();
                    $scope.getUpdateModuleData();
                    $scope.updateLocalFilter();
                };

                initActivityList();

                //wait for hotel state
                //$scope.hotelState.getDeferredState().then(function() {
                //    initActivityList();
                //});
            }
        ]
    )
;
'use strict';
app
//angular.module('hotelApp.hotelList', ['ngRoute','ngCookies', 'ngResource', 'hotelApp.sessionCustomerService', /*'hotelApp.fileUploader',*/ 'hotelApp.activityService', 'hotelApp.activityDto'])

    .controller('HotelRegisterController',
                ['$scope', '$rootScope', 'HotelDto', '$state', 'editableOptions', 'editableThemes', '$filter',
        function($scope, $rootScope, HotelDto, $state, editableOptions, editableThemes, $filter ) {

        editableThemes.bs3.inputClass = 'input-sm';
        editableThemes.bs3.buttonsClass = 'btn-sm';
        editableOptions.theme = 'bs3';

        $scope.showHotel = $scope.hotelState.tempCreationHotel? $scope.hotelState.tempCreationHotel : $scope.hotelService.getInitHotel();
        $scope.hotelState.tempCreationHotel = $scope.showHotel;
        $scope.hotelState.profileData.systemMessages["staffHotelCreationTime"]  = $scope.hotelState.tempCreationHotel.creationTime;
            
        $scope.localState = {

            languages : $scope.hotelService.getLanguageArray(),

            availableSystemLanguages : $scope.hotelService.getSystemLanguagesArray(),

            selectSystemLanguage : $scope.hotelState.getPrefferedLanguage(),
            
            ready: 0,
            
            //newHotel: $scope.hotelService.getInitHotel(),

            maxHotelDescription: $scope.hotelService.validationUtils.maxHotelDescription,

            editHotelAccordionTitle: $scope.showHotel.name + " " + $filter('translate')('system.edit') ,
            hotelBlockInternActivities : true,
            showHotelBlockFullInfo : true
        };

        $scope.accordionStatus = {

            editHotelOpen: false,
            isEditHotelDisabled: false,

            infoHotelOpen: [],
            isInfoHotelDisabled: false,

            descriptionHotelOpen: [],
            isDescriptionHotelDisabled: false,
            
            newActivityOpen: false,
            isNewActivityDisabled: false
        };

        //################ filter Cities and Hotels #########################
        
        function createInitStaff(){
            
            var initStaff = $scope.hotelService.getInitCustomer();
            initStaff.firstName = "Staff";
            
            return initStaff;
        };

        function initSystemLanguages()
        {
            for (var i = 0; i < $scope.localState.availableSystemLanguages.length; i++) {

                if ($scope.localState.availableSystemLanguages[i].name == $scope.hotelService.getDefaultSystemLanguageLabel()) {
                    $scope.localState.availableSystemLanguages[i].ticked = true;
                }
            }
        };  
            
        function initHotelRegister() {

            $scope.localState.newStaff = createInitStaff();
            $scope.localState.gree = false;
            $scope.localState.newStaff.languages=["en"];
            
            if($scope.localState.newStaff.languages!=undefined)
            {
                for (var l = 0; l < $scope.localState.newStaff.languages.length; l++) {

                    for (var i = 0; i < $scope.localState.languages.length; i++) {
                        if ($scope.localState.languages[i].name === $scope.localState.newStaff.languages[l]) {
                            $scope.localState.languages[i].ticked = true;
                        }
                    }
                }
            }
            
            initSystemLanguages();
        };

        $rootScope.$on('hotelUpdated', function(event, obj) {
            if(obj && obj.creationTime == $scope.showHotel.creationTime)
            {
                $scope.showHotel = obj;
                $scope.hotelState.tempCreationHotel = $scope.showHotel;
            }
        });    
            
        $scope.submitNewStaffHotel = function () {
            
            $scope.mainState.successMsg = false;
            $scope.mainState.errorMsg = false;

            ///########## NEW STAFF CHECK !!!!!!!

            var customerError = $scope.hotelService.validateCustomerInfo($scope.localState.newStaff, true);

            if(customerError.length>0)
            {
                $scope.mainState.errorMsg = customerError;
                $rootScope.topPage();
                return;
            }
            
            //################## NEW HOTEL CHECK!!!!!!

            var hotelError = $scope.hotelService.validateHotelInfo($scope.showHotel);
            
            if(hotelError.length>0)
            {
                $scope.mainState.errorMsg = hotelError;
                $rootScope.topPage();
                return;
            }
            
            //var encodedNewHotel = $scope.hotelService.encodeHotel($scope.localState.newHotel);

            var creatorId = ($scope.hotelState && $scope.hotelState.profileData && $scope.hotelState.profileData.id > 0) ? $scope.hotelState.profileData.id : -1;

            //$scope.showHotel.id = -1; //NEW HOTEL!!!
            
            //$scope.hotelState.submitHotelData($scope.showHotel, creatorId).then(function(updatedHotel)
            {

                //$scope.mainState.successMsg = $filter('translate')('alert.success.hotelCreatedSuccess');
                
                //$scope.myWait(500);
                
                //$scope.accordionStatus.editHotelOpen = false;
                //$scope.accordionStatus.newActivityOpen = false;
                
                //$scope.showHotel = updatedHotel;

                //if($scope.hotelState)
                //{
                //    $scope.hotelState.currentHotel = $scope.localState.newHotel;
                //}

                ////##### REGISTER STAFF

                //Eugen: STAFF INFO!!!
                $scope.localState.newStaff.hotelStaff = true;
                
                $scope.localState.newStaff.hotelId = $scope.showHotel.id;
                
                if($scope.localState.newStaff.firstName == undefined){
                    $scope.localState.newStaff.firstName = "staff";
                }

                $scope.localState.newStaff.prefferedLanguage = $scope.hotelService.getDefaultAllowedLanguageViewKey();

                $scope.hotelState.registerCustomer($scope.localState.newStaff).then(function(createdProfil)
                {
                    createdProfil.hotelId = $scope.showHotel.id;

                    //$scope.uploadNewImage("hotel", updatedHotel.creationTime, createdProfil.id);

                    //$scope.myWait(500);
                    
                    $scope.localState.newStaff = createdProfil;
                    
                    $scope.hotelState.initState(createdProfil);

                    $scope.mainState.successMsg = $filter('translate')("alert.success.createdHotelStaffAndSendMail") + createdProfil.email;

                    $scope.hotelState.getDeferredState().then(function() 
                    {

                        $scope.localState.newStaff = createInitStaff();
    
                        $scope.hotelState.profileData.hotelId = $scope.showHotel.id;
                        
                        $scope.hotelState.submitProfileData(true, $scope.hotelState.profileData).then(function(updatedProfile)
                        {
                            
                            $scope.showHotel = HotelDto.get({customerId: $scope.hotelState.profileData.id, hotelId: $scope.showHotel.id}, function (hotelObj) 
                            {
    
                                if(!$scope.mainState.hotelArray)
                                {
                                    $scope.mainState.hotelArray = [];
                                }
                                $scope.mainState.hotelArray.push($scope.hotelService.decodeHotel(hotelObj));
                                $scope.accordionStatus.infoHotelOpen[hotelObj.id] = false;
                                $scope.accordionStatus.descriptionHotelOpen[hotelObj.id] = false;
    
                                //$rootScope.topPage();
    
                                $rootScope.showLoading(true);
                                
                                $state.go("app.hotel", {reloadHotel:true});
    
                            });
                        });
                    });

                });
                    
            }
            //);
            
        };
            
        ///############### INIT BLOCK #######################################
            
        $scope.getUpdateModuleData = function() {

            initHotelRegister();

        }

        $scope.hotelState.getDeferredState().then(function() {
            $scope.getUpdateModuleData();
            $rootScope.showLoading(false)
        });
        
        if ($state.current.name == "app.hotelRegister") {
            $scope.getUpdateModuleData();
            $rootScope.showLoading(false)
        };
        
    }]);
'use strict';
app
//angular.module('hotelApp.imageCrop', ['ngRoute','ImageCropper', 'hotelApp.sessionCustomerService'])
    
    .controller('ImageCropCtrl', ['$scope', '$rootScope', '$state', 'Upload', '$http', '$timeout', 'SessionCustomer', 
        function($scope, $rootScope, $location, Upload, $http, $timeout, SessionCustomer) {


            $scope.localState = {
                //canvasWidth : 325
                loading: false,
                loadComplete: false,
                redirectOnComplete: false
            };
            
            //var firstTime = true;
            //
            //$scope.$watch('cropper.sourceImage', function(newVal) {
            //    
            //    if(firstTime)
            //    {
            //        var width = $('#hiddenImage').width();
            //        var height = $('#hiddenImage').height();
            //        $scope.bounds.left = 0;
            //        $scope.bounds.right = width-20;
            //        $scope.bounds.top = 0;
            //        $scope.bounds.bottom = height-20;
            //    }
            //}
            
          
            
    //    $scope.fileChanged = function(e) {
    //
    //        var files = e.target.files;
    //
    //        var fileReader = new FileReader();
    //
    //        $scope.imgTarget = files[0];
    //        fileReader.readAsDataURL($scope.imgTarget);
    //
    //        fileReader.onload = function(e) {
    //            $scope.imgSrc = this.result;
    //            
    //            $scope.$apply();
    //
    //        };
    //
    //    }
    //
        $scope.clear = function() {
            //$scope.imageCropStep = 1;
            //delete $scope.imgSrc;
            //delete $scope.result;
            //delete $scope.resultBlob;
            $scope.cropper.sourceImage = null;
            $scope.localState.loading = false;

            //firstTime = true;
        };
    //    
    //function initAvatar(){
    //    $scope.hideAside();
    //    $scope.imageCropResult = null;
    //    $scope.showImageCropper = true;
    //    $scope.imageCropStep = 1;
    //}
    //
    //
    //initAvatar();    
    //
    //$scope.$watch('imageCropResult', function(newVal) {
    //    if (newVal) {
    //        console.log('imageCropResult', newVal);
    //
    //        
    //    }
    //
    //});    
    //    
    $scope.uploadAvatar = function()
    {
    
    
        ////Add to uploadable files
        //$scope.mainState.tempUploadFiles["customer"+"_"+customerId] = {
        //    file: files[0],
        //    entityName: "customer"
        //};
        //
        //$scope.uploadNewImage("customer", customerId);
        $scope.uploadFiles();
    }
        
    //initCrop();
   
            function readImg()
            {
                var fileReader = new FileReader();
                //
                //        $scope.imgTarget = files[0];
                        fileReader.readAsDataURL($scope.cropper.croppedImage);
                
                        fileReader.onload = function(e) {
                            $scope.imgSrc = this.result;
                            
                            $scope.$apply();
                
                        };
                
            }
            
            
    function dataURItoBlob(dataURI) {
        // convert base64/URLEncoded data component to raw binary data held in a string
        var byteString;
        if (dataURI.split(',')[0].indexOf('base64') >= 0)
            byteString = atob(dataURI.split(',')[1]);
        else
            byteString = unescape(dataURI.split(',')[1]);
    
        // separate out the mime component
        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    
        // write the bytes of the string to a typed array
        var ia = new Uint8Array(byteString.length);
        for (var i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }
    
        return new Blob([ia], {type:mimeString});
    }

            function b64toBlob(b64Data, contentType, sliceSize) {
                contentType = contentType || '';
                sliceSize = sliceSize || 512;

                var byteCharacters = atob(b64Data);
                var byteArrays = [];

                for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                    var slice = byteCharacters.slice(offset, offset + sliceSize);

                    var byteNumbers = new Array(slice.length);
                    for (var i = 0; i < slice.length; i++) {
                        byteNumbers[i] = slice.charCodeAt(i);
                    }

                    var byteArray = new Uint8Array(byteNumbers);

                    byteArrays.push(byteArray);
                }

                var blob = new Blob(byteArrays, {type: contentType});
                return blob;
            }        
            
    $scope.uploadFiles = function() {
        
        $scope.localState.loading = true;
        
        //readImg();
        //var split = $scope.cropper.croppedImage.split(";")
        //
        //var contentType = split[0].replace("data:", "");
        //var base64 = split[1].replace("base64,", "");
        //
        //var blob = b64toBlob(base64, contentType);
        var blob = dataURItoBlob($scope.cropper.croppedImage);
        //var blob = $scope.resultBlob;

        var customerId = $scope.hotelState.profileData? $scope.hotelState.profileData.id : -1;


        blob.name = "avatar" + customerId;
        var files = [blob]
        $scope.files = files;
        //$scope.files=[blob];
        angular.forEach(files, function(file) {
            if (file && !file.$error) {
                file.upload = Upload.upload({
                    url: '/'+$rootScope.HOST_SUFFIX+'files/upload/avatar',
                    file: file
                });
    
                file.upload.then(function (response) {
                    $timeout(function () {
                        file.result = response.data;
                        if(response.status == 200)
                        {
                            SessionCustomer.get(function(response) {
                                
                                $scope.localState.loadComplete = true;
                                
                                if($scope.localState.redirectOnComplete)
                                {
                                    $scope.hotelState.goStateBack();
                                }

                                setTimeout(function(){

                                    var requesterId = $scope.hotelState.profileData.id;

                                    $scope.hotelService.getEntityLogo(requesterId, "avatar", requesterId).then(function(imageJson){

                                        if(imageJson)
                                        {
                                            //var split = imageUrl.split("|");

                                            //if(split.length>2)
                                            {
                                                var entity = imageJson.entityType;
                                                var entityId = imageJson.entityId;
                                                var entityPictureUrl = imageJson.pictureUrl;
                                                
                                                if($scope.hotelState.profileData && $scope.hotelState.profileData.id == entityId && entityPictureUrl)
                                                    $scope.hotelState.profileData.avatarUrl = entityPictureUrl;

                                            }
                                        }
                                    })
                                }, 2000);
                                
                            });
                        }
                    });
                }, function (response) {
                    if (response.status > 0)
                        $scope.mainState.errorMsg = response.status + ': ' + response.data;
                });
    
                file.upload.progress(function (evt) {
                    file.progress = Math.min(100, parseInt(100.0 *
                    evt.loaded / evt.total));
                });
            }
        });
    }

            $scope.goBack = function(){
                $scope.hotelState.goStateBack();

            }

            function initAvatar(){
                
                $rootScope.hideAside();
                
                $scope.bounds = {};
                $scope.cropper = {};
                $scope.cropper.sourceImage = null;
                $scope.cropper.croppedImage   = null;
                $scope.bounds = {};
                $scope.bounds.left = 0;
                $scope.bounds.right = 0;
                $scope.bounds.top = 0;
                $scope.bounds.bottom = 0;
            }
           

            
            initAvatar();
 

            
        //};

// Kick everything off with the target image
        //resizeableImage($('.resize-image'));
            
            
            
    }
])
    //.directive('progressBar', [
    //    function () {
    //        return {
    //            link: function ($scope, el, attrs) {
    //                $scope.$watch(attrs.progressBar, function (newValue) {
    //                    el.css('width', 
    //                        newValue.toString() + '%');
    //                });
    //            }
    //        };
    //    }
    //])
;


'use strict';
app
//angular.module('hotelApp.language', ['ngRoute'])

    .controller('LanguageController', ['$scope', '$rootScope', 'HotelService', 'HotelState',
        function($scope, $rootScope, HotelService, HotelState) {


            $scope.localState = {

                selectedLanguageKey : "" ,

                availableSystemLanguages : HotelService.getSystemLanguagesArray(),

                selectSystemLanguage : HotelState.getPrefferedLanguage()
            }
            
            $rootScope.showLoading(false);

            function initSystemLanguages()
            {
                for (var i = 0; i < $scope.localState.availableSystemLanguages.length; i++) {

                    if ($scope.localState.availableSystemLanguages[i].langKey == HotelState.getPrefferedLanguage()) {
                        $scope.localState.availableSystemLanguages[i].ticked = true;
                    }
                }
            };

            $scope.$watch('localState.selectSystemLanguage', function(){

                if($scope.localState.selectSystemLanguage && $scope.localState.selectSystemLanguage.length>0)
                {
                    var langValue = $scope.localState.selectSystemLanguage[0].name;
                    var langKey = HotelService.convertLangLabelToAvailableKey(langValue);
                    
                    if(langKey)
                    {
                        $scope.setNewLanguage(langKey);
                    }
                }

            }, true);
            
            //$scope.submitLanguageChange = function() {
            //    
            //    //$scope.hotelService.checkNextRouteState();
            //    
            //    $rootScope.showLoading(true);
            //
            //    //$scope.hotelState.setPrefferedLanguage($scope.localState.selectedLanguageKey);
            //   
            //    $scope.setNewLanguage($scope.localState.selectedLanguageKey);
            //    
            //    $scope.hotelState.submitProfileData(true).then(function(responseProfile){
            //        $scope.hotelState.goStateBack();
            //    });
            //    
            //    //$location.path("app/hotel");
            //};

            $scope.hotelState.getDeferredState().then(function() {
                //$scope.localState.authOk = true;
                $scope.hotelState.updateState();
            });


            initSystemLanguages();

        }])
; 
'use strict';
//app
angular.module('hotelApp.login', ['ngRoute','ngCookies', 'hotelApp.customerDto', 'hotelApp.hotelState', 'hotelApp.hotelService', 'hotelApp.hotelLoginService', 'hotelApp.templates' /*, 'hotelApp.initTranslations'/*, 'hotelApp.initTranslate'*/])

.controller('LoginController', 
['$scope','$rootScope','$state','$stateParams', '$filter','$location', '$cookies', 'CustomerDto', 'HotelState', 'HotelService', 'HotelLogin',
function($scope, $rootScope, $state, $stateParams, $filter, $location, $cookies, CustomerDto, HotelState, HotelService, HotelLogin) {

	$scope.loginTabState = {
		guest: true,
		login: false,
		signup: false,
		ready: 0
	};

	$scope.loginTabState.guest = true;
	
	$scope.localState = {

		currentUser: undefined,

		availableSystemLanguages : HotelService.getSystemLanguagesArray(),
		
		selectSystemLanguage : HotelState.getPrefferedLanguage(),
		
		guestUser: {
			firstName: undefined,
			sex: undefined, //"m",
			email: undefined,
			guestAccount: true
		},

		checkUser: {
			email: null,
			password: null
		},

		guestLogin: {
			firstName: undefined,
			lastName: undefined,
			email: undefined

		}
	};

	if($state.current.name=='access.hotelLogin')
	{
		$scope.loginTabState.guest = false;
		$scope.loginTabState.login = true;
	}

	$scope.setLoginTabState = function (newState) {
		$scope.loginTabState.guest = false;
		$scope.loginTabState.login = false;
		$scope.loginTabState.signup = false;

		$rootScope.rootErrorMsg = false;

		switch (newState) {

			case "login":
				$scope.loginTabState.login = true;
				break;

			case "signup":
				$scope.loginTabState.signup = true;
				break;

			case "guest":
			default:
				$scope.loginTabState.guest = true;
				break;
		}
	}

	$scope.guestRegister = function () {

		$scope.loginService.guestRegister($scope.localState.guestUser);
		
		//var guest = new CustomerDto();
		//$rootScope.rootErrorMsg = false;
		//guest.firstName = $scope.localState.guestUser.firstName;
		//guest.sex = $scope.localState.guestUser.sex;
        //
		//guest.prefferedLanguage = $scope.app.rootSettings.prefferedLanguage;
        //
		//if (guest.sex == undefined) {
		//	if ($scope.loginTabState.guest) {
		//		$rootScope.rootErrorMsg = $filter('translate')('alert.error.noGender');
		//	}
		//	return;
		//}
        //
		//if (guest.firstName == undefined || guest.firstName == "") {
		//	//guest.firstName = "anonymous";
		//	if ($scope.loginTabState.guest) {
		//		$rootScope.rootErrorMsg = $filter('translate')('alert.error.noName');
		//	}
		//	return;
		//}
        //
		//if (guest.lastName == undefined) {
		//	guest.lastName = "";
		//}
        //
		////guest.lastName = $scope.localState.guestUser.lastName;
        //
		////guest.email = $scope.localState.guestUser.email;
        //
		//guest.guestAccount = true;
        //
		//$rootScope.showLoading(true);
        //
		//guest.$save(function (response) {
		//	
		//	$rootScope.showLoading(false);
        //
		//	if (response.id && response.id > 0) {
		//		$scope.localState.currentUser = response;
        //
		//		if ($scope.localState.currentUser.id) {
		//			//$cookies.hotelicoUserId = $scope.localState.currentUser.id;
		//			HotelService.setCookie('hotelicoUserId', $scope.localState.currentUser.id);
        //
		//			$cookies.hotelicoUserEmail = response.eMail;
        //
		//			$cookies.hotelicoLogout = false;
        //
		//			if($scope.hotelState)
		//			{
		//				$scope.hotelState.setProfileData(response);
		//			}
		//			else{
		//				HotelState.initState(response);
		//			}
        //
		//			$location.path('/app/checkin');
		//			//$location.path('/app/community');
		//		}
        //
		//	}
		//	else if (response.errorResponse) {
		//		$rootScope.rootErrorMsg = response.errorResponse;
		//		$rootScope.showLoading(false);
		//		$rootScope.topPage();
		//	}
		//}, function (error) {
		//	$rootScope.rootErrorMsg = error;
		//	$rootScope.showLoading(false);
        //
		//});

	};
    
	$scope.loginPassword = function (submit) {

		$rootScope.showLoading(true);

		//if(!$scope.localState.checkUser.email)
		{
			$scope.localState.checkUser.email= $("#hotelicoLoginMail").val();
		}
	
		//if(!$scope.localState.checkUser.password)
		{
			$scope.localState.checkUser.password= $("#hotelicoLoginPassword").val();
		}

		//function ajaxCallback() {
		//	$rootScope.showLoading(true);
		//	submit();
		//	$rootScope.showLoading(true);
		//}

		if(!$scope.localState.checkUser.email || !$scope.localState.checkUser.password)
		{
			return;
		}

		$rootScope.showLoading(true);
		
		$scope.loginService.loginPassword($scope.localState.checkUser);

		//var loggedUser = LoginCustomer.get({email: $scope.localState.checkUser.email}, {password: $scope.localState.checkUser.password}, function () {
		//	if (loggedUser && loggedUser.id && loggedUser.id > 0) {
		//		//$cookies.hotelicoUserId = loggedUser.id;
		//		//$cookies.hotelicoUserEmail = loggedUser.email;
		//		//$cookies.hotelicoLogout = false;
		//	}
		//	else if (loggedUser.errorResponse) {
		//		$rootScope.rootErrorMsg = loggedUser.errorResponse;
		//		$rootScope.showLoading(false);
		//		return;
		//	}
		//	else {
		//		$rootScope.rootErrorMsg =  $filter('translate')('alert.error.wrongMailPassword');
		//		$rootScope.showLoading(false);
		//		return;
		//	}
		//	//$rootScope.showLoading(false);
        //
		//	HotelState.initState(loggedUser);
		//}, function (error) {
		//	$rootScope.rootErrorMsg = error;
		//	$rootScope.showLoading(false);
        //
		//});
	};
    
    // ######################### START LANGUAGE ###########################################

	function initSystemLanguages()
	{
		for (var i = 0; i < $scope.localState.availableSystemLanguages.length; i++) {
			
			if ($scope.localState.availableSystemLanguages[i].langKey == HotelState.getPrefferedLanguage()) {
				$scope.localState.availableSystemLanguages[i].ticked = true;
			}
		}
	};
	
	$scope.$watch('localState.selectSystemLanguage', function(){
		
		if($scope.localState.selectSystemLanguage && $scope.localState.selectSystemLanguage.length>0)
		{
			var langValue = $scope.localState.selectSystemLanguage[0].name;
			var langKey = HotelService.convertLangLabelToAvailableKey(langValue);
			if(langKey)
            {
                $scope.setNewLanguage(langKey);
            }
		}
		
	}, true);

    //############################ END LANUAGE ##########################################

	function checkLoginTab()
	{
		//PRE-SELCT LOGIN TAB
		if($("#hotelicoLoginMail").val() && $("#hotelicoLoginPassword").val())
		{
			$scope.setLoginTabState("login");
		}
	}
	
	function initLogin(stateObj) {
        
		//if(($location.host()+"").indexOf("www")>=0)
		//{
		//	window.location = $rootScope.HOST;// + "#/access/login";
		//}
		
		if(!$scope.loginService)
		{
			$scope.loginService = HotelLogin;
		}
		
        if(!$scope.hotelState)
        {
            $scope.hotelState = stateObj;
        }
		
		var stopLogin = $stateParams.stopLogin || !$scope.hotelState || $state.current.name=="access.hotelLogin";

		//$rootScope.closeStartWerbung();
		$rootScope.showLoading(false);

		if (stopLogin) {
			HotelService.delCookie("hotelicoUserId");
		}
		else {

			if ($scope.hotelState && $scope.hotelState.profileData && $scope.hotelState.profileData.id > 0) {
				 
				if ($scope.hotelState.profileData.errorResponse) {
					$rootScope.rootErrorMsg = $scope.hotelState.profileData.errorResponse;
					$rootScope.topPage();
				}
				else{
					
					var newState = $scope.hotelState.profileData.checkedIn? "app.hotel" : "app.checkin";
					
					$state.go(newState);
				}
			}
			else {
				$scope.loginTabState.ready = 1;
			}
		}
        
		setTimeout(checkLoginTab, 500);
		
		//$rootScope.unlockModal();
		
	};

	HotelState.getDeferredState().then(function(stateObj) {
        $scope.hotelState = stateObj;
		initLogin(stateObj);
	}, function(error){
		initLogin();
		
	});
	
	//if($stateParams.stopLogin)
	{
		initLogin();
	}

	initSystemLanguages();

}])
; 
'use strict';

angular.module('hotelApp.notification', ['ngRoute'])

    .controller('NotificationController', ['$scope', '$rootScope', '$timeout', 
        function($scope, $rootScope, $timeout) {
            
            //$rootScope.$watch($rootScope.currentNotification.unreadChatsCounter, function(value) {
            //    $scope.unreadChatsCounter = value;
            //});
            
    }])
; 
'use strict';
app
//angular.module('hotelApp.passwordReset', ['ngRoute','ngCookies', 'hotelApp.customerDto','hotelApp.loginCustomerService','hotelApp.hotelDto', 'hotelApp.sessionCustomerService'])

.controller('PasswordController', 
['$scope','$rootScope','$http','$q','$location', '$cookies', 'CustomerDto', 'HotelDto', 'SessionCustomer', '$stateParams',
function($scope, $rootScope, $http, Q, $location, $cookies, CustomerDto, HotelDto, SessionCustomer, $stateParams) {

	$scope.ready = 0;

	
	if($stateParams.resetCode)
	{
		$scope.resetCode = $stateParams.resetCode;
	}
	
	else {
		
		var sessionCustomer = SessionCustomer.get(function () {
			if (sessionCustomer && sessionCustomer.id && sessionCustomer.id > 0) {
				$scope.ready = 1;
			}

			$scope.hotelState.setProfileData(sessionCustomer);

		});
	}

	$rootScope.showLoading(false);


	$scope.loginPassword = function() {

		$scope.loginService.getLogin($scope.checkUser.email, $scope.checkUser.password).then(function(loggedUser){
			if(loggedUser && loggedUser.id && loggedUser.id>0)
			{
				//$cookies.hotelicoUserId = loggedUser.id;
				//$cookies.hotelicoUserEmail = loggedUser.eMail;
				//$cookies.hotelicoLogout = false;
			}
			else{
				$scope.authError = $filter('translate')('alert.error.wrongMailPassword');
			}

			$scope.hotelState.setProfileData(loggedUser);

		});		
	};
	
	$scope.model = {
		users : CustomerDto.query(),
		newUser: {
			firstName: null,
			lastName: null,
			mail: null,
			password: null
		}
		 
	};

	$scope.checkUser = {
		eMail : null,
		password : null
	}

	$scope.authError = null;

	
	
	$scope.initiator = false;

	$scope.socket = {
		client: null,
		stomp: null
	};

	//$scope.add = function() {
	//	$scope.initiator = true;
	//	var user = new CustomerDto();
	//	user.firstName = $scope.model.newUser.firstName;
	//	user.lastName = $scope.model.newUser.lastName;
	//	user.authLinkedIn = false;
    //
	//	user.votes = 0;
	//	user.$save(function(response) {
	//		$scope.model.users.push(response);
	//		$scope.model.currentUser = response;
	//	});
	//	$scope.model.newUser.firstName = '';
	//	$scope.model.newUser.secondName = '';
	//};

	//$scope.testAdd = function() {
	//	var usr = new Hoteluser();
	//	//usr.firstName = 'f';
	//	usr.$save(function(response) {
	//		$scope.model.usr = response;
	//	});
	//	
	//	 
	//	var ht = new Hotel();
	//	//ht.title = 'f';
	//	//ht.description = 'f';
	//	ht.$save(function(response) {
	//		$scope.model.ht = response;
	//	});
    //
	//	var s = new User();
	//	//s.title = 'f';
	//	//ht.description = 'f';
	//	s.$save(function(response) {
	//		$scope.model.ht = response;
	//	});
	//	
	//};

	//$scope.remove = function(/** User */ user, /** Integer */ index) {
	//	$scope.initiator = true;
	//	$scope.model.users.splice(index, 1);
	//	user.$remove();
	//};
    //
	//$scope.addVotes = function(/** User */ user, /** Integer */ votes) {
	//	$scope.initiator = true;
	//	user.votes += votes;
	//	user.$update();
	//};
	
	////TODO eugen! Always at start!!!!

	//$scope.notify = function(/** Message */ message) {
	//	if (!$scope.initiator) {
	//		User.query(function(users) {
	//			$scope.model.users = users;
	//		});
	//	}
	//	$scope.initiator = false;
	//};
    //
	//$scope.reconnect = function() {
	//	setTimeout($scope.initSockets, 10000);
	//};
    //
	////TODO eugen! Always at start!!!!
	//$scope.initSockets = function() {
	//	$scope.socket.client = new SockJS('/hotelico/notify');
	//	$scope.socket.stomp = Stomp.over($scope.socket.client);
	//	$scope.socket.stomp.connect({}, function() {
	//		$scope.socket.stomp.subscribe("/topic/notify", $scope.notify);
	//	});
	//	$scope.socket.client.onclose = $scope.reconnect;
	//};

	//$scope.initSockets();

	
	
    //
    ///**
	 //* React to LinkedIn SSO by performing app login using the authentication 
	 //* cookie set by LinkedIn
	 //*/
    //$scope.onLinkedInAuth = function() { 
		//loginClient.promiseDoLoginLinkedIn($scope); 
    //};
    //
    //
    //$scope.user = {};
    //$scope.authError = null;
    //
    //$scope.ready = 0;
    //$scope.user.eMail = '';
    //$scope.user.password = '';
    //
    //$scope.errorMessage = undefined;
    ////
    ////$scope.login = function() {
    ////    $scope.authError = null;
    ////    // Try to login
    ////    $http.post('api/login', {email: $scope.user.email, password: $scope.user.password})
    ////        .then(function(response) {
    ////            if ( !response.data.user ) {
    ////                $scope.authError = 'Email or Password not right';
    ////            }else{
    ////                $state.go('app.dashboard-v1');
    ////            }
    ////        }, function(x) {
    ////            $scope.authError = 'Server Error';
    ////        });
    ////};
    //
    //stateClient.promiseState($scope)
    //.then(function(resData) {
		//if (resData.state === 'login' && resData.linkedIn.memberId) {
		//	// If LinkedIn login is possible, this will be triggered by the LinkedIn onAuth script
		//	// No action necessary here
		//}
		//if (resData.state === 'login' && resData.userId) {
		//	// TODO: possibly pre-fill the "eMail" field
		//}
		//if (resData.state === 'checkIn') {
		//	// TODO: possibly pass additional checkIn parameters passed to login
		//	$location.path('/checkIn');
		//}
    //
		//	var data = {};
    //
		//	$http.get('/auth/linkedin', data);
    //});
    //
    //loginClient.promiseDoLogout($scope);
}]);
'use strict';
app
//angular.module('hotelApp.profile', ['ngRoute', 'hotelApp.customerDto'])
	
	.controller('ProfileController', ['$scope', '$rootScope', '$routeParams', '$location', '$resource','CustomerDto','$translate', '$stateParams', 'editableOptions', 'editableThemes', '$state', '$filter',
		function($scope, $rootScope, $routeParams, $location, $resource, CustomerDto, $translate, $stateParams, editableOptions, editableThemes, $state, $filter) {

			editableThemes.bs3.inputClass = 'input-sm';
			editableThemes.bs3.buttonsClass = 'btn-sm';
			editableOptions.theme = 'bs3';
			
			$scope.localState = {
				
				profileBirthday : null,
				userData: undefined,

                updateProfileData : undefined,

            // var sessionCustomer = SessionCustomer.get(function(){
				 languages : $scope.hotelService.getLanguageArray(),

				 birthday : {
					day: undefined,
					month: undefined,
					year: undefined
				 },
                
                generatedProfileBirthdayString : null

			}
			
		
			$scope.getProfileBirthdayString = function()
			{
				if(!$scope.localState.profileBirthday)
				{
                    $scope.localState.generatedProfileBirthdayString = null;
				}
				else 
                {
                    var monthNames = [
                        "January", "February", "March",
                        "April", "May", "June", "July",
                        "August", "September", "October",
                        "November", "December"
                    ];

                    var day = $scope.localState.profileBirthday.getDate();
                    var monthIndex = $scope.localState.profileBirthday.getMonth();
                    var year = $scope.localState.profileBirthday.getFullYear();

                    $scope.localState.generatedProfileBirthdayString = day+"."+(monthIndex+1)+"."+year;
                }
                
                return $scope.localState.generatedProfileBirthdayString;
            }

            $scope.$watch('localState.profileBirthday', function() {

                $scope.getProfileBirthdayString();

            });
            
			$scope.getDateFormat = function (tdate)
			{
				if(!tdate)
				return tdate;

				//var year = tdate.slice(-4),
				//	month = ['Jan','Feb','Mar','Apr','May','Jun',
				//			'Jul','Aug','Sep','Oct','Nov','Dec'].indexOf(tdate.substr(4,3))+1,
				//	day = tdate.substr(8,2);
				
				var nDate = new Date();
				
				nDate.setTime(tdate);

				$scope.localState.birthday.day  = nDate.getDate();
				$scope.localState.birthday.month  = nDate.getMonth() +1;
				$scope.localState.birthday.year  = nDate.getFullYear();
				
				$scope.localState.profileBirthday  = nDate;

                $scope.getProfileBirthdayString();
				//return nDate.getDate()+"." + (nDate.getMonth()+1) + "." + nDate.getFullYear();
				//return tdate;
			}

			 
			$scope.submitProfile = function() {

				$scope.mainState.errorMsg = false;
				
				$scope.mainState.successMsg = false;
				
				var error =$scope.hotelService.validateCustomerInfo($scope.localState.updateProfileData);
				
				if(error.length>0)
				{
					$scope.mainState.errorMsg = error;
					$scope.topPage();
					return;
				}
				
				if($scope.localState.profileBirthday  != null)
				{
					$scope.localState.updateProfileData.birthdayTime = $scope.localState.profileBirthday.getTime();
				}
				else{
					$scope.localState.updateProfileData.birthdayTime = undefined;
				}

                //EUGEN!!! confirmPassword not aeaited from serializer!
				$scope.localState.updateProfileData.confirmPassword = undefined;

                $rootScope.showLoading(true);
                
                $scope.hotelState.submitProfileData(true, $scope.localState.updateProfileData).then(function(updatedCustomer)
                {
                    $rootScope.showLoading(false);

                    $rootScope.topPage();
                    $scope.mainState.successMsg = $filter('translate')('alert.success.dataSaved');
                    reInitProfileData(updatedCustomer);
                }, function(error){
                    $scope.mainState.errorMsg = error;
                    $rootScope.showLoading(false);
                })

			}
			
	
            function reInitProfileData(initProfile)
            {
                if(!initProfile)
                {
                    initProfile = $scope.hotelState.profileData;
                }
                
                $scope.localState.updateProfileData = angular.copy(initProfile);
                $scope.localState.updateProfileData.age = undefined;

                $scope.localState.updateProfileData.confirmPassword = undefined;
                $scope.hotelState.profileData.confirmPassword = undefined;

                $scope.localState.goodEmail = (initProfile.email+"").indexOf("@")>0;
            }
            
			$scope.initProfile = function(sessionCustomer)
			{

                reInitProfileData(sessionCustomer);
				
				setTimeout($scope.hideAside, 500);
				setTimeout($scope.hideAside, 1000);

				if(sessionCustomer && sessionCustomer.id && sessionCustomer.id>0)
				{
					$scope.hotelState.setProfileData(sessionCustomer);

					$scope.localState.hotelId =  sessionCustomer.hotelId;
					$scope.localState.ownProfile = $scope.localState.userData && $scope.localState.userData.id!=sessionCustomer.id? false : true;

					if(sessionCustomer.hotelId && sessionCustomer.hotelId>0) {
						$scope.localState.hotel = $scope.hotelState.getCurrentHotel(sessionCustomer.hotelId);
					}

					$scope.localState.goodEmail = (sessionCustomer.email+"").indexOf("@")>0;
                    
					$scope.getDateFormat(sessionCustomer.birthdayTime);

					if($scope.hotelState.profileData.languages!=undefined)
					{
						for (var l = 0; l < $scope.hotelState.profileData.languages.length; l++) {

							for (var i = 0; i < $scope.localState.languages.length; i++) {
								if ($scope.localState.languages[i].name === $scope.hotelState.profileData.languages[l]) {
									$scope.localState.languages[i].ticked = true;
								}
							}
						}
					}

					$rootScope.showLoading(false);

				}
                
			};


			$scope.hotelState.getDeferredState().then(function() {

				if($stateParams.userId)
				{
					var user = CustomerDto.get({id:$stateParams.userId, requesterId: $scope.hotelState.profileData.id}, function() {
						$scope.localState.userData = user;
					});
				}
				//else
				{
					$scope.initProfile($scope.hotelState.profileData);
				}
			});

		}])
;
'use strict';
app
//angular.module('hotelApp.register', ['ngRoute', 'ngCookies'])

//.config(['$routeProvider', function($routeProvider) {
//  $routeProvider.when('/register', {
//    templateUrl: 'register/register.html',
//    controller: 'RegisterController'
//  });
//}])

.controller('RegisterController', 
		['$scope', '$rootScope', '$http', '$q', '$location', '$cookies','$routeParams', '$translate', '$state', '$filter','editableOptions', 'editableThemes',
		 function($scope, $rootScope, $http, Q, $location, $cookies, $routeParams, $translate, $state, $filter, editableOptions, editableThemes) {
			
			 
        editableThemes.bs3.inputClass = 'input-sm';
        editableThemes.bs3.buttonsClass = 'btn-sm';
        editableOptions.theme = 'bs3';
          
		$scope.localState = {
            
			  agree : false,

			  registerBirthday : null,

			 languages : $scope.hotelService.getLanguageArray(),

			// Initalize the profile with defaults
			profile : $scope.hotelService.getInitCustomer()
		 };

         $scope.getRegisterBirthdayString = function()
         {
             if(!$scope.localState.registerBirthday)
             {
                 return null;
             }

             var monthNames = [
                 "January", "February", "March",
                 "April", "May", "June", "July",
                 "August", "September", "October",
                 "November", "December"
             ];

             var day = $scope.localState.registerBirthday.getDate();
             var monthIndex = $scope.localState.registerBirthday.getMonth();
             var year = $scope.localState.registerBirthday.getFullYear();
             return day+"."+(monthIndex+1)+"."+year;
         };

			 

         $scope.submitRegister = function() {
    
             var error = $scope.hotelService.validateCustomerInfo($scope.localState.profile);
             
             if(error && error.length>0)
             {
                 $scope.mainState.errorMsg = error;
                 $rootScope.topPage();
                 return;
             }
    
             if(!$scope.localState.agree)
             {
                 $scope.mainState.errorMsg = $filter('translate')('alert.error.agreeTermsConditions');
                 $rootScope.topPage();
                 return;
             }
             
            $scope.mainState.errorMsg = false;
    
            $scope.localState.profile.prefferedLanguage = $scope.hotelService.getDefaultAllowedLanguageViewKey();

             if($scope.localState.registerBirthday  != null)
             {
                 $scope.localState.profile.birthdayTime = $scope.localState.registerBirthday.getTime();
             }
             else{
                 $scope.localState.profile.birthdayTime = undefined;
             }
             
            $scope.hotelState.registerCustomer($scope.localState.profile).then(function(createdCustomer)
            {
                    
                if(createdCustomer.id && createdCustomer.id>0)
                {
                    $scope.localState.profile = createdCustomer;
                    
                    $scope.localState.currentUser = createdCustomer;
    
                    if (createdCustomer.id) {
                        
                        $scope.hotelService.setCookie('hotelicoUserId', createdCustomer.id);
    
    
                        $cookies.hotelicoUserEmail = createdCustomer.eMail;
    
                        $cookies.hotelicoLogout = false;
    
                        $scope.hotelState.initState(createdCustomer);
    
                        $state.go('app.checkin');
                    }
                }
                else if(response && response.errorResponse)
                {
                    $scope.mainState.errorMsg = response.errorResponse;
                }
            }, 
            function(error)
            {
                $scope.mainState.errorMsg = error;
                $rootScope.topPage();
                
            });
            
        };


     function init()
     {
         $scope.localState.profile.confirmPassword =  undefined;
         $scope.localState.profile.authPassword =  false;
    
    
         var defaultLanguageKey = $scope.hotelService.getDefaultLanguageViewKey();
    
         for (var i = 0; i < $scope.localState.languages.length; i++) {
             if ($scope.localState.languages[i].name === defaultLanguageKey) {
                 $scope.localState.languages[i].ticked = true;
             }
         }
    
     };
    
    
     init();
 
 }]); 
'use strict';
app
//angular.module('hotelApp.wall', ['ngCookies', 'ngResource', 'hotelApp.wallService',  'hotelApp.customerDto', 'hotelApp.sessionCustomerService'])

.controller('WallContr', 
	['$scope', '$rootScope', '$cookies', '$location', '$resource', 'WallService', 'SessionCustomer','$mdDialog', '$filter',
	function($scope, $rootScope, $cookies, $location, $resource, WallService, SessionCustomer, $mdDialog, $filter) {

		$scope.localState = {
			 ready : 0,
			//TODO eugen: load old messages from DB
			 wallMessages : [],
			 waitingWallMessages : [],
			newWallMessage: "",
			max: 1000,
			notSendMessageArray: [],

			notSendCounter : 0
		}

		var customersByWallService = $resource('./wall/customers/:requesterId/hotel/:hotelId', {requesterId: '@requesterId', hotelId: '@hotelId'}, {'getWallCustomers': {method: 'GET', isArray: true}});

		var WallMessageService = $resource('./wall/messages/hotel/:hotelId', { hotelId:'@hotelId' }, {'getMessages': {method: 'GET', isArray: true}});
		
		var WallRestMessageService = $resource('./wall/messages/:messageId', { messageId:'@messageId' }, {'getMessages': {method: 'GET', isArray: true}, update: {
			method: "PUT",
			headers: {
				'Content-Type': 'application/json;charset=UTF-8',
				'Accept': 'application/json, text/plain, */*'
			}
		}});

		var inputElt;
		
		 $scope.addMessage = function() {
			 
			 if($scope.localState.hotelId)
			 {
				 var msgObj = null;

				 if($scope.localState.newWallMessage.length==0)
				 {
					 return;
				 }

				 msgObj = WallService.sendWall($scope.localState.newWallMessage, $scope.localState.senderId, $scope.localState.hotelId, $scope.hotelState.profileData.hotelStaff, null);
				 
				 $scope.localState.waitingWallMessages.push(msgObj);


			 }
			 $scope.localState.newWallMessage = "";

			 if(inputElt==null)
			 {
				 inputElt = document.getElementById("wallInput");
			 }

			 if(inputElt!=null)
			 {
				 inputElt.focus();
			 }
			 
			 // WEG TODO Eugen
			 setTimeout(checkOutgoingMsg, 10000);

		 };
		
		function scrollDown()
		{
			$scope.scrollDownById('chatContainer');
		}
		
		$scope.removeWallWaitingMessage = function(message)
		{
			
			for(var w=0; w< $scope.localState.waitingWallMessages.length; w++)
			{
				if($scope.localState.waitingWallMessages[w].messageId == message.messageId)
				{
					$scope.localState.waitingWallMessages.splice(w,1);
					$scope.localState.notSendCounter = 0;
					$scope.localState.showResend = false;
					WallService.removeWallMsg(message.messageId);
					break;
				}
			}
		};
		
		$scope.addUpdateWallMessage = function(message)
		{
			var wallMessageUpdated = false;
			
			for(var w=$scope.localState.wallMessages.length-1; w>=0 ; w--)
			{
				if($scope.localState.wallMessages[w].messageId == message.messageId)
				{
					$scope.localState.wallMessages[w] = message;
					wallMessageUpdated = true;
					break;
				}
			}

			if(!wallMessageUpdated)
			{
				$scope.localState.wallMessages.push(message);
			}

		};
		
		var checkOutgoingMsg = function()
		{
			$scope.localState.notSendMessageArray = [].concat(WallService.getNotSendWall());

			if($scope.localState.notSendMessageArray.length>0)
			{
				$scope.localState.notSendCounter++;

				if($scope.localState.notSendCounter>3)
				{
					//$scope.openModal();
					$scope.localState.showResend = true;
					$scope.localState.notSendCounter = 0;
				}
				else {
					$scope.localState.showResend = false;
					for(var m=0; m<$scope.localState.notSendMessageArray.length; m++)
					{
						var nextMsg = $scope.localState.notSendMessageArray[m];

						var nextMsgJson = null;

						try
						{
							var nextMsgJson = JSON.parse(nextMsg);
						}
						catch(e)
						{
							nextMsgJson = nextMsg;
						}

						if(nextMsgJson.message)
						{
							nextMsgJson.message = $scope.hotelService.myDecode(nextMsgJson.message);
						}

						$scope.localState.notSendMessageArray[m] = nextMsgJson;
						//alert("try to resend " + nextMsg.message);
						$scope.resendWallRessource(nextMsgJson);
					}
				}
				//check later result
				//setTimeout(checkOutgoingMsg, 3000);
			}
			else {
				$scope.localState.notSendCounter = 0;
			}
		};

		$scope.resendWallRessource = function(msgJson){

			//if(nextMsg)
			{
				var wallObj = new WallRestMessageService();
				wallObj.message = msgJson.message;
				wallObj.senderId = msgJson.senderId;
				wallObj.hotelId = msgJson.hotelId;

				wallObj.hotelStaff = msgJson.hotelStaff;
				wallObj.messageId = msgJson.messageId;
				
				wallObj = $scope.hotelService.encodeWall(wallObj);
				
				wallObj.$save(function(response){
					if(response && response.messageId>0)
					{
						var decodedWall = $scope.hotelService.decodeWall(response);
						
						$scope.addUpdateWallMessage(decodedWall);

						$scope.removeWallWaitingMessage(decodedWall);
					}
				});

				setTimeout(checkOutgoingMsg, 5000);

				return msgJson;
			}
			
		}
		
		WallService.receiveWall().then(null, null, function(message) {
			 
			 if( message.hotelId==$scope.localState.hotelId )
			 {
				 var decodedWall = $scope.hotelService.decodeWall(message);
				 
				 $scope.addUpdateWallMessage(decodedWall);

				 $scope.removeWallWaitingMessage(decodedWall);

			 }
		 });

		$rootScope.$on('checkWallSocketConnection', function(event, mass) {
			WallService.checkSocketConnection();
		});
		
		function initWall()
		{
            $rootScope.hideAside();
            
			$scope.hotelNotification.notificationObj.hotelUnreadWallNumber = false;
			//var sessionCustomer = SessionCustomer.get(function () {

				//$scope.hotelState.setProfileData(sessionCustomer);

				if($scope.hotelState.profileData && $scope.hotelState.profileData.id>0)
				{
					$scope.localState.senderId = $scope.hotelState.profileData.id;

					if($scope.hotelState.profileData.hotelId && $scope.hotelState.profileData.hotelId>0)
					{
						$scope.localState.hotelId =  $scope.hotelState.profileData.hotelId;
						//$scope.hotelState.getCurrentHotel($scope.localState.hotelId);
						//$scope.hotelState.getHotelCustomers($scope.localState.hotelId);
						$scope.localState.ready = 1;
						
						WallService.resubscribeWithHotelData($scope.hotelState);
						
						//Get all wall messages
						WallMessageService.getMessages({hotelId: $scope.localState.hotelId}, function(messageArray)
						{
							for(var m=0; m<messageArray.length; m++)
							{
								var nextOldMessage = $scope.hotelService.decodeWall(messageArray[m]);
								$scope.localState.wallMessages.push(nextOldMessage);
							}
						});

						//Get Info about current wall customers
						customersByWallService.getWallCustomers({requesterId:$scope.hotelState.profileData.id, hotelId: $scope.localState.hotelId}, function(wallCustomersList){
							if(wallCustomersList && wallCustomersList.length>0)
							{
								for(var w=0; w<wallCustomersList.length; w++)
								{
									var nextWallCustomer = wallCustomersList[w];
									$scope.hotelState.allCustomersById[nextWallCustomer.id] = nextWallCustomer;
								}
							}
						}, function(error){
							var err;
						});
						
						$rootScope.showLoading(false);

					}

				}

				$scope.showPopup();
				//imitate wallMessages change
				setTimeout(scrollDown, 2000);
				setTimeout($rootScope.hideLoading, 5000);

			//});
		};

		$scope.showPopup = function(ev) {

			if($scope.mainState.hidePopup)
			{
				return;
			}

			if($scope.hotelState.profileData.hideWallPopup || $scope.hotelService.getCookie('hotelicohideWallPopup')=="true")
			{
				return;
			}
			
			var confirm = $mdDialog.confirm( {
				clickOutsideToClose: true
			})
				.title($filter('translate')('page.wall.popupHeader'))
				.content($filter('translate')('page.wall.popupText'))
				.ariaLabel('Lucky day')
				.ok('OK')
				.cancel($filter('translate')('alert.noPopupMore'))
				.targetEvent(ev);

			$mdDialog.show(confirm).then(function() {
				;

            }, function() {
				$scope.hotelState.profileData.hideWallPopup = true;
				$scope.hotelService.setCookie('hotelicohideWallPopup', true);

				$scope.hotelState.submitProfileData(true);
			});
		};
		
		
		$scope.hotelState.getDeferredState().then(function(){
            //$scope.showPopup();
            initWall();
		});
		
		 
 }]);

'use strict';
//app
angular.module('hotelApp.werbung', ['ngRoute','ngCookies', 'ngResource', 'hotelApp.sessionCustomerService', 'hotelApp.hotelState', 'hotelApp.templates'])

    .controller('WerbungController',
    ['$scope', '$rootScope', '$location', '$resource', '$state', 'SessionCustomer', 'HotelDto', 'HotelState',
    function($scope, $rootScope, $location, $resource, $state, SessionCustomer, HotelDto, HotelState) {

        $scope.ready = 0;

        $rootScope.closeStartWerbung();

        $rootScope.showLoading(false);

        $scope.relocate = function(hotelObject)
        {
            if(($location.url()+"").indexOf("werbung")>=0)
                $state.go("access.login");

        }
        
        //var sessionCustomer = SessionCustomer.get(function (responseObject) {
        //    
        //    HotelState.setProfileData(responseObject);
        //
        //    //$scope.relocate(responseObject);
        //    setTimeout( $scope.relocate, 8000);
        //
        //});

        HotelState.getDeferredState().then(function(hotelState){
            
            
            var customer = hotelState.profileData;

            if(customer && customer.id>0)
            {
                $state.go("app.hotel");
            }
            else{
                $state.go("access.login", {stopLogin: true});
            }
        });

}]);
'use strict';
//app
angular.module('hotelApp.activityCtrl', ['ngRoute','ngCookies', 'ngResource', 'hotelApp.sessionCustomerService', /*'hotelApp.fileUploader',*/ 'hotelApp.activityDto'])

    //Eugen: the container controller has to have $scope.addUpdateActivity, $scope.localState.editActivityMap []

    .controller('activityCtrl', ['$scope', '$rootScope', '$stateParams', 'HotelDto', '$state', '$resource', '$filter', 'NotificationService', 'HotelActivityDto', '$mdDialog', '$FB',
        function($scope, $rootScope, $stateParams, HotelDto, $state, $resource, $filter, NotificationService, HotelActivityDto, $mdDialog, $FB) {


            $FB.init('383626641847356');
            
            var activityActionService = $resource('./activity/action/:action/customer/:customerId/activityId/:activityId', {action: '@action', customerId:'@customerId', activityId:'@activityId' }, {'addAction': {method: 'GET'
                ,headers: {
                    'Content-Type': 'application/json;charset=UTF-8'
                    ,'Accept': 'application/json, text/plain, */*'
                }
            }});
            
            //var ActivityRemoveService = $resource('./activity/customer/:customerId/activity/:initId', {customerId:'@customerId', initId:'@initId' }, {'remove': {method: 'DELETE'}});

            $scope.submitActivityAction = function(submitActivity, action){

                var customerId = $scope.hotelState.profileData.logged?  $scope.hotelState.profileData.id : -1;
                
                if(customerId<=0)
                {
                    //TODO Eugen: This state can be reached only with valid login! Otherwise open a login popup!!!
                    //save requested state in loginService
                    $scope.loginService.setLoginRequestedState($state.current.name, $stateParams);
                    $scope.openModal("login");
                    return;
                }
                
                //$rootScope.showLoading(true);
                submitActivity.likedByMe = true;
                
                activityActionService.addAction({action: action, customerId: customerId, activityId: submitActivity.activityId},
                    function(updatedActivity)
                    {
                        if(updatedActivity.activityId && updatedActivity.activityId>0)
                        {
                            var decodedActivity = $scope.hotelService.decodeActivity(updatedActivity);

                            if($scope.showDetailActivity && $scope.showDetailActivity.activityId == decodedActivity.activityId)
                            {
                                $scope.showDetailActivity = decodedActivity;
                            }

                            $scope.addUpdateActivity(decodedActivity);
                        }
                        //$rootScope.showLoading(false);
                    }
                    ,function(error)
                    {
                        $scope.mainState.errorMsg = error;
                        //$rootScope.showLoading(false);
                    }
                );
            }; 
            
            //};
            
            $scope.openEditActivity = function(activityId){

                var isActivityEditOpen = $scope.localState.openEditActivities[activityId];

                revertActivity(activityId);
                
                $scope.localState.openEditActivities[activityId] = !(isActivityEditOpen);
            };
            
            function revertActivity(activityId)
            {
                for(var a=0; a<$scope.localState.copyActivities.length; a++)
                {
                    if($scope.localState.copyActivities[a].activityId == activityId && $scope.localState.filterActivities[a].activityId == activityId)
                    {
                        $scope.localState.filterActivities[a] = angular.copy($scope.localState.copyActivities[a]);
                        break;
                    }
                }
                
              //TODO Eugen: revert
              //  return activity;
            };
            
            $scope.submitActivityChange = function(activity) {

                var activityError = $scope.hotelService.validateActivityInfo(activity);

                if(activityError.length>0)
                {
                    $scope.mainState.errorMsg = activityError;
                    $rootScope.topPage();
                    return;
                }
                
                if(!$scope.accordionStatus.openEditActivities)
                {
                    $scope.accordionStatus.openEditActivities = [];
                }
                
                if(!$scope.accordionStatus.openEditActivities[activity.activityId])
                {
                    $scope.accordionStatus.openEditActivities[activity.activityId]=true;
                    return;
                }
                
                $scope.mainState.successMsg = false;
                $scope.mainState.errorMsg = false;
            
                var editActivity = angular.copy(activity);

                //revert activity
                activity = revertActivity(activity);
                
                var activityError = $scope.hotelService.validateActivityInfo(editActivity);
            
                if(activityError && activityError.length>0)
                {
                    $scope.mainState.errorMsg = activityError;
                    $rootScope.topPage();
                    return;
                }

                editActivity.hotelId = $scope.hotelState.currentHotel.id;
                editActivity.senderId = $scope.hotelState.profileData.id;
            
                //Encode separatly, not display encoding bindings
                //var encodedActivity = $scope.hotelService.encodeActivity(editActivity);
            
                var encodedActivity = $scope.hotelService.encodeActivity(editActivity);
                
                //TODO: REST!!!!
                //ActivityService.send(encodedActivity, encodedActivity.activityId);

                HotelActivityDto.save({customerId: encodedActivity.senderId, activityId: encodedActivity.activityId}, encodedActivity, 
                    function(resOk){

                        //function onActivityUpdateSuccess(editActivity)
                        //{
                            $scope.uploadNewImage("activity", editActivity.activityId).then(function(resOk){
                                updateActivityLogo(editActivity);
                            });

                            $scope.mainState.successMsg = $filter('translate')('alert.success.activityUpdated');

                            $scope.accordionStatus.openEditActivities[editActivity.activityId] = false;

                            //setTimeout(function(){
                            //
                            //    updateActivityLogo(editActivity);
                            //    
                            //}, 1000);
                        //}
                        
                    },
                    function(error){
                        
                       $scope.mainState.errorMsg = error;
                    }
                );
            
                function updateActivityLogo(editActivity)
                {
                    var requesterId = $scope.hotelState.profileData.id;

                    $scope.hotelService.getEntityLogo(requesterId, "activity", editActivity.activityId).then(function(imageJson){

                        if(imageJson)
                        {
                            //var split = imageUrl.split("|");

                            //if(split.length>2)
                            {
                                var entity = imageJson.entityType;
                                var entityId = imageJson.entityId;
                                var entityPictureUrl = imageJson.pictureUrl;
                                
                                if($scope.showActivity && $scope.showActivity.id == entityId && entityPictureUrl)
                                    $scope.showActivity.pictureUrl = entityPictureUrl;

                                if(editActivity && editActivity.id == entityId && entityPictureUrl)
                                    editActivity.pictureUrl = entityPictureUrl;
                            }

                        }
                    })
                }
                
                //$scope.myWait(500);
                //
                //$scope.uploadNewImage("activity", editActivity.activityId);

                //$scope.localState.editActivityMap[activityId] = $scope.hotelService.getInitActivity();
                
            } ;
            
            $scope.removeActivity = function(activityId, ev) {

                {
                    var activityRemoveConfirm = $mdDialog.confirm(
                        {
                            clickOutsideToClose: true
                        })
                        .title($filter('translate')('page.activities.sureRemoveHeader'))
                        .content($filter('translate')('page.activities.sureRemove'))
                        .ariaLabel('Lucky day')
                        .ok('OK')
                        .cancel($filter('translate')('system.cancel'))
                        .targetEvent(ev);

                    $mdDialog.show(activityRemoveConfirm).then(function() {

                        //######## OK BUTTON ##############

                        HotelActivityDto.remove({customerId: $scope.hotelState.profileData.id, activityId: activityId}, function(response){
                            response.$promise.then(function(value){

                                $scope.showActivity = undefined;
                                $scope.localState.showActivity = undefined;

                                for(var a=0; a<$scope.hotelState.hotelActivities.length; a++)
                                {
                                    if($scope.hotelState.hotelActivities[a].activityId == activityId)
                                    {
                                        $scope.hotelState.hotelActivities.splice(a, 1);
                                        $scope.mainState.successMsg = $filter('translate')('alert.success.activityRemoved');

                                        break;
                                    }
                                }

                                for(var a=0; a<$scope.hotelState.allActivities.length; a++)
                                {
                                    if($scope.hotelState.allActivities[a].activityId == activityId)
                                    {
                                        $scope.hotelState.allActivities.splice(a, 1);
                                        $scope.mainState.successMsg = $filter('translate')('alert.success.activityRemoved');

                                        break;
                                    }
                                }


                            });
                        });

                        // ######## END OK BUTTON #############


                    }, function() {
                        //$scope.mainState.showCheckinWellcomePopup = false;
                    });
                }
            };

            //################# SERVICE LISTENER //////////////////////////////////////////////////////

            //$rootScope.$on('checkActivitySocketConnection', function(event, mass) {
            //    ActivityService.checkSocketConnection();
            //});

            NotificationService.receiveActivity().then(null, null, function(activity) {

                if( $scope.hotelState.currentHotel
                    &&
                    $scope.hotelState.currentHotel.id == activity.hotelId)
                {

                    var decodedActivity = $scope.hotelService.decodeActivity(activity);

                    if($scope.showDetailActivity && $scope.showDetailActivity.activityId == decodedActivity.activityId)
                    {
                        $scope.showDetailActivity = decodedActivity;
                    }

                    $scope.addUpdateActivity(decodedActivity);
                }
            });
            
            function initActivities(){

                //$scope.localState.showCityLoading= false;
                $scope.localState.openActivities= [],
                $scope.localState.openEditActivities= [], 
                $scope.localState.newactivity = $scope.hotelService.getInitActivity();

                $scope.localState.maxActivityShortDescription = $scope.hotelService.validationUtils.maxActivityShortDescription;
                $scope.localState.maxActivityDescription =  $scope.hotelService.validationUtils.maxActivityDescription;
                $scope.localState.maxHotelDescription = $scope.hotelService.validationUtils.maxHotelDescription;
                
                
                $scope.localState.maxActivityShortDescription = $scope.hotelService.validationUtils.maxActivityShortDescription;
                $scope.localState.maxActivityDescription = $scope.hotelService.validationUtils.maxActivityDescription;
                $scope.localState.editHotelAccordionTitle = $filter('translate')('page.hotel.updateHotelInfo');
                $scope.localState.editHotelAccordionIconClass = "fa fa-pencil-square-o";

                $scope.localState.editActivityAccordionTitle = $filter('translate')('page.activities.addActivity'),
                $scope.localState.editActivityAccordionIconClass = "fa fa-plus";
                $scope.localState.openActivities = [];
            };
            
            initActivities();
        }
    ]
);
'use strict';
//app
angular.module('hotelApp.filterHotelCity', ['ngRoute','ngCookies', 'ngResource', 'hotelApp.sessionCustomerService', 'hotelApp.activityDto'])

    //Eugen: the container controller has to have $scope.updateLocalFilter(); $scope.emptyPreviousSearch(); and 'localState.hotelCitySelectorUpdator' and localState.disableAllHotelsInCity
    
    .controller('filterHotelCityCtrl', ['$scope', '$rootScope', '$stateParams', 'HotelDto', '$state', '$filter', '$mdDialog',
        function($scope, $rootScope, $stateParams, HotelDto, $state, $filter, $mdDialog) {
            
            
        $scope.onChangeHotelCitySelector = function()
        {
            $scope.emptyPreviousSearch();
        
            $scope.localState.showCityHotelLoading = true;
        
            $scope.mainState.selectedCity = $scope.localState.selectedCityHotel && $scope.localState.selectedCityHotel.city? $scope.localState.selectedCityHotel.city : "-1";

            //if($scope.mainState.selectedCity == $filter('translate')('alert.info.allCities'))
            //{
            //    $scope.mainState.selectedCity = $scope.mainState.selectedCity.name+"".charAt(0).toUpperCase() + $scope.mainState.selectedCity.name+"".slice(1);
            //}
            
            //$scope.localState.allCitiesLabel = $filter('translate')('alert.info.allCities');
            //
            ////if all cities
            //if($scope.mainState.selectedCity == $scope.localState.allCitiesLabel)
            //{
            //    $scope.mainState.selectedCity = "-1"; 
            //}
            
            var permitAllCitiesEntry = $scope.localState.disableAllHotelsInCity? false : true;
            
            $scope.getMainHotelsByCity($scope.mainState.selectedCity, permitAllCitiesEntry).then(function(hotelsInSelectedCityArray){
        
                $scope.localState.hotelsFilteredByCityArray = hotelsInSelectedCityArray;
        
                $scope.localState.showCityHotelLoading = false;
        
                if($scope.localState.preFilterHotelIdParam)
                {
                    for(var h=0; h<hotelsInSelectedCityArray.length; h++)
                    {
                        if(hotelsInSelectedCityArray[h].id == $scope.localState.preFilterHotelIdParam)
                        {
                            $scope.localState.selectedFilterHotel = hotelsInSelectedCityArray[h];
                            $scope.onChangeFilterHotelSelector($scope.localState.selectedFilterHotel.id);
                            break;
                        }
                    }
        
                    //one time usage!!!
                    setTimeout(function(){$scope.localState.preFilterHotelIdParam = false;}, 1000);
                }

                //watcher city
                $scope.updateLocalFilter(false, hotelsInSelectedCityArray);
        
            });
        };
        
        $scope.initHotelCitiesSelector = function()
        {
            $scope.emptyPreviousSearch();
        
            $scope.localState.showCityLoading = true;

            //$scope.hotelState.getDeferredState().then(function(profile){
               
           //load hotelCities only if hotelState is ready!
            $scope.getUpdateMainHotelCitiesSelectorList().then(function(hotelCitiesArray){
                
                $rootScope.showLoading(false);

                preFilterCityParam();

                $scope.updateLocalFilter();

                $scope.localState.showCityLoading = false;
                setTimeout(function(){$scope.localState.showCityLoading = false;}, 1000);

            }, function(error){

                $scope.mainState.errorMsg = error;
                $rootScope.showLoading(false);

            });
            //});
            
            
        };
        
        
        $scope.openCityPopup = function(ev)
        {
            var confirm = $mdDialog.confirm( {
                clickOutsideToClose: true
            })
                .title($filter('translate')('alert.info.cityPopupHeader'))
                .content($filter('translate')('alert.info.cityPopupText'))
                .ariaLabel('Lucky day')
                .ok('OK')
                //.cancel($filter('translate')('alert.noPopupMore'))
                .targetEvent(ev);

            $mdDialog.show(confirm).then(function() {
                ;

            }, function() {
                //$scope.hotelState.profileData.hideWallPopup = true;
                //$scope.hotelService.setCookie('hotelicohideWallPopup', true);
                //
                //$scope.hotelState.submitProfileData(true);
            });
        }
            
        /**
         * pre-select param city
         */
        function preFilterCityParam(){
        
            if($scope.localState.preFilterCityParam)
            {
                for(var c=0; c<$scope.mainState.hotelCitiesArray.length; c++)
                {
                    if($scope.mainState.hotelCitiesArray[c].city == $scope.localState.preFilterCityParam)
                    {
                        $scope.localState.selectedCityHotel = $scope.mainState.hotelCitiesArray[c];
        
                        $scope.emptyPreviousSearch();
        
                        $scope.onChangeHotelCitySelector();
        
                        break;
                    }
                }
        
                //one time usage!!!
                setTimeout(function(){$scope.localState.preFilterCityParam = false;}, 1000);
            }
        };

        $scope.onChangeFilterHotelSelector = function(filterHotelId)
        {
            $scope.localState.searchFilter = {};
            
            $scope.updateLocalFilter();
        }   
            
        //$scope.$watch('localState.hotelCitySelectorUpdator', function() {
        //
        //    
        //
        //});

        $rootScope.$on('hotelCitySelectorChangeEvent', function(event, mass) { 
            $scope.initHotelCitiesSelector(); 
        });
            
        function initFilter(){
            //PRE-FILTER Params save local!!! One time usage!!!
            $scope.localState.preFilterCityParam = $stateParams.filterCity;
            $scope.localState.preFilterHotelIdParam = $stateParams.filterHotelId;
                
            //get city from HotelId
            if($scope.localState.preFilterHotelIdParam && !$scope.localState.preFilterCityParam)
            {
                $scope.getUpdateMainHotelObject($scope.localState.preFilterHotelIdParam).then(function(filterHotel){
                    $scope.localState.preFilterCityParam = filterHotel.city;
                    $scope.initHotelCitiesSelector();
                });
            }
            
            $scope.emptyPreviousSearch();
            $scope.initHotelCitiesSelector();
        }

        //wait for hotel state
        //$scope.hotelState.getDeferredState().then(function() {
            initFilter();
        //});
        //
        //$rootScope.$on('preFilterHotelCity', function(event, mass) {
        //    initFilter();
        //});
    }
]
);
'use strict';
//app
angular.module('hotelApp.hotelCtrl', ['ngRoute','ngCookies', 'ngResource', 'hotelApp.sessionCustomerService', 'hotelApp.activityDto'])

    //Eugen: the container controller has to have $scope.updateLocalFilter(); $scope.emptyPreviousSearch(); and 'localState.hotelCitySelectorUpdator' and localState.disableAllHotelsInCity

    .controller('hotelCtrl', ['$scope', '$rootScope', '$stateParams', 'HotelDto', '$state', '$resource', '$filter', '$mdDialog',
        function($scope, $rootScope, $stateParams, HotelDto, $state, $resource, $filter, $mdDialog) {

            $scope.submitHotelChange = function(hotelObj)
            {
                $scope.mainState.successMsg = false;
                $scope.mainState.errorMsg = false;

                var hotelError = $scope.hotelService.validateHotelInfo(hotelObj);

                if(hotelError.length>0)
                {
                    $scope.mainState.errorMsg = hotelError;
                    $rootScope.topPage();
                    return;
                }
                
                //we now handle with editHotel!!!!
                var editHotel = angular.copy(hotelObj);

                //revert activity
                hotelObj = revertHotel(hotelObj);
                
                if(editHotel.id>0) //upload image first, if hotel exists in db!
                {
                    $scope.uploadNewImage("hotel", editHotel.creationTime).then(function(res){
                        updateHotelLogo(editHotel);
                    });
                    $rootScope.myWait(500);
                }

                

                $scope.hotelState.submitHotelData(editHotel).then(function(changedHotel){

                    if(editHotel.id<0) //upload image then, if hotel created in db!
                    {
                        $rootScope.myWait(500);
                        $scope.uploadNewImage("hotel", editHotel.creationTime).then(function(res){
                            updateHotelLogo(editHotel);
                        });
                        $rootScope.myWait(500);
                    }
                    
                    $scope.mainState.successMsg =  $filter('translate')('alert.success.hotelUpdated');

                    if($scope.accordionStatus.openEditHotels)
                        $scope.accordionStatus.openEditHotels[changedHotel.id] = false;
                    
                    if($scope.accordionStatus.editHotelOpen)
                        $scope.accordionStatus.editHotelOpen = false;
                    //TODO Eugen: ???
                    //$scope.accordionStatus.descriptionHotelOpen = false;

                    editHotel = changedHotel;
                    if($state.current.name=="app.hotel" || $state.current.name=="app.hotelRegister" || $state.current.name=="app.editHotel")
                    {
                        $scope.showHotel = changedHotel;
                    }
                    

                    $scope.hotelState.currentHotel = changedHotel;

                    $scope.updateLocalFilter();
                    
                    $rootScope.topPage();

                    
                    //setTimeout(function(){
                    //
                    //    updateHotelLogo(editHotel);
                    //}, 1000);

                    $rootScope.$broadcast('hotelUpdated', $scope.showHotel);
                    
                });

            };
            
            function updateHotelLogo(editHotel)
            {
                var requesterId = $scope.hotelState.profileData.id;

                $scope.hotelService.getEntityLogo(requesterId, "hotel", editHotel.id).then(function(imageJson){

                    if(imageJson)
                    {
                        //if(split.length>2)
                        {
                            var entity = imageJson.entityType;
                            var entityId = imageJson.entityId;
                            var entityPictureUrl = imageJson.pictureUrl;

                            if($scope.showHotel && $scope.showHotel.id == entityId && entityPictureUrl)
                                $scope.showHotel.pictureUrl = entityPictureUrl;

                            if(editHotel && editHotel.id == entityId && entityPictureUrl)
                                editHotel.pictureUrl = entityPictureUrl;

                            if($state.current.name=="app.hotelRegister")
                            {
                                $scope.hotelState.tempCreationHotel = $scope.showHotel;
                            }

                            $rootScope.$broadcast('hotelUpdated', $scope.showHotel);

                        }

                    }
                })
            }
            
            function revertHotel(hotelObj)
            {
                for(var a=0; a<$scope.localState.copyHotels.length; a++)
                {
                    if($scope.localState.copyHotels[a].id == hotelObj.id && $scope.localState.filterHotels[a].id == hotelObj.id)
                    {
                        $scope.localState.filterHotels[a] = angular.copy($scope.localState.copyHotels[a]);
                        //hotelObj = $scope.localState.filterHotels[a];
                        if($state.current.name == "app.hotel" || $state.current.name == "app.editHotel")
                        {
                            $scope.showHotel = angular.copy($scope.localState.copyHotels[a]);
                            return $scope.showHotel;
                        }
                        break;
                    }
                }
               
                return hotelObj;
                
                //TODO Eugen: revert
                //  return activity;
            };
            
            $scope.openHotel = function(hotelObj){

                if(!$scope.localState.openHotels)
                {
                    $scope.localState.openHotels=[];
                }
                
                var isHotelOpen = $scope.localState.openHotels[hotelObj.id];

                $scope.localState.openActivities[hotelObj.id] = !(isHotelOpen);
            };

            $scope.openEditHotel = function(hotelObj){

                if(!$scope.localState.openEditHotels)
                {
                    $scope.localState.openEditHotels=[];
                }
                
                var isHotelEditOpen = $scope.localState.openEditHotels[hotelObj.id];
                
                if(isHotelEditOpen==undefined)
                {
                    isHotelEditOpen = false;
                }

                if(isHotelEditOpen)
                {
                    revertHotel(hotelObj);
                }

                $scope.localState.openEditHotels[hotelObj.id] = !(isHotelEditOpen);
            };

            var HotelRemoveService = $resource('./hotels/customer/:customerId/hotel/:hotelId', {customerId:'@customerId', hotelId:'@hotelId' }, {'remove': {method: 'DELETE'}});

            $scope.removeHotel = function(hotelId, ev) {


                {
                    var hotelRemoveConfirm = $mdDialog.confirm(
                        {
                            clickOutsideToClose: true
                        })
                        .title($filter('translate')('page.hotel.sureRemoveHeader'))
                        .content($filter('translate')('page.hotel.sureRemove'))
                        .ariaLabel('Lucky day')
                        .ok('OK')
                        .cancel($filter('translate')('system.cancel'))
                        .targetEvent(ev);

                    $mdDialog.show(hotelRemoveConfirm).then(function() {

                        //######## OK BUTTON ##############

                        HotelRemoveService.remove({customerId: $scope.hotelState.profileData.id, hotelId: hotelId}, function(response){
                            response.$promise.then(function(value){

                                //$scope.showActivity = undefined;
                                //$scope.localState.showActivity = undefined;

                                if($scope.showHotel && $scope.showHotel.id == hotelId)
                                {
                                    $scope.showHotel = undefined;
                                }

                                for(var a=0; a<$scope.mainState.hotelArray.length; a++)
                                {
                                    if($scope.mainState.hotelArray[a].id == hotelId)
                                    {
                                        $scope.mainState.hotelArray.splice(a, 1);
                                        $scope.mainState.successMsg = $filter('translate')('alert.success.hotelRemoved');

                                        break;
                                    }
                                }

                                for(var a=0; a<$scope.hotelState.allActivities.length; a++)
                                {
                                    if($scope.hotelState.allActivities[a].hotelId == hotelId)
                                    {
                                        $scope.hotelState.allActivities.splice(a, 1);
                                        //$scope.mainState.successMsg = $filter('translate')('alert.success.activityRemoved');

                                        break;
                                    }
                                }


                            });
                        });

                        // ######## END OK BUTTON #############


                    }, function() {
                        //$scope.mainState.showCheckinWellcomePopup = false;
                    });
                }
                
                
            };

            function initHotelCtrl(){
                $scope.localState.editHotel = null;
                $scope.localState.maxHotelDescription = $scope.hotelService.validationUtils.maxHotelDescription;
            }

            initHotelCtrl();
        }
    ]
);
//app
angular.module('hotelApp.slideCtrl', ['angular-carousel'])
.controller('SlideCtrl', function($scope, $filter) {

    $scope.colors = ["#fc0003", "#f70008", "#f2000d", "#ed0012", "#e80017", "#e3001c", "#de0021", "#d90026", "#d4002b", "#cf0030", "#c90036", "#c4003b", "#bf0040", "#ba0045", "#b5004a", "#b0004f", "#ab0054", "#a60059", "#a1005e", "#9c0063", "#960069", "#91006e", "#8c0073", "#870078", "#82007d", "#7d0082", "#780087", "#73008c", "#6e0091", "#690096", "#63009c", "#5e00a1", "#5900a6", "#5400ab", "#4f00b0", "#4a00b5", "#4500ba", "#4000bf", "#3b00c4", "#3600c9", "#3000cf", "#2b00d4", "#2600d9", "#2100de", "#1c00e3", "#1700e8", "#1200ed", "#0d00f2", "#0800f7", "#0300fc"];

       
        
    function getSlide(target, style) {
        var i = target.length;
        return {
            id: (i + 1),
            label: $filter('translate')('slide.checkin'+ (i + 1)) ,
            img: '/angulr/img/build/add/' + style + '/' + ((i + 1) % 10) + ".png" ,
            color: "#58666e", //$scope.colors[ (i*10) % $scope.colors.length],
            odd: (i % 2 === 0)
        };
    }

    function addSlide(target, style) {
        target.push(getSlide(target, style));
    };

    //Eugen: startIndex    
    $scope.carouselIndex = 3;
    $scope.carouselIndex2 = 0;
    //$scope.carouselIndex2 = 1;
    $scope.carouselIndex3 = 5;
    $scope.carouselIndex4 = 5;

    function addSlides(target, style, qty) {
        for (var i=0; i < qty; i++) {
            addSlide(target, style);
        }
    }

    // 1st ngRepeat demo
    $scope.slides = [];
    addSlides($scope.slides, 'sports', 50);

    // 2nd ngRepeat demo
    $scope.slides2 = [];
    addSlides($scope.slides2, 'checkin', 4);

    // 3rd ngRepeat demo
    $scope.slides3 = [];
    addSlides($scope.slides3, 'people', 50);

    // 4th ngRepeat demo
    $scope.slides4 = [];
    addSlides($scope.slides4, 'city', 50);


    // 5th ngRepeat demo
    $scope.slides6 = [];
    $scope.carouselIndex6 = 0;
    addSlides($scope.slides6, 'sports', 10);
    $scope.addSlide = function(at) {
        if(at==='head') {
            $scope.slides6.unshift(getSlide($scope.slides6, 'people'));
        } else {
            $scope.slides6.push(getSlide($scope.slides6, 'people'));
        }
    }

    // End to End swiping
    // load 130 images in main javascript container
    var slideImages = [];
    addSlides(slideImages, 'checkin', 4);
    addSlides(slideImages, 'sports', 10);
    addSlides(slideImages, 'people', 10);
    addSlides(slideImages, 'city', 10);
    addSlides(slideImages, 'abstract', 10);
    addSlides(slideImages, 'nature', 10);
    addSlides(slideImages, 'food', 10);
    addSlides(slideImages, 'transport', 10);
    addSlides(slideImages, 'animals', 10);
    addSlides(slideImages, 'business', 10);
    addSlides(slideImages, 'nightlife', 10);
    addSlides(slideImages, 'cats', 10);
    addSlides(slideImages, 'fashion', 10);
    addSlides(slideImages, 'technics', 10);
    $scope.totalimg = slideImages.length;
    $scope.galleryNumber = 1;
    console.log($scope.galleryNumber);

    function getImage(target) {
        var i = target.length
            , p = (($scope.galleryNumber-1)*$scope.setOfImagesToShow)+i;
        console.log("i=" + i + "--" + p);

        return slideImages[p];
    }
    function addImages(target, qty) {

        for (var i=0; i < qty; i++) {
            addImage(target);
        }
    }

    function addImage(target) {
        target.push(getImage(target));
    }

    $scope.slides7 = [];
    $scope.carouselIndex7 = 0;
    $scope.setOfImagesToShow = 3;
    addImages($scope.slides7, $scope.setOfImagesToShow);
    $scope.loadNextImages = function() {
        console.log("loading Next images");
        if (slideImages[slideImages.length-1].id !== $scope.slides7[$scope.slides7.length-1].id) {
            // Go to next set of images if exist
            $scope.slides7 = [];
            $scope.carouselIndex7 = 0;
            ++$scope.galleryNumber;
            addImages($scope.slides7, $scope.setOfImagesToShow);
        } else {
            // Go to first set of images if not exist
            $scope.galleryNumber = 1;
            $scope.slides7 = [];
            $scope.carouselIndex7 = 0;
            addImages($scope.slides7, $scope.setOfImagesToShow);
        }
    }
    $scope.loadPreviousImages = function() {
        if (slideImages[0].id !== $scope.slides7[0].id) {
            // Go to previous set of images if exist
            $scope.slides7 = [];
            $scope.carouselIndex7 = 0;
            --$scope.galleryNumber;
            addImages($scope.slides7, $scope.setOfImagesToShow);
        } else {
            // Go to last set of images if not exist
            console.log("slideimageslength: " + slideImages.length + ", " + slideImages.length-1 / $scope.setOfImagesToShow);
            // console.log("slideimageslength: " + slideImages.length );
            $scope.galleryNumber = slideImages.length / $scope.setOfImagesToShow;
            $scope.slides7 = [];
            $scope.carouselIndex7 = 0;
            addImages($scope.slides7, $scope.setOfImagesToShow);
            console.log("no images left");
        }

    }

})